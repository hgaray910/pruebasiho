VERSION 5.00
Object = "{C0A63B80-4B21-11D3-BD95-D426EF2C7949}#1.0#0"; "Vsflex7L.ocx"
Object = "{BDC217C8-ED16-11CD-956C-0000C04E4C0A}#1.1#0"; "TABCTL32.OCX"
Object = "{F9043C88-F6F2-101A-A3C9-08002B2F49FB}#1.2#0"; "COMDLG32.OCX"
Object = "{0ECD9B60-23AA-11D0-B351-00A0C9055D8E}#6.0#0"; "MSHFLXGD.OCX"
Object = "{C932BA88-4374-101B-A56C-00AA003668DC}#1.1#0"; "MSMASK32.OCX"
Object = "{86CF1D34-0C5F-11D2-A9FC-0000F8754DA1}#2.0#0"; "mscomct2.ocx"
Object = "{2EBF261C-FD36-46DA-8D79-010C5D8D7036}#2.1#0"; "MyCommandButton.ocx"
Object = "{FF14BD24-9F8A-41E3-B5B8-7F0D45EE9F16}#15.0#0"; "hsflatcontrols.ocx"
Begin VB.Form frmAdmisionPaciente 
   BackColor       =   &H80000005&
   BorderStyle     =   1  'Fixed Single
   Caption         =   "Registro de pacientes"
   ClientHeight    =   11160
   ClientLeft      =   45
   ClientTop       =   435
   ClientWidth     =   15255
   KeyPreview      =   -1  'True
   LinkTopic       =   "Form1"
   MaxButton       =   0   'False
   MinButton       =   0   'False
   Moveable        =   0   'False
   ScaleHeight     =   11160
   ScaleWidth      =   15255
   StartUpPosition =   2  'CenterScreen
   Begin VB.Timer tmrBlinkexternos 
      Enabled         =   0   'False
      Interval        =   500
      Left            =   120
      Top             =   10680
   End
   Begin VB.Timer tmrBlink 
      Enabled         =   0   'False
      Interval        =   500
      Left            =   4200
      Top             =   10680
   End
   Begin VB.ListBox lstCargos 
      Appearance      =   0  'Flat
      BeginProperty Font 
         Name            =   "Century Gothic"
         Size            =   11.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   690
      Left            =   0
      Style           =   1  'Checkbox
      TabIndex        =   89
      Top             =   14150
      Visible         =   0   'False
      Width           =   8415
   End
   Begin VB.Frame fraGrabar 
      Appearance      =   0  'Flat
      BackColor       =   &H80000005&
      ForeColor       =   &H80000008&
      Height          =   780
      Left            =   4800
      TabIndex        =   145
      Top             =   10330
      Width           =   5670
      Begin MyCommandButton.MyButton cmdActivarPaciente 
         Height          =   600
         Left            =   4160
         TabIndex        =   160
         ToolTipText     =   "Agregar un paciente a la lista de pacientes que se están atendiendo en el departamento"
         Top             =   140
         Width           =   1455
         _ExtentX        =   2566
         _ExtentY        =   1058
         BackColor       =   -2147483633
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Appearance      =   1
         BackColorDown   =   -2147483643
         BackColorOver   =   -2147483633
         BackColorFocus  =   -2147483633
         BackColorDisabled=   -2147483633
         BorderColor     =   -2147483627
         TransparentColor=   16777215
         Caption         =   "Activar"
         DepthEvent      =   1
         ShowFocus       =   -1  'True
      End
      Begin MyCommandButton.MyButton cmdAbrirCuenta 
         Height          =   600
         Left            =   2460
         TabIndex        =   159
         ToolTipText     =   "Generar cuenta para los pacientes externos"
         Top             =   140
         Width           =   1695
         _ExtentX        =   2990
         _ExtentY        =   1058
         BackColor       =   -2147483633
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Appearance      =   1
         BackColorDown   =   -2147483643
         BackColorOver   =   -2147483633
         BackColorFocus  =   -2147483633
         BackColorDisabled=   -2147483633
         BorderColor     =   -2147483627
         TransparentColor=   16777215
         Caption         =   "Abrir cuenta"
         DepthEvent      =   1
         ShowFocus       =   -1  'True
      End
      Begin MyCommandButton.MyButton cmdEgresar 
         Height          =   600
         Left            =   1860
         TabIndex        =   158
         ToolTipText     =   "Egresar al paciente"
         Top             =   140
         Width           =   600
         _ExtentX        =   1058
         _ExtentY        =   1058
         BackColor       =   -2147483633
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Appearance      =   1
         MaskColor       =   16777215
         Picture         =   "frmAdmisionPaciente.frx":0000
         BackColorDown   =   -2147483643
         BackColorOver   =   -2147483633
         BackColorFocus  =   -2147483633
         BackColorDisabled=   -2147483633
         BorderColor     =   -2147483627
         TransparentColor=   16777215
         Caption         =   ""
         DepthEvent      =   1
         PictureDisabled =   "frmAdmisionPaciente.frx":0984
         PictureAlignment=   4
         PictureDisabledEffect=   0
         ShowFocus       =   -1  'True
      End
      Begin MyCommandButton.MyButton cmdCancelarAdmision 
         Height          =   600
         Left            =   1260
         TabIndex        =   154
         ToolTipText     =   "Cancelar la admisión"
         Top             =   140
         Width           =   600
         _ExtentX        =   1058
         _ExtentY        =   1058
         BackColor       =   -2147483633
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Appearance      =   1
         MaskColor       =   16777215
         Picture         =   "frmAdmisionPaciente.frx":1306
         BackColorDown   =   -2147483643
         BackColorOver   =   -2147483633
         BackColorFocus  =   -2147483633
         BackColorDisabled=   -2147483633
         BorderColor     =   -2147483627
         TransparentColor=   16777215
         Caption         =   ""
         DepthEvent      =   1
         PictureDisabled =   "frmAdmisionPaciente.frx":1C8A
         PictureAlignment=   4
         PictureDisabledEffect=   0
         ShowFocus       =   -1  'True
      End
      Begin MyCommandButton.MyButton cmdGrabar 
         Height          =   600
         Left            =   660
         TabIndex        =   151
         ToolTipText     =   "Guardar la admisión"
         Top             =   140
         Width           =   600
         _ExtentX        =   1058
         _ExtentY        =   1058
         BackColor       =   -2147483633
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Appearance      =   1
         MaskColor       =   16777215
         Picture         =   "frmAdmisionPaciente.frx":260E
         BackColorDown   =   -2147483643
         BackColorOver   =   -2147483633
         BackColorFocus  =   -2147483633
         BackColorDisabled=   -2147483633
         BorderColor     =   -2147483627
         TransparentColor=   16777215
         Caption         =   ""
         DepthEvent      =   1
         DropDownPicture =   "frmAdmisionPaciente.frx":2F92
         PictureDisabled =   "frmAdmisionPaciente.frx":2FAE
         PictureAlignment=   4
         PictureDisabledEffect=   0
         ShowFocus       =   -1  'True
      End
      Begin MyCommandButton.MyButton cmdBusquedaPaciente 
         Height          =   600
         Left            =   60
         TabIndex        =   148
         ToolTipText     =   "Búsqueda de pacientes"
         Top             =   140
         Width           =   600
         _ExtentX        =   1058
         _ExtentY        =   1058
         BackColor       =   -2147483633
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Appearance      =   1
         MaskColor       =   16777215
         Picture         =   "frmAdmisionPaciente.frx":3932
         BackColorDown   =   -2147483643
         BackColorOver   =   -2147483633
         BackColorFocus  =   -2147483633
         BackColorDisabled=   -2147483633
         BorderColor     =   -2147483627
         TransparentColor=   16777215
         Caption         =   ""
         DepthEvent      =   1
         PictureDisabled =   "frmAdmisionPaciente.frx":42B6
         PictureAlignment=   4
         PictureDisabledEffect=   0
         ShowFocus       =   -1  'True
      End
   End
   Begin HSFlatControls.MyTabHeader MyTabHeader1 
      Height          =   420
      Left            =   0
      TabIndex        =   109
      Top             =   0
      Width           =   15735
      _ExtentX        =   27755
      _ExtentY        =   741
      Tabs            =   7
      TabCurrent      =   0
      TabWidth        =   2198
      Caption         =   $"frmAdmisionPaciente.frx":4C3A
   End
   Begin TabDlg.SSTab sstObj 
      Height          =   11145
      Left            =   0
      TabIndex        =   88
      ToolTipText     =   "Admisión de pacientes"
      Top             =   70
      Width           =   15675
      _ExtentX        =   27649
      _ExtentY        =   19659
      _Version        =   393216
      Tabs            =   7
      TabsPerRow      =   7
      TabHeight       =   520
      BackColor       =   -2147483643
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Tahoma"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      TabCaption(0)   =   "&Generales"
      TabPicture(0)   =   "frmAdmisionPaciente.frx":4C8B
      Tab(0).ControlEnabled=   -1  'True
      Tab(0).Control(0)=   "lblLicencias"
      Tab(0).Control(0).Enabled=   0   'False
      Tab(0).Control(1)=   "Lbllicenciasexternos"
      Tab(0).Control(1).Enabled=   0   'False
      Tab(0).Control(2)=   "Picture1"
      Tab(0).Control(2).Enabled=   0   'False
      Tab(0).ControlCount=   3
      TabCaption(1)   =   "&Ingreso"
      TabPicture(1)   =   "frmAdmisionPaciente.frx":4CA7
      Tab(1).ControlEnabled=   0   'False
      Tab(1).Control(0)=   "CmlDocumentoAdjunto"
      Tab(1).Control(1)=   "fraMotivoIngreso"
      Tab(1).Control(2)=   "fraDiagnostico"
      Tab(1).Control(3)=   "fraMedicos"
      Tab(1).Control(4)=   "txtObservaciones"
      Tab(1).Control(5)=   "cmdObservaciones"
      Tab(1).Control(6)=   "fraDocumentos"
      Tab(1).Control(7)=   "FraAdjuntos"
      Tab(1).Control(8)=   "fraResponsable"
      Tab(1).Control(9)=   "fraEmergencia"
      Tab(1).Control(10)=   "fraAsignacionCuarto"
      Tab(1).Control(11)=   "chkAsignarCuarto"
      Tab(1).Control(12)=   "fraProcedimiento"
      Tab(1).ControlCount=   13
      TabCaption(2)   =   "I&nternos"
      TabPicture(2)   =   "frmAdmisionPaciente.frx":4CC3
      Tab(2).ControlEnabled=   0   'False
      Tab(2).Control(0)=   "grdInternoAmbulatorio"
      Tab(2).ControlCount=   1
      TabCaption(3)   =   "&Prepagos"
      TabPicture(3)   =   "frmAdmisionPaciente.frx":4CDF
      Tab(3).ControlEnabled=   0   'False
      Tab(3).Control(0)=   "grdPrepagos"
      Tab(3).ControlCount=   1
      TabCaption(4)   =   "In&gresos previos"
      TabPicture(4)   =   "frmAdmisionPaciente.frx":4CFB
      Tab(4).ControlEnabled=   0   'False
      Tab(4).Control(0)=   "grdIngresosPrevios"
      Tab(4).ControlCount=   1
      TabCaption(5)   =   "&Egresados"
      TabPicture(5)   =   "frmAdmisionPaciente.frx":4D17
      Tab(5).ControlEnabled=   0   'False
      Tab(5).Control(0)=   "FraCancelar"
      Tab(5).Control(1)=   "fraCriterioBusquedaEgresados"
      Tab(5).Control(2)=   "tmrCargaEgresados"
      Tab(5).Control(3)=   "grdEgresados"
      Tab(5).ControlCount=   4
      TabCaption(6)   =   "E&xternos"
      TabPicture(6)   =   "frmAdmisionPaciente.frx":4D33
      Tab(6).ControlEnabled=   0   'False
      Tab(6).Control(0)=   "Frame3"
      Tab(6).Control(1)=   "tmrCargaExternos"
      Tab(6).Control(2)=   "Frame5"
      Tab(6).Control(3)=   "Frame4"
      Tab(6).Control(4)=   "grdExternos"
      Tab(6).Control(5)=   "cmdActivaExterno"
      Tab(6).ControlCount=   6
      Begin VB.Frame fraProcedimiento 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         Caption         =   "Procedimiento"
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   1160
         Left            =   -74880
         TabIndex        =   243
         Top             =   5600
         Width           =   10455
         Begin VB.TextBox txtCirugia 
            Appearance      =   0  'Flat
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   375
            Left            =   2880
            Locked          =   -1  'True
            TabIndex        =   244
            ToolTipText     =   "Diagnóstico CIE-9 cirugía"
            Top             =   300
            Width           =   6165
         End
         Begin MyCommandButton.MyButton cmdBuscarCirugia 
            Height          =   375
            Left            =   9120
            TabIndex        =   245
            ToolTipText     =   "Búsqueda de cirugías"
            Top             =   300
            Width           =   1215
            _ExtentX        =   2143
            _ExtentY        =   661
            BackColor       =   -2147483633
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Appearance      =   1
            BackColorDown   =   -2147483643
            BackColorOver   =   -2147483633
            BackColorFocus  =   -2147483633
            BackColorDisabled=   -2147483633
            BorderColor     =   -2147483627
            TransparentColor=   16777215
            Caption         =   "Buscar"
            DepthEvent      =   1
            ShowFocus       =   -1  'True
         End
         Begin HSFlatControls.MyCombo cboTecnicaLateralidad 
            Height          =   375
            Left            =   2880
            TabIndex        =   246
            ToolTipText     =   "Técnica y lateralidad"
            Top             =   720
            Width           =   7440
            _ExtentX        =   13123
            _ExtentY        =   661
            Style           =   1
            Enabled         =   -1  'True
            Text            =   ""
            Sorted          =   -1  'True
            List            =   ""
            ItemData        =   ""
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
         End
         Begin VB.Label Label5 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "Técnica y lateralidad"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Left            =   120
            TabIndex        =   248
            Top             =   765
            Width           =   2010
         End
         Begin VB.Label Label6 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "CIE-9 cirugía"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Left            =   120
            TabIndex        =   247
            Top             =   360
            Width           =   1200
         End
      End
      Begin VB.CheckBox chkAsignarCuarto 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         Caption         =   "Asignar cuarto"
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   255
         Left            =   -74760
         TabIndex        =   242
         Top             =   6760
         Width           =   1710
      End
      Begin VB.Frame fraAsignacionCuarto 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         Enabled         =   0   'False
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   11.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   2505
         Left            =   -74880
         TabIndex        =   236
         Top             =   6760
         Width           =   10470
         Begin MyCommandButton.MyButton cmdSugerirCuarto 
            Height          =   375
            Left            =   120
            TabIndex        =   237
            ToolTipText     =   "Sugerir el cuarto basándose en la procedencia, edad y sexo del paciente"
            Top             =   300
            Width           =   3495
            _ExtentX        =   6165
            _ExtentY        =   661
            BackColor       =   -2147483633
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Appearance      =   1
            BackColorDown   =   -2147483643
            BackColorOver   =   -2147483633
            BackColorFocus  =   -2147483633
            BackColorDisabled=   -2147483633
            BorderColor     =   -2147483627
            TransparentColor=   16777215
            Caption         =   "Asignación de cuarto"
            DepthEvent      =   1
            ShowFocus       =   -1  'True
         End
         Begin HSFlatControls.MyCombo cboEstadoCuartoActual 
            Height          =   375
            Left            =   6060
            TabIndex        =   238
            ToolTipText     =   "Estado en el que se quedará el cuarto que tenía asignado el paciente"
            Top             =   2040
            Width           =   4275
            _ExtentX        =   7541
            _ExtentY        =   661
            Style           =   1
            Enabled         =   0   'False
            Text            =   ""
            Sorted          =   -1  'True
            List            =   ""
            ItemData        =   ""
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
         End
         Begin HSFlatControls.MyCombo cboArea 
            Height          =   375
            Left            =   3720
            TabIndex        =   239
            ToolTipText     =   "Seleccione para filtrar por área"
            Top             =   300
            Width           =   6615
            _ExtentX        =   11668
            _ExtentY        =   661
            Style           =   1
            Enabled         =   -1  'True
            Text            =   ""
            Sorted          =   -1  'True
            List            =   ""
            ItemData        =   ""
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
         End
         Begin MSHierarchicalFlexGridLib.MSHFlexGrid grdCuarto 
            Height          =   1275
            Left            =   120
            TabIndex        =   240
            Top             =   720
            Width           =   10215
            _ExtentX        =   18018
            _ExtentY        =   2249
            _Version        =   393216
            ForeColor       =   0
            Cols            =   4
            ForeColorFixed  =   0
            ForeColorSel    =   0
            BackColorBkg    =   -2147483643
            BackColorUnpopulated=   -2147483643
            GridColor       =   -2147483638
            GridColorFixed  =   -2147483638
            GridColorUnpopulated=   -2147483638
            GridLinesFixed  =   1
            GridLinesUnpopulated=   1
            Appearance      =   0
            FormatString    =   "|Tipo de cuarto|Area|Cuarto"
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            BeginProperty FontFixed {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            _NumberOfBands  =   1
            _Band(0).Cols   =   4
         End
         Begin VB.Label lblEstadoCuartoActual 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "Estado en que se queda el cuarto"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Left            =   2640
            TabIndex        =   241
            Top             =   2100
            Width           =   3285
         End
      End
      Begin VB.Frame Frame3 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         Caption         =   "Criterios de búsqueda del paciente "
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   1215
         Left            =   -74880
         TabIndex        =   221
         Top             =   350
         Width           =   15030
         Begin VB.OptionButton optCriterio2 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            Caption         =   "&Paterno, materno, nombre"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   250
            Index           =   0
            Left            =   200
            TabIndex        =   227
            Top             =   300
            Width           =   3210
         End
         Begin VB.OptionButton optCriterio2 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            Caption         =   "&Nombre, paterno, materno"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   250
            Index           =   1
            Left            =   3600
            TabIndex        =   226
            Top             =   300
            Width           =   3015
         End
         Begin VB.OptionButton optCriterio2 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            Caption         =   "&Materno, nombre, paterno"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   250
            Index           =   2
            Left            =   7080
            TabIndex        =   225
            Top             =   300
            Width           =   2895
         End
         Begin VB.OptionButton optCriterio2 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            Caption         =   "&Expediente"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   250
            Index           =   3
            Left            =   10560
            TabIndex        =   224
            Top             =   300
            Width           =   1365
         End
         Begin VB.TextBox txtInicialesExternos 
            Appearance      =   0  'Flat
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   11.25
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   420
            Left            =   200
            TabIndex        =   223
            ToolTipText     =   "Escriba las iniciales para realizar la búsqueda"
            Top             =   700
            Width           =   5700
         End
         Begin VB.OptionButton optCriterio2 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            Caption         =   "&Cuenta"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   250
            Index           =   4
            Left            =   12480
            TabIndex        =   222
            Top             =   300
            Width           =   1095
         End
      End
      Begin VB.Frame FraCancelar 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   11.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   840
         Left            =   -67730
         TabIndex        =   219
         Top             =   10200
         Width           =   720
         Begin MyCommandButton.MyButton cmdCancelarEgreso 
            Height          =   600
            Left            =   60
            TabIndex        =   220
            ToolTipText     =   "Cancelar un paciente egresado"
            Top             =   190
            Width           =   600
            _ExtentX        =   1058
            _ExtentY        =   1058
            BackColor       =   -2147483633
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Appearance      =   1
            MaskColor       =   16777215
            Picture         =   "frmAdmisionPaciente.frx":4D4F
            BackColorDown   =   -2147483643
            BackColorOver   =   -2147483633
            BackColorFocus  =   -2147483633
            BackColorDisabled=   -2147483633
            BorderColor     =   -2147483627
            TransparentColor=   16777215
            Caption         =   ""
            DepthEvent      =   1
            PictureDisabled =   "frmAdmisionPaciente.frx":56D3
            PictureAlignment=   4
            ShowFocus       =   -1  'True
         End
      End
      Begin VB.Frame fraCriterioBusquedaEgresados 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         Caption         =   "Criterios de búsqueda del paciente"
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   1260
         Left            =   -74880
         TabIndex        =   205
         Top             =   350
         Width           =   15030
         Begin VB.CheckBox chkFecEgr 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            Caption         =   "Rango de fechas"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   250
            Left            =   360
            TabIndex        =   217
            Top             =   360
            Width           =   1965
         End
         Begin VB.Frame fraFecEgr 
            BackColor       =   &H80000005&
            BorderStyle     =   0  'None
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   11.25
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   420
            Left            =   2520
            TabIndex        =   212
            Top             =   300
            Visible         =   0   'False
            Width           =   4125
            Begin MSMask.MaskEdBox dtpFecFinEgr 
               Height          =   375
               Left            =   2640
               TabIndex        =   213
               Top             =   20
               Width           =   1455
               _ExtentX        =   2566
               _ExtentY        =   661
               _Version        =   393216
               Appearance      =   0
               MaxLength       =   10
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Format          =   "dd/mmm/yyyy"
               Mask            =   "##/##/####"
               PromptChar      =   "_"
            End
            Begin MSMask.MaskEdBox dtpFecIniEgr 
               Height          =   375
               Left            =   720
               TabIndex        =   214
               Top             =   20
               Width           =   1455
               _ExtentX        =   2566
               _ExtentY        =   661
               _Version        =   393216
               Appearance      =   0
               MaxLength       =   10
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Format          =   "dd/mmm/yyyy"
               Mask            =   "##/##/####"
               PromptChar      =   "_"
            End
            Begin VB.Label Label2 
               BackColor       =   &H80000005&
               Caption         =   "Del"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   250
               Left            =   240
               TabIndex        =   216
               Top             =   80
               Width           =   375
            End
            Begin VB.Label Label1 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Al"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   250
               Left            =   2280
               TabIndex        =   215
               Top             =   80
               Width           =   180
            End
         End
         Begin VB.OptionButton optCriterio 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            Caption         =   "&Cuenta"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   250
            Index           =   4
            Left            =   8400
            TabIndex        =   211
            Top             =   800
            Width           =   1095
         End
         Begin VB.TextBox txtIniciales 
            Appearance      =   0  'Flat
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   375
            Left            =   9600
            TabIndex        =   210
            ToolTipText     =   "Escriba las iniciales para realizar la búsqueda"
            Top             =   740
            Width           =   5100
         End
         Begin VB.OptionButton optCriterio 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            Caption         =   "&Expediente"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   250
            Index           =   3
            Left            =   6840
            TabIndex        =   209
            Top             =   800
            Width           =   1560
         End
         Begin VB.OptionButton optCriterio 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            Caption         =   "&Materno, nombre, paterno"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   420
            Index           =   2
            Left            =   4680
            TabIndex        =   208
            Top             =   720
            Width           =   2055
         End
         Begin VB.OptionButton optCriterio 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            Caption         =   "&Nombre, paterno, materno"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   420
            Index           =   1
            Left            =   2520
            TabIndex        =   207
            Top             =   720
            Width           =   2070
         End
         Begin VB.OptionButton optCriterio 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            Caption         =   "&Paterno, materno, nombre"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   420
            Index           =   0
            Left            =   360
            TabIndex        =   206
            Top             =   735
            Width           =   2080
         End
      End
      Begin VB.Frame fraEmergencia 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         Caption         =   "Para casos de emergencia"
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   1170
         Left            =   -74880
         TabIndex        =   170
         Top             =   360
         Width           =   15050
         Begin VB.TextBox txtDomicilioEmergencia 
            Appearance      =   0  'Flat
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   375
            Left            =   9060
            MaxLength       =   100
            TabIndex        =   69
            ToolTipText     =   "Domicilio de la persona en casos de emergencia"
            Top             =   300
            Width           =   5880
         End
         Begin VB.TextBox txtNombreEmergencia 
            Appearance      =   0  'Flat
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   375
            Left            =   1970
            MaxLength       =   50
            TabIndex        =   66
            ToolTipText     =   "Nombre de algún familiar en caso de emergencia"
            Top             =   300
            Width           =   4980
         End
         Begin VB.TextBox txtTelefonoEmergencia 
            Appearance      =   0  'Flat
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   375
            Left            =   9060
            MaxLength       =   35
            TabIndex        =   70
            ToolTipText     =   "Teléfono de la persona en casos de emergencia"
            Top             =   700
            Width           =   2205
         End
         Begin MyCommandButton.MyButton cmdCambiarFamiliarEmergencia 
            Height          =   375
            Left            =   7020
            TabIndex        =   67
            ToolTipText     =   "Editar datos del cónyuge, padre o madre"
            Top             =   300
            Width           =   465
            _ExtentX        =   820
            _ExtentY        =   661
            BackColor       =   -2147483633
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Appearance      =   1
            MaskColor       =   16777215
            Picture         =   "frmAdmisionPaciente.frx":6055
            BackColorDown   =   -2147483643
            BackColorOver   =   -2147483633
            BackColorFocus  =   -2147483633
            BackColorDisabled=   -2147483633
            BorderColor     =   -2147483627
            TransparentColor=   16777215
            Caption         =   ""
            DepthEvent      =   1
            DropDownPicture =   "frmAdmisionPaciente.frx":63A7
            PictureDisabled =   "frmAdmisionPaciente.frx":63C3
            PictureAlignment=   4
            PictureDisabledEffect=   0
            ShowFocus       =   -1  'True
         End
         Begin HSFlatControls.MyCombo cboParentescoFamiliarEmergencia 
            Height          =   375
            Left            =   1965
            TabIndex        =   68
            ToolTipText     =   "Parentesco con el paciente"
            Top             =   705
            Width           =   5520
            _ExtentX        =   9737
            _ExtentY        =   661
            Style           =   1
            Enabled         =   -1  'True
            Text            =   ""
            Sorted          =   -1  'True
            List            =   ""
            ItemData        =   ""
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
         End
         Begin MSMask.MaskEdBox mskNacimientoEmergencia 
            Height          =   375
            Left            =   13515
            TabIndex        =   71
            ToolTipText     =   "Fecha de nacimiento de la persona para casos de emergencia"
            Top             =   705
            Width           =   1425
            _ExtentX        =   2514
            _ExtentY        =   661
            _Version        =   393216
            ClipMode        =   1
            Appearance      =   0
            MaxLength       =   10
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Format          =   "dd/mmm/yyyy"
            Mask            =   "##/##/####"
            PromptChar      =   " "
         End
         Begin VB.Label lblNacimientoEmergencia 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "Fecha nacimiento"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Left            =   11520
            TabIndex        =   175
            Top             =   765
            Width           =   1755
         End
         Begin VB.Label lblParentescoEmergencia 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "Parentesco"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Left            =   120
            TabIndex        =   174
            Top             =   765
            Width           =   1080
         End
         Begin VB.Label lblDomicilioEmergencia 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "Domicilio"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Left            =   7785
            TabIndex        =   173
            Top             =   360
            Width           =   915
         End
         Begin VB.Label lblNombreEmergencia 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "Nombre"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Left            =   120
            TabIndex        =   172
            Top             =   360
            Width           =   795
         End
         Begin VB.Label lblTelefonoEmergencia 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "Teléfono"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Left            =   7785
            TabIndex        =   171
            Top             =   760
            Width           =   810
         End
      End
      Begin VB.Frame fraResponsable 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         Caption         =   "Responsable de la cuenta"
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   1580
         Left            =   -74880
         TabIndex        =   86
         Top             =   1500
         Width           =   15050
         Begin VB.TextBox txtTelefonoResponsable 
            Appearance      =   0  'Flat
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   375
            Left            =   9060
            MaxLength       =   35
            TabIndex        =   76
            ToolTipText     =   "Teléfono del responsable de la cuenta"
            Top             =   700
            Width           =   2205
         End
         Begin VB.TextBox txtNombreResponsable 
            Appearance      =   0  'Flat
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   375
            Left            =   1965
            MaxLength       =   50
            TabIndex        =   72
            ToolTipText     =   "Nombre del responsable de la cuenta "
            Top             =   300
            Width           =   4980
         End
         Begin VB.TextBox txtDomicilioResponsable 
            Appearance      =   0  'Flat
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   375
            Left            =   9060
            MaxLength       =   100
            TabIndex        =   75
            ToolTipText     =   "Domicilio del responsable de la cuenta"
            Top             =   300
            Width           =   5880
         End
         Begin VB.TextBox txtLugarTrabajoResponsable 
            Appearance      =   0  'Flat
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   375
            Left            =   1965
            MaxLength       =   50
            TabIndex        =   78
            ToolTipText     =   "Lugar de trabajo del responsable de la cuenta"
            Top             =   1110
            Width           =   5520
         End
         Begin MyCommandButton.MyButton cmdCambiarFamiliarResponsable 
            Height          =   375
            Left            =   7020
            TabIndex        =   73
            ToolTipText     =   "Editar datos del cónyuge, padre, madre o del mismo paciente"
            Top             =   300
            Width           =   465
            _ExtentX        =   820
            _ExtentY        =   661
            BackColor       =   -2147483633
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Appearance      =   1
            MaskColor       =   16777215
            Picture         =   "frmAdmisionPaciente.frx":6715
            BackColorDown   =   -2147483643
            BackColorOver   =   -2147483633
            BackColorFocus  =   -2147483633
            BackColorDisabled=   -2147483633
            BorderColor     =   -2147483627
            TransparentColor=   16777215
            Caption         =   ""
            DepthEvent      =   1
            PictureDisabled =   "frmAdmisionPaciente.frx":6A67
            PictureAlignment=   4
            PictureDisabledEffect=   0
            ShowFocus       =   -1  'True
         End
         Begin HSFlatControls.MyCombo cboParentescoFamiliarResponsable 
            Height          =   375
            Left            =   1965
            TabIndex        =   74
            ToolTipText     =   "Parentesco con el paciente"
            Top             =   705
            Width           =   5520
            _ExtentX        =   9737
            _ExtentY        =   661
            Style           =   1
            Enabled         =   -1  'True
            Text            =   ""
            Sorted          =   -1  'True
            List            =   ""
            ItemData        =   ""
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
         End
         Begin MSMask.MaskEdBox mskNacimientoResponsable 
            Height          =   375
            Left            =   13515
            TabIndex        =   77
            ToolTipText     =   "Fecha de nacimiento de la persona responsable de la cuenta"
            Top             =   705
            Width           =   1425
            _ExtentX        =   2514
            _ExtentY        =   661
            _Version        =   393216
            ClipMode        =   1
            Appearance      =   0
            MaxLength       =   10
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Format          =   "dd/mmm/yyyy"
            Mask            =   "##/##/####"
            PromptChar      =   " "
         End
         Begin VB.Label lblNacimientoResponsable 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "Fecha nacimiento"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Left            =   11520
            TabIndex        =   181
            Top             =   765
            Width           =   1755
         End
         Begin VB.Label lblTelefonoResponsable 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "Teléfono"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   250
            Left            =   7785
            TabIndex        =   180
            Top             =   760
            Width           =   810
         End
         Begin VB.Label lblNombreResponsable 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "Nombre"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   250
            Left            =   90
            TabIndex        =   179
            Top             =   360
            Width           =   795
         End
         Begin VB.Label lblDomicilioResponsable 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "Domicilio"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   250
            Left            =   7785
            TabIndex        =   178
            Top             =   360
            Width           =   915
         End
         Begin VB.Label lblParentescoResponsable 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "Parentesco"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   250
            Left            =   90
            TabIndex        =   177
            Top             =   760
            Width           =   1080
         End
         Begin VB.Label lblLugarTrabajo 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "Lugar trabajo"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   250
            Left            =   90
            TabIndex        =   176
            Top             =   1170
            Width           =   1320
         End
      End
      Begin VB.Timer tmrCargaExternos 
         Enabled         =   0   'False
         Interval        =   200
         Left            =   -75000
         Top             =   0
      End
      Begin VB.Timer tmrCargaEgresados 
         Enabled         =   0   'False
         Interval        =   200
         Left            =   -75000
         Top             =   0
      End
      Begin VB.Frame FraAdjuntos 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         Caption         =   "Otros documentos"
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   1770
         Left            =   -64320
         TabIndex        =   198
         Top             =   8410
         Width           =   4490
         Begin VB.TextBox TextNombreAdjunto 
            Appearance      =   0  'Flat
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   375
            Left            =   90
            LinkTimeout     =   200
            MaxLength       =   50
            TabIndex        =   200
            ToolTipText     =   "Título de documento adjunto"
            Top             =   240
            Width           =   3885
         End
         Begin MyCommandButton.MyButton cmdAgregaAdjunto 
            Height          =   375
            Left            =   4020
            TabIndex        =   199
            ToolTipText     =   "Buscar documento"
            Top             =   240
            Width           =   375
            _ExtentX        =   661
            _ExtentY        =   661
            BackColor       =   -2147483633
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Appearance      =   1
            BackColorOver   =   -2147483633
            BackColorFocus  =   -2147483633
            BackColorDisabled=   -2147483633
            BorderColor     =   -2147483627
            TransparentColor=   16777215
            Caption         =   "..."
            DepthEvent      =   1
         End
         Begin VSFlex7LCtl.VSFlexGrid GrdAdjuntos 
            Height          =   1035
            Left            =   90
            TabIndex        =   201
            Top             =   645
            Width           =   4300
            _cx             =   7585
            _cy             =   1826
            _ConvInfo       =   1
            Appearance      =   0
            BorderStyle     =   1
            Enabled         =   -1  'True
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            MousePointer    =   0
            BackColor       =   -2147483643
            ForeColor       =   -2147483640
            BackColorFixed  =   -2147483633
            ForeColorFixed  =   -2147483630
            BackColorSel    =   -2147483635
            ForeColorSel    =   -2147483634
            BackColorBkg    =   -2147483636
            BackColorAlternate=   -2147483643
            GridColor       =   -2147483633
            GridColorFixed  =   -2147483632
            TreeColor       =   -2147483632
            FloodColor      =   192
            SheetBorder     =   -2147483642
            FocusRect       =   1
            HighLight       =   1
            AllowSelection  =   -1  'True
            AllowBigSelection=   -1  'True
            AllowUserResizing=   0
            SelectionMode   =   0
            GridLines       =   1
            GridLinesFixed  =   2
            GridLineWidth   =   1
            Rows            =   5
            Cols            =   5
            FixedRows       =   1
            FixedCols       =   1
            RowHeightMin    =   0
            RowHeightMax    =   0
            ColWidthMin     =   0
            ColWidthMax     =   0
            ExtendLastCol   =   -1  'True
            FormatString    =   $"frmAdmisionPaciente.frx":6DB9
            ScrollTrack     =   0   'False
            ScrollBars      =   3
            ScrollTips      =   0   'False
            MergeCells      =   0
            MergeCompare    =   0
            AutoResize      =   -1  'True
            AutoSizeMode    =   0
            AutoSearch      =   0
            AutoSearchDelay =   2
            MultiTotals     =   -1  'True
            SubtotalPosition=   1
            OutlineBar      =   0
            OutlineCol      =   0
            Ellipsis        =   0
            ExplorerBar     =   0
            PicturesOver    =   0   'False
            FillStyle       =   0
            RightToLeft     =   0   'False
            PictureType     =   0
            TabBehavior     =   0
            OwnerDraw       =   0
            Editable        =   0
            ShowComboButton =   -1  'True
            WordWrap        =   0   'False
            TextStyle       =   0
            TextStyleFixed  =   0
            OleDragMode     =   0
            OleDropMode     =   0
            ComboSearch     =   3
            AutoSizeMouse   =   -1  'True
            FrozenRows      =   0
            FrozenCols      =   0
            AllowUserFreezing=   0
            BackColorFrozen =   0
            ForeColorFrozen =   0
            WallPaperAlignment=   9
         End
      End
      Begin VB.Frame fraDocumentos 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         Caption         =   "Documentos"
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   5355
         Left            =   -64320
         TabIndex        =   190
         Top             =   3060
         Width           =   4490
         Begin VB.ListBox lstDocumentos 
            Appearance      =   0  'Flat
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   4020
            Left            =   90
            Style           =   1  'Checkbox
            TabIndex        =   196
            ToolTipText     =   "Documentos relacionados con el ingreso del paciente"
            Top             =   300
            Width           =   4300
         End
         Begin VB.CheckBox chkVistaPreliminar 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            Caption         =   "Vista preliminar"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   250
            Left            =   2520
            TabIndex        =   195
            ToolTipText     =   "Enviar los documentos en vista preliminar"
            Top             =   4440
            Width           =   1815
         End
         Begin VB.Frame fraSeleccion 
            BackColor       =   &H80000005&
            BorderStyle     =   0  'None
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   11.25
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   1000
            Left            =   120
            TabIndex        =   191
            Top             =   4320
            Width           =   2010
            Begin VB.OptionButton optSeleccion 
               Appearance      =   0  'Flat
               BackColor       =   &H80000005&
               Caption         =   "Predeterminados"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               ForeColor       =   &H80000008&
               Height          =   250
               Index           =   2
               Left            =   0
               TabIndex        =   194
               Top             =   120
               Width           =   1995
            End
            Begin VB.OptionButton optSeleccion 
               Appearance      =   0  'Flat
               BackColor       =   &H80000005&
               Caption         =   "Ninguno"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               ForeColor       =   &H80000008&
               Height          =   250
               Index           =   1
               Left            =   0
               TabIndex        =   193
               Top             =   700
               Width           =   1200
            End
            Begin VB.OptionButton optSeleccion 
               Appearance      =   0  'Flat
               BackColor       =   &H80000005&
               Caption         =   "Todos"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               ForeColor       =   &H80000008&
               Height          =   250
               Index           =   0
               Left            =   0
               TabIndex        =   192
               Top             =   400
               Width           =   915
            End
         End
         Begin MyCommandButton.MyButton cmdImprimir 
            Height          =   495
            Left            =   3910
            TabIndex        =   197
            ToolTipText     =   "Imprimir documentos"
            Top             =   4785
            Width           =   495
            _ExtentX        =   873
            _ExtentY        =   873
            BackColor       =   -2147483633
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Appearance      =   1
            MaskColor       =   16777215
            Picture         =   "frmAdmisionPaciente.frx":6E51
            BackColorDown   =   -2147483643
            BackColorOver   =   -2147483633
            BackColorFocus  =   -2147483633
            BackColorDisabled=   -2147483633
            BorderColor     =   -2147483627
            TransparentColor=   16777215
            Caption         =   ""
            DepthEvent      =   1
            PictureDisabled =   "frmAdmisionPaciente.frx":7565
            PictureAlignment=   4
            PictureDisabledEffect=   0
            ShowFocus       =   -1  'True
         End
         Begin MSComDlg.CommonDialog cdlTest 
            Left            =   2400
            Top             =   4800
            _ExtentX        =   847
            _ExtentY        =   847
            _Version        =   393216
         End
      End
      Begin MyCommandButton.MyButton cmdObservaciones 
         Height          =   255
         Left            =   -74880
         TabIndex        =   189
         Top             =   9360
         Width           =   10470
         _ExtentX        =   18468
         _ExtentY        =   450
         BackColor       =   -2147483633
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Appearance      =   1
         BackColorDown   =   -2147483643
         BackColorOver   =   -2147483633
         BackColorFocus  =   -2147483633
         BackColorDisabled=   -2147483633
         BorderColor     =   -2147483627
         TransparentColor=   16777215
         Caption         =   "Observaciones"
         DepthEvent      =   1
         ShowFocus       =   -1  'True
      End
      Begin VB.TextBox txtObservaciones 
         Appearance      =   0  'Flat
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   585
         Left            =   -74880
         MaxLength       =   1400
         MultiLine       =   -1  'True
         ScrollBars      =   2  'Vertical
         TabIndex        =   83
         ToolTipText     =   "Observaciones y recomendaciones respecto a la admisión del paciente"
         Top             =   9600
         Width           =   10470
      End
      Begin VB.PictureBox Picture1 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BorderStyle     =   0  'None
         ForeColor       =   &H80000008&
         Height          =   10020
         Left            =   120
         ScaleHeight     =   10020
         ScaleWidth      =   15105
         TabIndex        =   90
         Top             =   240
         Width           =   15105
         Begin MSComCtl2.FlatScrollBar FlatScrollBar1 
            Height          =   9885
            Left            =   14820
            TabIndex        =   91
            Top             =   120
            Width           =   255
            _ExtentX        =   450
            _ExtentY        =   17436
            _Version        =   393216
            Enabled         =   0   'False
            LargeChange     =   70
            Max             =   125
            Orientation     =   1179648
            SmallChange     =   70
         End
         Begin VB.Frame fraGeneralesPaciente 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            Caption         =   "Generales del paciente"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   3200
            Left            =   0
            TabIndex        =   92
            Top             =   90
            Width           =   14820
            Begin VB.OptionButton OptEnvioPromo 
               Appearance      =   0  'Flat
               BackColor       =   &H80000005&
               Caption         =   "Si"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               ForeColor       =   &H80000008&
               Height          =   250
               Index           =   0
               Left            =   13680
               TabIndex        =   18
               ToolTipText     =   "Si acepta recibir promociones"
               Top             =   2880
               Width           =   495
            End
            Begin VB.TextBox txtExpedienteInterno 
               Alignment       =   1  'Right Justify
               Appearance      =   0  'Flat
               BeginProperty DataFormat 
                  Type            =   1
                  Format          =   "HH.mm.ss"
                  HaveTrueFalseNull=   0
                  FirstDayOfWeek  =   0
                  FirstWeekOfYear =   0
                  LCID            =   3082
                  SubFormatType   =   4
               EndProperty
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               ForeColor       =   &H80000012&
               Height          =   375
               Left            =   2000
               Locked          =   -1  'True
               TabIndex        =   167
               ToolTipText     =   "Número de expediente del paciente"
               Top             =   300
               Width           =   3585
            End
            Begin VB.TextBox txtEdad 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   4125
               Locked          =   -1  'True
               TabIndex        =   4
               ToolTipText     =   "Edad del paciente"
               Top             =   1920
               Width           =   1455
            End
            Begin VB.TextBox txtCurp 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   7730
               MaxLength       =   20
               TabIndex        =   8
               ToolTipText     =   "Clave Unica de Registro Poblacional del paciente"
               Top             =   300
               Width           =   3450
            End
            Begin VB.TextBox txtNombre 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   2000
               MaxLength       =   40
               TabIndex        =   2
               ToolTipText     =   "Nombre(s) del paciente (No utilizar abreviaturas)"
               Top             =   1510
               Width           =   3585
            End
            Begin VB.Frame fraSexo 
               BackColor       =   &H80000005&
               BorderStyle     =   0  'None
               Caption         =   "+"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   11.25
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   2000
               TabIndex        =   93
               ToolTipText     =   "Sexo del paciente"
               Top             =   2320
               Width           =   3480
               Begin VB.OptionButton optSexo 
                  Appearance      =   0  'Flat
                  BackColor       =   &H80000005&
                  Caption         =   "Masculino"
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  ForeColor       =   &H80000008&
                  Height          =   300
                  Index           =   0
                  Left            =   20
                  TabIndex        =   5
                  ToolTipText     =   "Masculino"
                  Top             =   82
                  Width           =   1305
               End
               Begin VB.OptionButton optSexo 
                  Appearance      =   0  'Flat
                  BackColor       =   &H80000005&
                  Caption         =   "Femenino"
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  ForeColor       =   &H80000008&
                  Height          =   300
                  Index           =   1
                  Left            =   1440
                  TabIndex        =   6
                  ToolTipText     =   "Femenino"
                  Top             =   82
                  Width           =   1245
               End
            End
            Begin VB.TextBox txtApellidoPaterno 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   2000
               MaxLength       =   30
               TabIndex        =   0
               ToolTipText     =   "Apellido paterno del paciente"
               Top             =   700
               Width           =   3585
            End
            Begin VB.TextBox txtApellidoMaterno 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   2000
               MaxLength       =   30
               TabIndex        =   1
               ToolTipText     =   "Apellido materno del paciente "
               Top             =   1110
               Width           =   3585
            End
            Begin VB.OptionButton OptEnvioPromo 
               Appearance      =   0  'Flat
               BackColor       =   &H80000005&
               Caption         =   "No"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               ForeColor       =   &H80000008&
               Height          =   250
               Index           =   1
               Left            =   14160
               TabIndex        =   19
               ToolTipText     =   "No acepta recibir promociones"
               Top             =   2880
               Width           =   630
            End
            Begin MSMask.MaskEdBox mskRFC 
               Height          =   375
               Left            =   2000
               TabIndex        =   7
               ToolTipText     =   "Registro Federal de Contribuyentes"
               Top             =   2730
               Width           =   3585
               _ExtentX        =   6324
               _ExtentY        =   661
               _Version        =   393216
               Appearance      =   0
               MaxLength       =   13
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               PromptChar      =   " "
            End
            Begin MSMask.MaskEdBox mskFechaNacimiento 
               Height          =   375
               Left            =   2000
               TabIndex        =   3
               ToolTipText     =   "Fecha de nacimiento del paciente"
               Top             =   1920
               Width           =   1410
               _ExtentX        =   2487
               _ExtentY        =   661
               _Version        =   393216
               ClipMode        =   1
               Appearance      =   0
               MaxLength       =   10
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Format          =   "dd/mmm/yyyy"
               Mask            =   "##/##/####"
               PromptChar      =   " "
            End
            Begin VB.Frame fraDatosGenerales 
               Appearance      =   0  'Flat
               BackColor       =   &H80000005&
               BorderStyle     =   0  'None
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   11.25
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               ForeColor       =   &H80000008&
               Height          =   2910
               Left            =   5640
               TabIndex        =   94
               Top             =   190
               Width           =   9105
               Begin VB.TextBox txtAlergia 
                  Appearance      =   0  'Flat
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  Height          =   375
                  Left            =   5640
                  MaxLength       =   1000
                  TabIndex        =   15
                  Text            =   "txtAlergia"
                  ToolTipText     =   "Alergia del paciente"
                  Top             =   320
                  Width           =   3465
               End
               Begin VB.ListBox lstAlergias 
                  Appearance      =   0  'Flat
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  Height          =   795
                  Left            =   5640
                  TabIndex        =   16
                  ToolTipText     =   "Alergias del paciente"
                  Top             =   720
                  Width           =   3465
               End
               Begin VB.TextBox txtCorreoElectronico 
                  Appearance      =   0  'Flat
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  Height          =   375
                  Left            =   5640
                  MaxLength       =   50
                  TabIndex        =   17
                  ToolTipText     =   "Correo electrónico del paciente"
                  Top             =   1800
                  Width           =   3465
               End
               Begin HSFlatControls.MyCombo cboOcupacion 
                  Height          =   375
                  Left            =   2085
                  TabIndex        =   14
                  ToolTipText     =   "Ocupación actual del paciente"
                  Top             =   2535
                  Width           =   3450
                  _ExtentX        =   6085
                  _ExtentY        =   661
                  Style           =   1
                  Enabled         =   -1  'True
                  Text            =   ""
                  Sorted          =   -1  'True
                  List            =   ""
                  ItemData        =   ""
                  BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
               End
               Begin HSFlatControls.MyCombo cboReligion 
                  Height          =   375
                  Left            =   2085
                  TabIndex        =   13
                  ToolTipText     =   "Preferencia religiosa del paciente"
                  Top             =   2130
                  Width           =   3450
                  _ExtentX        =   6085
                  _ExtentY        =   661
                  Style           =   1
                  Enabled         =   -1  'True
                  Text            =   ""
                  Sorted          =   -1  'True
                  List            =   $"frmAdmisionPaciente.frx":7C79
                  ItemData        =   $"frmAdmisionPaciente.frx":7CA0
                  BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
               End
               Begin HSFlatControls.MyCombo cboEstadoCivil 
                  Height          =   375
                  Left            =   2085
                  TabIndex        =   12
                  ToolTipText     =   "Estado civil del paciente"
                  Top             =   1725
                  Width           =   3450
                  _ExtentX        =   6085
                  _ExtentY        =   661
                  Style           =   1
                  Enabled         =   -1  'True
                  Text            =   ""
                  Sorted          =   -1  'True
                  List            =   ""
                  ItemData        =   ""
                  BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
               End
               Begin HSFlatControls.MyCombo cboIdioma 
                  Height          =   375
                  Left            =   2085
                  TabIndex        =   11
                  ToolTipText     =   "Idioma que habla el paciente"
                  Top             =   1320
                  Width           =   3450
                  _ExtentX        =   6085
                  _ExtentY        =   661
                  Style           =   1
                  Enabled         =   -1  'True
                  Text            =   ""
                  Sorted          =   -1  'True
                  List            =   ""
                  ItemData        =   ""
                  BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
               End
               Begin HSFlatControls.MyCombo cboNacionalidad 
                  Height          =   375
                  Left            =   2085
                  TabIndex        =   10
                  ToolTipText     =   "Nacionalidad del paciente"
                  Top             =   915
                  Width           =   3450
                  _ExtentX        =   6085
                  _ExtentY        =   661
                  Style           =   1
                  Enabled         =   -1  'True
                  Text            =   ""
                  Sorted          =   -1  'True
                  List            =   ""
                  ItemData        =   ""
                  BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
               End
               Begin HSFlatControls.MyCombo cboCiudadNacimiento 
                  Height          =   375
                  Left            =   2085
                  TabIndex        =   9
                  ToolTipText     =   "Lugar de nacimiento del paciente"
                  Top             =   510
                  Width           =   3450
                  _ExtentX        =   6085
                  _ExtentY        =   661
                  Style           =   1
                  Enabled         =   -1  'True
                  Text            =   ""
                  Sorted          =   -1  'True
                  List            =   ""
                  ItemData        =   ""
                  BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
               End
               Begin VB.Label txtEnvioPromo 
                  Appearance      =   0  'Flat
                  BackColor       =   &H80000005&
                  BackStyle       =   0  'Transparent
                  Caption         =   "¿Desea recibir información publicitaria, promocional y/o encuestas de servicio e investigación?*"
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   8.25
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  ForeColor       =   &H80000008&
                  Height          =   855
                  Left            =   5640
                  TabIndex        =   95
                  Top             =   2160
                  Width           =   3420
               End
               Begin VB.Label lblAlergias 
                  BackColor       =   &H80000005&
                  Caption         =   "Alergias*"
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  Height          =   300
                  Left            =   5640
                  TabIndex        =   96
                  Top             =   60
                  Width           =   1065
               End
               Begin VB.Label lblNacionalidad 
                  AutoSize        =   -1  'True
                  BackColor       =   &H80000005&
                  Caption         =   "Nacionalidad"
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  Height          =   255
                  Left            =   120
                  TabIndex        =   97
                  Top             =   980
                  Width           =   1335
               End
               Begin VB.Label lblEstadoCivil 
                  AutoSize        =   -1  'True
                  BackColor       =   &H80000005&
                  Caption         =   "Estado civil"
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  Height          =   255
                  Left            =   120
                  TabIndex        =   98
                  Top             =   1780
                  Width           =   1095
               End
               Begin VB.Label lblOcupacion 
                  AutoSize        =   -1  'True
                  BackColor       =   &H80000005&
                  Caption         =   "Ocupación"
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  Height          =   255
                  Left            =   120
                  TabIndex        =   99
                  Top             =   2590
                  Width           =   1095
               End
               Begin VB.Label lblCiudadNacimiento 
                  AutoSize        =   -1  'True
                  BackColor       =   &H80000005&
                  Caption         =   "Ciudad nacimiento"
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  Height          =   255
                  Left            =   120
                  TabIndex        =   100
                  Top             =   570
                  Width           =   1905
               End
               Begin VB.Label lblCorreoElectronico 
                  AutoSize        =   -1  'True
                  BackColor       =   &H80000005&
                  Caption         =   "Correo electrónico"
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  Height          =   255
                  Left            =   5640
                  TabIndex        =   101
                  Top             =   1560
                  Width           =   1830
               End
               Begin VB.Label lblPreferenciaReligiosa 
                  AutoSize        =   -1  'True
                  BackColor       =   &H80000005&
                  Caption         =   "Preferencia religiosa"
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  Height          =   255
                  Left            =   120
                  TabIndex        =   102
                  Top             =   2190
                  Width           =   1935
               End
               Begin VB.Label lblIdioma 
                  BackColor       =   &H80000005&
                  Caption         =   "Idioma*"
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  Height          =   300
                  Left            =   120
                  TabIndex        =   103
                  Top             =   1380
                  Width           =   2055
               End
               Begin VB.Label lblCurp 
                  Appearance      =   0  'Flat
                  AutoSize        =   -1  'True
                  BackColor       =   &H80000005&
                  Caption         =   "CURP"
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  ForeColor       =   &H80000008&
                  Height          =   255
                  Left            =   120
                  TabIndex        =   104
                  Top             =   160
                  Width           =   525
               End
            End
            Begin VB.Label lblSexo 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Sexo*"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   90
               TabIndex        =   105
               Top             =   2380
               Width           =   525
            End
            Begin VB.Label lblExpediente 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Expediente"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   90
               TabIndex        =   106
               Top             =   360
               Width           =   1065
            End
            Begin VB.Label lblApellidoPaterno 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Apellido paterno"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   90
               TabIndex        =   107
               ToolTipText     =   "Apellido paterno del paciente"
               Top             =   760
               Width           =   1635
            End
            Begin VB.Label lblApellidoMaterno 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Apellido materno"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   90
               TabIndex        =   108
               Top             =   1170
               Width           =   1695
            End
            Begin VB.Label lblNombre 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Nombre completo*"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   90
               TabIndex        =   110
               Top             =   1570
               Width           =   1905
            End
            Begin VB.Label lblFechaNacimiento 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Fecha nacimiento*"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   90
               TabIndex        =   111
               Top             =   1980
               Width           =   1845
            End
            Begin VB.Label lblEdad 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Edad"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   3600
               TabIndex        =   112
               Top             =   1980
               Width           =   510
            End
            Begin VB.Label lblRfc 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "RFC"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   90
               TabIndex        =   113
               Top             =   2790
               Width           =   375
            End
         End
         Begin VB.Frame fraDomicilio 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            Caption         =   "Domicilio y familiares"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   3180
            Left            =   0
            TabIndex        =   114
            Top             =   3270
            Width           =   14820
            Begin VB.TextBox txtNumeroInterior 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   6135
               MaxLength       =   10
               TabIndex        =   23
               ToolTipText     =   "Número interior del paciente"
               Top             =   700
               Width           =   1620
            End
            Begin VB.TextBox txtNumeroExterior 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   2000
               MaxLength       =   10
               TabIndex        =   22
               ToolTipText     =   "Número exterior del paciente"
               Top             =   700
               Width           =   2460
            End
            Begin VB.TextBox txtMadre 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   2000
               MaxLength       =   60
               TabIndex        =   30
               ToolTipText     =   "Nombre de la madre del paciente"
               Top             =   2730
               Width           =   2475
            End
            Begin VB.TextBox txtMaternoConyuge 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   9600
               TabIndex        =   39
               ToolTipText     =   "Apellido materno del cónyuge del paciente"
               Top             =   2730
               Width           =   1920
            End
            Begin VB.TextBox txtPaternoConyuge 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   9600
               TabIndex        =   38
               ToolTipText     =   "Apellido paterno del cónyuge del paciente"
               Top             =   2320
               Width           =   5160
            End
            Begin VB.TextBox txtConyuge 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   9600
               MaxLength       =   60
               TabIndex        =   37
               ToolTipText     =   "Nombre del cónyuge del paciente"
               Top             =   1920
               Width           =   5160
            End
            Begin VB.CheckBox chkForaneo 
               Appearance      =   0  'Flat
               BackColor       =   &H80000005&
               Caption         =   "Foráneo"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               ForeColor       =   &H80000008&
               Height          =   300
               Left            =   2400
               TabIndex        =   20
               Top             =   5
               Width           =   1095
            End
            Begin VB.TextBox txtDomicilioForaneo 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   9600
               MaxLength       =   100
               TabIndex        =   32
               ToolTipText     =   "Domicilio foráneo del paciente"
               Top             =   300
               Width           =   5160
            End
            Begin VB.TextBox txtCalle 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   2000
               MaxLength       =   100
               TabIndex        =   21
               ToolTipText     =   "Calle local del paciente"
               Top             =   300
               Width           =   5760
            End
            Begin VB.TextBox txtColoniaForanea 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   9600
               MaxLength       =   20
               TabIndex        =   33
               ToolTipText     =   "Colonia  foránea del paciente"
               Top             =   700
               Width           =   2400
            End
            Begin VB.TextBox txtCodigoPostalForaneo 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   13500
               MaxLength       =   5
               TabIndex        =   34
               ToolTipText     =   "Código postal foráneo del paciente"
               Top             =   700
               Width           =   1260
            End
            Begin VB.TextBox txtTelefono 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   2000
               MaxLength       =   35
               TabIndex        =   26
               ToolTipText     =   "Teléfono del paciente"
               Top             =   1510
               Width           =   5760
            End
            Begin VB.TextBox txtCodigoPostal 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   6135
               MaxLength       =   5
               TabIndex        =   25
               ToolTipText     =   "Código postal del paciente"
               Top             =   1110
               Width           =   1620
            End
            Begin VB.TextBox txtColonia 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   2000
               MaxLength       =   100
               TabIndex        =   24
               ToolTipText     =   "Colonia del  paciente"
               Top             =   1110
               Width           =   2460
            End
            Begin VB.TextBox txtTelefonoForaneo 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   9600
               MaxLength       =   35
               TabIndex        =   35
               ToolTipText     =   "Teléfono foráneo del paciente"
               Top             =   1110
               Width           =   5160
            End
            Begin VB.TextBox txtPadre 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   2000
               MaxLength       =   60
               TabIndex        =   28
               ToolTipText     =   "Nombre del padre del paciente"
               Top             =   2320
               Width           =   2475
            End
            Begin HSFlatControls.MyCombo cboCiudadForanea 
               Height          =   375
               Left            =   9600
               TabIndex        =   36
               ToolTipText     =   "Ciudad foránea del paciente"
               Top             =   1515
               Width           =   5160
               _ExtentX        =   9102
               _ExtentY        =   661
               Style           =   1
               Enabled         =   -1  'True
               Text            =   ""
               Sorted          =   -1  'True
               List            =   ""
               ItemData        =   ""
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
            End
            Begin HSFlatControls.MyCombo cboCiudad 
               Height          =   375
               Left            =   1995
               TabIndex        =   27
               ToolTipText     =   "Ciudad del domicilio particular del paciente"
               Top             =   1920
               Width           =   5760
               _ExtentX        =   10160
               _ExtentY        =   661
               Style           =   1
               Enabled         =   -1  'True
               Text            =   ""
               Sorted          =   -1  'True
               List            =   ""
               ItemData        =   ""
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
            End
            Begin MSMask.MaskEdBox mskNacimientoMadre 
               Height          =   375
               Left            =   6350
               TabIndex        =   31
               ToolTipText     =   "Fecha de nacimiento de la madre del paciente"
               Top             =   2730
               Width           =   1410
               _ExtentX        =   2487
               _ExtentY        =   661
               _Version        =   393216
               ClipMode        =   1
               Appearance      =   0
               MaxLength       =   10
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Format          =   "dd/mmm/yyyy"
               Mask            =   "##/##/####"
               PromptChar      =   " "
            End
            Begin MSMask.MaskEdBox mskNacimientoPadre 
               Height          =   375
               Left            =   6350
               TabIndex        =   29
               ToolTipText     =   "Fecha de nacimiento del padre del paciente"
               Top             =   2320
               Width           =   1410
               _ExtentX        =   2487
               _ExtentY        =   661
               _Version        =   393216
               ClipMode        =   1
               Appearance      =   0
               MaxLength       =   10
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Format          =   "dd/mmm/yyyy"
               Mask            =   "##/##/####"
               PromptChar      =   " "
            End
            Begin MSMask.MaskEdBox mskNacimientoConyuge 
               Height          =   375
               Left            =   13350
               TabIndex        =   40
               ToolTipText     =   "Fecha de nacimiento del cónyuge del paciente"
               Top             =   2730
               Width           =   1410
               _ExtentX        =   2487
               _ExtentY        =   661
               _Version        =   393216
               ClipMode        =   1
               Appearance      =   0
               MaxLength       =   10
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Format          =   "dd/mmm/yyyy"
               Mask            =   "##/##/####"
               PromptChar      =   " "
            End
            Begin VB.Label lblNacimientoConyuge 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Fecha nacimiento"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   11565
               TabIndex        =   115
               Top             =   2790
               Width           =   1740
            End
            Begin VB.Label lblNacimientoPadre 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Fecha nacimiento"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   4560
               TabIndex        =   116
               Top             =   2380
               Width           =   1755
            End
            Begin VB.Label lblNacimientoMadre 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Fecha nacimiento"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   4560
               TabIndex        =   117
               Top             =   2790
               Width           =   1755
            End
            Begin VB.Label lblNumeroInterior 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Número interior"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   4560
               TabIndex        =   118
               Top             =   765
               Width           =   1500
            End
            Begin VB.Label lblNumeroExterior 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Número exterior"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   90
               TabIndex        =   119
               Top             =   760
               Width           =   1545
            End
            Begin VB.Label lblMaternoConyuge 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Apellido materno"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   7840
               TabIndex        =   120
               Top             =   2790
               Width           =   1695
            End
            Begin VB.Label lblPaternoConyuge 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Apellido paterno"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   7840
               TabIndex        =   121
               Top             =   2380
               Width           =   1635
            End
            Begin VB.Label lblCiudad 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Ciudad*"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   90
               TabIndex        =   122
               Top             =   1980
               Width           =   825
            End
            Begin VB.Label lblTelefono 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Teléfono local"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   90
               TabIndex        =   123
               Top             =   1570
               Width           =   1350
            End
            Begin VB.Label lblDomicilio 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Calle local"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   90
               TabIndex        =   124
               Top             =   360
               Width           =   1050
            End
            Begin VB.Label lblColonia 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Colonia local"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   90
               TabIndex        =   125
               Top             =   1170
               Width           =   1320
            End
            Begin VB.Label lblCodigoPostal 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Código postal"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   4650
               TabIndex        =   126
               Top             =   1170
               Width           =   1410
            End
            Begin VB.Label lblConyuge 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Nombre cónyuge"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   7840
               TabIndex        =   127
               Top             =   1980
               Width           =   1695
            End
            Begin VB.Label lblPadre 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Padre"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   90
               TabIndex        =   128
               Top             =   2380
               Width           =   570
            End
            Begin VB.Label lblMadre 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Madre"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   90
               TabIndex        =   129
               Top             =   2790
               Width           =   615
            End
            Begin VB.Label lblCodigoPostalForaneo 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Código postal"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   12045
               TabIndex        =   130
               ToolTipText     =   "Código Postal foráneo del paciente"
               Top             =   765
               Width           =   1410
            End
            Begin VB.Label lblCiudadForanea 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Ciudad foránea"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   7840
               TabIndex        =   131
               ToolTipText     =   "Ciudad foránea del paciente"
               Top             =   1570
               Width           =   1560
            End
            Begin VB.Label lblTelefonoForaneo 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Teléfono"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   7840
               TabIndex        =   132
               ToolTipText     =   "Teléfono foráneo del paciente"
               Top             =   1170
               Width           =   810
            End
            Begin VB.Label lblColoniaForanea 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Colonia foránea"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   7840
               TabIndex        =   133
               Top             =   760
               Width           =   1605
            End
            Begin VB.Label lblDomicilioForaneo 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Domicilio foráneo"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   7840
               TabIndex        =   134
               Top             =   360
               Width           =   1740
            End
         End
         Begin VB.Frame fraReferenteIngreso 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            Caption         =   "Referente al ingreso"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   3590
            Left            =   0
            TabIndex        =   135
            Top             =   6440
            Width           =   14820
            Begin VB.OptionButton OptPaqueteOtros 
               Appearance      =   0  'Flat
               BackColor       =   &H80000005&
               Caption         =   "Paquete"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               ForeColor       =   &H80000008&
               Height          =   250
               Index           =   0
               Left            =   7845
               TabIndex        =   60
               ToolTipText     =   "Concepto bajo el cual se realiza el anticipo"
               Top             =   2380
               Width           =   1120
            End
            Begin VB.TextBox txtCuentaExterno 
               Alignment       =   1  'Right Justify
               Appearance      =   0  'Flat
               BeginProperty DataFormat 
                  Type            =   1
                  Format          =   "HH.mm.ss"
                  HaveTrueFalseNull=   0
                  FirstDayOfWeek  =   0
                  FirstWeekOfYear =   0
                  LCID            =   3082
                  SubFormatType   =   4
               EndProperty
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               ForeColor       =   &H80000012&
               Height          =   375
               Left            =   13170
               Locked          =   -1  'True
               TabIndex        =   136
               ToolTipText     =   "Cuenta actual como externo"
               Top             =   700
               Width           =   1590
            End
            Begin VB.TextBox txtCuentaInterno 
               Alignment       =   1  'Right Justify
               Appearance      =   0  'Flat
               BeginProperty DataFormat 
                  Type            =   1
                  Format          =   "HH.mm.ss"
                  HaveTrueFalseNull=   0
                  FirstDayOfWeek  =   0
                  FirstWeekOfYear =   0
                  LCID            =   3082
                  SubFormatType   =   4
               EndProperty
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               ForeColor       =   &H80000012&
               Height          =   375
               Left            =   9900
               Locked          =   -1  'True
               TabIndex        =   137
               ToolTipText     =   "Cuenta actual como interno"
               Top             =   700
               Width           =   1590
            End
            Begin VB.TextBox txtNumeroPoliza 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   12940
               MaxLength       =   50
               TabIndex        =   58
               ToolTipText     =   "Número de póliza"
               Top             =   1510
               Width           =   1810
            End
            Begin VB.Frame Frame1 
               BackColor       =   &H80000005&
               BorderStyle     =   0  'None
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   11.25
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   2640
               TabIndex        =   138
               Top             =   1110
               Width           =   1140
               Begin VB.OptionButton optOrden 
                  Appearance      =   0  'Flat
                  BackColor       =   &H80000005&
                  Caption         =   "No"
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  ForeColor       =   &H80000008&
                  Height          =   250
                  Index           =   1
                  Left            =   480
                  TabIndex        =   44
                  ToolTipText     =   "No trae orden de internamiento"
                  Top             =   60
                  Width           =   585
               End
               Begin VB.OptionButton optOrden 
                  Appearance      =   0  'Flat
                  BackColor       =   &H80000005&
                  Caption         =   "Sí"
                  BeginProperty Font 
                     Name            =   "Century Gothic"
                     Size            =   9.75
                     Charset         =   0
                     Weight          =   400
                     Underline       =   0   'False
                     Italic          =   0   'False
                     Strikethrough   =   0   'False
                  EndProperty
                  ForeColor       =   &H80000008&
                  Height          =   250
                  Index           =   0
                  Left            =   0
                  TabIndex        =   43
                  ToolTipText     =   "Si trae orden de internamiento"
                  Top             =   60
                  Width           =   480
               End
            End
            Begin VB.TextBox txtAutoriza 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   9900
               MaxLength       =   50
               TabIndex        =   56
               ToolTipText     =   "Persona que autoriza el ingreso"
               Top             =   1110
               Width           =   4860
            End
            Begin VB.TextBox txtNumeroControl 
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   9900
               MaxLength       =   50
               TabIndex        =   59
               ToolTipText     =   "Número de afiliación al convenio correspondiente"
               Top             =   1920
               Width           =   4860
            End
            Begin VB.OptionButton OptPaqueteOtros 
               Appearance      =   0  'Flat
               BackColor       =   &H80000005&
               Caption         =   "Otros"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               ForeColor       =   &H80000008&
               Height          =   250
               Index           =   1
               Left            =   9000
               TabIndex        =   61
               ToolTipText     =   "Concepto bajo el cual se realiza el anticipo"
               Top             =   2380
               Width           =   810
            End
            Begin VB.TextBox txtAnticipo 
               Alignment       =   1  'Right Justify
               Appearance      =   0  'Flat
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   375
               Left            =   9900
               TabIndex        =   63
               ToolTipText     =   "Anticipo sugerido al paciente"
               Top             =   2730
               Width           =   1320
            End
            Begin HSFlatControls.MyCombo cboPlanPaqueteCirugia 
               Height          =   375
               Left            =   9900
               TabIndex        =   62
               ToolTipText     =   "Paquete u otros bajo el cual se realiza la admisión"
               Top             =   2320
               Width           =   4860
               _ExtentX        =   8573
               _ExtentY        =   661
               Style           =   1
               Enabled         =   -1  'True
               Text            =   ""
               Sorted          =   -1  'True
               List            =   ""
               ItemData        =   ""
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
            End
            Begin MyCommandButton.MyButton Cmdrequisitos 
               Height          =   375
               Left            =   7295
               TabIndex        =   139
               Top             =   2320
               Width           =   465
               _ExtentX        =   820
               _ExtentY        =   661
               BackColor       =   -2147483633
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "MS Sans Serif"
                  Size            =   8.25
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Appearance      =   1
               MaskColor       =   16777215
               Picture         =   "frmAdmisionPaciente.frx":7CAD
               BackColorDown   =   -2147483643
               BackColorOver   =   -2147483633
               BackColorFocus  =   -2147483633
               BackColorDisabled=   -2147483633
               BorderColor     =   -2147483627
               TransparentColor=   16777215
               Caption         =   ""
               DepthEvent      =   1
               PictureDisabled =   "frmAdmisionPaciente.frx":7FFF
               PictureAlignment=   4
               PictureDisabledEffect=   0
               ShowFocus       =   -1  'True
            End
            Begin HSFlatControls.MyCombo cboProcedencia 
               Height          =   375
               Left            =   9900
               TabIndex        =   65
               ToolTipText     =   "Procedencia por la cual se dio la orden de internamiento"
               Top             =   3130
               Width           =   4860
               _ExtentX        =   8573
               _ExtentY        =   661
               Style           =   1
               Enabled         =   -1  'True
               Text            =   ""
               Sorted          =   -1  'True
               List            =   ""
               ItemData        =   ""
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
            End
            Begin HSFlatControls.MyCombo cboTipoPoliza 
               Height          =   375
               Left            =   9900
               TabIndex        =   57
               ToolTipText     =   "Tipo de póliza"
               Top             =   1515
               Width           =   3015
               _ExtentX        =   5318
               _ExtentY        =   661
               Style           =   1
               Enabled         =   -1  'True
               Text            =   ""
               Sorted          =   -1  'True
               List            =   ""
               ItemData        =   ""
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
            End
            Begin HSFlatControls.MyCombo cboEmpresaPaciente 
               Height          =   375
               Left            =   2000
               TabIndex        =   49
               ToolTipText     =   "Empresa de donde procede el paciente"
               Top             =   2730
               Width           =   5760
               _ExtentX        =   10160
               _ExtentY        =   661
               Style           =   1
               Enabled         =   0   'False
               Text            =   ""
               Sorted          =   -1  'True
               List            =   ""
               ItemData        =   ""
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
            End
            Begin HSFlatControls.MyCombo cboEmpresa 
               Height          =   375
               Left            =   1995
               TabIndex        =   48
               ToolTipText     =   "Empresa"
               Top             =   2320
               Width           =   5220
               _ExtentX        =   9208
               _ExtentY        =   661
               Style           =   1
               Enabled         =   -1  'True
               Text            =   ""
               Sorted          =   -1  'True
               List            =   ""
               ItemData        =   ""
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
            End
            Begin HSFlatControls.MyCombo cboTipoConvenio 
               Height          =   375
               Left            =   2000
               TabIndex        =   47
               ToolTipText     =   "Tipo de convenio"
               Top             =   1920
               Width           =   5760
               _ExtentX        =   10160
               _ExtentY        =   661
               Style           =   1
               Enabled         =   -1  'True
               Text            =   ""
               Sorted          =   -1  'True
               List            =   ""
               ItemData        =   ""
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
            End
            Begin HSFlatControls.MyCombo cboTipoPaciente 
               Height          =   375
               Left            =   2000
               TabIndex        =   46
               ToolTipText     =   "Tipo de paciente"
               Top             =   1510
               Width           =   5760
               _ExtentX        =   10160
               _ExtentY        =   661
               Style           =   1
               Enabled         =   -1  'True
               Text            =   ""
               Sorted          =   -1  'True
               List            =   ""
               ItemData        =   ""
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
            End
            Begin HSFlatControls.MyCombo cboFormaNac 
               Height          =   375
               Left            =   6000
               TabIndex        =   45
               ToolTipText     =   "Forma de nacimiento del recién nacido"
               Top             =   1110
               Width           =   1755
               _ExtentX        =   3096
               _ExtentY        =   661
               Style           =   1
               Enabled         =   -1  'True
               Text            =   ""
               Sorted          =   -1  'True
               List            =   $"frmAdmisionPaciente.frx":8351
               ItemData        =   $"frmAdmisionPaciente.frx":836D
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
            End
            Begin HSFlatControls.MyCombo cboDeptoIngreso 
               Height          =   375
               Left            =   1995
               TabIndex        =   42
               ToolTipText     =   "Departamento de ingreso"
               Top             =   705
               Width           =   5760
               _ExtentX        =   10160
               _ExtentY        =   661
               Style           =   1
               Enabled         =   -1  'True
               Text            =   ""
               Sorted          =   -1  'True
               List            =   ""
               ItemData        =   ""
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
            End
            Begin HSFlatControls.MyCombo cboTipoIngreso 
               Height          =   375
               Left            =   1995
               TabIndex        =   41
               ToolTipText     =   "Tipo de ingreso bajo el cual se va a realizar la admisión"
               Top             =   300
               Width           =   5760
               _ExtentX        =   10160
               _ExtentY        =   661
               Style           =   1
               Enabled         =   -1  'True
               Text            =   ""
               Sorted          =   0   'False
               List            =   ""
               ItemData        =   ""
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
            End
            Begin MSMask.MaskEdBox mskHoraIngreso 
               Height          =   375
               Left            =   13970
               TabIndex        =   55
               ToolTipText     =   "Hora del ingreso"
               Top             =   300
               Width           =   795
               _ExtentX        =   1402
               _ExtentY        =   661
               _Version        =   393216
               Appearance      =   0
               MaxLength       =   5
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Format          =   "hh:mm"
               Mask            =   "##:##"
               PromptChar      =   " "
            End
            Begin MSMask.MaskEdBox mskFechaIngreso 
               Height          =   375
               Left            =   12520
               TabIndex        =   54
               ToolTipText     =   "Fecha del ingreso"
               Top             =   300
               Width           =   1410
               _ExtentX        =   2487
               _ExtentY        =   661
               _Version        =   393216
               ClipMode        =   1
               Appearance      =   0
               MaxLength       =   10
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Format          =   "dd/mmm/yyyy"
               Mask            =   "##/##/####"
               PromptChar      =   " "
            End
            Begin HSFlatControls.MyCombo cboRelacion 
               Height          =   375
               Left            =   1995
               TabIndex        =   50
               ToolTipText     =   "Relación"
               Top             =   3135
               Width           =   5760
               _ExtentX        =   10160
               _ExtentY        =   661
               Style           =   1
               Enabled         =   -1  'True
               Text            =   ""
               Sorted          =   -1  'True
               List            =   ""
               ItemData        =   ""
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
            End
            Begin HSFlatControls.MyCombo cboFamiliar 
               Height          =   375
               Left            =   1995
               TabIndex        =   52
               Top             =   3135
               Width           =   5760
               _ExtentX        =   10160
               _ExtentY        =   661
               Style           =   1
               Enabled         =   -1  'True
               Text            =   ""
               Sorted          =   -1  'True
               List            =   $"frmAdmisionPaciente.frx":837A
               ItemData        =   $"frmAdmisionPaciente.frx":8387
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
            End
            Begin HSFlatControls.MyCombo cboMadre 
               Height          =   375
               Left            =   1995
               TabIndex        =   51
               ToolTipText     =   "Nombre de la madre"
               Top             =   3135
               Width           =   5760
               _ExtentX        =   10160
               _ExtentY        =   661
               Style           =   1
               Enabled         =   -1  'True
               Text            =   ""
               Sorted          =   -1  'True
               List            =   ""
               ItemData        =   ""
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
            End
            Begin HSFlatControls.MyCombo cboSocio 
               Height          =   375
               Left            =   1995
               TabIndex        =   53
               ToolTipText     =   "Socios"
               Top             =   3135
               Width           =   5760
               _ExtentX        =   10160
               _ExtentY        =   661
               Style           =   1
               Enabled         =   -1  'True
               Text            =   ""
               Sorted          =   -1  'True
               List            =   ""
               ItemData        =   ""
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
            End
            Begin MyCommandButton.MyButton cmdHonorarios 
               Height          =   375
               Left            =   11280
               TabIndex        =   64
               ToolTipText     =   "Consultar los honorarios médicos del paquete"
               Top             =   2730
               Width           =   3375
               _ExtentX        =   5953
               _ExtentY        =   661
               BackColor       =   -2147483633
               Enabled         =   0   'False
               BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Appearance      =   1
               BackColorDown   =   -2147483643
               BackColorOver   =   -2147483633
               BackColorFocus  =   -2147483633
               BackColorDisabled=   -2147483633
               BorderColor     =   -2147483627
               TransparentColor=   16777215
               Caption         =   "Consultar honorarios médicos"
               DepthEvent      =   1
               ShowFocus       =   -1  'True
            End
            Begin VB.Label lblRelacion 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Relación"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   75
               TabIndex        =   143
               Top             =   3195
               Width           =   840
            End
            Begin VB.Label lblSocio 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Socio"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   75
               TabIndex        =   140
               Top             =   3195
               Width           =   885
            End
            Begin VB.Label lblMadreRecienNacido 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Madre"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   75
               TabIndex        =   141
               Top             =   3195
               Width           =   1095
            End
            Begin VB.Label lblFamiliar 
               BackColor       =   &H80000005&
               Caption         =   "Familiar"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   75
               TabIndex        =   142
               Top             =   3195
               Visible         =   0   'False
               Width           =   1215
            End
            Begin VB.Label lblLugarIngreso 
               BackColor       =   &H80000005&
               Caption         =   "Lugar de ingreso"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   300
               Left            =   75
               TabIndex        =   144
               Top             =   760
               Width           =   2070
            End
            Begin VB.Label lblFormaNac 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Forma de nacimiento"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   3840
               TabIndex        =   146
               Top             =   1170
               Width           =   2145
            End
            Begin VB.Label lblCuentaExterno 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Cuenta externo"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   11600
               TabIndex        =   147
               Top             =   765
               Width           =   1515
            End
            Begin VB.Label lblNumCuenta 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Cuenta interno"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   7840
               TabIndex        =   149
               Top             =   760
               Width           =   1470
            End
            Begin VB.Label lblempresapaciente 
               BackColor       =   &H80000005&
               Caption         =   "Empresa referida"
               Enabled         =   0   'False
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   300
               Left            =   75
               TabIndex        =   150
               Top             =   2790
               Width           =   2055
            End
            Begin VB.Label lblTipoPoliza 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Tipo y número póliza"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   7840
               TabIndex        =   152
               Top             =   1570
               Width           =   1995
            End
            Begin VB.Label lblProcedencia 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Procedencia*"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               ForeColor       =   &H00000000&
               Height          =   255
               Left            =   7845
               TabIndex        =   153
               ToolTipText     =   "Procedencia"
               Top             =   3195
               Width           =   1320
            End
            Begin VB.Label lblFechaIngreso 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Fecha y hora del ingreso*"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   10080
               TabIndex        =   155
               Top             =   360
               Width           =   2445
            End
            Begin VB.Label lblAnticipo 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Anticipo sugerido "
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   7840
               TabIndex        =   156
               Top             =   2790
               Width           =   1755
            End
            Begin VB.Label lblOrden 
               BackColor       =   &H80000005&
               Caption         =   "Orden de internamiento*"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   250
               Left            =   75
               TabIndex        =   157
               Top             =   1170
               Width           =   2445
            End
            Begin VB.Label lblTipoIngreso 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Tipo de ingreso*"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   75
               TabIndex        =   161
               Top             =   360
               Width           =   1545
            End
            Begin VB.Label lblTipoPaciente 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Tipo de paciente*"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   75
               TabIndex        =   162
               Top             =   1570
               Width           =   1725
            End
            Begin VB.Label lblAutoriza 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Autoriza"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   7840
               TabIndex        =   163
               Top             =   1170
               Width           =   1410
               WordWrap        =   -1  'True
            End
            Begin VB.Label lblEmpresa 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Empresa"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   75
               TabIndex        =   164
               Top             =   2380
               Width           =   825
            End
            Begin VB.Label lblTipoConvenio 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Tipo de convenio"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   75
               TabIndex        =   165
               Top             =   1980
               Width           =   1680
            End
            Begin VB.Label lblNumeroControl 
               AutoSize        =   -1  'True
               BackColor       =   &H80000005&
               Caption         =   "Número de control"
               BeginProperty Font 
                  Name            =   "Century Gothic"
                  Size            =   9.75
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   255
               Left            =   7845
               TabIndex        =   166
               Top             =   1980
               Width           =   2100
               WordWrap        =   -1  'True
            End
         End
      End
      Begin VB.Frame fraMedicos 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         Caption         =   "Médicos"
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   1170
         Left            =   -74880
         TabIndex        =   87
         Top             =   3060
         Width           =   10470
         Begin HSFlatControls.MyCombo cboMedicoCargo 
            Height          =   375
            Left            =   2400
            TabIndex        =   80
            ToolTipText     =   "Médico a cargo del paciente"
            Top             =   705
            Width           =   7935
            _ExtentX        =   13996
            _ExtentY        =   661
            Style           =   1
            Enabled         =   -1  'True
            Text            =   ""
            Sorted          =   -1  'True
            List            =   ""
            ItemData        =   ""
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
         End
         Begin HSFlatControls.MyCombo cboMedicoEmergencias 
            Height          =   375
            Left            =   2400
            TabIndex        =   79
            ToolTipText     =   "Médico que recibe por el área de Emergencias"
            Top             =   300
            Width           =   7935
            _ExtentX        =   13996
            _ExtentY        =   661
            Style           =   1
            Enabled         =   -1  'True
            Text            =   ""
            Sorted          =   -1  'True
            List            =   ""
            ItemData        =   ""
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
         End
         Begin VB.Label lblMedicoCargo 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "Médico a cargo*"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Left            =   135
            TabIndex        =   183
            Top             =   760
            Width           =   1650
         End
         Begin VB.Label lblMedicoEmergencias 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "Médico emergencias"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Left            =   120
            TabIndex        =   182
            Top             =   360
            Width           =   2025
         End
      End
      Begin VB.Frame fraDiagnostico 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         Caption         =   "Diagnóstico"
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   1380
         Left            =   -74880
         TabIndex        =   184
         Top             =   4200
         Width           =   10455
         Begin VB.TextBox txtDiagnosticoEspecifico 
            Appearance      =   0  'Flat
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   585
            Left            =   2880
            MaxLength       =   1000
            MultiLine       =   -1  'True
            ScrollBars      =   2  'Vertical
            TabIndex        =   85
            ToolTipText     =   "Diagnóstico específico del paciente"
            Top             =   720
            Width           =   7455
         End
         Begin VB.TextBox txtDiagnostico 
            Appearance      =   0  'Flat
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   375
            Left            =   2880
            Locked          =   -1  'True
            TabIndex        =   84
            ToolTipText     =   "Diagnóstico CIE-10 preliminar al ingreso"
            Top             =   300
            Width           =   6165
         End
         Begin MyCommandButton.MyButton cmdBuscarDiagnostico 
            Height          =   375
            Left            =   9120
            TabIndex        =   81
            ToolTipText     =   "Búsqueda de diagnósticos"
            Top             =   300
            Width           =   1215
            _ExtentX        =   2143
            _ExtentY        =   661
            BackColor       =   -2147483633
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Appearance      =   1
            BackColorDown   =   -2147483643
            BackColorOver   =   -2147483633
            BackColorFocus  =   -2147483633
            BackColorDisabled=   -2147483633
            BorderColor     =   -2147483627
            TransparentColor=   16777215
            Caption         =   "Buscar"
            DepthEvent      =   1
            ShowFocus       =   -1  'True
         End
         Begin VB.Label Label4 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "Específico"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Left            =   120
            TabIndex        =   186
            Top             =   760
            Width           =   960
         End
         Begin VB.Label Label3 
            AutoSize        =   -1  'True
            BackColor       =   &H80000005&
            Caption         =   "CIE-10 preliminar al ingreso"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Left            =   120
            TabIndex        =   185
            Top             =   360
            Width           =   2595
         End
      End
      Begin VB.Frame fraMotivoIngreso 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   1380
         Left            =   -74880
         TabIndex        =   187
         Top             =   4200
         Visible         =   0   'False
         Width           =   10470
         Begin VB.TextBox txtMotivoIngreso 
            Appearance      =   0  'Flat
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   975
            Left            =   2400
            MaxLength       =   1000
            MultiLine       =   -1  'True
            ScrollBars      =   2  'Vertical
            TabIndex        =   82
            ToolTipText     =   "Motivo de ingreso del paciente"
            Top             =   300
            Width           =   7935
         End
         Begin VB.Label lblMotivoIngreso 
            BackColor       =   &H80000005&
            Caption         =   "Motivo del ingreso"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Left            =   120
            TabIndex        =   188
            Top             =   270
            Width           =   1800
         End
         Begin VB.Line Line1 
            BorderColor     =   &H80000015&
            X1              =   0
            X2              =   10500
            Y1              =   10
            Y2              =   10
         End
      End
      Begin MSHierarchicalFlexGridLib.MSHFlexGrid grdInternoAmbulatorio 
         Height          =   10520
         Left            =   -74880
         TabIndex        =   202
         Top             =   480
         Width           =   15030
         _ExtentX        =   26511
         _ExtentY        =   18547
         _Version        =   393216
         BackColor       =   16777215
         ForeColor       =   0
         Cols            =   21
         ForeColorFixed  =   0
         ForeColorSel    =   0
         BackColorBkg    =   16777215
         BackColorUnpopulated=   16777215
         GridColor       =   -2147483638
         GridColorFixed  =   -2147483638
         GridColorUnpopulated=   -2147483638
         FocusRect       =   2
         GridLinesFixed  =   1
         GridLinesUnpopulated=   1
         AllowUserResizing=   1
         Appearance      =   0
         FormatString    =   $"frmAdmisionPaciente.frx":838E
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         BeginProperty FontFixed {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         _NumberOfBands  =   1
         _Band(0).Cols   =   21
      End
      Begin MSHierarchicalFlexGridLib.MSHFlexGrid grdPrepagos 
         Height          =   10520
         Left            =   -74880
         TabIndex        =   203
         ToolTipText     =   "Consulta de pacientes de prepago"
         Top             =   480
         Width           =   15030
         _ExtentX        =   26511
         _ExtentY        =   18547
         _Version        =   393216
         BackColor       =   16777215
         ForeColor       =   0
         Cols            =   21
         ForeColorFixed  =   0
         ForeColorSel    =   0
         BackColorBkg    =   16777215
         BackColorUnpopulated=   16777215
         GridColor       =   -2147483638
         GridColorFixed  =   -2147483638
         GridColorUnpopulated=   -2147483638
         FocusRect       =   2
         GridLinesFixed  =   1
         GridLinesUnpopulated=   1
         AllowUserResizing=   1
         Appearance      =   0
         FormatString    =   "|Expediente|Cuenta|Paciente|Fecha ingreso|Hora ingreso|Médico a cargo|Plan/paquete|Empleado que registró"
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         BeginProperty FontFixed {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         _NumberOfBands  =   1
         _Band(0).Cols   =   21
      End
      Begin MSHierarchicalFlexGridLib.MSHFlexGrid grdIngresosPrevios 
         Height          =   10520
         Left            =   -74880
         TabIndex        =   204
         ToolTipText     =   "Consulta de pacientes de ingreso previo"
         Top             =   480
         Width           =   15030
         _ExtentX        =   26511
         _ExtentY        =   18547
         _Version        =   393216
         BackColor       =   16777215
         ForeColor       =   0
         Cols            =   21
         ForeColorFixed  =   0
         ForeColorSel    =   0
         BackColorBkg    =   16777215
         BackColorUnpopulated=   16777215
         GridColor       =   -2147483638
         GridColorFixed  =   -2147483638
         GridColorUnpopulated=   -2147483638
         FocusRect       =   2
         GridLinesFixed  =   1
         GridLinesUnpopulated=   1
         AllowUserResizing=   1
         Appearance      =   0
         FormatString    =   "|Expediente|Paciente|Fecha ingreso|Hora ingreso|Médico a cargo|Procedencia|Domicilio particular|Persona que registró"
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         BeginProperty FontFixed {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         _NumberOfBands  =   1
         _Band(0).Cols   =   21
      End
      Begin MSHierarchicalFlexGridLib.MSHFlexGrid grdEgresados 
         Height          =   8500
         Left            =   -74880
         TabIndex        =   218
         ToolTipText     =   "Pacientes egresados"
         Top             =   1680
         Width           =   15030
         _ExtentX        =   26511
         _ExtentY        =   15002
         _Version        =   393216
         ForeColor       =   0
         Cols            =   11
         ForeColorFixed  =   0
         ForeColorSel    =   0
         BackColorBkg    =   -2147483643
         BackColorUnpopulated=   -2147483643
         GridColor       =   -2147483638
         GridColorFixed  =   -2147483638
         GridColorUnpopulated=   -2147483638
         GridLinesFixed  =   1
         GridLinesUnpopulated=   1
         AllowUserResizing=   1
         Appearance      =   0
         FormatString    =   "|Paciente|Expediente|Cuenta|Procedencia|Fecha ingreso|Hora ingreso|Fecha egreso|Hora egreso|Domicilio|Médico a cargo"
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         BeginProperty FontFixed {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         _NumberOfBands  =   1
         _Band(0).Cols   =   11
      End
      Begin VB.Frame Frame5 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         Caption         =   "Departamento donde se atendió el paciente externo"
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   760
         Left            =   -67320
         TabIndex        =   232
         Top             =   1540
         Width           =   7470
         Begin HSFlatControls.MyCombo cboDepartamentoAtiende 
            Height          =   375
            Left            =   120
            TabIndex        =   233
            ToolTipText     =   "Departamento que atendió"
            Top             =   300
            Width           =   7230
            _ExtentX        =   12753
            _ExtentY        =   661
            Style           =   1
            Enabled         =   -1  'True
            Text            =   ""
            Sorted          =   -1  'True
            List            =   ""
            ItemData        =   ""
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
         End
      End
      Begin VB.Frame Frame4 
         Appearance      =   0  'Flat
         BackColor       =   &H80000005&
         Caption         =   "Rango de fechas de atención"
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000008&
         Height          =   760
         Left            =   -74880
         TabIndex        =   228
         Top             =   1540
         Width           =   7455
         Begin VB.CheckBox Chkpacientesactivos 
            Appearance      =   0  'Flat
            BackColor       =   &H80000005&
            Caption         =   "Pacientes activos"
            BeginProperty Font 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H80000008&
            Height          =   250
            Left            =   5040
            TabIndex        =   229
            Top             =   375
            Width           =   2040
         End
         Begin MSMask.MaskEdBox mskFechaInicioAtencion 
            Height          =   375
            Left            =   195
            TabIndex        =   230
            ToolTipText     =   "Fecha de inicio de atención"
            Top             =   300
            Width           =   1380
            _ExtentX        =   2434
            _ExtentY        =   661
            _Version        =   393216
            ClipMode        =   1
            Appearance      =   0
            MaxLength       =   10
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Format          =   "dd/mmm/yyyy"
            Mask            =   "##/##/####"
            PromptChar      =   " "
         End
         Begin MSMask.MaskEdBox mskFechaTerminoAtencion 
            Height          =   375
            Left            =   1920
            TabIndex        =   231
            ToolTipText     =   "Fecha de término de atención"
            Top             =   300
            Width           =   1410
            _ExtentX        =   2487
            _ExtentY        =   661
            _Version        =   393216
            ClipMode        =   1
            Appearance      =   0
            MaxLength       =   10
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "Century Gothic"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Format          =   "dd/mmm/yyyy"
            Mask            =   "##/##/####"
            PromptChar      =   " "
         End
      End
      Begin MSHierarchicalFlexGridLib.MSHFlexGrid grdExternos 
         Height          =   7800
         Left            =   -74880
         TabIndex        =   234
         ToolTipText     =   "Pacientes externos"
         Top             =   2400
         Width           =   15030
         _ExtentX        =   26511
         _ExtentY        =   13758
         _Version        =   393216
         ForeColor       =   0
         Cols            =   11
         ForeColorFixed  =   0
         ForeColorSel    =   0
         BackColorBkg    =   -2147483643
         BackColorUnpopulated=   -2147483643
         GridColor       =   -2147483638
         GridColorFixed  =   -2147483638
         GridColorUnpopulated=   -2147483638
         GridLinesFixed  =   1
         GridLinesUnpopulated=   1
         AllowUserResizing=   1
         Appearance      =   0
         FormatString    =   "|Paciente|Expediente|Cuenta|Procedencia|Fecha ingreso|Hora ingreso|Fecha egreso|Hora egreso|Domicilio|Médico a cargo"
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         BeginProperty FontFixed {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         _NumberOfBands  =   1
         _Band(0).Cols   =   11
      End
      Begin MyCommandButton.MyButton cmdActivaExterno 
         Height          =   375
         Left            =   -70080
         TabIndex        =   235
         Top             =   10455
         Visible         =   0   'False
         Width           =   5505
         _ExtentX        =   9710
         _ExtentY        =   661
         BackColor       =   -2147483633
         BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
            Name            =   "Century Gothic"
            Size            =   9.75
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Appearance      =   1
         BackColorDown   =   -2147483643
         BackColorOver   =   -2147483633
         BackColorFocus  =   -2147483633
         BackColorDisabled=   -2147483633
         BorderColor     =   -2147483627
         TransparentColor=   16777215
         Caption         =   "Desactivación de pacientes externos"
         DepthEvent      =   1
         ShowFocus       =   -1  'True
      End
      Begin MSComDlg.CommonDialog CmlDocumentoAdjunto 
         Left            =   -75000
         Top             =   0
         _ExtentX        =   847
         _ExtentY        =   847
         _Version        =   393216
      End
      Begin VB.Label Lbllicenciasexternos 
         Alignment       =   2  'Center
         BackColor       =   &H80000005&
         BackStyle       =   0  'Transparent
         Caption         =   "El número de licencias permitidas en la admisión de pacientes externos ha llegado a su límite"
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   9
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00000080&
         Height          =   900
         Left            =   11040
         TabIndex        =   169
         Top             =   10250
         Visible         =   0   'False
         Width           =   3735
      End
      Begin VB.Label lblLicencias 
         Alignment       =   2  'Center
         BackColor       =   &H80000005&
         BackStyle       =   0  'Transparent
         Caption         =   "El número de licencias permitidas en la admisión de pacientes ha llegado a su límite"
         BeginProperty Font 
            Name            =   "Century Gothic"
            Size            =   9
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00000080&
         Height          =   900
         Left            =   480
         TabIndex        =   168
         Top             =   10250
         Visible         =   0   'False
         Width           =   3735
      End
   End
End
Attribute VB_Name = "frmAdmisionPaciente"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'-------------------------------------------------------------------------------------
'| Nombre del Proyecto      : Admisión
'| Nombre del Formulario    : frmAdmisionPaciente
'-------------------------------------------------------------------------------------
'| Objetivo: Permite el ingreso o modificación de datos de un paciente
'-------------------------------------------------------------------------------------
'| Análisis y Diseño        : Nery Lozano - Luis Astudillo
'| Fecha de Creación        : 12/Diciembre/1999
'-------------------------------------------------------------------------------------
' Los diferentes tipos de ingreso son:
' INTERNAMIENTO NORMAL
'                       Al paciente se le asigna número de expediente y número de cuenta
'                       En ExPacienteIngreso.intCveTipoIngreso = '1'
' AMBULATORIO
'                       Al paciente se le asigna número de expediente y número de cuenta
'                       En ExPacienteIngreso.intCveTipoIngreso = '2'
' PREPAGO
'                       Al paciente se le asigna número de expediente y número de cuenta
'                       En ExPacienteIngreso.intCveTipoIngreso = '3'
' ES INTERNO Y FUE URGENCIAS
'                       Al paciente se le asigna número de expediente y número de cuenta
'                       En ExPacienteIngreso.intCveTipoIngreso = '4'
' ES INTERNO Y FUE AMBULATORIO
'                       Al paciente se le asigna número de expediente y número de cuenta
'                       En ExPacienteIngreso.intCveTipoIngreso = '5'
' RECIEN NACIDO
'                       Al paciente se le asigna número de expediente y número de cuenta
'                       En ExPacienteIngreso.intCveTipoIngreso = '6'
' URGENCIAS
'                       Al paciente se le asigna número de expediente y
'                       puede o no asignarse número de cuenta, dependiendo del módulo
'                       En SiExPacienteIngreso.intCveTipoIngreso = 7
' EXTERNO
'                       Al paciente se le asigna número de expediente y
'                       puede o no asignarse número de cuenta, dependiendo del módulo
'                       En SiExPacienteIngreso.intCveTipoIngreso = 8
' EXPRESS
'                       El registro de este tipo de ingreso es por el proceso Admision express
'                       En SiExPacienteIngreso.intCveTipoIngreso = 9
'                       En AdAdmision.chrTipoIngreso = ''
' PREVIO
'                       Al paciente solo se le asigna número de expediente
'----------------------------------------------------------------------------------------------------------

Option Explicit

'Claves de la tabla SITIPOINGRESO:
Const clngCveInternamientoNormal = 1
Const clngCveAmbulatorio = 2
Const clngCvePrepago = 3
Const clngCveInternoFueUrgencias = 4
Const clngCveInternoFueAmbulatorio = 5
Const clngCveRecienNacido = 6
Const clngCveUrgencias = 7
Const clngCveExterno = 8
Const clngCveConsultaExterna = 10
Const clngCveCortaEstancia = 11
Const clngCveInternoFueCortaEstancia = 12
Const clngCvePrevio = 0     'ya que no esta dentro de la tabla SiTipoIngreso
Const clngCveCortaEstanciaFueAmbulatorio = 13

Public vlblnMostrarTabGenerales As Boolean              'Mostrar o no el tab
Public vlblnMostrarTabInternamiento As Boolean          'Mostrar o no el tab
Public vlblnMostrarTabInternos As Boolean               'Mostrar o no el tab
Public vlblnMostrarTabPrepagos As Boolean               'Mostrar o no el tab
Public vlblnMostrarTabIngresosPrevios As Boolean        'Mostrar o no el tab
Public vlblnMostrarTabEgresados As Boolean              'Mostrar o no el tab
Public vlblnMostrarTabExternos As Boolean               'Mostrar o no el tab
Public vlblnPermiteEgresar As Boolean                   'Variable que sirve para validar el permiso para egresar al paciente
Dim vlblnPermiteEgresarPaciente As Boolean
Public vlintPestañaInicial As Integer

Public vglngCveDiagnostico As Long
Public vllngNumeroOpcion As Long                        'No. de opción para validar al grabar

Public vgstrDescDiagnostico As String

Public vglngCveCirugia As Long                         'caso 20329
Public vgstrDescCirugia As String                   'casi 20329
Public vglngCveTecnicaLateralidad As Long               'caso 20329

'----------------- Pacientes Externos ------------------>
Public blnHonorariosCC As Boolean                       'Indica si se mandó llamar desde el módulo de CC de Honorarios médicos
Public blnAbrirCuenta As Boolean                        'Indica si se abre cuenta automáticamente a pacientes Externos o Urgencias
Public blnActivar As Boolean                            'Indica si se activa la cuenta a pacientes Urgencias y Externos
Public blnHabilitarAbrirCuenta As Boolean               'Indica si se habilita el botón para abrir cuenta
Public blnHabilitarActivar As Boolean                   'Indica si se habilita el botón para activar al paciente
Public blnHabilitarReporte As Boolean                   'Indica si se habilita el botón para imprimir el reporte de interconsulta
'Public blnCapturarOtrosDatos As Boolean                 '
Public blnConsulta As Boolean                           'Para cuando se deben mostrar los datos del paciente Externo o Urgencias al inicio

Public vllngNumeroOpcionExterno As Long                 'No. de opción para validar al grabar externos
Public vglngExpediente As Long                          'Clave del paciente ExPaciente.intNumPaciente
Public vglngCuentaPaciente As Long                      'Número de cuenta del paciente
Public vglngExpedienteConsulta As Long                  'Clave del paciente ExPaciente.intNumPaciente
Public vglngtipopoliza As Long                          'Clave del Tipo de póliza (para SA)

Public vgstrautoriza As String                          'Persona que autoriza el ingreso (para SA)
Public vgstrnumpoliza As String                         'Número de póliza (para SA)
Public vglngPacienteSocioRel As Long                'Socio relacionado para externo
'<-------------------------------------------------------

'--------------- Pacientes de presupuestos ------------->
Public vgstrForma As String                             'Indica el nombre de la forma que mandó llamar la admisión del paciente
Public vglngCvePaquete As Long                          'Número de paquete relacionado con la admisión del paciente cuando viene de un presupuesto
Public vglngCuenta As Long                              'Número de cuenta del paciente ExPacienteIngreso.intNumCuenta
Public vglngTipoPaciente As Long                        'Tipo de paciente seleccionado en el presupuesto
Public vglngTipoConvenio As Long                        'Tipo de convenio seleccionada en el presupuesto
Public vglngEmpresaPaciente As Long                     'Empresa de convenio seleccionada en el presupuesto
'<-------------------------------------------------------

Dim vlvarColorRecienNacido As Variant                   'Color del grid de la consulta de internos / ambulatorios
Dim vlvarColorInternoFueExterno As Variant              'Color del grid de la consulta de internos / ambulatorios
Dim vlvarColorInternamientoNormal As Variant            'Color del grid de la consulta de internos / ambulatorios
Dim vlvarColorInternoFueAmbulatorio As Variant          'Color del grid de la consulta de internos / ambulatorios
Dim vlvarColorAmbulatorio As Variant                    'Color del grid de la consulta de internos / ambulatorios
Dim vlvarColorExpress As Variant                        'Color del grid de la consulta de internos / ambulatorios
Dim vlvarColorInternoFueCortaEstancia As Variant        'Color del grid de la consulta de internos / ambulatorios
Dim vlvarColorCortaEstancia As Variant                  'Color del grid de la consulta de internos / ambulatorios
Dim vlvarColorCortaEstanciaFueAmbulatorio As Variant    'Color del grid de la consulta de internos / ambulatorios
Dim vlvarColorPrepagos As Variant                       'Color del grid de la consulta de prepagos
Dim vlvarColorIngresoPrevio As Variant                  'Color del grid de la consulta de ingresos previos
Dim vlvarColorEgresados As Variant                      'Color del grid de la consulta de pacientes egresados
Dim vlvarColorExternos As Variant                       'Color del grid de la consulta de externos

Dim vlstrTipoIngresoInternamientoNormal As String           'Descripción del internamiento normal
Dim vlstrTipoIngresoAmbulatorio As String                   'Descripción del ingreso ambulatorio
Dim vlstrTipoIngresoPrepago As String                       'Descripción del prepago
Dim vlstrTipoIngresoInternoFueUrgencias As String           'Descripcion del ingreso interno fue externo
Dim vlstrTipoIngresoInternoFueAmbulatorio As String         'Descripción del ingreso interno fue ambulatorio
Dim vlstrTipoIngresoRecienNacido As String                  'Descripción del ingreso recién nacido
Dim vlstrTipoIngresoPrevio As String                        'Descripción del ingreso previo
Dim vlstrTipoIngresoUrgencias As String                     'Descripción del tipo de ingresoUrgencias
Dim vlstrTipoIngresoExterno As String                       'Descripción del tipo de ingreso Externo
Dim vlstrTipoIngresoConsultaExterna As String               'Descripcion del tipo de ingreso Consulta Externa
Dim vlstrTipoIngresoCortaEstancia As String                 'Descripcion del tipo de ingreso corta estancia
Dim vlstrTipoIngresoInternoFueCortaEstancia As String       'Descripcion del tipo de ingreso interno fue corta estancia
Dim vlstrTipoIngresoCortaEstanciaFueAmbulatorio As String   'Descripcion del tipo de ingreso corta estancia fue ambulatorio
Dim vlstrTipoIngresoRegistradoPreviamente As String
Dim vlstrIngresoSeleccionadoPreviamente As String

Dim vlstrTipoAnticipoOtros As String                    'Descripción del anticipo por otros

Dim vlstrIngresoSeleccionado As String                  'Tipo de ingreso seleccionado para la admisión
Dim vlstrTipoAnticipoSeleccionado As String             'Tipo de anticipo selecionado para la admisión
Dim vlstrMensajeCuarto As String                        'Mensaje cuando no hay cuartos disponibles
Dim vlstrFechaAnterior As String                        'Fecha que estaba antes de ser modificada
Dim vlstrHoraAnterior As String                         'Hora que estaba antes de ser modificada
Dim vlstrTipoIngresoAdmisionConsultada As String        'Tipo de ingreso de la admisión que se está consultando
Dim vlstrTipoIngresoAdmision As String                  'Tipo de ingreso de la admisión que se está consultando
Dim lstrFechaNacimiento As String                       'Fecha de nacimiento
Dim lstrTipoAtencion As String                          'Plan, paquete, otros
Dim lstrAlergias As String                              'Alergias del paciente
Dim vlstrTipoPacienteConsultado As String               'Tipo de paciente I o E
Dim vlstrTipoTratamiento As String                      'Tipo de tratamiento del plan, paquete, cirugía, etc seleccionado
                                                        '"M" = Médico
                                                        '"Q" = Quirúrgico
Dim vlstrTipoTipoPaciente As String                     'Clasificación del tipo de paciente seleccionado
                                                        '"PA" = particulares
                                                        '"CO" = convenios
                                                        '"EM" = empleados
                                                        '"ME" = médicos
Dim vlstrSentencia As String
Dim lstrFechaIngresoPrepago As String
Dim lstrFechaIngresoPrevio As String
Dim lstrHoraIngresoPrepago As String
Dim lstrHoraIngresoPrevio As String

Dim RSAdSelInternosAmbulatorios As New ADODB.Recordset
Dim RSAdSelCuartoApropiado As New ADODB.Recordset
Dim RSAdSelIngresosPrevios As New ADODB.Recordset
Dim rsPlanPaqueteCirugia As New ADODB.Recordset         'Datos del paquete, cirugia, etc.
Dim RSAdSelPrepagos As New ADODB.Recordset
Dim rs As New ADODB.Recordset                           'Para todos los accesos de datos
Dim RSExDocumentoAdjunto As New ADODB.Recordset         'Para agregar/eliminar los documentos adjuntos

Dim vlintPersonaEmergencia As Integer                   'Número de persona para emergencias
Dim vlintPersonaResponsable As Integer                  'Número de persona responsable de cuenta
Dim vllngCveDiagnostico As Long                         'Clave del diagnóstico seleccionado
Dim vllngCveCirugia As Long                             'Clave de la cirugia seleccionado '20329
Dim vllngIngresoConsultado As Long                      'Número de cuenta del ingreso consultado, esta variable se usa en la impresión de documentos

Dim vlblnPacienteValidado As Boolean                    'Indica si el nombre del paciente fue buscado en el sistema para evitar duplicidad de la información
Dim vlblnCambioFechaIngreso As Boolean                  'Indica si el ingreso se guarda con una fecha proporcionada por el usuario o bien la del sistema
Dim vlblnCambioHoraIngreso As Boolean                   'Indica si el ingreso se guarda con una hora proporcionada por el usuario o bien la del sistema
Dim vlblnConsulta As Boolean                            'Estatus que indica si se está realizando la consulta de una admisión
Dim vlblnTipoPacienteDesconocido As Boolean             'Indica si el tipo de paciente seleccionado tiene estatus de "Desconocido"
Dim vlblnVerificaEmpresa As Boolean                     'Indica si se debe revisar que las empresas esten activadas
Dim vlblnConsultaEmpresa As Boolean                     'Indica si se trata de una consulta de las empresas activadas
Dim vlblnLlenandoAreas As Boolean                       'Indica si se esta llenando el combo de areas de cuartos para no realizar el click
Dim vlblnLlenandoTipoPoliza As Boolean                  'Indica si se esta llenando el combo de tipos de polizas para no realizar el click
Dim lbFlag As Boolean                                   'Banderita para indicar si se selecionó un paciente externo del grdExternos
Dim vlblnRecienNacidoInternado As Boolean
Dim vlblnEgresoPaciente As Boolean
Dim vlblnDatosCapturados As Boolean
Dim vlblnDatosCargados As Boolean
Dim vlblnDebeCapturarCuarto As Boolean
Dim vlblnUtilizaConvenio As Boolean
Dim vlblnAsegurdora As Boolean                          'Indica si es de aseguradora 18048
Dim lblnDePestanaPrepago As Boolean                     'Indica si se selecciono un paciente del grid de prepagos
Dim vlblnHacerTraslado As Boolean
Dim vlblnFamiliar As Boolean                            'Indica si el paciente es familiar de médico o empleado
Dim vlblnPestanaGeneral As Boolean                      ' Indica la activacion del tab 0
Dim vlblnRegistroNuevo As Boolean                       'Indica si es nuevo el paciente para cambio de fecha

Dim vdtmFecIniEgr As Date                               'Indica cual es el valor inicial de la fecha inicial de egresos
Dim vdtmFecFinEgr As Date                               'Indica cual es el valor inicial de la fecha final de egresos
Dim vldtmFechaEgreso As Date

Dim vldblIncrementoTarifa As Double
Dim vldblPrecio As Double
Dim vlintBitPesos As Integer                            'Tipo de moneda

Dim vlintDeptoAdmision As Integer                       'Clave del departamento de admision
Dim intNumeroPacienteDesconocido As Integer             'Número actual de paciente desconocido
Dim lintCveDeptoIngreso As Integer                      'Clave del departamento por donde ingresó el paciente
Dim vlintMensajeFalla As Integer
Dim intcontador As Integer

Dim colIngresos As Collection                           'Guarda los tipos de ingreso y si se pregunta el departamento por el que entra inicialmente el paciente

Dim llngCvePoliza As Long                               'Clave del tipo de póliza seleccionada
Dim llngCveEmpresaPaciente As Long                      'Clave de la empresa de donde proviene el paciente seleccionada

Dim llngCveReligion As Long                             'Clave de la religión seleccionada
Dim llngCveEstadoCivil As Long                          'Clave del estado civil seleccionado
Dim llngCveCiudadNacto As Long                          'Clave de la ciudad de nacimiento seleccionada
Dim llngCveNacionalidad As Long                         'Clave de la nacionalidad seleccionada
Dim llngCveProcedencia As Long                          'Clave de la procedencia seleccionada
Dim llngCveParentescoEmergencia As Long                 'Clave del parentesco seleccionado
Dim llngCveParentescoResponsable As Long                'Clave del parentesco seleccionado
Dim llngCveOcupacion As Long                            'Clave de la ocupación seleccionada
Dim llngCveIdioma As Long                               'Clave del idioma seleccionado
Dim llngCveMedicoRelacionado As Long                    'Clave del médico relacionado
Dim llngCveEmpleadoRelacionado As Long                  'Clave del empleado relacionado
Dim llngCveMedicoEmergencias As Long                    'Clave del médico de emergencias
Dim llngCveMedicoTratante As Long                       'Clave del médico tratante
Dim llngCvePaquete As Long                              'Clave del paquete
Dim llngCveConcepto As Long                             'Clave del concepto de atención
Dim llngCveCuarto As Long                               'Clave del cuarto
Dim llngCveTipoConvenio As Long                         'Clave del tipo de convenio
Dim llngCveTecnicaLaterabilidad  As Long              'Clave de la tecnica y laterabilidad caso 20329
Dim llngNumPacienteExterno As Long                      'Número de paciente externo seleccionado
Dim llngNumCuentaMama As Long                           'Número de cuenta de la mamá (para recién nacidos)
Dim vllngNumeroCuentaRN As Long
Dim vlintNoCvePaciente As Long
Dim vllngPersonaGraba As Long
Dim llngCtaInterno As Long
Dim llngCtaExterno As Long
Dim llngCveTipoPacienteLN As Long
Dim llngCveEmpresaLN As Long
Dim llngCveRelacionLN As Long
Dim vllngCveEmpresa As Long
Dim blnValidaDatos As Boolean
Dim vlblnFamiliarEmpleado As Boolean

Dim rsFamiliar As New ADODB.Recordset                   'Recordset para buscar datos del familiar del empleado/médico
Dim vllngCveFamiliar As Long                            'Clave de familiar del paciente, en caso de que el tipo de paciente sea Familiar de Empleado o Médico

Dim StmAdjunto As New ADODB.Stream  'Documento adjunto a guardar

Public vgLngTipoPacienteSocio As Long    'Variable que contiene el tipo de paciente de socios, relacionado con el tipo de paciente.
Public vlUsaSocios As Boolean                  'Variable que indica si el manejo de socios está habilitado en el sistema
Public vllngSocioRelacionado  As Long      'Variable que indica si el paciente tiene un socio relacionado
Public vlblSocioTemp As Boolean             'Variable que indica si se estaba capturando un socio, pero resultó con estatus suspendido (Conserva la info para cambiar el tipo de paciente)
Dim vlCveSocio As Long

'---------------- INTERFAZ WS -------------------
Public vglngCveInterfazWS As Long                  'Variable que indica la clave de la interfaz según la empresa convenio
Public vgCveTipoIngresoAXA As Long          'Variable que indica el tipo de ingreso del paciente para la captura de datos de AXA
'Public vgstrProveedorAXA As String            'Variable que indica la clave del proveedor para AXA, configurado en el catálogo de equivalencias
Public vgstrContratoAXA As String            'Variable que indica la clave del contrato para AXA, configurado en el catálogo de equivalencias
Public vgstrControlAXA As String         'Variable que indica la clave del contrato para AXA
Public vgstrNumCuartoAXA As String         'Variable que indica el número de cuarto para la interfaz AXA
Public vgstrAutorizaGralAXA As String         'Variable que indica el número de autorización general para la interfaz AXA
Public vgstrAutorizaEspecialAXA As String         'Variable que indica el número de autorización especial para la interfaz AXA
Public vgstrMedicoTratanteAXA As String         'Variable que indica el nombre del médico tratante para la interfaz AXA (INTERNOS)
Public vgstrMedicoEmergenciasAXA As String         'Variable que indica el nombre del médico para emergencias para la interfaz AXA (URGENCIAS)
Public vllngPersonaGrabaAXA As Long
Dim vgblnAbreCta As Boolean                             'Variable booleana que decide si se abrirá cuenta al ingresar un paciente (en base al valor de esta variable se determinará si se abre cuenta o no)
    
Dim vlstrCargos As String
Dim vlrsSeleccionaCargos As New ADODB.Recordset

Dim fblnSolicitarEnvioPromociones As Boolean
Dim blnSolicitaRFC As Boolean

Dim vlblnSiEnvioPromo As Boolean
Dim vlblnNoEnvioPromo As Boolean

Dim vllngClavePaqueteAnterior As Long
Dim lblnHabilitarFechaNacimiento As Boolean     'Indica si se habilitarán los campos de fecha de nacimiento para familiares del paciente, persona para casos de emergencia y responsable de la cuenta
Dim lstrNacimientoPadre As String                       'Fecha de nacimiento padre
Dim lstrNacimientoMadre As String                       'Fecha de nacimiento madre
Dim lstrNacimientoConyuge As String                     'Fecha de nacimiento conyuge
Dim lstrNacimientoResponsable As String                 'Fecha de nacimiento responsable cuenta
Dim lstrNacimientoEmergencia As String                  'Fecha de nacimiento persona casos emergencia
Dim lLngCveListaNegraFamiliar As Long   'Clave del familiar en lista negra, si es diferente a -1 al guardar se deberá agregar a la lista negra como paciente y quitarse de la lista negra como familiar
Dim lblnCoincideListaNegraFam As Boolean 'indica si el paciente a ingresar concide con algun familiar de un paciente en lista negra
Dim llngCveParentescoPadre As Long
Dim llngCveParentescoMadre As Long
Dim llngCveParentescoConyuge As Long
Dim llngCveParentescoMismo As Long
Dim llngCveParentescoOtro As Long
Dim lblnCargarCuarto As Boolean     'Indica si al ingresar el paciente se realizará el cargo por el cuarto asignado
Dim lstrHoraInicioMediaEstancia As String 'Hora de inicio para realizar el cargo por media estancia
Dim lstrHoraFinMediaEstancia As String 'Hora de inicio para realizar el cargo por estancia completa
Dim lblnAsignarPaquete As Boolean   'Asignar paquete en otros modulos que no son admisión
Dim llngCveSucursal As Long         'Clave de la sucursal a la que pertenece el departamento del usuario, -1 cuando no pertenece a una sucursal
Dim lblnManejaSucursales As Boolean 'Indica si el hospital maneja sucursales
Dim vlblnPrepagoActivo As Boolean   'Indica si el paciente que se está registrando ya tiene una cuenta de prepago activa, para que sólo tenga 1 cuenta de prepago a la vez
Dim vlblnPacientePrevio As Boolean          'Indica si el paciente es de ingreso previo
Dim vlintNumDocu As Integer  'Indica la posición del documento adjunto en la lista de documentos adjuntos
Dim vlblnInternos As Boolean     'Indica si es consulta de un paciente interno
Dim llngCvePreRegistro As Long  'Clave del pre registro de paciente (cuando se lleva a cabo desde el web service)
Dim vlblnGuardaFarmacia As Boolean 'Saber si es necesario guardar información de la farmacia al final del guardado normal
Dim vlblnUsaFarmacia As Boolean 'Indica si usa farmacia o no, para impedir el ingreso si no se tiene un departamento de admisión en la farmacia
Dim vlblnConsultaPostGuardado As Boolean 'Saber si la carga de información fue luego de un guardado
Dim vlblnEsDeudorIncobrable As Boolean 'Identificar si el paciente a almacenar es un deudor incobrable para mostrar el mensaje adecuado el guardar

Dim blnLicenciaLealtadCliente As Boolean    'Para saber si se tiene licencia para generar la lealtad del cliente y el médico
Dim lstrEstatusPaciente As String 'Indica cual es el estado del paciente A = paciente atendiéndose, P = cuenta de prepago, E = paciente egresado, C = cuenta cancelada, O = Consulta externa
Dim blnAbrirCuentasExtraEx As Boolean


Private Sub pGuardarControlAseguradora(lngnumCuenta As Long, lngEmpresa As Long)

    Dim rsControlAseguradora As ADODB.Recordset
    Dim rsCarta As ADODB.Recordset
    Dim vllngCveCarta As Long
    Dim vlchrTipo As String
    Dim vlblnExisteCartaDefaultActiva As Boolean
    Dim vlstrSentencia As String
    Dim rsCartaDefaultActiva As ADODB.Recordset
    
    'PVCARTACONTROLSEGURO
    
    vlblnExisteCartaDefaultActiva = False
    vlstrSentencia = "select * from PVCARTACONTROLSEGURO where intNumCuenta = " & lngnumCuenta & " and intcveempresa = " & lngEmpresa & " and bitDefault = 1 and chrEstatus = 'A' "
    Set rsCartaDefaultActiva = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
    If rsCartaDefaultActiva.RecordCount > 0 Then
        vlblnExisteCartaDefaultActiva = True
    Else
        vlstrSentencia = "select * from PVCARTACONTROLSEGURO where intcveCarta=-1"
        Set rsCarta = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
                                          
        With rsCarta
            .AddNew
            '!intNumCuenta = lngnumCuenta
            !VCHDESCRIPCION = "CARTA DE AUTORIZACIÓN GENERAL"
            !INTNUMCUENTA = lngnumCuenta
            !intcveempresa = lngEmpresa
            !BITDEFAULT = 1
            .Update
            
            vllngCveCarta = flngObtieneIdentity(UCase("SEQ_PVCARTACONTROLSEGURO"), !intCveCarta)
        End With
        
        '
        vlstrSentencia = "SELECT  SITIPOINGRESO.ChrTipoIngreso Tipo From EXPACIENTEINGRESO INNER JOIN SITIPOINGRESO ON EXPACIENTEINGRESO.IntCveTipoIngreso = SITIPOINGRESO.IntCveTipoingreso Where EXPACIENTEINGRESO.IntNumCuenta = " & lngnumCuenta
        Set rs = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
        If rs.RecordCount > 0 Then
            vlchrTipo = rs!tipo
        End If
            
                            ''TODO ver de dónde se saca el I o E
        vgstrParametrosSP = lngnumCuenta _
                            & "|" & vlchrTipo _
                            & "|" & Trim(Str(lngEmpresa)) _
                            & "|" & "0" _
                            & "|" & "0" _
                            & "|" & "0" _
                            & "|" & txtApellidoPaterno.Text & " " & txtApellidoMaterno.Text & " " & txtNombre.Text _
                            & "|" & "Mismo" _
                            & "|" & "FFS" _
                            & "|" & Null _
                            & "|" & Null _
                            & "|" & Null _
                            & "|" & "0" _
                            & "|" & "0" _
                            & "|" & "0" _
                            & "|" & "0" _
                            & "|" & "0" _
                            & "|" & "0" _
                            & "|" & "0" _
                            & "|" & "C" _
                            & "|" & "C" _
                            & "|" & "C" _
    
                vgstrParametrosSP = vgstrParametrosSP _
                & "|0|0|0|C|0|0|0|0|0|0|0|0|0|0|0|0|0|0|C|0|0|" & vllngCveCarta & "|" & Null & "|" & Null & "|" & Null & "|" & Null
                frsEjecuta_SP vgstrParametrosSP, "SP_PVINSCONTROLASEGURADORA"
        'pEjecutaSentencia ("update PVControlAseguradoraEmpresa set chrIncluirConceptosSeguro = '" & vlchrIncluirConceptosSeguroTemp & "', intDesgloseConceptosVICFDI = " & vlintDesgloseConceptosVICFDITemp & " where intCveEmpresa = " & vgintEmpresa)
       ' pEjecutaSentencia ("update PVControlAseguradora set INTCVECARTA = " & vllngCveCarta & " where intCveEmpresa = " & lngEmpresa & " and INTMOVPACIENTE = " & lngnumCuenta)
    End If
          
End Sub

Private Function fdblValorPuntoLealtad() As Double

    Dim ObjRs As New ADODB.Recordset
    Dim objSTR As String
    
    fdblValorPuntoLealtad = 0
    
    objSTR = "select nvl(vchvalor, 0) valor from siparametro where vchnombre = 'MNYVALORPUNTOLEALTAD' "
    'and INTCVEEMPRESACONTABLE = " & vgintClaveEmpresaContable
    Set ObjRs = frsRegresaRs(objSTR, adLockOptimistic)
    
    If ObjRs.RecordCount > 0 Then
        fdblValorPuntoLealtad = ObjRs!valor
    End If

End Function

Private Sub pAsignaValoresVariables()
      Dim rsInterfazWS As New ADODB.Recordset

1     On Error GoTo NotificaError

2         llngCveTipoPacienteLN = -1
3         If cboTipoPaciente.ListIndex > -1 Then
4             llngCveTipoPacienteLN = cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex)
5         End If
          
6         llngCveEmpresaLN = -1
7         If cboEmpresa.ListIndex > -1 Then
8             llngCveEmpresaLN = cboEmpresa.ItemData(cboEmpresa.ListIndex)
9         End If
          
10        llngCveRelacionLN = -1
11        If cboRelacion.ListIndex > -1 Then
12            llngCveRelacionLN = cboRelacion.ItemData(cboRelacion.ListIndex)
13        End If

14        vllngCveEmpresa = 0
15        If cboEmpresa.ListIndex > -1 Then
16            vllngCveEmpresa = cboEmpresa.ItemData(cboEmpresa.ListIndex)
17        End If

18        lstrFechaNacimiento = " "
19        If IsDate(mskFechaNacimiento.Text) Then
20            lstrFechaNacimiento = fstrFechaSQL(mskFechaNacimiento.Text)
21        End If
22        lstrNacimientoPadre = ""
23        If lblnHabilitarFechaNacimiento = False And Trim(txtPadre.Text) = "" Then
24            mskNacimientoPadre.Mask = ""
25            mskNacimientoPadre.Text = ""
26            mskNacimientoPadre.Mask = "##/##/####"
27        Else
28            If IsDate(mskNacimientoPadre.Text) Then
29                lstrNacimientoPadre = fstrFechaSQL(mskNacimientoPadre.Text)
30            End If
31        End If
32        lstrNacimientoMadre = ""
33        If lblnHabilitarFechaNacimiento = False And Trim(txtMadre.Text) = "" Then
34            mskNacimientoMadre.Mask = ""
35            mskNacimientoMadre.Text = ""
36            mskNacimientoMadre.Mask = "##/##/####"
37        Else
38            If IsDate(mskNacimientoMadre.Text) Then
39                lstrNacimientoMadre = fstrFechaSQL(mskNacimientoMadre.Text)
40            End If
41        End If
42        lstrNacimientoConyuge = ""
43        If lblnHabilitarFechaNacimiento = False And (Trim(txtMaternoConyuge.Text) & Trim(txtPaternoConyuge) & Trim(txtConyuge.Text)) = "" Then
44            mskNacimientoConyuge.Mask = ""
45            mskNacimientoConyuge.Text = ""
46            mskNacimientoConyuge.Mask = "##/##/####"
47        Else
48            If IsDate(mskNacimientoConyuge.Text) Then
49                lstrNacimientoConyuge = fstrFechaSQL(mskNacimientoConyuge.Text)
50            End If
51        End If
52        lstrNacimientoResponsable = ""
53        If lblnHabilitarFechaNacimiento = False And Trim(txtNombreResponsable.Text) = "" Then
54            mskNacimientoResponsable.Mask = ""
55            mskNacimientoResponsable.Text = ""
56            mskNacimientoResponsable.Mask = "##/##/####"
57        Else
58            If IsDate(mskNacimientoResponsable.Text) Then
59                lstrNacimientoResponsable = fstrFechaSQL(mskNacimientoResponsable.Text)
60            End If
61        End If
62        lstrNacimientoEmergencia = ""
63        If lblnHabilitarFechaNacimiento = False And Trim(txtNombreEmergencia.Text) = "" Then
64            mskNacimientoEmergencia.Mask = ""
65            mskNacimientoEmergencia.Text = ""
66            mskNacimientoEmergencia.Mask = "##/##/####"
67        Else
68            If IsDate(mskNacimientoEmergencia.Text) Then
69                lstrNacimientoEmergencia = fstrFechaSQL(mskNacimientoEmergencia.Text)
70            End If
71        End If
              
72        llngNumCuentaMama = 0
73        If cboTipoIngreso.ListIndex > -1 Then
74            If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveRecienNacido And cboMadre.ListIndex <> -1 Then
75                llngNumCuentaMama = cboMadre.ItemData(cboMadre.ListIndex)
76            End If
77        End If

78        llngCveMedicoRelacionado = 0
79        llngCveEmpleadoRelacionado = 0
80        If cboRelacion.ListIndex <> -1 Then
81            llngCveMedicoRelacionado = IIf(vlstrTipoTipoPaciente = "ME", cboRelacion.ItemData(cboRelacion.ListIndex), 0)
82            llngCveEmpleadoRelacionado = IIf(vlstrTipoTipoPaciente = "EM", cboRelacion.ItemData(cboRelacion.ListIndex), 0)
83        End If

84        llngCveMedicoEmergencias = 0
85        If cboMedicoEmergencias.ListIndex <> -1 Then
86            llngCveMedicoEmergencias = cboMedicoEmergencias.ItemData(cboMedicoEmergencias.ListIndex)
87        End If

88        llngCveMedicoTratante = 0
89        If lblMedicoCargo.Enabled And cboMedicoCargo.ListIndex <> -1 Then
90            llngCveMedicoTratante = cboMedicoCargo.ItemData(cboMedicoCargo.ListIndex)
91        End If

92        llngCvePaquete = 0
93        If vlstrIngresoSeleccionado <> vlstrTipoIngresoPrevio Then
94            If cboPlanPaqueteCirugia.ListIndex <> -1 And OptPaqueteOtros(0).Value Then
95                llngCvePaquete = cboPlanPaqueteCirugia.ItemData(cboPlanPaqueteCirugia.ListIndex)
96            End If
97        Else
98            If cboPlanPaqueteCirugia.ListIndex <> -1 Then
99                llngCvePaquete = cboPlanPaqueteCirugia.ItemData(cboPlanPaqueteCirugia.ListIndex)
100           End If
101       End If

102       llngCveConcepto = 0
103       If cboPlanPaqueteCirugia.ListIndex <> -1 And OptPaqueteOtros(1).Value And vlstrIngresoSeleccionado <> vlstrTipoIngresoPrevio Then
104           llngCveConcepto = cboPlanPaqueteCirugia.ItemData(cboPlanPaqueteCirugia.ListIndex)
105       End If

106       llngCveCuarto = 0
107       If cboTipoIngreso.ListIndex > -1 Then
108           If fraAsignacionCuarto.Enabled And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveUrgencias And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveExterno And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveConsultaExterna Then
109              If RSAdSelCuartoApropiado.State = 1 Then
110                   If RSAdSelCuartoApropiado.EOF = True Then
111                       blnValidaDatos = False
112                       Exit Sub
113                   End If
                      
114                   llngCveCuarto = RSAdSelCuartoApropiado!ClaveCuarto
115              End If
116           ElseIf chkAsignarCuarto.Value = 1 And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias Then
117               If RSAdSelCuartoApropiado.State = 1 Then
118                   If RSAdSelCuartoApropiado.EOF = True Then
119                       blnValidaDatos = False
120                       Exit Sub
121                   End If
                      
122                   llngCveCuarto = RSAdSelCuartoApropiado!ClaveCuarto
123               End If
124           End If
125       End If

126       lstrTipoAtencion = IIf(OptPaqueteOtros(0).Value, "P", "O")
          
127       llngCveTipoConvenio = 0
128       If cboTipoConvenio.ListIndex > -1 Then
129           llngCveTipoConvenio = cboTipoConvenio.ItemData(cboTipoConvenio.ListIndex)
130       End If

131       llngCveParentescoEmergencia = 0
132       If cboParentescoFamiliarEmergencia.ListIndex <> -1 Then
133           llngCveParentescoEmergencia = cboParentescoFamiliarEmergencia.ItemData(cboParentescoFamiliarEmergencia.ListIndex)
134           If lblnHabilitarFechaNacimiento Then
135               If llngCveParentescoEmergencia = llngCveParentescoPadre Then
136                   lstrNacimientoEmergencia = lstrNacimientoPadre
137               ElseIf llngCveParentescoEmergencia = llngCveParentescoMadre Then
138                   lstrNacimientoEmergencia = lstrNacimientoMadre
139               ElseIf llngCveParentescoEmergencia = llngCveParentescoConyuge Then
140                   lstrNacimientoEmergencia = lstrNacimientoConyuge
141               End If
142           End If
143       End If
144       If llngCveParentescoResponsable > 0 And lblnHabilitarFechaNacimiento Then
145           If lblnHabilitarFechaNacimiento Then
146               If llngCveParentescoResponsable = llngCveParentescoPadre Then
147                   lstrNacimientoResponsable = lstrNacimientoPadre
148               ElseIf llngCveParentescoResponsable = llngCveParentescoMadre Then
149                   lstrNacimientoResponsable = lstrNacimientoMadre
150               ElseIf llngCveParentescoEmergencia = llngCveParentescoConyuge Then
151                   lstrNacimientoResponsable = lstrNacimientoConyuge
152               End If
153           End If
154       End If
          
155       lintCveDeptoIngreso = 0
156       If cboDeptoIngreso.ListIndex > -1 Then
157           lintCveDeptoIngreso = cboDeptoIngreso.ItemData(cboDeptoIngreso.ListIndex)
158       End If
          
159       llngCveOcupacion = 0
160       If cboOcupacion.ListIndex > -1 Then
161           llngCveOcupacion = cboOcupacion.ItemData(cboOcupacion.ListIndex)
162       End If
          
163       llngCveIdioma = 0
164       If cboIdioma.ListIndex > -1 Then
165           llngCveIdioma = cboIdioma.ItemData(cboIdioma.ListIndex)
166       End If
          
167       lstrAlergias = ""
168       If lstAlergias.ListCount > 0 Then
169           For intcontador = 0 To lstAlergias.ListCount - 1
170               lstrAlergias = lstrAlergias & IIf(intcontador = 0, "", ",") & lstAlergias.List(intcontador)
171           Next intcontador
172       End If

      '===================================== INTERFAZ AXA =====================================
173       If cboTipoIngreso.ListIndex > -1 Then
              'Se valida si el paciente tiene licencia para el ingreso por WS
174           If vglngCveInterfazWS > 0 And ((cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveInternamientoNormal Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCvePrevio Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveInternoFueUrgencias) Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias) Then
          
          '    ' - Número de proveedor AXA
          '        Set rsInterfazWS = frsEjecuta_SP(cboEmpresa.ItemData(cboEmpresa.ListIndex) & "|" & "PROVEEDOR", "SP_SISELEQUIVALENCIA")
          '        If rsInterfazWS.RecordCount = 0 Then
          '            '¡No ha ingresado datos!
          '            MsgBox SIHOMsg(2) & vbCrLf & "PROVEEDOR AXA", vbInformation + vbOKOnly, "Mensaje"
          '        Else
          '            vgstrProveedorAXA = Trim(rsInterfazWS!Clave)
          '        End If
              
              ' - Número de contrato AXA
175               Set rsInterfazWS = frsEjecuta_SP(cboEmpresa.ItemData(cboEmpresa.ListIndex) & "|" & "CONTRATO", "SP_SISELEQUIVALENCIA")
176               If rsInterfazWS.RecordCount = 0 Then
                      '¡No ha ingresado datos!
177                   MsgBox SIHOMsg(2) & vbCrLf & "No se ha configurado la clave de contrato configurada para la empresa del paciente.", vbInformation + vbOKOnly, "Mensaje"
178               Else
179                   vgstrContratoAXA = Trim(rsInterfazWS!Clave)
180               End If
              
              ' - Número de control (número de nómina AXA)
181               If lblNumeroControl.Enabled And Trim(txtNumeroControl.Text) <> "" Then
182                   vgstrControlAXA = Trim(txtNumeroControl.Text)
183               Else
                      '¡No ha ingresado datos!
184                   MsgBox SIHOMsg(2) & vbCrLf & "Número de control", vbInformation + vbOKOnly, "Mensaje"
185                   txtNumeroControl.SetFocus
186               End If
              
187               If llngCveMedicoEmergencias <> 0 Then
188                   vgstrMedicoEmergenciasAXA = Trim(cboMedicoEmergencias.Text) 'cboMedicoEmergencias.ItemData(cboMedicoEmergencias.ListIndex)
189               End If
              
190               If llngCveMedicoTratante <> 0 Then
191                   vgstrMedicoTratanteAXA = Trim(cboMedicoCargo.Text) 'cboMedicoCargo.ItemData(cboMedicoCargo.ListIndex)
192               End If
                  
              '- Validaciones especificas para ingreso de tipo "INTERNO FUÉ URGENCIAS"
193               If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveInternoFueUrgencias Then
                      ' - Número o nombre de la habitación
194                       If fraAsignacionCuarto.Enabled And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveUrgencias And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveExterno And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveConsultaExterna Then
195                          If RSAdSelCuartoApropiado.State = 1 Then
196                               If RSAdSelCuartoApropiado.EOF = True Then
197                                   blnValidaDatos = False
198                                   Exit Sub
199                               End If
                                  
200                               vgstrNumCuartoAXA = Trim(RSAdSelCuartoApropiado!NumeroCuarto)
201                          End If
202                       ElseIf chkAsignarCuarto.Value = 1 And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias Then
203                           If RSAdSelCuartoApropiado.State = 1 Then
204                               If RSAdSelCuartoApropiado.EOF = True Then
205                                   blnValidaDatos = False
206                                   Exit Sub
207                               End If
                                  
208                               vgstrNumCuartoAXA = Trim(RSAdSelCuartoApropiado!NumeroCuarto)
209                           End If
210                       End If
              
                      ' - Número de autorización ¿general o especial?
211                       If lblAutoriza.Enabled And Trim(txtAutoriza.Text) = "" And Mid(Trim(lblAutoriza.Caption), Len(Trim(lblAutoriza.Caption)), 1) = "*" Then
                              '¡No ha ingresado datos!
212                           MsgBox SIHOMsg(2) & vbCrLf & "Autoriza", vbInformation + vbOKOnly, "Mensaje"
213                           sstObj.Tab = 0
214                           MyTabHeader1.TabCurrent = 0
215                           txtAutoriza.SetFocus
216                       Else
217                           vgstrAutorizaGralAXA = Trim(txtAutoriza.Text)
218                       End If
                      
219               End If
          
220           End If
221       End If
      '================================================================================================================

   Exit Sub
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pAsignaValoresVariables" & " Linea:" & Erl()))
       Unload Me
End Sub

Private Sub pConsultaPuntosLealtad()
    Dim vlstrMensajePuntos As String
    Dim vldblMontoDisponiblePuntos As Double
    Dim rsPuntos As New ADODB.Recordset
    Dim vllngNumCuenta As Long
    Dim rs As New ADODB.Recordset
    Dim vllngCveTipoPaciente As Long
    Dim rsPuntosMedico As New ADODB.Recordset
    Dim vldblMontoDisponiblePuntosMed As Double
    Dim intCveMedicoRelacionado As Double
    Dim vldblMontoDisponiblePuntosPac As Double
    
    ' -- Caso 16801-R17041 --
    ' Muestra un mensaje informativo al usuario con los puntos con los que cuenta el paciente, en caso de tener
    ' la licencia activa para generar la lealtad del cliente y el médico con el hospital por medio del otorgamiento de puntos
    vlstrMensajePuntos = ""
    vldblMontoDisponiblePuntos = 0
    vldblMontoDisponiblePuntosPac = 0
    vldblMontoDisponiblePuntosMed = 0
    If blnLicenciaLealtadCliente Then
        If Val(txtCuentaInterno.Text) > 0 Then
            vllngNumCuenta = Val(txtCuentaInterno.Text)
        ElseIf Val(txtCuentaExterno.Text) > 0 Then
            vllngNumCuenta = Val(txtCuentaExterno.Text)
        End If
        '-- puntos paciente
        vgstrParametrosSP = vllngNumCuenta & "|1|-1"
        Set rsPuntos = frsEjecuta_SP(vgstrParametrosSP, "SP_PVSELPUNTOSDISPONIBLES")

        If rsPuntos.RecordCount > 0 Then vldblMontoDisponiblePuntosPac = rsPuntos!puntosDisponibles
        rsPuntos.Close
        
        vlstrSentencia = "select pi.intcvetipoingreso, pi.intcvetipopaciente, nvl(pi.intCveMedicoRelacionado, 0) intCveMedicoRelacionado, tp.bitfamiliar, tp.chrtipo from ExPacienteIngreso pi inner join AdTipoPaciente tp on pi.intcvetipopaciente = tp.tnycvetipopaciente where pi.intNumCuenta = " & vllngNumCuenta
        Set rs = frsRegresaRs(vlstrSentencia, adOpenDynamic, adLockOptimistic)
        If rs.RecordCount > 0 Then
            vllngCveTipoPaciente = rs!intCveTipoPaciente
    
            If (rs!bitFamiliar = 1 And rs!chrTipo = "ME") Or rs!chrTipo = "ME" Then
                '-- puntos medico o familiar de médico
                intCveMedicoRelacionado = rs!intCveMedicoRelacionado
                vgstrParametrosSP = vllngNumCuenta & "|0|" & intCveMedicoRelacionado
                Set rsPuntosMedico = frsEjecuta_SP(vgstrParametrosSP, "SP_PVSELPUNTOSDISPONIBLES")
        
                If rsPuntosMedico.RecordCount > 0 Then vldblMontoDisponiblePuntosMed = rsPuntosMedico!puntosDisponiblesMed
                rsPuntosMedico.Close
            End If
        End If
        If (vldblMontoDisponiblePuntosPac + vldblMontoDisponiblePuntosMed) > 0 Then
            vldblMontoDisponiblePuntos = ((vldblMontoDisponiblePuntosPac + vldblMontoDisponiblePuntosMed) * fdblValorPuntoLealtad)
            If vldblMontoDisponiblePuntos > 0 Then
                '"Este paciente cuenta con 9999 acumulados los cuales equivalen a $9999.99 para ser aplicados en este ingreso."
                vlstrMensajePuntos = "Este paciente cuenta con " & (vldblMontoDisponiblePuntosPac + vldblMontoDisponiblePuntosMed) & " puntos acumulados, los cuales equivalen a " & Format(vldblMontoDisponiblePuntos, "$ ###,###,###,###.00") & " para ser aplicados en este ingreso."
                MsgBox vlstrMensajePuntos, vbOKOnly + vbInformation, "Mensaje"
            End If
        End If
    End If
        
End Sub

Private Sub pVerificaNombre()
1     On Error GoTo NotificaError

          Dim rsUltimaCuenta As New ADODB.Recordset
          Dim rsCuenta As New ADODB.Recordset
          Dim vllngAdeudosAnteriores As Long
          Dim vllngExpediente As Long
          
2         If Not vlblnConsulta And vlstrIngresoSeleccionado <> vlstrTipoIngresoRecienNacido Then
3             If fblnDatosCompletosNombre() Then

4                 vlblnPacienteValidado = True
5                 llngCvePreRegistro = 0
                  
6                 With frmPacienteMismoNombre
7                     .vllngNumeroExpediente = 0
8                     .vllngNumeroCuenta = 0
9                     .vlstrEstadoAdmision = ""
10                    .vlblnIngresoPrevio = False
11                    .vlstrNombreBuscar = Trim(txtNombre.Text)
12                    .vlstrPaternoBuscar = Trim(txtApellidoPaterno.Text)
13                    .vlstrMaternoBuscar = Trim(txtApellidoMaterno.Text)
14                    .lblnMotrarPreregistro = False
15                    .Show vbModal, Me
                      
16                    Unload frmPacienteMismoNombre
                      
                      '======================================================
                      'Mostrar los datos del paciente en AdPaciente
                      '======================================================
17                    If .vllngNumeroExpediente <> 0 Then
18                        vgstrParametrosSP = Str(.vllngNumeroExpediente) & "|" & Str(vgintClaveEmpresaContable) & "|" & IIf(.vlstrEstadoAdmision <> "X", "I", "E")
19                        vllngAdeudosAnteriores = frsEjecuta_SP(vgstrParametrosSP, "SP_ADSELADEUDOPACIENTE")!ImporteAdeudo
                          
20                        If vllngAdeudosAnteriores > 0 Then
                              'Este paciente tiene adeudos anteriores $#00.00. Favor de avisar a caja.
21                            MsgBox Mid(SIHOMsg(605), 1, 20) & "adeudos anteriores por " & Format(vllngAdeudosAnteriores, "$###,##0.00") & ". Favor de avisar a caja.", vbInformation + vbOKOnly, "Mensaje"
22                        End If
                          
23                        pDatosPacientes .vllngNumeroExpediente
24                        vllngExpediente = .vllngNumeroExpediente
                          
                          'Si es AD y es interno, se cargan los datos de la cuenta
25                        If cgstrModulo = "AD" And (.vlstrEstadoAdmision = "A" Or .vlstrEstadoAdmision = "P") And Not .vlblnIngresoPrevio Then
26                            vlblnDatosCapturados = True
                              'Tipo de paciente
27                            pDatosIngreso .vllngNumeroCuenta, "I"
28                        Else
                              'Buscar la última cuenta
29                            Set rsUltimaCuenta = frsEjecuta_SP(CStr(.vllngNumeroExpediente) & "|" & vgintClaveEmpresaContable & "|" & vgintNumeroDepartamento, "sp_GnSelUltimaCuentaPaciente")
30                            If Not rsUltimaCuenta.EOF Then
31                                vgstrParametrosSP = Str(rsUltimaCuenta!cuenta) & "|" & rsUltimaCuenta!tipo
32                                Set rsCuenta = frsEjecuta_SP(vgstrParametrosSP, "Sp_ExSelPacienteIngreso")
33                                If rsCuenta.RecordCount > 0 Then
34                                    With rsCuenta
35                                        If !chrEstatus = "A" And (cgstrModulo = "AD" Or rsUltimaCuenta!tipo = "E") Then
                                              'Es externo y tiene cuenta abierta, se cargan los datos
36                                            If rsUltimaCuenta!CveTipo = clngCveConsultaExterna Then
                                              'Solo debe cargar los datos del paciente, no la cuenta
                                              'O mostrarle una opcion para que elija si quiere ver la cuenta de consulta externa o cree una nueva cuenta
37                                            Else
38                                                 pDatosIngreso rsUltimaCuenta!cuenta, rsUltimaCuenta!tipo
39                                            End If
40                                        Else
                                              'Carga algunos datos de la última cuenta del paciente
41                                            pDatosUltimaCuenta rsUltimaCuenta!cuenta, rsUltimaCuenta!tipo
42                                            pCargaFamiliar Str(vllngExpediente), Str(rsUltimaCuenta!cuenta)
43                                        End If
44                                    End With
45                                End If
46                            Else
                              'Externo, no tiene cuenta solo se registraron los datos
47                                vlstrTipoPacienteConsultado = "E"
                                  'Dependiendo del módulo, es el tipo de ingreso predeterminado
48                                If cgstrModulo = "LA" Or cgstrModulo = "IM" Or cgstrModulo = "PV" Or cgstrModulo = "CC" Or cgstrModulo = "BS" Then
49                                    cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveExterno)
50                                Else
51                                    cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveUrgencias)
52                                End If
                                  
53                                pCargaFamiliar Str(vllngExpediente)
54                            End If
55                            rsUltimaCuenta.Close
56                        End If
                          
57                        OptEnvioPromo(0).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnSiEnvioPromo)
58                        OptEnvioPromo(1).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnNoEnvioPromo)
59                    End If
60                End With
                  
61                If fblnCanFocus(txtNombre) Then
62                    txtNombre.SetFocus
63                Else
64                    pEnfocaMkTexto mskFechaNacimiento
65                End If
66            End If
67        Else
68            If fblnCanFocus(txtNombre) Then txtNombre.SetFocus
69        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pVerificaNombre" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub cboCiudadNacimiento_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
End Sub

Private Sub cboDeptoIngreso_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
End Sub

Private Sub cboEmpresa_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
    If Len(cboEmpresa.Text) > 45 Then
            cboEmpresa.Width = 12750
            Cmdrequisitos.Visible = False
            OptPaqueteOtros(0).Visible = False
            OptPaqueteOtros(1).Visible = False
            cboPlanPaqueteCirugia.Visible = False
        End If
End Sub


Private Sub cboEmpresaPaciente_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
End Sub

Private Sub cboEstadoCivil_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
End Sub

Private Sub cboEstadoCuartoActual_KeyPress(KeyAscii As Integer)
On Error GoTo NotificaError

    If KeyAscii = vbKeyReturn Then cmdGrabar.SetFocus
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboEstadoCuartoActual_KeyPress"))
    Unload Me
End Sub

Private Sub cboFamiliar_Click()
On Error GoTo NotificaError

    If cboFamiliar.ListIndex > -1 And Not vlblnConsulta And Not vlblnDatosCapturados Then
        pLimpiaDatosEmpleadoMedico 'Limpiar los datos del Empleado o Médico para agregar los del familiar
    End If

    Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboFamiliar_Click"))
    Unload Me
End Sub

Private Sub cboFamiliar_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If Trim(mskFechaNacimiento.ClipText) <> "" Then
            SendKeys vbTab
        Else
            If fblnCanFocus(txtApellidoPaterno) Then
                txtApellidoPaterno.SetFocus
            Else
                'Enfocar fecha nac. para capturar los datos faltantes del familiar
                pEnfocaMkTexto mskFechaNacimiento
            End If
        End If
    End If
End Sub

Private Sub cboFamiliar_LostFocus()
1     On Error GoTo NotificaError

2         If cboFamiliar.ListIndex > -1 And Not vlblnConsulta And Not vlblnDatosCapturados Then
3             If rsFamiliar.State <> adStateClosed Then rsFamiliar.Close
              
4             pLimpiaDatosEmpleadoMedico 'Limpiar los datos del Empleado o Médico para agregar los del familiar
              
              'Llenar los datos generales de ingreso con los datos del familiar del empleado
5             vlstrSentencia = "SELECT INTCVEFAMILIAR, VCHAPELLIDOPATERNO, VCHAPELLIDOMATERNO, VCHNOMBRE " & _
                               " FROM NOFAMILIAREMPLEADO " & _
                               " WHERE INTCVEFAMILIAR = " & Str(cboFamiliar.ItemData(cboFamiliar.ListIndex))
6             Set rsFamiliar = frsRegresaRs(vlstrSentencia)
7             If rsFamiliar.RecordCount <> 0 Then
8                 vllngCveFamiliar = rsFamiliar!intCveFamiliar
9                 txtApellidoPaterno.Text = rsFamiliar!vchApellidoPaterno
10                txtApellidoMaterno.Text = IIf(Not IsNull(rsFamiliar!vchApellidoMaterno), rsFamiliar!vchApellidoMaterno, "")
11                txtNombre.Text = rsFamiliar!vchNombre
                  
                  'Revisa si el nombre ya ha sido ingresado con anterioridad para
                  'conservar su número de expediente
12                pVerificaNombre
                  
                  'Inhabilitar los datos generales del paciente'
13                txtApellidoPaterno.Enabled = False
14                txtApellidoMaterno.Enabled = (txtApellidoMaterno.Text = "")
15                txtNombre.Enabled = False
                  
16                cboRelacion.Enabled = False
17                cboTipoPaciente.Enabled = False
18                cboFamiliar.Enabled = False
                  
19            Else
20                vllngCveFamiliar = 0 'Valor por defecto de la clave de familiar
                  
                  'Habilitar los datos generales del paciente'
21                txtApellidoPaterno.Enabled = True
22                txtApellidoMaterno.Enabled = True
23                txtNombre.Enabled = True
24            End If
25            rsFamiliar.Close
26        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboFamiliar_LostFocus" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub cboFormaNac_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
End Sub

Private Sub cboFormaNac_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        SendKeys vbTab
    End If
End Sub

Private Sub cboIdioma_Click()
    llngCveIdioma = 0
    If cboIdioma.ListIndex <> -1 Then
        llngCveIdioma = cboIdioma.ItemData(cboIdioma.ListIndex)
    End If
End Sub

Private Sub cboIdioma_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
End Sub

Private Sub cboIdioma_KeyDown(KeyCode As Integer, Shift As Integer)
1     On Error GoTo NotificaError
          Dim lngUltimaClave As Long
          
2         If KeyCode = vbKeyReturn Then
3             If cboIdioma.ListIndex <> -1 Then
4                 If cboIdioma.ItemData(cboIdioma.ListIndex) = 0 Then
5                     frmMantoTresCampos.vlblnVisualizarCboCatalogos = False
6                     frmMantoTresCampos.vlstrModulo = "AD"
7                     frmMantoTresCampos.vllngCveCatalogo = 80
8                     frmMantoTresCampos.Show vbModal, Me
                      
9                     pLlenaIdiomas
                  
10                    lngUltimaClave = frsRegresaRs("Select IsNull(Max(intCveIdioma),0) From GnIdiomas Where bitActivo = 1").Fields(0)
11                    If cgstrModulo = "AD" Then '|  Admisión siempre tiene la opción <AGREGAR> por eso cuando no hay idiomas se selecciona esta opción por defecto
12                        cboIdioma.ListIndex = IIf(lngUltimaClave = 0, IIf(cboIdioma.ListCount = 1, 0, vglngCveIdioma), flngLocalizaCbo_new(cboIdioma, Str(lngUltimaClave)))
13                    Else '|  Los demás módulos no tienen la opción <AGREGAR> por eso cuando no hay idiomas pone vacío
14                        cboIdioma.ListIndex = IIf(lngUltimaClave = 0, IIf(cboIdioma.ListCount = 0, -1, vglngCveIdioma), flngLocalizaCbo_new(cboIdioma, Str(lngUltimaClave)))
15                    End If
                      
16                Else
17                    SendKeys vbTab
18                End If
19            Else
20                SendKeys vbTab
21            End If
22        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboIdioma_KeyDown" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub cboMadre_KeyDown(KeyCode As Integer, Shift As Integer)
1     On Error GoTo NotificaError

2         If KeyCode = vbKeyReturn Then
          
3             If cboTipoPaciente.ListIndex <> -1 Then
4                 If vlUsaSocios = True And vgLngTipoPacienteSocio = Str(cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex)) Then 'Si es un socio, no recarga nada, manda el foco al combo de socios
5                     cboSocio.SetFocus
6                     Exit Sub
7                 End If
8             End If
              
              'Si es recién nacido
9             If vlstrIngresoSeleccionado = vlstrTipoIngresoRecienNacido Then
10                If txtApellidoPaterno.Enabled Then txtApellidoPaterno.SetFocus
11            Else
                  'Si es empleado
12                If vlstrTipoTipoPaciente = "EM" Then
13                    If vlblnFamiliar Then
14                        If fblnCanFocus(cboFamiliar) Then cboFamiliar.SetFocus  'Si es familiar del empleado
15                    Else
16                        If fblnCanFocus(cboOcupacion) Then cboOcupacion.SetFocus
17                    End If
                      
                  'Si es médico
18                ElseIf vlstrTipoTipoPaciente = "ME" Then
19                    If vlblnFamiliar Then
20                        If fblnCanFocus(cboFamiliar) Then cboFamiliar.SetFocus 'Si es familiar del médico
21                    Else
22                        If fblnCanFocus(mskFechaNacimiento) Then mskFechaNacimiento.SetFocus
23                    End If
                  'Otros
24                Else
25                    If txtAutoriza.Enabled Then
26                        txtAutoriza.SetFocus
27                    Else
28                        txtNumeroControl.SetFocus
29                    End If
30                End If
31            End If
32        End If
          
    Exit Sub
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboMadre_KeyDown" & " Linea:" & Erl()))
       Unload Me
End Sub

Private Sub cboMadre_LostFocus()
1     On Error GoTo NotificaError
          Dim rsMama As New ADODB.Recordset
          Dim rsAdmisionMama As New ADODB.Recordset
          Dim rsEmpleado As New ADODB.Recordset
          Dim rsMedico As New ADODB.Recordset
          
          Dim vllngCveEstadoCivilSoltero As Long
          Dim vllngCveEstadoCivilCasado As Long
          Dim vlintTipoConvenio As Integer
          Dim vlintEmpresa As Integer
          
          Dim vlStrTipoPaciente As String
          Dim vllngCveEmpleado As Long
          Dim vllngCveMedico As Long
          
          Dim vlstrValidaCboTipoPaiente As String ' agregada caso 6860
          Dim vlintcveemplseleccionado As Integer
          Dim vlintTipoConvSeleccionado As Integer
          Dim vlintcveEmprSeleccionado As Integer
          Dim vlintcveEmprPacSeleccionado As Integer
          
2         If cboMadre.ListIndex <> -1 Then
              '***** RECIÉN NACIDO *****'
3             If vlstrIngresoSeleccionado = vlstrTipoIngresoRecienNacido Then
              
                  '###############################################################################################################
4                 If cboTipoPaciente.ListIndex = -1 Then ' validacion para cuando no se tiene seleccionado el tipo de paciente
5                      vlstrValidaCboTipoPaiente = "-1" ' se hacia la validacion directamente, se marcaba un error
6                 Else
7                      vlstrValidaCboTipoPaiente = CStr(cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex)) ' caso 6860
8                 End If
                  '#########################################################################################################
                  
                  
9                 If vlUsaSocios = True And vgLngTipoPacienteSocio = vlstrValidaCboTipoPaiente Then 'Si es un socio, no recarga nada, manda el foco al combo de socios
10                     Exit Sub
11                Else
                      '--------------------------------------------------------------
                      'Asignación de datos de la mamá a la admisión del recién nacido
                      'El campo numnumcuentarel de adadmision almacena la cuenta de
                      'y no la clave de paciente de la mamá
                      '--------------------------------------------------------------
12                        If Not vlblnConsulta Then
                                             
13                            mskNacimientoMadre.Mask = ""
14                            mskNacimientoMadre.Text = ""
15                            mskNacimientoMadre.Mask = "##/##/####"
                              
16                            txtMadre.Text = cboMadre.List(cboMadre.ListIndex)
                              
17                            vgstrParametrosSP = cboMadre.ItemData(cboMadre.ListIndex)
18                            Set rsMama = frsEjecuta_SP(vgstrParametrosSP, "Sp_AdSelDatosMama")
19                            If rsMama.RecordCount <> 0 And Not vlblnDatosCapturados Then
20                                With rsMama
21                                    mskNacimientoMadre.Mask = ""
22                                    If Not IsNull(!dtmFechaNacimiento) Then
23                                        mskNacimientoMadre.Text = !dtmFechaNacimiento
24                                    End If
25                                    mskNacimientoMadre.Mask = "##/##/####"
                                  
26                                    vllngCveEstadoCivilSoltero = frsRegresaRs("select intCveEstadoCivil from SiEstadoCivil where bitSoltero = 1").Fields(0)
27                                    vllngCveEstadoCivilCasado = frsRegresaRs("select intCveEstadoCivil from SiEstadoCivil where bitCasado = 1").Fields(0)
                                      
28                                    cboEstadoCivil.ListIndex = flngLocalizaCbo_new(cboEstadoCivil, Str(vllngCveEstadoCivilSoltero))
                                      
29                                    txtApellidoPaterno.Text = IIf(IsNull(!vchConyugeApellidoPaterno), "", Trim(!vchConyugeApellidoPaterno))
30                                    txtApellidoMaterno.Text = IIf(IsNull(!vchApellidoPaterno), "", !vchApellidoPaterno)
31                                    txtNombre.Text = ""
                                      
32                                    mskFechaNacimiento.Mask = ""
33                                    mskFechaNacimiento.Text = fdtmServerFecha
34                                    mskFechaNacimiento.Mask = "##/##/####"
                                      
35                                    If IIf(IsNull(!intCveReligion), 0, !intCveReligion) <> 0 Then
36                                        cboReligion.ListIndex = flngLocalizaCbo_new(cboReligion, Str(!intCveReligion))
37                                    End If
                                      
38                                    Set rs = frsEjecuta_SP(CStr(!intnumpaciente) & "|1", "SP_EXSELDOMICILIOPACIENTE")
39                                    If rs.RecordCount > 0 Then
40                                        txtCalle.Text = Trim(IIf(IsNull(rs!vchCalle), "", rs!vchCalle))
41                                        txtNumeroExterior.Text = Trim(IIf(IsNull(rs!VCHNUMEROEXTERIOR), "", rs!VCHNUMEROEXTERIOR))
42                                        txtNumeroInterior.Text = Trim(IIf(IsNull(rs!VCHNUMEROINTERIOR), "", rs!VCHNUMEROINTERIOR))
43                                        txtColonia.Text = Trim(IIf(IsNull(rs!VCHCOLONIA), "", rs!VCHCOLONIA))
44                                        txtCodigoPostal.Text = Trim(IIf(IsNull(rs!VCHCODIGOPOSTAL), "", rs!VCHCODIGOPOSTAL))
45                                        cboCiudad.ListIndex = flngLocalizaCbo_new(cboCiudad, Str(IIf(IsNull(rs!INTCVECIUDAD), 0, rs!INTCVECIUDAD)))
46                                    Else
47                                        txtCalle.Text = ""
48                                        txtNumeroExterior.Text = ""
49                                        txtNumeroInterior.Text = ""
50                                        txtColonia.Text = ""
51                                        txtCodigoPostal.Text = ""
52                                        cboCiudad.ListIndex = flngLocalizaCbo_new(cboCiudad, Str(vgintCveCiudadCH))
53                                    End If
54                                    rs.Close
                                      
55                                    Set rs = frsEjecuta_SP(!intnumpaciente & "|1", "SP_EXSELTELEFONOPACIENTE")
56                                    If rs.RecordCount > 0 Then
57                                        txtTelefono.Text = Trim(IIf(IsNull(rs!vchTelefono), "", rs!vchTelefono))
58                                    Else
59                                        txtTelefono.Text = ""
60                                    End If
61                                    rs.Close
                          
62                                    Set rs = frsEjecuta_SP(CStr(!intnumpaciente) & "|2", "SP_EXSELDOMICILIOPACIENTE")
63                                    If rs.RecordCount > 0 Then
64                                        chkForaneo.Value = 1
65                                        txtDomicilioForaneo.Text = Trim(IIf(IsNull(rs!vchCalle), "", rs!vchCalle))
66                                        txtColoniaForanea.Text = Trim(IIf(IsNull(rs!VCHCOLONIA), "", rs!VCHCOLONIA))
67                                        txtCodigoPostalForaneo.Text = Trim(IIf(IsNull(rs!VCHCODIGOPOSTAL), "", rs!VCHCODIGOPOSTAL))
68                                        cboCiudadForanea.ListIndex = flngLocalizaCbo_new(cboCiudadForanea, Str(IIf(IsNull(rs!INTCVECIUDAD), 0, rs!INTCVECIUDAD)))
                                          
69                                        Set rs = frsEjecuta_SP(!intnumpaciente & "|2", "SP_EXSELTELEFONOPACIENTE")
70                                        If rs.RecordCount > 0 Then
71                                            txtTelefonoForaneo.Text = Trim(IIf(IsNull(rs!vchTelefono), "", rs!vchTelefono))
72                                        Else
73                                            txtTelefonoForaneo.Text = ""
74                                        End If
75                                        rs.Close
76                                    Else
77                                        chkForaneo.Value = 0
78                                        txtDomicilioForaneo.Text = ""
79                                        txtColoniaForanea.Text = ""
80                                        txtCodigoPostalForaneo.Text = ""
81                                        txtTelefonoForaneo.Text = ""
82                                        cboCiudadForanea.ListIndex = flngLocalizaCbo_new(cboCiudadForanea, 0)
83                                        rs.Close
84                                    End If
                                      
85                                    txtPadre.Text = ""
86                                    If !intCveEstadoCivil = vllngCveEstadoCivilCasado Then
87                                        txtPadre.Text = IIf(IsNull(Trim(!vchConyugeNombre) + Trim(!vchConyugeApellidoPaterno) + Trim(!vchConyugeApellidoMaterno)), "", Trim(!vchConyugeApellidoPaterno) + " " + Trim(!vchConyugeApellidoMaterno) + " " + Trim(!vchConyugeNombre))
88                                    End If
                                  
89                                    txtNombreEmergencia.Text = IIf(IsNull(!VCHNOMBREEMERGENCIA), "", !VCHNOMBREEMERGENCIA)
90                                    If IIf(IsNull(!intCveParentescoEmergencia), 0, !intCveParentescoEmergencia) <> 0 Then
91                                        cboParentescoFamiliarEmergencia.ListIndex = flngLocalizaCbo_new(cboParentescoFamiliarEmergencia, Str(!intCveParentescoEmergencia))
92                                    End If
                                      
93                                    txtDomicilioEmergencia.Text = IIf(IsNull(!vchDomicilioEmergencia), "", !vchDomicilioEmergencia)
94                                    txtTelefonoEmergencia.Text = IIf(IsNull(!vchTelefonoEmergencia), "", !vchTelefonoEmergencia)
                                              
95                                    txtNombreResponsable.Text = IIf(IsNull(!vchNombreResponsable), "", !vchNombreResponsable)
96                                    If IIf(IsNull(!intCveParentescoResponsable), 0, !intCveParentescoResponsable) <> 0 Then
97                                        cboParentescoFamiliarResponsable.ListIndex = flngLocalizaCbo_new(cboParentescoFamiliarResponsable, Str(!intCveParentescoResponsable))
98                                    End If
                                      
99                                    txtDomicilioResponsable.Text = IIf(IsNull(!vchDomicilioResponsable), "", !vchDomicilioResponsable)
100                                   txtTelefonoResponsable.Text = IIf(IsNull(!vchTelefonoResponsable), "", !vchTelefonoResponsable)
101                                   txtLugarTrabajoResponsable.Text = IIf(IsNull(!vchLugarTrabajoResponsable), "", !vchLugarTrabajoResponsable)
                                              
102                                   If IIf(IsNull(!intCveTipoPaciente), 0, !intCveTipoPaciente) <> 0 Then
103                                       vlintcveemplseleccionado = 0
104                                       If cboRelacion.ListIndex <> -1 Then vlintcveemplseleccionado = cboRelacion.ItemData(cboRelacion.ListIndex)
105                                       vlintTipoConvSeleccionado = 0
106                                       If cboTipoConvenio.ListIndex <> -1 Then vlintTipoConvSeleccionado = cboTipoConvenio.ItemData(cboTipoConvenio.ListIndex)
107                                       vlintcveEmprSeleccionado = 0
108                                       If cboEmpresa.ListIndex <> -1 Then vlintcveEmprSeleccionado = cboEmpresa.ItemData(cboEmpresa.ListIndex)
109                                       vlintcveEmprPacSeleccionado = 0
110                                       If cboEmpresaPaciente.ListIndex <> -1 Then vlintcveEmprPacSeleccionado = cboEmpresaPaciente.ItemData(cboEmpresaPaciente.ListIndex)
                                          
111                                       cboTipoPaciente.ListIndex = flngLocalizaCbo_new(cboTipoPaciente, Str(!intCveTipoPaciente))
112                                       If cboTipoPaciente.ListIndex = -1 Then
                                              'Si el tipo de paciente de la madre no está en la lista cboTipoPaciente
                                              'entonces vuelve a asignar los valores seleccionados
113                                           cboTipoPaciente.ListIndex = flngLocalizaCbo_new(cboTipoPaciente, Str(vlstrValidaCboTipoPaiente))
114                                           If (vlstrTipoTipoPaciente = "EM" Or vlstrTipoTipoPaciente = "ME") And vlblnFamiliar And vlintcveemplseleccionado <> 0 Then
115                                               cboRelacion.ListIndex = flngLocalizaCbo_new(cboRelacion, Str(IIf(IsNull(vlintcveemplseleccionado), 0, vlintcveemplseleccionado)))
116                                           End If
117                                           If vlintTipoConvSeleccionado <> 0 Then cboTipoConvenio.ListIndex = flngLocalizaCbo_new(cboTipoConvenio, Str(IIf(IsNull(vlintTipoConvSeleccionado), 0, vlintTipoConvSeleccionado)))
118                                           If vlintcveEmprSeleccionado <> 0 Then cboEmpresa.ListIndex = flngLocalizaCbo_new(cboEmpresa, Str(IIf(IsNull(vlintcveEmprSeleccionado), 0, vlintcveEmprSeleccionado)))
119                                           If vlintcveEmprPacSeleccionado <> 0 Then cboEmpresaPaciente.ListIndex = flngLocalizaCbo_new(cboEmpresaPaciente, Str(IIf(IsNull(vlintcveEmprPacSeleccionado), 0, vlintcveEmprPacSeleccionado)))
120                                       Else
121                                           If (vlstrTipoTipoPaciente = "EM" Or vlstrTipoTipoPaciente = "ME") And vlblnFamiliar Then
122                                               cboRelacion.ListIndex = flngLocalizaCbo_new(cboRelacion, Str(IIf(IsNull(!intCveEmpleadoRelacionado), 0, !intCveEmpleadoRelacionado)))
123                                           End If
124                                       End If
125                                   End If
                                      
126                                   If IIf(IsNull(!intCveTipoConvenio), 0, !intCveTipoConvenio) <> 0 Then
127                                       cboTipoConvenio.ListIndex = flngLocalizaCbo_new(cboTipoConvenio, Str(!intCveTipoConvenio))
128                                   End If
                                      
129                                   If IIf(IsNull(!intcveempresa), 0, !intcveempresa) <> 0 Then
130                                       cboEmpresa.ListIndex = flngLocalizaCbo_new(cboEmpresa, Str(!intcveempresa))
131                                   End If
                                      
132                                   vlblnDatosCapturados = False
133                               End With
134                           End If
135                       End If
136                   End If
137           End If
138       End If

   Exit Sub
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboMadre_LostFocus" & " Linea:" & Erl()))
       Unload Me
End Sub

Private Sub cboMedicoCargo_LostFocus()
On Error GoTo NotificaError

    If cboMedicoCargo.ListIndex >= 0 Then
        If cboMedicoCargo.ItemData(cboMedicoCargo.ListIndex) < 0 Then
            'No se puede asignar el médico seleccionado
            MsgBox SIHOMsg(1035) & vbCrLf, vbInformation + vbOKOnly, "Mensaje"
            'Se comento para que no validara de nuevo lo de credencializacion
            'cboMedicoCargo.ListIndex = 0
            'cboMedicoCargo.SetFocus
        End If
        
        pValidarCredencializacion cboMedicoCargo.ListIndex, True
        
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboMedicoCargo_LostFocus"))
    Unload Me
End Sub

Private Sub cboMedicoEmergencias_KeyDown(KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        If cboMedicoCargo.Enabled Then
            cboMedicoCargo.SetFocus
        Else
            If txtMotivoIngreso.Visible Then
                txtMotivoIngreso.SetFocus
            ElseIf chkAsignarCuarto.Enabled Then
                chkAsignarCuarto.SetFocus
            Else
                cmdGrabar.SetFocus
            End If
        End If
    End If
        
    Exit Sub
    
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboMedicoEmergencias_KeyDown"))
    Unload Me
End Sub

Private Sub cboMedicoEmergencias_LostFocus()
On Error GoTo NotificaError

    If cboMedicoEmergencias.ListIndex > 0 Then
    
        If cboMedicoEmergencias.ItemData(cboMedicoEmergencias.ListIndex) < 0 Then
            'No se puede asignar el médico seleccionado
           MsgBox SIHOMsg(1035) & vbCrLf, vbInformation + vbOKOnly, "Mensaje"
           'Se comento para que no validara de nuevo lo de credencializacion
           'cboMedicoEmergencias.ListIndex = 0
           'cboMedicoEmergencias.SetFocus
        End If
        
        pValidarCredencializacion cboMedicoEmergencias.ListIndex, False
        
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboMedicoEmergencias_LostFocus"))
    Unload Me
End Sub

Private Sub cboNacionalidad_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
End Sub

Private Sub cboOcupacion_Click()
On Error GoTo NotificaError

    llngCveOcupacion = 0
    If cboOcupacion.ListIndex <> -1 Then
        llngCveOcupacion = cboOcupacion.ItemData(cboOcupacion.ListIndex)
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboOcupacion_Click"))
    Unload Me
End Sub

Private Sub cboOcupacion_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
End Sub

Private Sub cboOcupacion_KeyDown(KeyCode As Integer, Shift As Integer)
1     On Error GoTo NotificaError
          Dim lngUltimaClave As Long
          
2         If KeyCode = vbKeyReturn Then
3             If cboOcupacion.ListIndex <> -1 Then
4                 If cboOcupacion.ItemData(cboOcupacion.ListIndex) = 0 Then
5                     frmMantoTresCampos.vlblnVisualizarCboCatalogos = False
6                     frmMantoTresCampos.vlstrModulo = "AD"
7                     frmMantoTresCampos.vllngCveCatalogo = 43
8                     frmMantoTresCampos.Show vbModal, Me
                      
9                     pLlenaOcupaciones
                  
10                    lngUltimaClave = frsRegresaRs("Select IsNull(Max(intClave),0) From Ocupacion Where bitStatus = 1").Fields(0)
11                    cboOcupacion.ListIndex = IIf(lngUltimaClave = 0, -1, flngLocalizaCbo_new(cboOcupacion, Str(lngUltimaClave)))
                  
12                Else
13                    txtAlergia.SetFocus
14                End If
15            Else
16                txtAlergia.SetFocus
17            End If
18        End If
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboOcupacion_KeyDown" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub cboRelacion_DropDown()
End Sub

Private Sub cboPlanPaqueteCirugia_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
    
    '****************caso 20330 ******************
    If OptPaqueteOtros(0).Value = True Then
        cboPlanPaqueteCirugia.Width = 12550 '12750
        cboPlanPaqueteCirugia.Left = 2200 '1995
        OptPaqueteOtros(0).Left = 75
        
        OptPaqueteOtros(1).Left = 1255
        cboEmpresa.Visible = False
    End If
    '*********************************************
End Sub

Private Sub cboPlanPaqueteCirugia_LostFocus()
'**********caso 20330 **********************
    If OptPaqueteOtros(0).Value = True Then
        cboPlanPaqueteCirugia.Width = 4860
        cboPlanPaqueteCirugia.Left = 9900
        OptPaqueteOtros(0).Left = 7845
        OptPaqueteOtros(1).Visible = True
        OptPaqueteOtros(1).Left = 9000
        cboEmpresa.Visible = True
    End If
 '********************************************
End Sub

Private Sub cboProcedencia_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
End Sub

Private Sub cboRelacion_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
If vlblnConsulta Then
    'MsgBox ("Si = " & vlblnConsulta)
    Exit Sub
Else
    'MsgBox ("No = " & vlblnConsulta)
End If
End Sub

Private Sub cboRelacion_LostFocus()
1     On Error GoTo NotificaError

      Dim rsEmpleado As New ADODB.Recordset
      Dim rsMedico As New ADODB.Recordset
      Dim vlStrTipoPaciente As String
      Dim vllngCveEmpleado As Long
      Dim vllngCveMedico As Long

2     If cboRelacion.ListIndex <> -1 And vlstrIngresoSeleccionado <> vlstrTipoIngresoRecienNacido Then

          '***** EMPLEADOS *****'
3         If vlstrTipoTipoPaciente = "EM" Then
              '--------------------------------------------------------------
              'Asignación de datos del empleado a la admisión
              '--------------------------------------------------------------
4             If Not vlblnConsulta And cboRelacion.ListIndex <> -1 Then
5                 vlstrSentencia = "Select * From NoEmpleado Where intCveEmpleado = " & Str(cboRelacion.ItemData(cboRelacion.ListIndex))
6                 Set rsEmpleado = frsRegresaRs(vlstrSentencia)
7                 If rsEmpleado.RecordCount <> 0 And Not vlblnDatosCapturados Then
8                     With rsEmpleado
9                         txtApellidoPaterno.Text = IIf(IsNull(!vchApellidoPaterno), "", !vchApellidoPaterno)
10                        txtApellidoMaterno.Text = IIf(IsNull(!vchApellidoMaterno), "", !vchApellidoMaterno)
11                        txtNombre.Text = IIf(IsNull(!vchNombre), "", !vchNombre)

                          'Revisa si el nombre ya ha sido ingresado con anterioridad
                          'para conservar su número de expediente
12                        If Not vlblnFamiliar Then
13                            pVerificaNombre
14                        End If

                          '- Agregado 13/Jul/2012 - Para caso no. 6655 - Familiar de empleado/médico -'
15                        txtApellidoPaterno.Enabled = (Trim(txtApellidoPaterno.Text) = "")
16                        txtApellidoMaterno.Enabled = (Trim(txtApellidoMaterno.Text) = "")
17                        txtNombre.Enabled = (Trim(txtNombre.Text) = "")
                          '---------------------------------------------------------------------------'

18                        mskFechaNacimiento.Mask = ""
19                        mskFechaNacimiento.Text = IIf(IsNull(!dtmFechaNacimiento), "", !dtmFechaNacimiento)
20                        mskFechaNacimiento.Mask = "##/##/####"

21                        If Not IsNull(!dtmFechaNacimiento) Then
22                            txtEdad.Text = fstrObtieneEdad(CDate(mskFechaNacimiento.Text), fdtmServerFecha)
23                        Else
24                            txtEdad.Text = ""
25                        End If

26                        optSexo(0).Value = IIf(Not IsNull(!chrSexo), !chrSexo = "M", False)
27                        optSexo(1).Value = IIf(Not IsNull(!chrSexo), !chrSexo = "F", False)

28                        mskRFC.Mask = ""
29                        mskRFC.Text = IIf(IsNull(!CHRRFC), "", !CHRRFC)
30                        txtCurp.Text = IIf(IsNull(!vchCURP), "", !vchCURP)

31                        If IIf(IsNull(!tnyestadoCivil), 0, !tnyestadoCivil) <> 0 Then
32                            cboEstadoCivil.ListIndex = flngLocalizaCbo_new(cboEstadoCivil, Str(!tnyestadoCivil))
33                        End If

34                        txtCalle.Text = IIf(IsNull(!chrCalle), "", Trim(!chrCalle))
35                        txtNumeroExterior.Text = IIf(IsNull(!VCHNUMEROEXTERIOR), "", Trim(!VCHNUMEROEXTERIOR))
36                        txtNumeroInterior.Text = IIf(IsNull(!VCHNUMEROINTERIOR), "", Trim(!VCHNUMEROINTERIOR))
37                        txtColonia.Text = IIf(IsNull(!chrColonia), "", !chrColonia)
38                        txtTelefono.Text = IIf(IsNull(!CHRTELEFONO), "", !CHRTELEFONO)
39                        txtCodigoPostal.Text = IIf(IsNull(!chrCodigoPostal), "", !chrCodigoPostal)
40                        txtPadre.Text = ""
41                        txtMadre.Text = ""
42                    End With
43                    If Not vlblnFamiliar Then
44                        cboRelacion.Enabled = False
45                        cboTipoPaciente.Enabled = False
46                    End If
                      
47                End If
48            End If
49        End If
          
          '***** MÉDICOS *****'
50        If vlstrTipoTipoPaciente = "ME" Then
          '--------------------------------------------------------------
          'Asignación de datos del médico a la admisión
          '--------------------------------------------------------------
51            If Not vlblnConsulta And cboRelacion.ListIndex <> -1 Then
52                Set rsMedico = frsEjecuta_SP(Str(cboRelacion.ItemData(cboRelacion.ListIndex)) & "|1", "Sp_GnSelMedicos")
53                With rsMedico
54                    If .RecordCount <> 0 And Not vlblnDatosCapturados Then
55                        txtApellidoPaterno.Text = IIf(IsNull(!vchApellidoPaterno), "", !vchApellidoPaterno)
56                        txtApellidoMaterno.Text = IIf(IsNull(!vchApellidoMaterno), "", !vchApellidoMaterno)
57                        txtNombre.Text = IIf(IsNull(!vchNombre), "", !vchNombre)
                          
                          'Revisa si el nombre ya ha sido ingresado con anterioridad para
                          'conservar su número de expediente
58                        If Not vlblnFamiliar Then
59                            pVerificaNombre
60                        End If
                          
                          '- Agregado 13/Jul/2012 - Para caso no. 6655 - Familiar de empleado/médico -'
61                        txtApellidoPaterno.Enabled = (Trim(txtApellidoPaterno.Text) = "")
62                        txtApellidoMaterno.Enabled = (Trim(txtApellidoMaterno.Text) = "")
63                        txtNombre.Enabled = (Trim(txtNombre.Text) = "")
                          '---------------------------------------------------------------------------'
                          
64                        optSexo(0).Value = IIf(Not IsNull(!chrSexo), !chrSexo = "M", False)
65                        optSexo(1).Value = IIf(Not IsNull(!chrSexo), !chrSexo = "F", False)

66                        mskRFC.Mask = ""
67                        mskRFC.Text = IIf(IsNull(!vchRfcMedico), "", !vchRfcMedico)
68                        txtCorreoElectronico.Text = IIf(IsNull(!vchEmail), "", !vchEmail)
                          
      '                        txtOcupacion.Text = "MEDICO"
69                        txtCalle.Text = IIf(IsNull(!vchPartCalle), "", Trim(!vchPartCalle))
70                        txtNumeroExterior.Text = IIf(IsNull(!vchPartNumeroExterior), "", Trim(!vchPartNumeroExterior))
71                        txtNumeroInterior.Text = IIf(IsNull(!vchPartNumeroInterior), "", Trim(!vchPartNumeroInterior))
72                        txtColonia.Text = IIf(IsNull(!vchPartColonia), "", !vchPartColonia)
73                        txtCodigoPostal.Text = IIf(IsNull(!vchPartCodPostal), "", !vchPartCodPostal)
74                        If Not vlblnFamiliar Then
75                            cboRelacion.Enabled = False
76                            cboTipoPaciente.Enabled = False
77                        End If
78                    End If
79                End With
80            End If
81        End If
          
          
          '---------------------------------------------------------------------'
          ' Traer los familiares relacionados al empleado o médico seleccionado '
          '---------------------------------------------------------------------'
82        If (vlstrTipoTipoPaciente = "EM" Or vlstrTipoTipoPaciente = "ME") And vlblnFamiliar Then
83            If rsFamiliar.State <> adStateClosed Then rsFamiliar.Close
              
84            vlStrTipoPaciente = vlstrTipoTipoPaciente
85            vllngCveEmpleado = cboRelacion.ItemData(cboRelacion.ListIndex)
86            vllngCveMedico = 0
87            If vlstrTipoTipoPaciente = "ME" Then
                  'Si el médico es empleado del hospital, buscar la clave de empleado
88                vlstrSentencia = "SELECT INTCVEEMPLEADO FROM HOMEDICO WHERE INTCVEMEDICO = " & Str(vllngCveEmpleado)
89                Set rsFamiliar = frsRegresaRs(vlstrSentencia)
90                If rsFamiliar.RecordCount > 0 And rsFamiliar!intCveEmpleado <> 0 Then
91                    vlStrTipoPaciente = "EM"
92                    vllngCveEmpleado = rsFamiliar!intCveEmpleado
93                    vllngCveMedico = cboRelacion.ItemData(cboRelacion.ListIndex)
94                End If
95                rsFamiliar.Close
96            End If
              
97            vlstrSentencia = "SELECT INTCVEFAMILIAR, VCHAPELLIDOPATERNO || ' ' || VCHAPELLIDOMATERNO || ' ' || VCHNOMBRE NOMBRE " & _
                               " FROM NoFamiliarEmpleado " & _
                               " WHERE bitActivo = 1 "
98            If vlstrTipoTipoPaciente = "ME" And vllngCveMedico <> 0 Then
99                vlstrSentencia = vlstrSentencia & " AND ((intCveEmpleado = " & Str(vllngCveEmpleado) & " AND chrTipo = 'EM')"
100               vlstrSentencia = vlstrSentencia & " OR (intCveEmpleado = " & Str(vllngCveMedico) & " AND chrTipo = 'ME'))"
101           Else
102               vlstrSentencia = vlstrSentencia & " AND intCveEmpleado = " & Str(vllngCveEmpleado) & " AND chrTipo = '" & vlStrTipoPaciente & "'"
103           End If
104           vlstrSentencia = vlstrSentencia & " ORDER BY 2 "
105           Set rsFamiliar = frsRegresaRs(vlstrSentencia)
106           If rsFamiliar.RecordCount <> 0 Then
107               pLlenarCboRs_new cboFamiliar, rsFamiliar, 0, 1
108           Else
109               cboFamiliar.Clear
110           End If
              
111           If vlstrTipoTipoPaciente = "EM" And vlblnFamiliarEmpleado = False Then
112               cboFamiliar.Enabled = False
113               lblFamiliar.Enabled = False
114           Else
115               cboFamiliar.Enabled = True
116               lblFamiliar.Enabled = True
117           End If
              
118           cboFamiliar.AddItem "NINGUNO", 0 'Agregar dato por defecto
119           cboFamiliar.ItemData(cboFamiliar.NewIndex) = 0
120           cboFamiliar.ListIndex = 0
              
121       End If
122   Else
      '    If vlstrIngresoSeleccionado = vlstrTipoIngresoRecienNacido Then
      '        If fblnCanFocus(cboMadre) Then cboMadre.SetFocus
      '    End If
123   End If

   Exit Sub
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboRelacion_LostFocus" & " Linea:" & Erl()))
       Unload Me
End Sub


Private Sub cboReligion_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
End Sub

Private Sub cboSocio_Click()
On Error GoTo NotificaError
    
'    Dim rsSocio As New ADODB.Recordset
'    Dim rsAdmisionMama As New ADODB.Recordset
'    Dim rsEmpleado As New ADODB.Recordset
'    Dim rsMedico As New ADODB.Recordset
'
'    Dim vllngCveEstadoCivil As Long
'    Dim vllngCveEstadoCivilCasado As Long
'    Dim vlintTipoConvenio As Integer
'    Dim vlintEmpresa As Integer
'
'    Dim vlStrTipoPaciente As String
'    Dim vllngCveEmpleado As Long
'    Dim vllngCveMedico As Long
'    Dim vlintSocioIngreso As Long
    
'    vlintSocioIngreso = 1
    
'    vllngSocioRelacionado = 0
    
'    If cboSocio.ListIndex <> -1 Then
'        '***** SOCIO *****'
'        '--------------------------------------------------------------
'        ' Carga la información del socio seleccionado
'        '--------------------------------------------------------------
'        If Not vlblnConsulta Then
'
'            vgstrParametrosSP = "|" & cboSocio.ItemData(cboSocio.ListIndex)
'            Set rsSocio = frsEjecuta_SP(vgstrParametrosSP, "SP_ADSELSOCIOS")
'            If rsSocio.RecordCount <> 0 Then
'                vllngSocioRelacionado = cboSocio.ItemData(cboSocio.ListIndex)
'
'                With rsSocio
'
'                    'Se verifica si el socio está ingreso
'                    'frsEjecuta_SP CStr(cboSocio.ItemData(cboSocio.ListIndex)), "FN_ADSELSOCIOINGRESO", True, vlintSocioIngreso
'                    vlintSocioIngreso = 0
'                    If vlintSocioIngreso > 0 Then
'                        MsgBox SIHOMsg(1132), vbOKOnly + vbExclamation, "Mensaje"
'                        cboTipoPaciente.ListIndex = -1
'                        vlblSocioTemp = True
'                        cboTipoPaciente_Click
'                        cboTipoPaciente.SetFocus
'
'                        'Inhabilitar los datos generales del paciente'
'                        txtApellidoPaterno.Enabled = False
'                        txtApellidoMaterno.Enabled = (txtApellidoMaterno.Text = "")
'                        txtNombre.Enabled = False
'                        Exit Sub
'                    End If
'
'                    vllngCveEstadoCivil = IIf(IsNull(!intCveEstadoCivil), 1, Trim(!intCveEstadoCivil))
'                    cboEstadoCivil.ListIndex = flngLocalizaCbo_new(cboEstadoCivil, Str(vllngCveEstadoCivil))
'                    txtApellidoPaterno.Text = IIf(IsNull(!vchApellidoPaterno), "", Trim(!vchApellidoPaterno))
'                    txtApellidoMaterno.Text = IIf(IsNull(!vchApellidoMaterno), "", !vchApellidoMaterno)
'                    txtNombre.Text = IIf(IsNull(!vchNombre), "", !vchNombre)
'
'                    'Revisa si el nombre ya ha sido ingresado con anterioridad para
'                    'conservar su número de expediente
'                    pVerificaNombre
'
'                    mskFechaNacimiento.Mask = ""
'                    mskFechaNacimiento.Text = IIf(IsNull(!dtmFechaNacimiento), "", !dtmFechaNacimiento)
'                    mskFechaNacimiento.Mask = "##/##/####"
'                    optSexo(0).Value = IIf(Trim(!chrSexo) = "M", True, False)
'                    optSexo(1).Value = IIf(Trim(!chrSexo) = "F", True, False)
'                    mskRFC.Text = IIf(IsNull(Trim(!vchRFC)), "", Trim(!vchRFC))
'                    txtCorreoElectronico.Text = IIf(IsNull(Trim(!VCHCORREOELECTRONICO)), "", Trim(!VCHCORREOELECTRONICO))
'                    txtCurp.Text = IIf(IsNull(Trim(!vchCURP)), "", Trim(!vchCURP))
'
'
'                    Set rs = frsEjecuta_SP(vllngSocioRelacionado & "|3", "SP_SOSELDOMICILIOSOCIO")
'                    If rs.RecordCount > 0 Then
'                        txtCalle.Text = Trim(IIf(IsNull(rs!vchCalle), "", rs!vchCalle))
'                        txtNumeroExterior.Text = Trim(IIf(IsNull(rs!vchNumeroExterior), "", rs!vchNumeroExterior))
'                        txtNumeroInterior.Text = Trim(IIf(IsNull(rs!vchNumeroInterior), "", rs!vchNumeroInterior))
'                        txtColonia.Text = Trim(IIf(IsNull(rs!vchcolonia), "", rs!vchcolonia))
'                        txtCodigoPostal.Text = Trim(IIf(IsNull(rs!vchcodigopostal), "", rs!vchcodigopostal))
'                        cboCiudad.ListIndex = flngLocalizaCbo_new(cboCiudad, Str(IIf(IsNull(rs!intCveCiudad), 0, rs!intCveCiudad)))
'                    Else
'                        txtCalle.Text = ""
'                        txtNumeroExterior.Text = ""
'                        txtNumeroInterior.Text = ""
'                        txtColonia.Text = ""
'                        txtCodigoPostal.Text = ""
'                        cboCiudad.ListIndex = flngLocalizaCbo_new(cboCiudad, Str(vgintCveCiudadCH))
'                    End If
'                    rs.Close
'
'                    Set rs = frsEjecuta_SP(vllngSocioRelacionado & "|3", "SP_SOSELTELEFONOSOC")
'                    If rs.RecordCount > 0 Then
'                        txtTelefono.Text = Trim(IIf(IsNull(rs!vchtelefono), "", rs!vchtelefono))
'                    Else
'                        txtTelefono.Text = ""
'                    End If
'                    rs.Close
'
'                    chkForaneo.Value = 0
'                    txtDomicilioForaneo.Text = ""
'                    txtColoniaForanea.Text = ""
'                    txtCodigoPostalForaneo.Text = ""
'                    txtTelefonoForaneo.Text = ""
'                    cboCiudadForanea.ListIndex = flngLocalizaCbo_new(cboCiudadForanea, 0)
'                    txtPadre.Text = ""
'                    TxtNombreEmergencia.Text = ""
'                    txtDomicilioEmergencia.Text = ""
'                    txtTelefonoEmergencia.Text = ""
'                    txtNombreResponsable.Text = ""
'                    txtDomicilioResponsable.Text = ""
'                    txtTelefonoResponsable.Text = ""
'                    txtLugarTrabajoResponsable.Text = ""
'
'                    vlblnDatosCapturados = False
'
'                End With
'            End If
'
'        ElseIf (txtCuentaExterno.Text = "" And txtCuentaInterno.Text = "") And vlblnConsulta = True Then
'
'            vllngSocioRelacionado = cboSocio.ItemData(cboSocio.ListIndex)
'
'            'Se verifica si el socio está ingreso
'            frsEjecuta_SP CStr(cboSocio.ItemData(cboSocio.ListIndex)), "FN_ADSELSOCIOINGRESO", True, vlintSocioIngreso
'
'            If vlintSocioIngreso > 0 Then
'                MsgBox SIHOMsg(1132), vbOKOnly + vbExclamation, "Mensaje"
'                cboTipoPaciente.ListIndex = -1
'                vlblSocioTemp = True
'                cboTipoPaciente_Click
'                cboTipoPaciente.SetFocus
'
'                'Inhabilitar los datos generales del paciente'
'                txtApellidoPaterno.Enabled = False
'                txtApellidoMaterno.Enabled = (txtApellidoMaterno.Text = "")
'                txtNombre.Enabled = False
'                Exit Sub
'            End If
'
'        Else
'            vllngSocioRelacionado = cboSocio.ItemData(cboSocio.ListIndex)
'        End If
'    End If
    
'    If frmAdmisionPaciente.Visible = True Then
'        mskFechaNacimiento.SetFocus 'para que que muestre la edad en letra
'
'        If cboSocio.Enabled = True Then
'            cboSocio.SetFocus 'para regresar el control
'        End If
'    End If
'
'    'Inhabilitar los datos generales del paciente'
'    txtApellidoPaterno.Enabled = False
'    txtApellidoMaterno.Enabled = (txtApellidoMaterno.Text = "")
'    txtNombre.Enabled = False
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboSocio_Click"))

End Sub


Private Sub cboSocio_KeyDown(KeyCode As Integer, Shift As Integer)
1     On Error GoTo NotificaError
          
2         If KeyCode = vbKeyReturn Then
3             If Trim(txtPadre.Text) <> "" Or Trim(txtMadre.Text) <> "" Then 'Si ya se caputraron todos los datos del paciente
4                 SendKeys vbTab
5             Else
6                 If vlstrIngresoSeleccionado = vlstrTipoIngresoRecienNacido Then
7                     If cboMadre.Visible = True And cboMadre.Enabled = True Then
8                         cboMadre.SetFocus
9                     Else
10                        If fblnCanFocus(txtApellidoPaterno) Then
11                            txtApellidoPaterno.SetFocus
12                        Else
                              'Enfocar RFC para capturar los datos faltantes del familiar
13                            pEnfocaMkTexto mskRFC
14                        End If
15                    End If
16                Else
17                    If fblnCanFocus(txtApellidoPaterno) Then
18                        txtApellidoPaterno.SetFocus
19                    Else
                          'Enfocar RFC para capturar los datos faltantes del familiar
20                        pEnfocaMkTexto mskRFC
21                    End If
22                End If
23            End If
24        End If
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboSocio_KeyDown" & " Linea:" & Erl()))
        Unload Me
End Sub


Private Sub cboSocio_LostFocus()
1     On Error GoTo NotificaError
          
          Dim rsSocio As New ADODB.Recordset
          Dim rsAdmisionMama As New ADODB.Recordset
          Dim rsEmpleado As New ADODB.Recordset
          Dim rsMedico As New ADODB.Recordset
          
          Dim vllngCveEstadoCivil As Long
          Dim vllngCveEstadoCivilCasado As Long
          Dim vlintTipoConvenio As Integer
          Dim vlintEmpresa As Integer
          
          Dim vlStrTipoPaciente As String
          Dim vllngCveEmpleado As Long
          Dim vllngCveMedico As Long
          Dim vlintSocioIngreso As Long
          
2         vlintSocioIngreso = 1
          
3         vllngSocioRelacionado = 0
          
4         If cboSocio.ListIndex <> -1 Then
              '***** SOCIO *****'
              '--------------------------------------------------------------
              ' Carga la información del socio seleccionado
              '--------------------------------------------------------------
5             If Not vlblnConsulta Then
              
6                 vgstrParametrosSP = "|" & cboSocio.ItemData(cboSocio.ListIndex)
7                 Set rsSocio = frsEjecuta_SP(vgstrParametrosSP, "SP_ADSELSOCIOS")
8                 If rsSocio.RecordCount <> 0 Then
9                     vllngSocioRelacionado = cboSocio.ItemData(cboSocio.ListIndex)

10                    With rsSocio
                          
                          'Se verifica si el socio está ingreso
                          'frsEjecuta_SP CStr(cboSocio.ItemData(cboSocio.ListIndex)), "FN_ADSELSOCIOINGRESO", True, vlintSocioIngreso
11                        vlintSocioIngreso = 0
12                        If vlintSocioIngreso > 0 Then
13                            MsgBox SIHOMsg(1132), vbOKOnly + vbExclamation, "Mensaje"
14                            cboTipoPaciente.ListIndex = -1
15                            vlblSocioTemp = True
16                            cboTipoPaciente_Click
17                            cboTipoPaciente.SetFocus
                              
                              'Inhabilitar los datos generales del paciente'
18                            txtApellidoPaterno.Enabled = False
19                            txtApellidoMaterno.Enabled = (txtApellidoMaterno.Text = "")
20                            txtNombre.Enabled = False
21                            Exit Sub
22                        End If
                      
23                        vllngCveEstadoCivil = IIf(IsNull(!intCveEstadoCivil), 1, Trim(!intCveEstadoCivil))
24                        cboEstadoCivil.ListIndex = flngLocalizaCbo_new(cboEstadoCivil, Str(vllngCveEstadoCivil))
25                        txtApellidoPaterno.Text = IIf(IsNull(!vchApellidoPaterno), "", Trim(!vchApellidoPaterno))
26                        txtApellidoMaterno.Text = IIf(IsNull(!vchApellidoMaterno), "", !vchApellidoMaterno)
27                        txtNombre.Text = IIf(IsNull(!vchNombre), "", !vchNombre)
                          
                          'Revisa si el nombre ya ha sido ingresado con anterioridad para
                          'conservar su número de expediente
28                        pVerificaNombre

29                        mskFechaNacimiento.Mask = ""
30                        mskFechaNacimiento.Text = IIf(IsNull(!dtmFechaNacimiento), "", !dtmFechaNacimiento)
31                        mskFechaNacimiento.Mask = "##/##/####"
32                        optSexo(0).Value = IIf(Trim(!chrSexo) = "M", True, False)
33                        optSexo(1).Value = IIf(Trim(!chrSexo) = "F", True, False)
34                        mskRFC.Text = IIf(IsNull(Trim(!vchRFC)), "", Trim(!vchRFC))
35                        txtCorreoElectronico.Text = IIf(IsNull(Trim(!vchCorreoElectronico)), "", Trim(!vchCorreoElectronico))
36                        txtCurp.Text = IIf(IsNull(Trim(!vchCURP)), "", Trim(!vchCURP))
                          
37                        Set rs = frsEjecuta_SP(vllngSocioRelacionado & "|3", "SP_SOSELDOMICILIOSOCIO")
38                        If rs.RecordCount > 0 Then
39                            txtCalle.Text = Trim(IIf(IsNull(rs!vchCalle), "", rs!vchCalle))
40                            txtNumeroExterior.Text = Trim(IIf(IsNull(rs!VCHNUMEROEXTERIOR), "", rs!VCHNUMEROEXTERIOR))
41                            txtNumeroInterior.Text = Trim(IIf(IsNull(rs!VCHNUMEROINTERIOR), "", rs!VCHNUMEROINTERIOR))
42                            txtColonia.Text = Trim(IIf(IsNull(rs!VCHCOLONIA), "", rs!VCHCOLONIA))
43                            txtCodigoPostal.Text = Trim(IIf(IsNull(rs!VCHCODIGOPOSTAL), "", rs!VCHCODIGOPOSTAL))
44                            cboCiudad.ListIndex = flngLocalizaCbo_new(cboCiudad, Str(IIf(IsNull(rs!INTCVECIUDAD), 0, rs!INTCVECIUDAD)))
45                        Else
46                            txtCalle.Text = ""
47                            txtNumeroExterior.Text = ""
48                            txtNumeroInterior.Text = ""
49                            txtColonia.Text = ""
50                            txtCodigoPostal.Text = ""
51                            cboCiudad.ListIndex = flngLocalizaCbo_new(cboCiudad, Str(vgintCveCiudadCH))
52                        End If
53                        rs.Close
                          
54                        Set rs = frsEjecuta_SP(vllngSocioRelacionado & "|3", "SP_SOSELTELEFONOSOC")
55                        If rs.RecordCount > 0 Then
56                            txtTelefono.Text = Trim(IIf(IsNull(rs!vchTelefono), "", rs!vchTelefono))
57                        Else
58                            txtTelefono.Text = ""
59                        End If
60                        rs.Close

61                        chkForaneo.Value = 0
62                        txtDomicilioForaneo.Text = ""
63                        txtColoniaForanea.Text = ""
64                        txtCodigoPostalForaneo.Text = ""
65                        txtTelefonoForaneo.Text = ""
66                        cboCiudadForanea.ListIndex = flngLocalizaCbo_new(cboCiudadForanea, 0)
67                        txtPadre.Text = ""
68                        txtNombreEmergencia.Text = ""
69                        txtDomicilioEmergencia.Text = ""
70                        txtTelefonoEmergencia.Text = ""
71                        txtNombreResponsable.Text = ""
72                        txtDomicilioResponsable.Text = ""
73                        txtTelefonoResponsable.Text = ""
74                        txtLugarTrabajoResponsable.Text = ""
                                  
75                        vlblnDatosCapturados = False
                          
76                    End With
77                End If
              
78            ElseIf (txtCuentaExterno.Text = "" And txtCuentaInterno.Text = "") And vlblnConsulta = True Then

79                vllngSocioRelacionado = cboSocio.ItemData(cboSocio.ListIndex)

                  'Se verifica si el socio está ingreso
80                frsEjecuta_SP CStr(cboSocio.ItemData(cboSocio.ListIndex)), "FN_ADSELSOCIOINGRESO", True, vlintSocioIngreso

81                If vlintSocioIngreso > 0 Then
82                    MsgBox SIHOMsg(1132), vbOKOnly + vbExclamation, "Mensaje"
83                    cboTipoPaciente.ListIndex = -1
84                    vlblSocioTemp = True
85                    cboTipoPaciente_Click
86                    cboTipoPaciente.SetFocus

                      'Inhabilitar los datos generales del paciente'
87                    txtApellidoPaterno.Enabled = False
88                    txtApellidoMaterno.Enabled = (txtApellidoMaterno.Text = "")
89                    txtNombre.Enabled = False
90                    Exit Sub
91                End If
                  
92            Else
93                vllngSocioRelacionado = cboSocio.ItemData(cboSocio.ListIndex)
94            End If
          'End If
          
95            If frmAdmisionPaciente.Visible = True Then
96                mskFechaNacimiento.SetFocus 'para que que muestre la edad en letra
                  
          '        If cboSocio.Enabled = True Then
          '            cboSocio.SetFocus 'para regresar el control
          '        End If
97            End If
          
              'Inhabilitar los datos generales del paciente'
98            txtApellidoPaterno.Enabled = False
99            txtApellidoMaterno.Enabled = (txtApellidoMaterno.Text = "")
100           txtNombre.Enabled = False
101       End If
   
   Exit Sub
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboSocio_LostFocus" & " Linea:" & Erl()))
End Sub

Private Sub cboTecnicaLateralidad_Click()
On Error GoTo NotificaError

    llngCveTecnicaLaterabilidad = 0
    If cboTecnicaLateralidad.ListIndex <> -1 Then
        llngCveTecnicaLaterabilidad = cboTecnicaLateralidad.ItemData(cboTecnicaLateralidad.ListIndex)
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboTecnicaLateralidad_Click"))
    Unload Me
End Sub

Private Sub cboTecnicaLateralidad_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
End Sub

Private Sub cboTipoConvenio_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
End Sub

Private Sub cboTipoIngreso_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
End Sub

Private Sub cboTipoIngreso_LostFocus()
    'Previos
    If vlblnPacientePrevio = True And cboTipoIngreso.Text = "INTERNAMIENTO NORMAL" Then
        mskFechaIngreso.Mask = ""
        mskFechaIngreso.Mask = "##/##/####"
        mskFechaIngreso = fdtmServerFecha
        mskHoraIngreso.Mask = ""
        
        mskHoraIngreso.Text = IIf(Len(Trim(Str(Hour(fdtmServerHora)))) = 1, "0" + Trim(Str(Hour(fdtmServerHora))), Trim(Str(Hour(fdtmServerHora)))) + ":" + IIf(Len(Trim(Str(Minute(fdtmServerHora)))) = 1, "0" + Trim(Str(Minute(fdtmServerHora))), Trim(Str(Minute(fdtmServerHora))))
        'mskHoraIngreso.Text = Format(!DTMFECHAHORAINGRESO, "hh:mm")
        mskHoraIngreso.Mask = "##:##"
'        vlblnPacientePrevio = False
    End If
End Sub

Private Sub cboTipoPaciente_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
End Sub

Private Sub cboTipoPoliza_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
End Sub

Private Sub chkAsignarCuarto_Click()
1     On Error GoTo NotificaError
      Dim rsCuarto As New ADODB.Recordset
      Dim rsCuenta As New ADODB.Recordset
      Dim lngCveCuarto As Long
      Dim lngnumCuenta As Long

2         If chkAsignarCuarto.Value = 1 Then
              
3             lngCveCuarto = 0
4             lngnumCuenta = 0
5             Set rs = frsEjecuta_SP(Val(txtExpedienteInterno.Text) & "|" & vgintClaveEmpresaContable & "|" & vgintNumeroDepartamento, "Sp_ExSelCuentaExternoAbierta")
6             If rs.RecordCount > 0 Then
7                 lngCveCuarto = IIf(IsNull(rs!INTCVECUARTO), 0, rs!INTCVECUARTO)
8                 lngnumCuenta = rs!INTNUMCUENTA
9             End If
10            rs.Close
              
              'Si ya tiene cuarto asignado
11            If lngCveCuarto > 0 Then

                  '¿Desea hacer un cambio de cuarto?
12                If MsgBox(SIHOMsg(77), vbYesNo + vbQuestion, "Mensaje") = vbYes Then
                      
13                    pLimpiaGridCuartos
14                    pConfiguraGridCuarto
15                    grdCuarto.Row = 1
16                    grdCuarto.Col = 1
                      
17                    pHabilitaAsignacionCuarto True
19                    cmdSugerirCuarto.Caption = "Sugerir cuarto"
20                    lblEstadoCuartoActual.Enabled = True
21                    cboEstadoCuartoActual.Enabled = True
                      
22                Else
23                    chkAsignarCuarto.Value = 0
24                End If

25            ElseIf lngnumCuenta > 0 Or cgstrModulo = "AD" Or cgstrModulo = "CA" Then
              
26                pHabilitaAsignacionCuarto True
28                cmdSugerirCuarto.Caption = "Sugerir cuarto"
                  
29            Else
              'Si no tiene cuenta
30                If cgstrModulo <> "EX" And cgstrModulo <> "AD" And cgstrModulo <> "CA" Then
                      
                      'No es posible asignar cuarto, el paciente no tiene cuenta
31                    MsgBox SIHOMsg(1039), vbOKOnly + vbInformation, "Mensaje"
32                    chkAsignarCuarto.Value = 0
33                    Exit Sub

34                End If
                  
35            End If
              
36        Else
          
37            pLimpiaGridCuartos
38            pConfiguraGridCuarto
39            grdCuarto.Row = 1
40            grdCuarto.Col = 1
              
41            Set rsCuenta = frsEjecuta_SP(Val(txtExpedienteInterno.Text) & "|" & vgintClaveEmpresaContable & "|" & vgintNumeroDepartamento, "Sp_ExSelCuentaExternoAbierta")
42            If rsCuenta.RecordCount <> 0 Then

43                If Not IsNull(rsCuenta!INTCVECUARTO) Then

44                    Set rsCuarto = frsEjecuta_SP(IIf(IsNull(rsCuenta!INTCVECUARTO), 0, rsCuenta!INTCVECUARTO), "Sp_AdSelCuartoClave")
45                    If rsCuarto.RecordCount <> 0 Then
46                        grdCuarto.TextMatrix(1, 1) = rsCuarto!NombreTipoCuarto
47                        grdCuarto.TextMatrix(1, 2) = rsCuarto!NombreArea
48                        grdCuarto.TextMatrix(1, 3) = rsCuarto!Cuarto
49                        grdCuarto.TextMatrix(1, 4) = rsCuarto!NumeroCuarto
50                        grdCuarto.TextMatrix(1, 8) = rsCuarto!ClaveCuarto
51                    End If
52                    rsCuarto.Close

53                End If
54            End If
55            rsCuenta.Close
              
56            lblEstadoCuartoActual.Enabled = False
57            If vglngCveEstadoCuartoDisponible <> 0 Then
58                cboEstadoCuartoActual.ListIndex = flngLocalizaCbo_new(cboEstadoCuartoActual, CStr(vglngCveEstadoCuartoDisponible))
59            Else
60                cboEstadoCuartoActual.ListIndex = 0
61            End If
62            cboEstadoCuartoActual.Enabled = False
          
63            pHabilitaAsignacionCuarto False
          
65        End If
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":chkAsignarCuarto_Click" & " Linea:" & Erl()))
        Unload Me
End Sub
Private Sub chkAsignarCuarto_KeyPress(KeyAscii As Integer)
On Error GoTo NotificaError

    If KeyAscii = vbKeyReturn Then
        If chkAsignarCuarto.Value = 1 Then
            cmdSugerirCuarto.SetFocus
        Else
            cmdGrabar.SetFocus
        End If
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":chkAsignarCuarto_KeyPress"))
    Unload Me
End Sub
Private Sub cmdAbrirCuenta_Click()
1     On Error GoTo NotificaError
          Dim rsCuenta As New ADODB.Recordset
          Dim lngCveCuartoAsignado As Long
          Dim lngCveListaNegra As Long
          Dim lngnumCuenta As Long
          Dim lngnumCuenta2 As Long
          Dim lngCveTipoIngreso As Long
          Dim lngCveTipoIngreso2 As Long
          Dim strFechaIngreso As String
          Dim lngNumPaciente As Long
          Dim lintCveDepartamento As Integer
          Dim vlblnFueAlta As Boolean
          Dim llngEmpresa As Long
          Dim vlaryParametrosSalida() As String
          Dim llngPaqueteAnterior As Long
          Dim rsPaquete As New ADODB.Recordset
          Dim rsInfoFarmacia As New ADODB.Recordset
          Dim rsTipoPaciente As New ADODB.Recordset
          Dim rsTipoIngreso As New ADODB.Recordset
          Dim rsVerificaFarmacia As New ADODB.Recordset
          Dim rsCuentaEnFarmacia As New ADODB.Recordset
          
          Dim llngResultado As Long
          Dim lngParametroCargoConsulta As Long
          Dim lngCargoConsultaEstatus As Long
          Dim vlstrSentencia As String
          Dim vlstrSentencia2 As String
          Dim rsDeptoFarmacia As ADODB.Recordset
          Dim vlintTipoIngresoCuenta2 As Integer
          
2         If fblnDatosValidosCuenta() Then
          
3             pAsignaValoresVariables
              
4             lngNumPaciente = Val(txtExpedienteInterno.Text)
5             lngCveTipoIngreso = cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex)
6             strFechaIngreso = fstrFechaSQL(fdtmServerFecha, fdtmServerHora)
              
7             lLngCveListaNegraFamiliar = -1
8             lblnCoincideListaNegraFam = False
              
9             If Val(txtCuentaExterno.Text) = 0 Then
10                If fblnEstaEnListaNegra(Val(txtExpedienteInterno.Text), llngCveTipoPacienteLN, IIf(llngCveEmpresaLN <> -1, llngCveEmpresaLN, llngCveRelacionLN), lngCveListaNegra) Then
11                    vlblnEsDeudorIncobrable = True
12                    Exit Sub
13                Else
14                    vlblnEsDeudorIncobrable = False
15                End If
16                If lngCveListaNegra = -1 Or lngCveListaNegra = 0 Then
                      'Si no está en la lista negra, se valida si esta como familiar
17                    If Not fblnContinuarListaNegraFamiliar2(Trim(txtApellidoPaterno.Text), Trim(txtApellidoMaterno.Text)) Then
18                        vlblnEsDeudorIncobrable = True
19                        Exit Sub
20                    Else
21                        vlblnEsDeudorIncobrable = False
22                    End If
23                End If
24            End If
25            vlblnFueAlta = Val(txtCuentaExterno.Text) = 0
26            lngnumCuenta = Val(txtCuentaExterno.Text)
27            lngnumCuenta2 = (Val(txtCuentaExterno.Text) + 1)
28            lngCveCuartoAsignado = 0
29            llngPaqueteAnterior = 0
30            Set rsCuenta = frsEjecuta_SP(Val(txtExpedienteInterno.Text) & "|" & vgintClaveEmpresaContable & "|" & vgintNumeroDepartamento, "SP_EXSELCUENTAEXTERNOABIERTA")
              
              If (cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveExterno Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveConsultaExterna) And blnAbrirCuentasExtraEx = True Then
              
              Else
31                If rsCuenta.RecordCount <> 0 Then
32                    lngnumCuenta = rsCuenta!INTNUMCUENTA
33                    lngCveCuartoAsignado = IIf(IsNull(rsCuenta!INTCVECUARTO), 0, rsCuenta!INTCVECUARTO)
34                    strFechaIngreso = Format(rsCuenta!DTMFECHAHORAINGRESO, "yyyy-mm-dd hh:mm:ss")
35                    llngPaqueteAnterior = IIf(IsNull(rsCuenta!intCvePaquete), 0, rsCuenta!intCvePaquete)
36                End If
              End If
              
            
37            rsCuenta.Close
              
38            If lngCveCuartoAsignado <> llngCveCuarto And llngCveCuarto <> 0 And lngCveCuartoAsignado <> 0 Then
39                If cboEstadoCuartoActual.ListIndex < 0 Then
                      '¡No ha ingresado datos!
40                    MsgBox SIHOMsg(2) & vbCrLf & "Estado en que se queda el cuarto", vbInformation + vbOKOnly, "Mensaje"
41                    sstObj.Tab = 1
42                    MyTabHeader1.TabCurrent = 1
43                    cboEstadoCuartoActual.SetFocus
44                    Exit Sub
45                End If
46            End If
              
47            EntornoSIHO.ConeccionSIHO.BeginTrans
              
              'Alta o modificación del registro del paciente:
48            vgstrParametrosSP = txtExpedienteInterno.Text & "|" & _
                                   lngCveTipoIngreso & "|" & _
                                   vllngPersonaGraba & "|" & _
                                   vgintNumeroDepartamento & "|" & lintCveDeptoIngreso & "|" & _
                                   llngCveProcedencia & "|" & llngCveEmpresaPaciente & "|" & _
                                   IIf(Val(txtCuentaExterno.Text) = 0, 0, vllngPersonaGraba) & "|0|" & _
                                   cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex) & "|" & _
                                   vllngCveEmpresa & "|" & llngCvePoliza & "|" & _
                                   llngNumCuentaMama & "|" & _
                                   llngCveMedicoRelacionado & "|" & llngCveEmpleadoRelacionado & "|" & _
                                   llngCveParentescoEmergencia & "|" & llngCveParentescoResponsable & "|" & _
                                   llngCveMedicoEmergencias & "|0|0|0|" & _
                                   llngCvePaquete & "|" & llngCveConcepto & "|" & _
                                   llngCveCuarto & "|" & strFechaIngreso & "||" & _
                                   IIf(cgstrModulo = "AD" Or cgstrModulo = "EX" Or lngnumCuenta = 0, "A", "") & "|" & _
                                   Trim(txtNumeroControl.Text) & "|" & Trim(txtAutoriza.Text) & "|" & Trim(txtNumeroPoliza.Text) & "|" & _
                                   lstrTipoAtencion & "|" & Str(Val(Format(txtAnticipo.Text, "#############.00"))) & "|" & _
                                   Trim(txtNombreEmergencia.Text) & "|" & Trim(txtDomicilioEmergencia.Text) & "|" & Trim(txtTelefonoEmergencia.Text) & "|" & _
                                   Trim(txtNombreResponsable.Text) & "|" & Trim(Trim(txtDomicilioResponsable.Text)) & "|" & _
                                   Trim(txtTelefonoResponsable.Text) & "|" & Trim(txtLugarTrabajoResponsable.Text) & "|" & Trim(txtObservaciones.Text) & "|" & _
                                  "0|0|0|0|0|" & lngnumCuenta & "|" & Trim(txtDiagnosticoEspecifico.Text) & "|" & Trim(txtMotivoIngreso.Text) & "|" & vllngCveFamiliar & "|" & IIf(vllngSocioRelacionado = 0, "", vllngSocioRelacionado) & _
                                          "|" & lstrNacimientoResponsable & "|" & lstrNacimientoEmergencia & "|" & 0 & "|" & 0 'se agrega & "|" & vglngCveCirugia & "|" & llngCveTecnicaLaterabilidad por el caso 20329
49            lngnumCuenta = 1
50            frsEjecuta_SP vgstrParametrosSP, "sp_ExInSPacienteIngreso", True, lngnumCuenta
                      
              'Actualizar datos fiscales
              frsEjecuta_SP Val(txtExpedienteInterno.Text) & "|" & lngnumCuenta & "|" & mskRFC.Text, "Sp_Gninsdatosfiscalesrecientes"
              
              
              
52            If vlblnUsaFarmacia Then
              
53            vlstrSentencia2 = "SELECT COUNT(*) TOTAL FROM ADRELACIONCUENTASFARMACIA WHERE intNumCuentaAdmision = " & lngnumCuenta
54            Set rsCuentaEnFarmacia = frsRegresaRs(vlstrSentencia2)
                      
55            vlstrSentencia2 = "select * from GNPARAMETROSFARMACIA where TNYCLAVEEMPRESAHOSPITAL = " & vgintClaveEmpresaContable
56            Set rs = frsRegresaRs(vlstrSentencia2)
                      
57            If rsCuentaEnFarmacia!Total < 1 And rs.RecordCount > 0 And Not vlblnUtilizaConvenio And rs!bitactivo = 1 Then
              
58                vlstrSentencia2 = "SELECT * from SIPARAMETRO where VCHNOMBRE = 'INTTIPOPARTICULAR'"
59                Set rsTipoPaciente = frsRegresaRs(vlstrSentencia2)
                  
60                vlstrSentencia2 = "SELECT * from SITIPOINGRESO where VCHNOMBRE = 'EXTERNO' And INTACTIVO = 1"
61                Set rsTipoIngreso = frsRegresaRs(vlstrSentencia2)
                  
62                Set rsDeptoFarmacia = frsRegresaRs("SELECT * FROM SIPARAMETRO WHERE VCHNOMBRE = 'INTCVEDEPARTAMENTOADMISION' and INTCVEEMPRESACONTABLE = " & rs!TNYCLAVEEMPRESAFARMACIA)
63                vlintTipoIngresoCuenta2 = 0

64                If rsTipoIngreso.RecordCount > 0 And rsTipoPaciente.RecordCount > 0 Then
                  
                      Dim vlfechaModificada As String
65                    vlfechaModificada = fstrCambiaHoraUnMinuto(strFechaIngreso)
66                    vlintTipoIngresoCuenta2 = rsTipoIngreso!intCveTipoIngreso
67                    vgstrParametrosSP = txtExpedienteInterno.Text & "|" & _
                                   rsTipoIngreso!intCveTipoIngreso & "|" & _
                                   vllngPersonaGraba & "|" & _
                                   rsDeptoFarmacia!VCHVALOR & "|" & rsDeptoFarmacia!VCHVALOR & "|" & _
                                   llngCveProcedencia & "|" & llngCveEmpresaPaciente & "|" & _
                                   IIf(Val(txtCuentaExterno.Text) = 0, 0, vllngPersonaGraba) & "|0|" & _
                                   rsTipoPaciente!VCHVALOR & "|" & _
                                   vllngCveEmpresa & "|" & llngCvePoliza & "|" & _
                                   llngNumCuentaMama & "|" & _
                                   llngCveMedicoRelacionado & "|" & llngCveEmpleadoRelacionado & "|" & _
                                   llngCveParentescoEmergencia & "|" & llngCveParentescoResponsable & "|" & _
                                   llngCveMedicoEmergencias & "|0|0|0|" & _
                                   "|" & llngCveConcepto & "|" & _
                                   "|" & vlfechaModificada & "||" & _
                                   IIf(cgstrModulo = "AD" Or cgstrModulo = "EX" Or lngnumCuenta = 0, "A", "") & "|" & _
                                   Trim(txtNumeroControl.Text) & "|" & Trim(txtAutoriza.Text) & "|" & Trim(txtNumeroPoliza.Text) & "|" & _
                                   lstrTipoAtencion & "|" & Str(Val(Format(txtAnticipo.Text, "#############.00"))) & "|" & _
                                   Trim(txtNombreEmergencia.Text) & "|" & Trim(txtDomicilioEmergencia.Text) & "|" & Trim(txtTelefonoEmergencia.Text) & "|" & _
                                   Trim(txtNombreResponsable.Text) & "|" & Trim(Trim(txtDomicilioResponsable.Text)) & "|" & _
                                   Trim(txtTelefonoResponsable.Text) & "|" & Trim(txtLugarTrabajoResponsable.Text) & "|" & Trim(txtObservaciones.Text) & "|" & _
                                  "0|0|0|0|0|" & IIf(lngnumCuenta2 = 1, 0, lngnumCuenta2) & "|" & Trim(txtDiagnosticoEspecifico.Text) & "|" & Trim(txtMotivoIngreso.Text) & "|" & vllngCveFamiliar & "|" & IIf(vllngSocioRelacionado = 0, "", vllngSocioRelacionado) & _
                                          "|" & lstrNacimientoResponsable & "|" & lstrNacimientoEmergencia & "|" & 0 & "|" & 0 'se agrega & "|" & vglngCveCirugia & "|" & llngCveTecnicaLaterabilidad por el caso 20329
                  
68                    lngnumCuenta2 = 1
69                    frsEjecuta_SP vgstrParametrosSP, "sp_ExInSPacienteIngreso", True, lngnumCuenta2
70                    vlblnGuardaFarmacia = True
                  
71                End If
                  
72            End If
              
73            Else
              
74            End If
              
              'Identificar si hubo un cambio de cuarto, registrarlo:
75            If lngCveCuartoAsignado <> llngCveCuarto And llngCveCuarto <> 0 Then
76                pCambiaEstadoCuartoExterno Val(txtExpedienteInterno.Text), lngnumCuenta, llngCveCuarto, vllngPersonaGraba, lngCveCuartoAsignado, RSAdSelCuartoApropiado!NumeroCuarto
                  '***activar paciente si se asigna cuarto
77                If cgstrModulo <> "TS" And cgstrModulo <> "EX" Then
78                    lintCveDepartamento = fintDeptoEmergencias()
79                Else
80                    lintCveDepartamento = vgintNumeroDepartamento
81                End If
82                pActivaPaciente lintCveDepartamento, lngnumCuenta
                              
83                lblEstadoCuartoActual.Enabled = True
84                If vglngCveEstadoCuartoDisponible <> 0 Then
85                    cboEstadoCuartoActual.ListIndex = flngLocalizaCbo_new(cboEstadoCuartoActual, CStr(vglngCveEstadoCuartoDisponible))
86                Else
87                    cboEstadoCuartoActual.ListIndex = 0
88                End If
89                cboEstadoCuartoActual.Enabled = True
90            End If
              
              'El paciente está el lista negra
91            If lngCveListaNegra > 0 Then
92                pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "AUTORIZA LISTA DE DEUDORES INCOBRABLES", "Número cliente " & CStr(lngCveListaNegra)
93            End If
              'El paciente está en lista negra como familiar, responsable de la cuenta o persona para casos de emergencia
94            If lLngCveListaNegraFamiliar <> -1 Then
95                pAgregarListaNegra
96            ElseIf lblnCoincideListaNegraFam Then
97                pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "INGRESÓ PERSONA QUE COINCIDIÓ EN LA LISTA DE DEUDORES INCOBRABLES", "Expediente " & txtExpedienteInterno.Text
98            End If
              
99            If vgblnAsignarPaqueteAdmision Then
100               If llngPaqueteAnterior <> 0 Then
101                   If (OptPaqueteOtros(0).Value And llngPaqueteAnterior <> llngCvePaquete) Or (OptPaqueteOtros(1).Value And llngPaqueteAnterior <> 0) Then
                          'si tenia antes asignado un paquete y se cambió o se seleccionó "otro" se borra el paquete anterior
102                       frsEjecuta_SP lngnumCuenta & "|E|" & llngPaqueteAnterior, "SP_ADDELPAQUETEASIGNADOADMISIO"
                          '--> 15003
                          'Si se asignó un paquetes, si se manejan cajas de material, relacionadas al paquete se generan indicaciones medicas, se quita lo anterior
103                       frsEjecuta_SP lngnumCuenta & "|E|" & llngPaqueteAnterior & "|0", "SP_EXUPDPAQUETEINDICACIONES"
                          '<--
104                   End If
105               End If
106               If (cgstrModulo = "AD" Or cgstrModulo = "EX") Or (cgstrModulo <> "AD" And cgstrModulo <> "EX" And lblnAsignarPaquete) Then
107                   If cboPlanPaqueteCirugia.ListIndex > -1 And OptPaqueteOtros(0).Value And (llngPaqueteAnterior <> llngCvePaquete Or lblnAsignarPaquete) Then
108                       Set rsPaquete = frsRegresaRs("select * from pvPaquetePaciente where intmovpaciente = " & lngnumCuenta & " and chrTipopaciente = 'E' and intNumpaquete = " & llngCvePaquete)
109                       If rsPaquete.RecordCount = 0 Then
110                           llngEmpresa = 0
111                           If cboEmpresa.ListIndex <> -1 Then
112                               llngEmpresa = cboEmpresa.ItemData(cboEmpresa.ListIndex)
113                           End If
114                           pCargaArreglo vlaryParametrosSalida, "|" & adDecimal & "||" & adDecimal & "||" & adDecimal
115                           frsEjecuta_SP llngCvePaquete & "|" & "PA" & "|" & cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex) & "|" & llngEmpresa & "|E|0|01/01/1900|" & vgintClaveEmpresaContable, "SP_PVSELOBTENERPRECIOBIT", , , vlaryParametrosSalida
116                           pObtieneValores vlaryParametrosSalida, vldblPrecio, vldblIncrementoTarifa, vlintBitPesos
                              
117                           If vldblPrecio = -1 Or vldblPrecio = 0 Then
118                               EntornoSIHO.ConeccionSIHO.RollbackTrans
                                  'El elemento seleccionado no cuenta con un precio capturado.
119                               MsgBox SIHOMsg(301), vbInformation, "Mensaje"
120                               sstObj.Tab = 0
121                               MyTabHeader1.TabCurrent = 0
122                               cboPlanPaqueteCirugia.SetFocus
123                               blnValidaDatos = False
124                               Exit Sub
125                           Else
126                               pAsignaPaquete lngnumCuenta, llngCvePaquete, vldblPrecio, "E", vlintBitPesos
127                           End If
128                       End If
129                   End If
                      '--> 15003
130                   If cboPlanPaqueteCirugia.ListIndex > -1 And OptPaqueteOtros(0).Value Then
                          'Si se asignó un paquetes, si se manejan cajas de material, relacionadas al paquete se generan indicaciones medicas, Se generan las nuevas
131                       frsEjecuta_SP lngnumCuenta & "|E|" & llngCvePaquete & "|1", "SP_EXUPDPAQUETEINDICACIONES"
132                   End If
                      '<--
133               End If
134           End If
                  
              ' Vamos realizar el cargo por el concepto de consulta externa
135             If vlblnFueAlta And lngCveTipoIngreso = clngCveConsultaExterna Then
136               Set rs = frsSelParametros("AD", -1, "INTCONCEPTOCONSULTAEXTERNA")
137               lngParametroCargoConsulta = CInt(IIf(IsNull(rs("Valor")), 0, rs("Valor")))
                  '   MsgBox lngParametroCargoConsulta, vbOKOnly + vbInformation, "Mensaje"
138               rs.Close

                  'Si está configurado el concepto de consulta externa generamos el cargo
139               If lngParametroCargoConsulta > 0 Then
                      ' Revisar que el PvOtroConceptro este activo, sino que mandé mensaje y no se realice el cargo
140                   vlstrSentencia = "select intCveConcepto, bitEstatus from PVOtroConcepto where intCveConcepto =" & lngParametroCargoConsulta
141                   Set rs = frsRegresaRs(vlstrSentencia)
142                   If Not rs.EOF Then
143                       lngCargoConsultaEstatus = rs!BITESTATUS
144                   End If
145                   rs.Close
146                   If lngCargoConsultaEstatus <> 0 Then
147                       lintCveDepartamento = fintDeptoConsulta()
148                       llngResultado = 1
149                       frsEjecuta_SP CStr(lngParametroCargoConsulta) & "|" & CStr(lintCveDepartamento) & "|D|0|" & CStr(lngnumCuenta) & "|E|OC|0|1|" & vllngPersonaGraba & "|0||0|2", "SP_PVUPDCARGOS", True, llngResultado
150                       If llngResultado < 1 Then
151                           txtCuentaInterno.Text = ""
152                           MsgBox "No se pudo realizar el cargo de consulta externa: " & Chr(13) & SIHOMsg(CInt(llngResultado) * -1), vbExclamation, "Mensaje"
153                           EntornoSIHO.ConeccionSIHO.RollbackTrans
154                           Exit Sub
155                       End If
156                   Else
                          ' El cargo de consulta externa no se pudo realizar porque el concepto configurado está inactivo
157                       MsgBox SIHOMsg(1493), vbOKOnly + vbExclamation, "Mensaje"
158                   End If
159               End If
160           End If
                  
161           pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "APERTURA DE CUENTA", Str(lngNumPaciente) & " Cta. " & CStr(lngnumCuenta)

162           vlstrSentencia2 = "SELECT COUNT(*) TOTAL FROM ADRELACIONCUENTASFARMACIA WHERE intNumCuentaAdmision = " & lngnumCuenta & " and intNumCuentaFarmacia = " & lngnumCuenta2
163           Set rs = frsRegresaRs(vlstrSentencia2)
              
164           If vlblnGuardaFarmacia And rs!Total <> 1 Then
165               vlstrSentencia2 = "INSERT INTO ADRELACIONCUENTASFARMACIA (intNumCuentaAdmision, intCveTipoIngresoAdmision, intNumCuentaFarmacia, intCveTipoIngresoFarmacia) VALUES (" & lngnumCuenta & ", " & lngCveTipoIngreso & ", " & lngnumCuenta2 & ", " & vlintTipoIngresoCuenta2 & ")"
166               EntornoSIHO.ConeccionSIHO.Execute vlstrSentencia2
167               vlblnGuardaFarmacia = False
168           End If
                         
              'Guardar control de aseguradora 18084
              If vlblnFueAlta And vlblnUtilizaConvenio And vlblnAsegurdora Then
                pGuardarControlAseguradora lngnumCuenta, vllngCveEmpresa
              End If
                         
169           EntornoSIHO.ConeccionSIHO.CommitTrans
              
170           pDatosIngreso lngnumCuenta, "E"
              
              
171           txtCuentaExterno.Text = CStr(lngnumCuenta)
172           vglngCuentaPaciente = lngnumCuenta
    If Trim(vgstrNombCortoCH) = Trim("SOM") Then
         

 'Asignar las cirugías que tenía programadas antes de ser internado
                   vgstrParametrosSP = Str(Val(txtExpedienteInterno.Text)) & "|" & Str(Val(txtCuentaExterno.Text))
                   frsEjecuta_SP vgstrParametrosSP, "SP_EXUPDPROGRAMACIRUGIA"
                   
                   
                    frsEjecuta_SP txtExpedienteInterno.Text, "SP_ADDELINGRESOPREVIO"
                                      
    End If
              If txtCuentaExterno.Text <> "" And cgstrModulo = "LA" Or cgstrModulo = "IM" Then
                pHabilitaAsignacionCuarto True
                chkAsignarCuarto.Enabled = True
              End If
              
173           pConsultaPuntosLealtad
              
              '-- Exporta paciente >>Externo o de Urgencias<< a base de datos remota --'
174           pInsertaPacienteRemoto lngnumCuenta, lngCveTipoIngreso, vlblnFueAlta
175       Else
176           blnValidaDatos = False
177       End If

   Exit Sub
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdAbrirCuenta_Click" & " Linea:" & Erl()))
End Sub
Private Sub pAgregarListaNegra()
1     On Error GoTo NotificaError
          Dim rs As New ADODB.Recordset
          Dim lstrSentencia As String
          
          'Se agrega a la lista negra como paciente
2         lstrSentencia = "select * from CCListaNegra where intCveListaNegra = -1 "
3         Set rs = frsRegresaRs(lstrSentencia, adLockOptimistic, adOpenStatic)
4         With rs
5             .AddNew
6             !intNumReferencia = Val(txtExpedienteInterno.Text)
7             !chrTipoCliente = "PA"
8             !dtmFechaRegistro = fdtmServerFechaHora
9             !intCveEmpleadoRegistra = vllngPersonaGraba
10            !bitactivo = 1
11            .Update
12        End With
13        rs.Close
          'Se borra de la lista negra como familiar/aval
14        lstrSentencia = "delete from CCListaNegraFamiliares where intConsecutivo = " & lLngCveListaNegraFamiliar
15        pEjecutaSentencia lstrSentencia
16        pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "INGRESÓ PERSONA DE LA LISTA DE DEUDORES INCOBRABLES", "Expediente " & txtExpedienteInterno.Text

   Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pAgregarListaNegra" & " Linea:" & Erl()))
End Sub

Private Function fintDeptoEmergencias() As Integer
    Dim rsEmergencias As New ADODB.Recordset
    Dim rsConsultaExterna As New ADODB.Recordset
    Dim rs As New ADODB.Recordset
    Dim llngCveDepto As Long
    Dim llngCveCE As Long
    
    If llngCveSucursal <> -1 Then
        llngCveDepto = 1
        Set rs = frsEjecuta_SP("'U'|" & llngCveSucursal, "FN_ADSelDeptoSucursal", True, llngCveDepto)
    End If
    
    If llngCveDepto = 0 Then
        Set rsEmergencias = frsSelParametros("SI", vgintClaveEmpresaContable, "INTCVEDEPTOEMERGENCIAS")
        If rsEmergencias.RecordCount > 0 Then
            fintDeptoEmergencias = rsEmergencias("Valor")
        Else
            fintDeptoEmergencias = vgintNumeroDepartamento
        End If
        rsEmergencias.Close
    Else
        fintDeptoEmergencias = llngCveDepto
    End If
   
End Function
Private Function fintDeptoConsulta() As Integer
    If cboDeptoIngreso.Enabled Then
        fintDeptoConsulta = cboDeptoIngreso.ItemData(cboDeptoIngreso.ListIndex)
    Else
        fintDeptoConsulta = vgintNumeroDepartamento
    End If
End Function

Private Sub cmdActivarPaciente_Click()
1     On Error GoTo NotificaError
      Dim rsCuenta As New ADODB.Recordset
      Dim lintCveDepartamento As Integer
      Dim rsMedicoACargo As New ADODB.Recordset

2         Set rsCuenta = frsEjecuta_SP(Val(txtExpedienteInterno.Text) & "|" & vgintClaveEmpresaContable & "|" & vgintNumeroDepartamento, "SP_EXSELCUENTAEXTERNOABIERTA")
3         If rsCuenta.RecordCount <> 0 Then

4             If cgstrModulo <> "AD" Then
5                 lintCveDepartamento = vgintNumeroDepartamento
6             Else
7                 If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveConsultaExterna Then
8                     If cboDeptoIngreso.Enabled Then
9                         lintCveDepartamento = cboDeptoIngreso.ItemData(cboDeptoIngreso.ListIndex)
10                    End If
11                Else
12                    lintCveDepartamento = fintDeptoEmergencias()
13                End If
14            End If

15            EntornoSIHO.ConeccionSIHO.BeginTrans
16            If lintCveDepartamento <> 0 Then
17                pActivaPaciente lintCveDepartamento, rsCuenta!INTNUMCUENTA
18            End If
                  
19            If cboMedicoEmergencias.ListIndex > -1 Then
20                vgstrParametrosSP = rsCuenta!INTNUMCUENTA & "|" & cboMedicoEmergencias.ItemData(cboMedicoEmergencias.ListIndex) & "|E"
21                Set rsMedicoACargo = frsEjecuta_SP(vgstrParametrosSP, "Sp_GnSelMedicoACargo")

22                If rsMedicoACargo.RecordCount = 0 Then
23                    Set rsMedicoACargo = frsRegresaRs("Select * From ExMedicoACargo Where intNumPaciente = -1", adLockOptimistic, adOpenDynamic)
24                    With rsMedicoACargo
25                        .AddNew
26                        !numNumCuenta = rsCuenta!INTNUMCUENTA
27                        !intnumpaciente = Val(txtExpedienteInterno.Text)
28                        !CHRTIPOPACIENTE = "E"
29                        !intCveMedico = cboMedicoEmergencias.ItemData(cboMedicoEmergencias.ListIndex)
30                        !dtmFechaHoraCargo = fdtmServerFechaHora
31                        !chrEstatusMedico = "A"
32                        .Update
33                        .Close
34                   End With
35                Else
36                    rsMedicoACargo.Close
37                End If
38            End If
39            pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "ACTIVACIÓN EXTERNO", Str(Val(txtExpedienteInterno.Text)) & " Cta. " & CStr(rsCuenta!INTNUMCUENTA)
40            EntornoSIHO.ConeccionSIHO.CommitTrans
41        Else
              'El paciente debe tener una cuenta abierta.
42            MsgBox SIHOMsg(541), vbOKOnly + vbExclamation, "Mensaje"
43        End If
44        rsCuenta.Close

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdActivarPaciente_Click" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pActivaPaciente(intCveDepartamento As Integer, llngCuenta As Long)
On Error GoTo NotificaError
    Dim rsExternoActivado As New ADODB.Recordset

        vgstrParametrosSP = Val(txtExpedienteInterno.Text) & "|" & llngCuenta & "|" & intCveDepartamento
        Set rsExternoActivado = frsEjecuta_SP(vgstrParametrosSP, "Sp_GnSelExternoActivado")
        If rsExternoActivado.RecordCount = 0 Then
            Set rsExternoActivado = frsRegresaRs("Select * From ExExternoActivado Where intNumPaciente = -1", adLockOptimistic, adOpenDynamic)
            With rsExternoActivado
                .AddNew
                !intnumpaciente = Val(txtExpedienteInterno.Text)
                !INTMOVPACIENTE = llngCuenta
                !smiCveDepto = intCveDepartamento
                !dtmFechahora = fdtmServerFecha + fdtmServerHora
                !chrEstatus = "A"
                .Update
                .Close
            End With
        Else
            rsExternoActivado.Close
        End If
        
Exit Sub
NotificaError:
    If Err.Number = -2147217900 Then
        Call pRegistraError(Err.Number, Left(Err.Description, 101), cgstrModulo, (vgstrNombreForm & ":pActivaPaciente"), "Exp. " & Trim(txtExpedienteInterno.Text) & " Cta. " & Trim(Str(llngCuenta)) & " Dpto. " & Trim(Str(intCveDepartamento)))
    Else
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pActivaPaciente"))
    End If
End Sub

Private Sub cmdBuscarCirugia_Click()
On Error GoTo NotificaError
          
2         Set frmBusquedaCirugia.vlfrmForma = frmAdmisionPaciente
3         frmBusquedaCirugia.Show vbModal, Me

4         If vglngCveCirugia > 0 Then
5             txtCirugia.Text = vgstrDescCirugia
6             vllngCveCirugia = vglngCveCirugia
7         Else
8            txtCirugia.Text = ""
9            vllngCveCirugia = 0
10        End If
          

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdBuscarCirugia_Click" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub cmdBusquedaPaciente_Click()
1     On Error GoTo NotificaError
          Dim rsUltimaCuenta As New ADODB.Recordset
              
2         frmPacientes.Show vbModal, Me
          
3         If frmPacientes.vglngExpediente > 0 Then
4             pLimpia
5             pDatosPacientes frmPacientes.vglngExpediente
              
6             Set rsUltimaCuenta = frsEjecuta_SP(CStr(frmPacientes.vglngExpediente) & "|" & vgintClaveEmpresaContable & "|" & vgintNumeroDepartamento, "sp_GnSelUltimaCuentaPaciente")
7             If Not rsUltimaCuenta.EOF Then
8                 If (rsUltimaCuenta!Estatus = "A" Or rsUltimaCuenta!Estatus = "P") And (cgstrModulo = "AD" Or rsUltimaCuenta!tipo = "E") Then
9                     pDatosIngreso rsUltimaCuenta!cuenta, rsUltimaCuenta!tipo
10                    vlblnDatosCapturados = True
11                Else
                      'Carga algunos datos de la última cuenta del paciente
12                    pDatosUltimaCuenta rsUltimaCuenta!cuenta, rsUltimaCuenta!tipo
                      
                      'Dependiendo del módulo, es el tipo de ingreso predeterminado
13                    If cgstrModulo = "LA" Or cgstrModulo = "IM" Or cgstrModulo = "PV" Or cgstrModulo = "CC" Or cgstrModulo = "BS" Then
14                        cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveExterno)
15                    ElseIf cgstrModulo = "AD" Then
16                        cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveInternamientoNormal)
17                    Else
18                        cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveUrgencias)
19                    End If
                      
20                    pCargaFamiliar Str(vglngExpediente), Str(rsUltimaCuenta!cuenta)
21                End If
22            Else
                  'Externo sin cuenta
23                vlstrTipoPacienteConsultado = "E"
                  
                  'Dependiendo del módulo, es el tipo de ingreso predeterminado
24                If cgstrModulo = "LA" Or cgstrModulo = "IM" Or cgstrModulo = "PV" Or cgstrModulo = "CC" Or cgstrModulo = "BS" Then
25                    cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveExterno)
26                Else
27                    cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveUrgencias)
28                End If
              
29                cmdBusquedaPaciente.Enabled = False
                  
30                pCargaFamiliar Str(vglngExpediente)
31            End If
              
32            OptEnvioPromo(0).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnSiEnvioPromo)
33            OptEnvioPromo(1).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnNoEnvioPromo)
34        End If
          
        Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdBusquedaPaciente_Click" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub cmdGrabar_Click()

1     On Error GoTo NotificaError

          Dim vlblnFueAlta As Boolean
          Dim lngCveListaNegra As Long
          Dim lngNumPaciente As Long 'Consecutivo del paciente
          Dim lngnumCuenta As Long 'Número de cuenta
          Dim strFechaIngreso As String 'Fecha de ingreso
          Dim strHoraIngreso As String 'Hora de ingreso
          Dim lngCveIngresoPrevio As Long 'Clave del ingreso previo
          Dim rsIngresoPrevio As New ADODB.Recordset 'RS para consultar si existe un ingreso previo
          Dim lngCveTipoIngreso As Long 'Clave del tipo de ingreso, claves de la tabla SITIPOINGRESO
          Dim blnSeleccionoCuarto As Boolean
          Dim blnCuentaAbierta As Boolean
          Dim lngContador As Long
          Dim intMensaje As Integer
          Dim vlaryParametrosSalida() As String
          Dim vlintEmpresa As Integer
          Dim rsLogInterfaz As New ADODB.Recordset
          Dim llngResultado As Long
          Dim rsConcepto As ADODB.Recordset
          Dim rsFormaNac As ADODB.Recordset
          Dim rsTipoPaciente As New ADODB.Recordset
          Dim rsTipoIngreso As New ADODB.Recordset
          Dim rsCuentaEnFarmacia As New ADODB.Recordset
          Dim llngConceptoCuarto As Long
          Dim llngDeptoConceptoCuarto As Long
          Dim llngPaqueteAnterior As Long
          Dim vlstrSentencia2 As String
          Dim lngnumCuenta2 As Long
          Dim rsPaqueteAnterior As New ADODB.Recordset
          Dim rsPaquete As New ADODB.Recordset
          Dim lngParametroCargoConsulta As Long
          Dim intRow As Integer  'Contador para guardar los documentos adjuntos
          Dim rsUltimaCuenta As New ADODB.Recordset
          Dim vllngUltimaCuenta As Long
          Dim vllngTipoResponsable As Long
          Dim vlStrTipoDeNac As String
          Dim rsDeptoFarmacia As ADODB.Recordset
          Dim rsCuentaFarmacia As ADODB.Recordset
          Dim vlintTipoIngresoCuenta2 As Integer
          Dim strSentencia As String
          Dim rsHonorarios As ADODB.Recordset
          Dim rsPaqueteCirugia As ADODB.Recordset
          
          Dim arrFunciones() As String
                  
          'Se valida primero si la empresa seleccionada está configurada para usarse con alguna interfaz de WS ------------------------------------------>
2         vglngCveInterfazWS = 0

              'Se obtiene la clave de la interfaz a utilizar (si es que aplica)
3             If cboEmpresa.ListIndex > -1 Then
4                 vglngCveInterfazWS = 1
5                 frsEjecuta_SP cboEmpresa.ItemData(cboEmpresa.ListIndex) & "|" & vgintClaveEmpresaContable, "FN_GNSELINTERFAZWS", True, vglngCveInterfazWS
                  
6                 If cgstrModulo = "AD" Then
                      'Se verifica si se cuenta con una licencia para la interfaz obtenida
7                     If vglngCveInterfazWS <> 0 Then
8                         vglngCveInterfazWS = IIf(fblnLicenciaWS(vglngCveInterfazWS) = True, vglngCveInterfazWS, 0)
9                     End If
10                Else
11                    vglngCveInterfazWS = 0
12                End If
                  
13            Else
14                vglngCveInterfazWS = 0
15            End If
          '<------------------------------------------------------------------------------------------------------------------------------------------------------------------
          
16        If fblnDatosValidos() Then
              'Asignar los valores capturados a variables de forma:
17            blnValidaDatos = True
              
18            pAsignaValoresVariables
              
19            If blnValidaDatos = False Then
                  '¡No ha ingresado datos!
20                MsgBox SIHOMsg(2) & vbCrLf & "Cuarto", vbInformation + vbOKOnly, "Mensaje"
21                sstObj.Tab = 1
22                MyTabHeader1.TabCurrent = 1
23                cmdSugerirCuarto.SetFocus
24                Exit Sub
25            End If
              
26            lngCveTipoIngreso = cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex)
              
27            If cboEmpresaPaciente.ListCount <= 0 Then                                                      ''
28              vglngCveEmpresaPaciente = 0
29            Else
30                vglngCveEmpresaPaciente = cboEmpresaPaciente.ItemData(cboEmpresaPaciente.ListIndex)
31            End If
              
32            vgchMotivoIngreso = Trim(txtMotivoIngreso.Text)                                                ''
              
              'Verificar si el paciente está en la lista negra (sólo cuando no se ha internado)
              'si es interno y no tienen cuenta
33            lLngCveListaNegraFamiliar = -1
34            lblnCoincideListaNegraFam = False
35            If Val(txtCuentaInterno.Text) = 0 _
              And lngCveTipoIngreso <> clngCveUrgencias And lngCveTipoIngreso <> clngCveExterno And lngCveTipoIngreso <> clngCveConsultaExterna Then
36                If fblnEstaEnListaNegra(Val(txtExpedienteInterno.Text), llngCveTipoPacienteLN, IIf(llngCveEmpresaLN <> -1, llngCveEmpresaLN, llngCveRelacionLN), lngCveListaNegra) Then
37                    vlblnEsDeudorIncobrable = True
38                    Exit Sub
39                Else
40                    vlblnEsDeudorIncobrable = False
                  
41                End If
42                If lngCveListaNegra = -1 Or lngCveListaNegra = 0 Then
                      'Si no está en la lista negra, se valida si esta como familiar
43                    If Not fblnContinuarListaNegraFamiliar2(Trim(txtApellidoPaterno.Text), Trim(txtApellidoMaterno.Text)) Then
44                        vlblnEsDeudorIncobrable = True
45                        Exit Sub
46                    Else
47                        vlblnEsDeudorIncobrable = False
48                    End If
49                End If
                  
                  
50            End If
              'cargo de cuarto automático
51            If (Val(txtCuentaInterno.Text) = 0 Or vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoPrepago) And lngCveTipoIngreso <> clngCveUrgencias And lngCveTipoIngreso <> clngCveExterno And lngCveTipoIngreso <> clngCveConsultaExterna Then
52                If lblnCargarCuarto And fraAsignacionCuarto.Enabled Then
53                    Set rsConcepto = frsRegresaRs("select AdCuarto.*, adArea.tnyCveDepto as depto from AdCuarto " & _
                                                    " INNER JOIN ADAREA ON ADCUARTO.TNYCVEAREA = ADAREA.TNYCVEAREA " & _
                                                    " where intCveCuarto= " & llngCveCuarto)
54                    If rsConcepto.RecordCount <> 0 Then
55                        llngDeptoConceptoCuarto = rsConcepto!DEPTO
56                        If CDate(mskHoraIngreso.Text) >= CDate(lstrHoraInicioMediaEstancia) And CDate(mskHoraIngreso.Text) <= CDate(lstrHoraFinMediaEstancia) Then
57                            If IsNull(rsConcepto!intcveConceptoMediaEstancia) Then
58                                MsgBox SIHOMsg(1356), vbExclamation, "Mensaje"
59                                Exit Sub
60                            Else
61                                llngConceptoCuarto = rsConcepto!intcveConceptoMediaEstancia
62                            End If
63                        Else
64                            If IsNull(rsConcepto!intOtroConcepto) Then
65                                MsgBox SIHOMsg(1357), vbExclamation, "Mensaje"
66                                Exit Sub
67                            Else
68                                llngConceptoCuarto = rsConcepto!intOtroConcepto
69                            End If
70                        End If
71                    End If
72                End If
73            End If
              '###########################################################################################################
              '################################################ INGRESO WS ################################################
              '###########################################################################################################
              
              'Esta validación es nueva, y servirá para preguntar si se desea abrir cuenta al paciente ANTES, para seguir con el proceso de AXA ------------------------------>
              
              'Inicializa variable
74            frmDatosWSAXA.vgblnConexionCorrecta = False
75            vgblnAbreCta = False
              
              'Si es Urgencias o Externo
76            If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveExterno Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveConsultaExterna Then
                  'Si el paciente está relacionado con un médico o un empleado se debe abrir cuenta
                  'o si se abre acuenta automáticamente
77                If blnAbrirCuenta Or vlstrTipoTipoPaciente = "ME" Or vlstrTipoTipoPaciente = "EM" Then
                      'Si es Admisión, pregunta si se abre cuenta al paciente
78                    If cgstrModulo = "AD" And vlstrTipoTipoPaciente <> "ME" And vlstrTipoTipoPaciente <> "EM" Then
79                        intMensaje = IIf(Val(txtCuentaExterno.Text) > 0, 1044, 39)
                          '¿Desea abrir/actualizar la cuenta del paciente?
80                        If MsgBox(SIHOMsg(intMensaje), vbYesNo + vbQuestion, "Mensaje") = vbYes Then
81                            vgblnAbreCta = True
82                        End If
83                    End If
84                End If
                              
                  'SE VALIDA EL TIPO DE INGRESO, PARA QUE SE UTILICE ÚNICAMENTE CON PACIENTES DE TIPO "URGENCIAS", "INTERNO FUÉ URGENCIAS", "INTERNAMIENTO NORMAL", "PREVIO"
85                If (cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias) Or (cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveInternoFueUrgencias) Or (cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveInternamientoNormal) Or (cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCvePrevio) Then
                      'Se valida si el paciente ya tiene un registro previo en las transacciones con la interfaz del WS
86                    vgstrParametrosSP = CStr(txtExpedienteInterno) & "|" & CStr(vglngCuentaPaciente) & "|" & CStr(lngCveTipoIngreso)
87                    Set rsLogInterfaz = frsEjecuta_SP(vgstrParametrosSP, "SP_GNSELLOGINTERFAZAXA")
                      
88                    If rsLogInterfaz.RecordCount = 0 Then
                          'Se valida si el paciente tiene licencia para el ingreso por WS
89                        If vglngCveInterfazWS > 0 And vgblnAbreCta Then
90                            vgCveTipoIngresoAXA = lngCveTipoIngreso
91                            frmDatosWSAXA.Show vbModal, Me
                              
                              'Se valida si se realizó una conexión correcta
92                            If frmDatosWSAXA.vgblnConexionCorrecta = False Then
93                                If MsgBox("No se realizó una conexión con el servicio web de AXA. " & vbNewLine & vbNewLine & "¿Desea ingresar al paciente de todos modos?", vbYesNo + vbQuestion, "Mensaje") = vbNo Then
94                                    Exit Sub
95                                Else
                                      '***************************** GRABADO DEL LOG AUNQUE NO SE HAYA REALIZADO UNA CONEXIÓN *****************************
                                      'Se modifica el registro del log de interfaz con AXA (en caso de que aplique)...Guarda el número de cuenta, tipo de paciente y empleado
96                                    pCargaArreglo vlaryParametrosSalida, "|" & adDouble 'adBSTR 'adVarChar
97                                    vgstrParametrosSP = "|" & vgintNumeroModulo & "|" & lngCveTipoIngreso & "|" & lngnumCuenta & "|" & lngNumPaciente & "|E|" & vgstrNumeroIP & "|ND|ND|||" & Trim(vgstrNombreMaquina) & "|" & vllngPersonaGraba & "|0|"
98                                    frsEjecuta_SP vgstrParametrosSP, "sp_GNINSloginterfazaxa", , , vlaryParametrosSalida
                                      '***********************************************************************************************************************************************
99                                End If
100                           End If
                                                                              
101                       End If
102                   End If
103               End If
104           End If
                      
              '<-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
              
              '###########################################################################################################
              '###########################################################################################################
              '###########################################################################################################
                 
105           EntornoSIHO.ConeccionSIHO.BeginTrans
              
              'Esta es una trampita para que no truene como palomita cuando es un paciente Urgencias
106           If lngCveTipoIngreso = clngCveUrgencias Then pHabilitaAsignacionCuarto False
                      
107           If fblnCuartoDisponible() Then
                  'Alta o modificación del paciente:
108               Set rsFormaNac = frsEjecuta_SP(IIf(Trim(txtExpedienteInterno.Text) = "", 0, Trim(txtExpedienteInterno)), "SP_EXSELFORMANACIMIENTO")
                  
109   If cboFormaNac.ListIndex = 0 Then
110     If vlblnConsulta = True Then
111       If rsFormaNac!vchFormaNacimiento = "ABORTO" Then
112         vlStrTipoDeNac = "ABORTO" 'Verificado
113       Else
114         vlStrTipoDeNac = "CESÁREA" 'Verificado
115       End If
116     Else
117       vlStrTipoDeNac = "CESÁREA"
118     End If
119   ElseIf cboFormaNac.ListIndex = 1 Then
120     If vlblnConsulta = True Then
121       If rsFormaNac!vchFormaNacimiento = "ABORTO" Then
122         vlStrTipoDeNac = "CESÁREA" 'Verificado
123       Else
124         vlStrTipoDeNac = "PARTO" 'Verificado
125       End If
126     Else
127       vlStrTipoDeNac = "PARTO"
128     End If

129   ElseIf cboFormaNac.ListIndex = 2 Then
130     If vlblnConsulta = True Then
131           vlStrTipoDeNac = "PARTO" 'Verificado
132     Else
          
133     End If
134   Else
135     vlStrTipoDeNac = "N/D"
136   End If

137               vgstrParametrosSP = cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex) & "|" & _
                                      vllngCveEmpresa & "|" & llngCvePoliza & "|" & _
                                      llngCveEmpresaPaciente & "|" & llngCveReligion & "|" & _
                                      llngCveEstadoCivil & "|" & llngCveCiudadNacto & "|" & _
                                      llngCveNacionalidad & "||" & Trim(Replace(txtApellidoPaterno.Text, "|", "")) & "|" & _
                                      Trim(Replace(txtApellidoMaterno.Text, "|", "")) & "|" & Trim(Replace(txtNombre.Text, "|", "")) & "|" & _
                                      IIf(optSexo(0).Value, "M", "F") & "|" & lstrFechaNacimiento & "|" & _
                                      Trim(Replace(mskRFC.Text, "|", "")) & "|" & Trim(Replace(txtCurp.Text, "|", "")) & "|" & _
                                      IIf(Trim(Replace(cboOcupacion.Text, "|", "")) = "<AGREGAR>", "", Trim(Replace(cboOcupacion.Text, "|", ""))) & "|" & Trim(Replace(txtCorreoElectronico.Text, "|", "")) & "|" & _
                                      Trim(Replace(txtConyuge.Text, "|", "")) & "|" & Trim(Replace(txtPaternoConyuge.Text, "|", "")) & "|" & _
                                      Trim(Replace(txtMaternoConyuge.Text, "|", "")) & "|" & Trim(Replace(txtPadre.Text, "|", "")) & "|" & _
                                      Trim(Replace(txtMadre.Text, "|", "")) & "|" & Trim(Replace(txtNumeroControl.Text, "|", "")) & "|" & _
                                      Trim(Replace(txtAutoriza.Text, "|", "")) & "|" & Trim(Replace(txtNumeroPoliza.Text, "|", "")) & "|" & _
                                      IIf(Replace(vlstrIngresoSeleccionado, "|", "") = Replace(vlstrTipoIngresoPrevio, "|", ""), "1", "0") & "|" & _
                                      IIf(vlblnConsulta, Val(Replace(txtExpedienteInterno.Text, "|", "")), 0) & "|" & llngCveOcupacion & "|" & _
                                      llngCveIdioma & "|" & Replace(lstrAlergias, "|", "") & "|" & vlStrTipoDeNac & "|" & _
                                      IIf(OptEnvioPromo(0).Value, 1, 0) & "|" & lstrNacimientoPadre & "|" & lstrNacimientoMadre & "|" & lstrNacimientoConyuge
138               lngNumPaciente = 1
139               frsEjecuta_SP vgstrParametrosSP, "sp_ExInSPaciente", True, lngNumPaciente
                  
140               If lngNumPaciente = 0 Then
                     'No se pueden guardar los datos
141                  MsgBox SIHOMsg(33), vbOKOnly + vbExclamation, "Mensaje"
142                  EntornoSIHO.ConeccionSIHO.RollbackTrans
143                  Exit Sub
144               End If
                            
145               txtExpedienteInterno.Text = Str(lngNumPaciente)
146               vglngExpediente = lngNumPaciente
                  
147               If llngCvePreRegistro > 0 Then
148                   pEjecutaSentencia "update ExPacientePreregistro set intNumPaciente = " & lngNumPaciente & " where intConsecutivo = " & llngCvePreRegistro
149               End If
                  
                  'Registro de domicilios:
150               pInsertaDomicilios lngNumPaciente
                  
                  'Registro de teléfonos:
151               pInsertaTelefonos lngNumPaciente
                  
152               If lstrEstatusPaciente = "E" Then
                  'La operación se realizó satisfactoriamente.
153                   If Not vlblnEsDeudorIncobrable Then
154                       MsgBox SIHOMsg(420), vbOKOnly + vbInformation, "Mensaje"
155                       pConsultaPuntosLealtad
156                   Else
157                       MsgBox "No se realizó el proceso.", vbOKOnly + vbInformation, "Mensaje"
158                   End If
159                   pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "EGRESADOS MODIFICACION", Str(lngNumPaciente)
160                   EntornoSIHO.ConeccionSIHO.CommitTrans
161                   vlblnFueAlta = False
162                   Exit Sub
163               End If
                  
                  'Aumentar el consecutivo de pacientes desconocidos
164               If vlblnTipoPacienteDesconocido Then
165                   pActualizaParametro -1, "INTCONSECUTIVODESCONOCIDO", "AD", (intNumeroPacienteDesconocido + 1)
166               End If
                      
                  'Si el ingreso no es Previo, Urgencias o Externo
167               If lngCveTipoIngreso <> clngCvePrevio And lngCveTipoIngreso <> clngCveUrgencias And lngCveTipoIngreso <> clngCveExterno And lngCveTipoIngreso <> clngCveConsultaExterna Then
168                   vlblnFueAlta = Val(txtCuentaInterno.Text) = 0
                  
                      
171                   llngPaqueteAnterior = 0
172                   If Not vlblnFueAlta Then
173                       Set rsPaqueteAnterior = frsRegresaRs("select intCvePaquete from ExPacienteIngreso where chrTipoIngreso = 'I' and intNumCuenta =" & Val(txtCuentaInterno.Text))
174                       If rsPaqueteAnterior.RecordCount <> 0 Then
175                           llngPaqueteAnterior = IIf(IsNull(rsPaqueteAnterior!intCvePaquete), 0, rsPaqueteAnterior!intCvePaquete)
176                       End If
177                       rsPaqueteAnterior.Close
178                   End If
                      
                      'Determinar la fecha y hora de ingreso:
179                   If vlstrIngresoSeleccionadoPreviamente = vlstrTipoIngresoPrevio Then
180                       vlblnCambioFechaIngreso = False
181                       vlblnCambioHoraIngreso = False
182                   End If
                      
183                   If vlblnCambioFechaIngreso Then
184                       strFechaIngreso = fstrFechaSQL(mskFechaIngreso.Text, mskHoraIngreso.Text)
185                       strHoraIngreso = mskHoraIngreso.Text
186                   Else
187                       strFechaIngreso = fstrFechaSQL(fdtmServerFecha, fdtmServerHora)
188                       strHoraIngreso = fdtmServerHora
189                       mskFechaIngreso.Mask = ""
190                       mskFechaIngreso.Text = fdtmServerFecha
191                       mskFechaIngreso.Mask = "##/##/####"
192                       mskHoraIngreso.Mask = ""
193                       mskHoraIngreso.Text = IIf(Len(Trim(Str(Hour(strHoraIngreso)))) = 1, "0" + Trim(Str(Hour(strHoraIngreso))), Trim(Str(Hour(strHoraIngreso)))) + ":" + IIf(Len(Trim(Str(Minute(strHoraIngreso)))) = 1, "0" + Trim(Str(Minute(strHoraIngreso))), Trim(Str(Minute(strHoraIngreso))))
194                       mskHoraIngreso.Mask = "##:##"
195                   End If
                      
                      'Alta o modificación de la admisión del paciente:
196                   vgstrParametrosSP = txtExpedienteInterno.Text & "|" & _
                                          lngCveTipoIngreso & "|" & _
                                          vllngPersonaGraba & "|" & _
                                          vgintNumeroDepartamento & "|" & lintCveDeptoIngreso & "|" & _
                                          llngCveProcedencia & "|" & llngCveEmpresaPaciente & "|" & _
                                          IIf(Val(txtCuentaInterno.Text) = 0, 0, vllngPersonaGraba) & "|0|" & _
                                          cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex) & "|" & _
                                          vllngCveEmpresa & "|" & llngCvePoliza & "|" & _
                                          llngNumCuentaMama & "|" & _
                                          llngCveMedicoRelacionado & "|" & llngCveEmpleadoRelacionado & "|" & _
                                          llngCveParentescoEmergencia & "|" & llngCveParentescoResponsable & "|" & _
                                          llngCveMedicoEmergencias & "|" & llngCveMedicoTratante & "|" & _
                                          vllngCveDiagnostico & "|0|" & _
                                          llngCvePaquete & "|" & llngCveConcepto & "|" & _
                                          llngCveCuarto & "|" & _
                                          strFechaIngreso & "||" & IIf(vlstrIngresoSeleccionado = vlstrTipoIngresoPrepago, "P", "A") & "|" & _
                                          Trim(Replace(txtNumeroControl.Text, "|", "")) & "|" & Trim(Replace(txtAutoriza.Text, "|", "")) & "|" & Trim(Replace(txtNumeroPoliza.Text, "|", "")) & "|" & _
                                          lstrTipoAtencion & "|" & Str(Val(Format(txtAnticipo.Text, "#############.00"))) & "|" & _
                                          Trim(Replace(txtNombreEmergencia.Text, "|", "")) & "|" & Trim(Replace(txtDomicilioEmergencia.Text, "|", "")) & "|" & Trim(Replace(txtTelefonoEmergencia.Text, "|", "")) & "|" & _
                                          Trim(Replace(txtNombreResponsable.Text, "|", "")) & "|" & Trim(Replace(txtDomicilioResponsable.Text, "|", "")) & "|" & Trim(Replace(txtTelefonoResponsable.Text, "|", "")) & "|" & Trim(Replace(txtLugarTrabajoResponsable.Text, "|", "")) & "|" & _
                                          Trim(Replace(txtObservaciones.Text, "|", "")) & "|" & _
                                          "0|0|0|0|" & IIf(optOrden(0).Value, 1, 0) & "|" & Val(txtCuentaInterno.Text) & "|" & Trim(Replace(txtDiagnosticoEspecifico.Text, "|", "")) & "|" & Trim(Replace(txtMotivoIngreso.Text, "|", "")) & "|" & vllngCveFamiliar & "|" & IIf(vllngSocioRelacionado = 0, "", vllngSocioRelacionado) & _
                                          "|" & lstrNacimientoResponsable & "|" & lstrNacimientoEmergencia & "|" & vllngCveCirugia & "|" & llngCveTecnicaLaterabilidad 'se agrega & "|" & vglngCveCirugia & "|" & llngCveTecnicaLaterabilidad por el caso 20329
                      
197                   lngnumCuenta = 1
198                   frsEjecuta_SP vgstrParametrosSP, "sp_ExInSPacienteIngreso", True, lngnumCuenta
                      
199                   If lngnumCuenta = 0 Then
                       'No se pueden guardar los datos
200                      MsgBox SIHOMsg(33), vbOKOnly + vbExclamation, "Mensaje"
201                      EntornoSIHO.ConeccionSIHO.RollbackTrans
202                      Exit Sub
203                   End If
                                      
                      vglngCuenta = lngnumCuenta
                                 'Borrar el ingreso previo:
169                   frsEjecuta_SP txtExpedienteInterno.Text, "SP_ADDELINGRESOPREVIO"
                      
                     'REGISTRO EN SILOGACCESOS
170                   pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "BORRADO DE INGRESOS PREVIOS", Str(txtExpedienteInterno.Text)
                           
                      ''Asignacion de honorario médicos en paquetes para cirugias
                      If vlstrIngresoSeleccionado = vlstrTipoIngresoPrepago And vlblnUtilizaConvenio Then
                              If llngCvePaquete <> 0 Then
                              Set rsPaqueteCirugia = frsRegresaRs("Select BITSELECCIONARHONORARIOS from PvPaquete where intnumpaquete= " & llngCvePaquete)
                                  If rsPaqueteCirugia!bitSeleccionarHonorarios = 1 Then
                                      frmHonorariosCirugia.lngNumPaquete = llngCvePaquete
                                      frmHonorariosCirugia.blnSelecciona = True
                                      frmHonorariosCirugia.Show vbModal
                                      
                                      vlstrSentencia = "select * from PVPACIENTEHONORARIOCIRUGIA where intcvePaquete=-1"
                                      Set rsHonorarios = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
                                      'Guardar los que si se incluyen en el paquete
                                      arrFunciones = Split(frmHonorariosCirugia.vstrFunciones, "-")
                                      With rsHonorarios
                                          For intcontador = 0 To UBound(arrFunciones)
                                              If arrFunciones(intcontador) <> "" Then
                                                  .AddNew
                                                  !INTNUMCUENTA = lngnumCuenta
                                                  !intCvePaquete = llngCvePaquete
                                                  !INTCVEFUNCION = Val(arrFunciones(intcontador))
                                                  .Update
                                              End If
                                              
                                          Next intcontador
                                      End With
                                  End If
                              End If
                        End If
                        ''Termina honorarios médicos de paquetes
                      'Guardar control de aseguradora 18084
                      If vlblnFueAlta And vlblnUtilizaConvenio And vlblnAsegurdora Then
                        pGuardarControlAseguradora lngnumCuenta, vllngCveEmpresa
                      End If
                      
                      
204                   If vlblnUsaFarmacia Then
                      
                      
205                   vlstrSentencia2 = "SELECT COUNT(*) TOTAL FROM ADRELACIONCUENTASFARMACIA WHERE intNumCuentaAdmision = " & lngnumCuenta
206                   Set rsCuentaEnFarmacia = frsRegresaRs(vlstrSentencia2)
                      
207                   vlstrSentencia2 = "select * from GNPARAMETROSFARMACIA where TNYCLAVEEMPRESAHOSPITAL = " & vgintClaveEmpresaContable
208                   Set rs = frsRegresaRs(vlstrSentencia2)
                      
209                   If rsCuentaEnFarmacia!Total < 1 And rs.RecordCount > 0 And Not vlblnUtilizaConvenio And rs!bitactivo = 1 Then
                      
210                       vlstrSentencia2 = "SELECT * from SIPARAMETRO where VCHNOMBRE = 'INTTIPOPARTICULAR'"
211                       Set rsTipoPaciente = frsRegresaRs(vlstrSentencia2)
                          
212                       vlstrSentencia2 = "SELECT * from SITIPOINGRESO where VCHNOMBRE = 'EXTERNO' And INTACTIVO = 1"
213                       Set rsTipoIngreso = frsRegresaRs(vlstrSentencia2)
                          
214                       Set rsDeptoFarmacia = frsRegresaRs("SELECT * FROM SIPARAMETRO WHERE VCHNOMBRE = 'INTCVEDEPARTAMENTOADMISION' and INTCVEEMPRESACONTABLE = " & rs!TNYCLAVEEMPRESAFARMACIA)
                          
                          'Set rsCuentaFarmacia = frsRegresaRs("SELECT * FROM AD")
                          
                          Dim cuentaSecundaria As Long
215                       cuentaSecundaria = Val(txtCuentaInterno.Text)
216                       cuentaSecundaria = cuentaSecundaria + 1
                          
                          Dim vlfechaModificada As String
217                       vlfechaModificada = fstrCambiaHoraUnMinuto(strFechaIngreso)
218                       vlintTipoIngresoCuenta2 = 0
219                       If rsTipoIngreso.RecordCount > 0 And rsTipoPaciente.RecordCount > 0 Then
220                           vlintTipoIngresoCuenta2 = rsTipoIngreso!intCveTipoIngreso
221                           vgstrParametrosSP = txtExpedienteInterno.Text & "|" & _
                                           rsTipoIngreso!intCveTipoIngreso & "|" & _
                                           vllngPersonaGraba & "|" & _
                                           rsDeptoFarmacia!VCHVALOR & "|" & rsDeptoFarmacia!VCHVALOR & "|" & _
                                           llngCveProcedencia & "|" & llngCveEmpresaPaciente & "|" & _
                                           IIf(Val(Val(txtCuentaInterno.Text) + 1) = 0, 0, vllngPersonaGraba) & "|0|" & _
                                           rsTipoPaciente!VCHVALOR & "|" & _
                                           vllngCveEmpresa & "|" & llngCvePoliza & "|" & _
                                           llngNumCuentaMama & "|" & _
                                           llngCveMedicoRelacionado & "|" & llngCveEmpleadoRelacionado & "|" & _
                                           llngCveParentescoEmergencia & "|" & llngCveParentescoResponsable & "|" & _
                                           llngCveMedicoEmergencias & "|0|0|0|" & _
                                           llngCvePaquete & "|" & llngCveConcepto & "|" & _
                                           "|" & vlfechaModificada & "||" & _
                                           IIf(cgstrModulo = "AD" Or cgstrModulo = "EX" Or lngnumCuenta = 0, "A", "") & "|" & _
                                           Trim(txtNumeroControl.Text) & "|" & Trim(txtAutoriza.Text) & "|" & Trim(txtNumeroPoliza.Text) & "|" & _
                                           lstrTipoAtencion & "|" & Str(Val(Format(txtAnticipo.Text, "#############.00"))) & "|" & _
                                           Trim(txtNombreEmergencia.Text) & "|" & Trim(txtDomicilioEmergencia.Text) & "|" & Trim(txtTelefonoEmergencia.Text) & "|" & _
                                           Trim(txtNombreResponsable.Text) & "|" & Trim(Trim(txtDomicilioResponsable.Text)) & "|" & _
                                           Trim(txtTelefonoResponsable.Text) & "|" & Trim(txtLugarTrabajoResponsable.Text) & "|" & Trim(txtObservaciones.Text) & "|" & _
                                          "0|0|0|0|0|" & IIf(cuentaSecundaria = 1, 0, cuentaSecundaria) & "|" & Trim(txtDiagnosticoEspecifico.Text) & "|" & Trim(txtMotivoIngreso.Text) & "|" & vllngCveFamiliar & "|" & IIf(vllngSocioRelacionado = 0, "", vllngSocioRelacionado) & _
                                                  "|" & lstrNacimientoResponsable & "|" & lstrNacimientoEmergencia & "|" & 0 & "|" & 0 'se agrega & "|" & vglngCveCirugia & "|" & llngCveTecnicaLaterabilidad por el caso 20329
                          
222                           lngnumCuenta2 = 1
223                           frsEjecuta_SP vgstrParametrosSP, "sp_ExInSPacienteIngreso", True, lngnumCuenta2
224                           vlblnGuardaFarmacia = True
                          
225                       End If
                          
226                   End If
                      
227                   Else
                      
228                   End If
                      
                      
229                   txtCuentaInterno.Text = lngnumCuenta
                      
                                      
                      '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      
                      'Se valida si el paciente ya tiene un registro previo en las transacciones con la interfaz del WS
230                   vgstrParametrosSP = CStr(txtExpedienteInterno) & "|" & CStr(lngnumCuenta) & "|" & CStr(lngCveTipoIngreso)
231                   Set rsLogInterfaz = frsEjecuta_SP(vgstrParametrosSP, "SP_GNSELLOGINTERFAZAXA")
                      
232                   If rsLogInterfaz.RecordCount = 0 Then
                          'SE VALIDA EL TIPO DE INGRESO, PARA QUE SE UTILICE ÚNICAMENTE CON PACIENTES DE TIPO "URGENCIAS", "INTERNO FUÉ URGENCIAS", "INTERNAMIENTO NORMAL", "PREVIO"
233                       If (cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias) Or (cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveInternoFueUrgencias) Or (cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveInternamientoNormal) Or (cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCvePrevio) Then
                              'Se valida si el paciente tiene licencia para el ingreso por WS
234                           If vglngCveInterfazWS > 0 Then
235                               vgCveTipoIngresoAXA = lngCveTipoIngreso
236                               frmDatosWSAXA.Show vbModal, Me
                                  
                                  'Se valida si se realizó una conexión correcta
237                               If frmDatosWSAXA.vgblnConexionCorrecta = False Then
238                                   If MsgBox("No se realizó una conexión con el servicio web de AXA, ¿desea ingresar al paciente de todos modos?", vbYesNo + vbQuestion, "Mensaje") = vbNo Then
239                                       EntornoSIHO.ConeccionSIHO.RollbackTrans
240                                       Exit Sub
241                                   End If
242                               End If
                                 
                                  'Se modifica el registro del log de interfaz con AXA (en caso de que aplique)...Guarda el número de cuenta, tipo de paciente y empleado
243                               If vglngCveInterfazWS > 0 And frmDatosWSAXA.vgblnConexionCorrecta Then
244                                   vgstrParametrosSP = "|" & vgintNumeroModulo & "|" & lngCveTipoIngreso & "|" & lngnumCuenta & "|" & lngNumPaciente & "|" & "I|||" & IIf(frmDatosWSAXA.vgblnConexionCorrecta = False, "NO", "SI") & "||||" & vllngPersonaGraba & "|" & frmDatosWSAXA.vglngFolioTrans & "|0|"
245                                   frsEjecuta_SP vgstrParametrosSP, "sp_GNINSloginterfazaxa"
246                               End If
                                  
          '                    Else
          '                        Exit Sub 'BORRAME!!! (Este EXIT SUB solo se usa para las pruebas, para que no comience la transacción)
247                           End If
248                       End If
249                   End If
                      
                      '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                      
                      
                      'Desactivar al paciente externo:
250                   If cboTipoIngreso.Text = vlstrTipoIngresoInternoFueUrgencias And llngNumPacienteExterno <> 0 Then
251                       frsEjecuta_SP Str(llngNumPacienteExterno), "SP_EXUPDEXTERNOACTIVADO"
252                       frsEjecuta_SP Str(llngNumPacienteExterno), "SP_ADUPDEGRESOEXTERNO"
253                       pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "DESACTIVACIÓN EXTERNO", Str(lngNumPaciente) & " Cta. " & Trim(vllngIngresoConsultado)
254                   End If
                          
                      'Liberar el cuarto del paciente externo o ambulatorio:
255                   If cboTipoIngreso.Text = vlstrTipoIngresoInternoFueAmbulatorio Or cboTipoIngreso.Text = vlstrTipoIngresoCortaEstanciaFueAmbulatorio Or cboTipoIngreso.Text = vlstrTipoIngresoInternoFueUrgencias Then
256                       vgstrParametrosSP = Str(llngNumPacienteExterno) & "|" & Str(vglngCveEstadoCuartoDisponible)
257                       frsEjecuta_SP vgstrParametrosSP, "SP_EXUPDLIBERACUARTOEXTERNO"
258                   End If
                      
259                   If vlblnFueAlta Then
                          'Agregar datos fiscales:
260                       vgstrParametrosSP = txtExpedienteInterno.Text & "|" & txtCuentaInterno.Text
261                       frsEjecuta_SP vgstrParametrosSP, "sp_AdInsDatoFiscal"
                          
                          'Historial de cuentas:
262                       pRegistrarCuentaHistorial CLng(txtCuentaInterno.Text), "I", CStr(cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex)), vllngPersonaGraba, CLng(vgintNumeroDepartamento)
263                   Else
264                       If vlstrIngresoSeleccionadoPreviamente <> vlstrIngresoSeleccionado Then
                              'Historial de cuentas:
265                           pRegistrarCuentaHistorial CLng(txtCuentaInterno.Text), "I", CStr(cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex)), vllngPersonaGraba, CLng(vgintNumeroDepartamento)
266                       End If
267                   End If
                          
                      'Registrar el médico tratante:
268                   pAgregarMedicoACargo
                          
                      'Asignar las cirugías que tenía programadas antes de ser internado
269                   vgstrParametrosSP = Str(Val(txtExpedienteInterno.Text)) & "|" & Str(Val(txtCuentaInterno.Text))
270                   frsEjecuta_SP vgstrParametrosSP, "SP_EXUPDPROGRAMACIRUGIA"
                                      
271                   If (vgblnAsignarPaqueteAdmision Or (cgstrModulo = "PV" And vgstrForma = "frmPresupuestos")) Then
272                     If llngPaqueteAnterior <> 0 Then
273                         If (OptPaqueteOtros(0).Value And llngPaqueteAnterior <> llngCvePaquete) Or (OptPaqueteOtros(1).Value And llngPaqueteAnterior <> 0) Then
                                'si tenia antes asignado un paquete y se cambió o se seleccionó "otro" se borra el paquete anterior
274                             frsEjecuta_SP lngnumCuenta & "|I|" & llngPaqueteAnterior, "SP_ADDELPAQUETEASIGNADOADMISIO"
                                '--> 15003
                                'Si se asignó un paquetes, si se manejan cajas de material, relacionadas al paquete se generan indicaciones medicas,se quita lo anterior
275                             frsEjecuta_SP lngnumCuenta & "|I|" & llngPaqueteAnterior & "|0", "SP_EXUPDPAQUETEINDICACIONES"
                                '<--
276                         End If
277                     End If
                        'Asignar el paquete:
278                     If cboPlanPaqueteCirugia.ListIndex > -1 And OptPaqueteOtros(0).Value And llngPaqueteAnterior <> llngCvePaquete Then
279                         Set rsPaquete = frsRegresaRs("select * from pvPaquetePaciente where intmovpaciente = " & lngnumCuenta & " and chrTipopaciente = 'I' and intNumpaquete = " & llngCvePaquete)
280                         If rsPaquete.RecordCount = 0 Then
281                                 pAsignaPaquete lngnumCuenta, llngCvePaquete, vldblPrecio, "I", vlintBitPesos
282                         End If
283                     End If
                        '--> 15003
284                     If cboPlanPaqueteCirugia.ListIndex > -1 And OptPaqueteOtros(0).Value Then
                            'Si se asignó un paquetes, si se manejan cajas de material, relacionadas al paquete se generan indicaciones medicas, Se generan las nuevas
285                         frsEjecuta_SP lngnumCuenta & "|I|" & llngCvePaquete & "|1", "SP_EXUPDPAQUETEINDICACIONES"
286                     End If
                        '<--
287                   End If

                      'Cambia el estado del cuarto y registra en el historial de cambios de cuarto:
288                   If fraAsignacionCuarto.Enabled Then
                          'If vlstrIngresoSeleccionadoPreviamente = vlstrTipoIngresoPrepago Then
289                       If vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoPrepago Then
                          'Asigna el cuarto
290                           vgstrParametrosSP = lngNumPaciente & "|" & lngnumCuenta & "|" & llngCveCuarto
291                           frsEjecuta_SP vgstrParametrosSP, "sp_AdUpdCuartoPaciente"
292                       End If
                          'cargo del cuarto
293                       If lblnCargarCuarto And (vlblnFueAlta Or vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoPrepago) Then
294                           llngResultado = 1
295                           frsEjecuta_SP CStr(llngConceptoCuarto) & "|" & CStr(llngDeptoConceptoCuarto) & "|D|0|" & CStr(lngnumCuenta) & "|I|OC|0|1|" & vllngPersonaGraba & "|0||0|2", "SP_PVUPDCARGOS", True, llngResultado
296                           If llngResultado < 1 Then
297                               txtCuentaInterno.Text = ""
298                               MsgBox "No se pudo realizar el cargo de cuarto debido a: " & Chr(13) & SIHOMsg(CInt(llngResultado) * -1), vbExclamation, "Mensaje"
299                               EntornoSIHO.ConeccionSIHO.RollbackTrans
300                               Exit Sub
301                           Else
302                               Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGraba, "CARGO DE CUARTO AL INGRESO", "Cuenta " & CStr(lngnumCuenta) & ", Cuarto " & CStr(llngCveCuarto))
303                           End If
304                       End If
                          'Cambia el estado del cuarto y registra en el historial de cambios de cuarto
305                       pCambiaEstadoCuarto
306                       pHabilitaAsignacionCuarto False
307                   End If
                      
                      'Insertar el diagnóstico de ingreso:
308                   pAsignaDiagnostico
                          
309                   If vlstrIngresoSeleccionado = vlstrTipoIngresoInternoFueUrgencias _
                          And Not Me.cboTipoIngreso.Enabled _
                          And vlblnHacerTraslado Then
                          
                          'Traslada los cargos
310                       If fblnTrasladoAutomaticoCargos Then
                          
                              'Verificar en lista de precio si hay cargos sin precio
311                           pVerificarListaPrecio
312                           If vlstrCargos <> "" Then
                                  'No se pudo realizar el traslado, no se encontró precio asignado para los siguientes cargos:.
313                               MsgBox SIHOMsg(1139) & vlstrCargos, vbInformation, "Mensaje"
                                  pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "NO SE PUDO REALIZAR EL TRASLADO DE CARGOS DE LA CUENTA EXTERNA: " & Trim(txtCuentaExterno.Text), Str(lngNumPaciente) & " Cta. " & Trim(txtCuentaInterno.Text)
314                           Else
315                               vgstrParametrosSP = Trim(txtCuentaExterno.Text) & "|" & "E" & "|" & Trim(txtCuentaInterno.Text) & "|" & "I" & _
                                  "|" & CStr(cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex)) & "|" & CStr(vllngCveEmpresa) & "|" & "0" & _
                                  "|" & "1" & "|" & "1" & "|" & "1" & "|" & "1" & "|" & "1" & "|" & "1" & "|" & CStr(vllngPersonaGraba) & _
                                  "|" & CStr(vgintNumeroDepartamento) & "|" & "2"
316                               frsEjecuta_SP vgstrParametrosSP, "SP_PVUPDTRASLADOCARGOS", True
                                  
                                  'Se borran los paquetes asignados
317                               vgstrParametrosSP = Trim(txtCuentaExterno.Text) & "|E|-1"
318                               frsEjecuta_SP vgstrParametrosSP, "SP_ADDELPAQUETEASIGNADOADMISIO"
                                  
319                               vgstrParametrosSP = Trim(txtCuentaExterno.Text) & "|" & "E" & "|" & Trim(txtCuentaInterno.Text) & "|" & "I"
320                               frsEjecuta_SP vgstrParametrosSP, "SP_PVUPDTRASLADAPAGOS"
321                           End If
                              
322                       End If
                          
                          'Traslada Indicaciones, Notas, Solicitudes...
323                       If fblnTrasladoAutomaticoExpediente Then
324                           If cboEmpresa.ListIndex = -1 Or Not cboEmpresa.Enabled Then
325                               vllngCveEmpresa = 0
326                           Else
327                               vllngCveEmpresa = cboEmpresa.ItemData(cboEmpresa.ListIndex)
328                           End If
                              
329                           vgstrParametrosSP = _
                              Trim(txtCuentaExterno.Text) & _
                              "|" & "E" & _
                              "|" & Trim(txtCuentaInterno.Text) & _
                              "|" & "I" & _
                              "|" & lngNumPaciente
330                           frsEjecuta_SP vgstrParametrosSP, "SP_EXUPDTRASLADOEXPEDIENTE", True
331                       End If
                          
332                       vlblnHacerTraslado = False
333                   End If
                      
334                   vllngIngresoConsultado = txtCuentaInterno.Text
335                   vlstrTipoPacienteConsultado = "I"
                      
336                   If vlblnConsulta = False Then
337                       pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "INTERNOS", Str(lngNumPaciente) & " Cta. " & Trim(vllngIngresoConsultado)
338                   Else
339                       pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "INTERNOS MODIFICACION", Str(lngNumPaciente) & " Cta. " & Trim(vllngIngresoConsultado)
340                   End If
                  
341               ElseIf lngCveTipoIngreso = clngCvePrevio Then
                  '* Ingreso previo *'
                  
342                   lngCveIngresoPrevio = 0
343                   Set rsIngresoPrevio = frsEjecuta_SP(Str(Val(txtExpedienteInterno.Text)), "SP_ADSELINGRESOPREVIO")
344                   If rsIngresoPrevio.RecordCount <> 0 Then
345                       lngCveIngresoPrevio = rsIngresoPrevio!INTCVEINGRESOPREVIO
346                   End If
                      
                      'Determinar la fecha y hora de ingreso:
347                   If vlblnCambioFechaIngreso Then
348                       strFechaIngreso = fstrFechaSQL(mskFechaIngreso.Text, mskHoraIngreso.Text)
349                       strHoraIngreso = mskHoraIngreso.Text
350                   Else
351                       strFechaIngreso = fstrFechaSQL(fdtmServerFecha, fdtmServerHora)
352                       strHoraIngreso = fdtmServerHora
353                       mskFechaIngreso.Mask = ""
354                       mskFechaIngreso.Text = fdtmServerFecha
355                       mskFechaIngreso.Mask = "##/##/####"
356                       mskHoraIngreso.Mask = ""
357                       mskHoraIngreso.Text = IIf(Len(Trim(Str(Hour(strHoraIngreso)))) = 1, "0" + Trim(Str(Hour(strHoraIngreso))), Trim(Str(Hour(strHoraIngreso)))) + ":" + IIf(Len(Trim(Str(Minute(strHoraIngreso)))) = 1, "0" + Trim(Str(Minute(strHoraIngreso))), Trim(Str(Minute(strHoraIngreso))))
358                       mskHoraIngreso.Mask = "##:##"
359                   End If
                      
360                   vgstrParametrosSP = Val(txtExpedienteInterno.Text) & "|" & _
                                          strFechaIngreso & "|" & _
                                          IIf(optOrden(0).Value, 1, 0) & "|" & _
                                          cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex) & "|" & _
                                          llngCveTipoConvenio & "|" & _
                                          vllngCveEmpresa & "|" & _
                                          Trim(Replace(txtAutoriza.Text, "|", "")) & "|" & _
                                          Trim(Replace(txtNumeroControl.Text, "|", "")) & "|" & _
                                          IIf(OptPaqueteOtros(0).Value, "PAQUETE", "OTROS") & "|" & llngCvePaquete & "|" & Replace(vlstrTipoTratamiento, "|", "") & "|" & _
                                          Val(Format(txtAnticipo.Text, "#############.00")) & "|" & _
                                          Trim(Replace(txtNombreEmergencia.Text, "|", "")) & "|" & Trim(Replace(txtDomicilioEmergencia.Text, "|", "")) & "|" & Trim(Replace(txtTelefonoEmergencia.Text, "|", "")) & "|" & llngCveParentescoEmergencia & "|" & _
                                          Trim(Replace(txtNombreResponsable.Text, "|", "")) & "|" & Trim(Replace(txtDomicilioResponsable.Text, "|", "")) & "|" & Trim(Replace(txtTelefonoResponsable.Text, "|", "")) & "|" & llngCveParentescoResponsable & "|" & Trim(Replace(txtLugarTrabajoResponsable.Text, "|", "")) & "|" & _
                                          llngCveMedicoTratante & "|" & vllngCveDiagnostico & "|" & _
                                          vllngPersonaGraba & "|" & vgintNumeroDepartamento & "|" & _
                                          llngCvePoliza & "|" & _
                                          lintCveDeptoIngreso & "|" & _
                                          Trim(Replace(txtObservaciones.Text, "|", "")) & "|" & _
                                          llngCveEmpresaPaciente & "|" & Trim(Replace(txtNumeroPoliza.Text, "|", "")) & "|" & _
                                          lngCveIngresoPrevio & "|" & Trim(Replace(txtDiagnosticoEspecifico.Text, "|", "")) & "|" & IIf(vllngSocioRelacionado = 0, "", vllngSocioRelacionado)
                      
361                   lngCveIngresoPrevio = 1
362                   frsEjecuta_SP vgstrParametrosSP, "sp_AdInsIngresoPrevio", True, lngCveIngresoPrevio
                                      
363                   If vlblnConsulta = False Then
364                       pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "PREVIOS", Str(lngNumPaciente) & " Cta. " & Trim(vllngIngresoConsultado)
365                   Else
366                       pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "PREVIOS MODIFICACIÓN", Str(lngNumPaciente) & " Cta. " & Trim(vllngIngresoConsultado)
367                   End If
                      
368                   vlblnConsulta = True
                      
                      
                  '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
369                If (cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias) Or (cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveInternoFueUrgencias) Or (cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveInternamientoNormal) Or (cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCvePrevio) Then
                      'Se valida si el paciente ya tiene un registro previo en las transacciones con la interfaz del WS
370                   vgstrParametrosSP = CStr(txtExpedienteInterno) & "|" & CStr(vglngCuentaPaciente) & "|" & CStr(lngCveTipoIngreso)
371                   Set rsLogInterfaz = frsEjecuta_SP(vgstrParametrosSP, "SP_GNSELLOGINTERFAZAXA")

372                   If rsLogInterfaz.RecordCount = 0 Then
                          'Se valida si el paciente tiene licencia para el ingreso por WS
373                       If vglngCveInterfazWS > 0 Then
374                           vgCveTipoIngresoAXA = lngCveTipoIngreso
375                           frmDatosWSAXA.Show vbModal, Me
                              
                              'Se valida si se realizó una conexión correcta
376                           If frmDatosWSAXA.vgblnConexionCorrecta = True Then
                                  '***************************** GRABADO DEL LOG  *****************************
377                                   vgstrParametrosSP = "|" & vgintNumeroModulo & "|" & lngCveTipoIngreso & "|" & vglngCuentaPaciente & "|" & lngNumPaciente & "|" & "I|||" & IIf(frmDatosWSAXA.vgblnConexionCorrecta = False, "NO", "SI") & "||||" & vllngPersonaGraba & "|" & frmDatosWSAXA.vglngFolioTrans & "|0|"
378                                   frsEjecuta_SP vgstrParametrosSP, "sp_GNINSloginterfazaxa"
                                  '***********************************************************************************
379                           End If
380                       End If
381                   End If
382               End If
                  '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                      
383               Else
                  '* Urgencias o Externo *'
                      'Estas se usan en SA y LA
                      '-------------------
384                   If cgstrModulo = "IM" Or cgstrModulo = "LA" Then
                      
385                       strSentencia = "update ExPacienteIngreso set vchObservacion = '" & Trim(Replace(txtObservaciones.Text, "|", "")) & "' where intNumPaciente = " & Str(txtExpedienteInterno.Text)
386                       pEjecutaSentencia strSentencia
                      
387                       If vgblnAsignarPaqueteAdmision And cboPlanPaqueteCirugia.ListIndex > -1 And OptPaqueteOtros(0).Value Then
                              'If cboPlanPaqueteCirugia.ListIndex > -1 And OptPaqueteOtros(0).Value And llngPaqueteAnterior <> llngCvePaquete Then
          '                        If llngPaqueteAnterior <> 0 Then
          '                            If (OptPaqueteOtros(0).Value And llngPaqueteAnterior <> llngCvePaquete) Or (OptPaqueteOtros(1).Value And llngPaqueteAnterior <> 0) Then
          '                                'si tenia antes asignado un paquete y se cambió o se seleccionó "otro" se borra el paquete anterior
          '                                frsEjecuta_SP lngNumCuenta & "|E|" & llngPaqueteAnterior, "SP_ADDELPAQUETEASIGNADOADMISIO"
          '                            End If
          '                        End If
                                  
                                  'Set rsPaquete = frsRegresaRs("select * from pvPaquetePaciente where intmovpaciente = " & lngNumCuenta & " and chrTipopaciente = 'E' and intNumpaquete = " & llngCvePaquete)
                                  'If rsPaquete.RecordCount = 0 Then
388                                   pCargaArreglo vlaryParametrosSalida, "|" & adDecimal & "||" & adDecimal & "||" & adDecimal
389                                   frsEjecuta_SP cboPlanPaqueteCirugia.ItemData(cboPlanPaqueteCirugia.ListIndex) & "|" & "PA" & "|" & cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex) & "|" & vlintEmpresa & "|I|0|01/01/1900|" & vgintClaveEmpresaContable, "SP_PVSELOBTENERPRECIOBIT", , , vlaryParametrosSalida
390                                   pObtieneValores vlaryParametrosSalida, vldblPrecio, vldblIncrementoTarifa, vlintBitPesos
                                      
391                                   If vldblPrecio = -1 Or vldblPrecio = 0 Then
392                                       EntornoSIHO.ConeccionSIHO.RollbackTrans
                                          'El elemento seleccionado no cuenta con un precio capturado.
393                                       MsgBox SIHOMsg(301), vbInformation, "Mensaje"
394                                       sstObj.Tab = 0
395                                       MyTabHeader1.TabCurrent = 0
396                                       cboPlanPaqueteCirugia.SetFocus
397                                       Exit Sub
398                                   Else
399                                       frsEjecuta_SP "", "SP_IMDELPAQUETEPACSINASIGNAR"
400                                       pAsignaPaquete Val(txtCuentaInterno.Text), cboPlanPaqueteCirugia.ItemData(cboPlanPaqueteCirugia.ListIndex), vldblPrecio, "E", vlintBitPesos
401                                   End If
                                  'End if
                              'End if
402                       End If
403                   End If
                      
404                   vgstrautoriza = ""
405                   vglngtipopoliza = 0
406                   vgstrnumpoliza = ""
407                   vglngPacienteSocioRel = 0
                      
408                   If txtAutoriza.Text <> "" Then vgstrautoriza = txtAutoriza.Text
409                   If cboTipoPoliza.Enabled = True Then
410                       If cboTipoPoliza.ListIndex > -1 Then vglngtipopoliza = cboTipoPoliza.ItemData(cboTipoPoliza.ListIndex)
411                   End If
412                   If txtNumeroPoliza.Text <> "" Then vgstrnumpoliza = txtNumeroPoliza.Text
413                   vglngPacienteSocioRel = vllngSocioRelacionado

                      If lngCveTipoIngreso = clngCveUrgencias Then pHabilitaAsignacionCuarto False
                      '-------------------
                      
415                   If cboMedicoEmergencias.ListIndex <> -1 Then
416                       If cboMedicoEmergencias.ItemData(cboMedicoEmergencias.ListIndex) > 0 Then
                              'Actualizar datos en la cuenta de externo
417                           vgstrParametrosSP = Str(lngNumPaciente) & "|" & _
                                                  Str(cboMedicoEmergencias.ItemData(cboMedicoEmergencias.ListIndex)) & "|" & _
                                                  Trim(txtAutoriza.Text) & "|" & _
                                                  Str(llngCvePoliza) & "|" & _
                                                  Trim(txtNumeroPoliza.Text) & "|" & _
                                                   Val(Trim(txtCuentaExterno.Text)) & "|" & _
                                                  Trim(txtNumeroControl.Text)
418                           frsEjecuta_SP vgstrParametrosSP, "SP_EXUPDCUENTAEXTERNO"
419                       End If
420                   End If
                      
                      'Actualización de los datos del responsable
                      '------------------------------------------
421                   vllngUltimaCuenta = 0
422                   Set rsUltimaCuenta = frsEjecuta_SP(txtExpedienteInterno.Text & "|" & vgintClaveEmpresaContable & "|" & vgintNumeroDepartamento, "sp_GnSelUltimaCuentaPaciente")
423                   If Not rsUltimaCuenta.EOF Then
424                       vllngUltimaCuenta = rsUltimaCuenta!cuenta
425                   Else
426                       vllngUltimaCuenta = 0
427                   End If
                      
428                   vllngTipoResponsable = 0
429                   If cboParentescoFamiliarResponsable.ListIndex > 0 Then
430                       vllngTipoResponsable = cboParentescoFamiliarResponsable.ItemData(cboParentescoFamiliarResponsable.ListIndex)
431                   Else
432                       vllngTipoResponsable = 0
433                   End If
       
434                   vgstrParametrosSP = Str(lngNumPaciente) & "|" & _
                                          vllngUltimaCuenta & "|" & _
                                          Trim(Replace(txtNombreResponsable.Text, "|", "")) & "|" & _
                                          vllngTipoResponsable & "|" & _
                                          Trim(Replace(txtLugarTrabajoResponsable.Text, "|", "")) & "|" & _
                                          Trim(Replace(txtDomicilioResponsable.Text, "|", "")) & "|" & _
                                          Trim(Replace(txtTelefonoResponsable.Text, "|", "")) & "|" & _
                                          IIf(mskNacimientoResponsable.Text = "  /  /    ", "", fstrFechaSQL(IIf(mskNacimientoResponsable.Text = "  /  /    ", "01/01/1900", mskNacimientoResponsable.Text)))
435                   frsEjecuta_SP vgstrParametrosSP, "SP_EXUPDCUENTAEXTERNORESPONS"
                      '------------------------------------------

436                   If vlblnConsulta = False Then
437                       pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "EXTERNOS", Str(lngNumPaciente) & " Cta. " & Trim(vllngIngresoConsultado)
438                   Else
439                       pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "EXTERNOS MODIFICACION", Str(lngNumPaciente) & " Cta. " & Trim(vllngIngresoConsultado)
440                   End If
                      
441                   vlblnConsulta = True
442                   vlstrTipoPacienteConsultado = "E"
443               End If
                  
444               If lngCveListaNegra > 0 Then
445                   pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "AUTORIZA LISTA DE DEUDORES INCOBRABLES", "Número cliente " & CStr(lngCveListaNegra)
446               End If
                  'El paciente está en lista negra como familiar, responsable de la cuenta o persona para casos de emergencia
447               If lLngCveListaNegraFamiliar <> -1 Then
448                   pAgregarListaNegra
449               ElseIf lblnCoincideListaNegraFam Then
450                   pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "INGRESÓ PERSONA QUE COINCIDIÓ EN LA LISTA DE DEUDORES INCOBRABLES", "Expediente " & txtExpedienteInterno.Text
451               End If
                  
                  '| Graba la información de los archivos adjuntos
                  'RSExDocumentoAdjunto.Open
                  
                  
452               For intRow = 1 To GrdAdjuntos.Rows - 1
                  
                      'Para no tomar en cuenta el título
453                   If GrdAdjuntos.TextMatrix(intRow, 1) <> "Id" Then
                          
454                       Select Case GrdAdjuntos.TextMatrix(intRow, 4)
                              Case "BORRADO"
                                  ''If fintLocalizaPkRs(RSExDocumentoAdjunto, 0, GrdAdjuntos.TextMatrix(intRow, 1)) <> 0 Then
455                                   pEjecutaSentencia "Delete from ExDocumentoAdjunto where chrTipoPaciente = '" & _
                                      vlstrTipoPacienteConsultado & "'" & _
                                      " and intNumCuenta = " & Str(Trim(vllngIngresoConsultado)) & _
                                      " and intCve = " & GrdAdjuntos.TextMatrix(intRow, 1)
                                                                  
                                      'RSExDocumentoAdjunto.Delete
                                      'RSExDocumentoAdjunto.Update
                                  'End If
                                  
456                           Case "AGREGADO"
                                  Dim vchSentencia As String
457                               vchSentencia = "Select * from ExDocumentoAdjunto where INTNUMCUENTA = " & _
                                  Str(Trim(vllngIngresoConsultado)) & " and CHRTIPOPACIENTE = '" & vlstrTipoPacienteConsultado & "'"
                                  
458                               Set RSExDocumentoAdjunto = frsRegresaRs(vchSentencia, adLockOptimistic, adOpenDynamic)
459                               RSExDocumentoAdjunto.AddNew
                                  'VAlores
460                               StmAdjunto.LoadFromFile GrdAdjuntos.TextMatrix(intRow, 3)
                                  
461                               RSExDocumentoAdjunto!VCHDESCRIPCION = GrdAdjuntos.TextMatrix(intRow, 2)
462                               RSExDocumentoAdjunto!INTNUMCUENTA = Str(Trim(vllngIngresoConsultado))
463                               RSExDocumentoAdjunto!CHRTIPOPACIENTE = vlstrTipoPacienteConsultado
464                               RSExDocumentoAdjunto!blbAdjunto = StmAdjunto.Read
465                               RSExDocumentoAdjunto!vchRuta = GrdAdjuntos.TextMatrix(intRow, 3)
                                  
466                               RSExDocumentoAdjunto.Update
                                  
467                       End Select
                      
468                   End If
                      
469               Next
                  'RSExDocumentoAdjunto.Close
                  'StmAdjunto.Close
                  
                  
                  
                  
470               EntornoSIHO.ConeccionSIHO.CommitTrans
                      
                  If cgstrModulo = "PV" And vgstrForma = "frmPresupuestos" Then
                    Unload Me
                    Exit Sub
                  End If
                      
                      
471               pCuartosActuales
                      
472               If vlblnFueAlta And lstDocumentos.ListCount <> 0 Then
473                   fraDocumentos.Enabled = True
474                   cmdImprimir.Enabled = True
475                   cmdImprimir.SetFocus
476               End If
                      
477               vlblnDebeCapturarCuarto = False
                      
      '            'La operación se realizó satisfactoriamente.
      '            MsgBox SIHOMsg(420), vbOKOnly + vbInformation, "Mensaje"
                  
478               If vlstrIngresoSeleccionado <> vlstrTipoIngresoPrepago Then lblnDePestanaPrepago = False
                  
                  'Si no es Urgencias, Externo, Previo o Consulta externa
479               If lngCveTipoIngreso <> clngCveUrgencias And lngCveTipoIngreso <> clngCveExterno And lngCveTipoIngreso <> clngCvePrevio And lngCveTipoIngreso <> clngCveConsultaExterna Then
480                   pLimpia
481                   vlblnConsultaPostGuardado = True
482                   pDatosPacientes lngNumPaciente
483                   pDatosIngreso lngnumCuenta, IIf((lngCveTipoIngreso < 7 Or lngCveTipoIngreso = 9 Or lngCveTipoIngreso = 11 Or lngCveTipoIngreso = 12 Or lngCveTipoIngreso = 13), "I", "E")
484                   If cboTipoIngreso.ListIndex <> -1 Then
485                       pLlenaDocumentosIngreso Trim(Str(cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex)))
486                   End If
                       
487                   vlblnDatosCargados = True
                      
488                   OptEnvioPromo(0).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnSiEnvioPromo)
489                   OptEnvioPromo(1).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnNoEnvioPromo)
490               Else
491                   pCargaFamiliar Str(lngNumPaciente), Str(lngnumCuenta)
492                   pCargaDatosSocio CStr(vllngSocioRelacionado)
493               End If
                  
                  'Si es Urgencias o Externo
494               If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveExterno Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveConsultaExterna Then
                      'Si el paciente está relacionado con un médico o un empleado se debe abrir cuenta
                      'o si se abre acuenta automáticamente
495                   If blnAbrirCuenta Or vlstrTipoTipoPaciente = "ME" Or vlstrTipoTipoPaciente = "EM" Then
                      
496                       blnCuentaAbierta = True
                          
                          'Si es Admisión, pregunta si se abre cuenta al paciente
497                       If cgstrModulo = "AD" And vlstrTipoTipoPaciente <> "ME" And vlstrTipoTipoPaciente <> "EM" Then
      '                        intMensaje = IIf(Val(txtCuentaExterno.Text) > 0, 1044, 39)
                              '¿Desea abrir/actualizar la cuenta del paciente?
      '                        If MsgBox(SIHOMsg(intMensaje), vbYesNo + vbQuestion, "Mensaje") = vbYes Then

                              'Se comentó la pregunta de arriba, ya que ahora se utilza el valor de la variable "vgblnAbreCta"
498                           If vgblnAbreCta Then
499                               blnValidaDatos = True
500                               cmdAbrirCuenta_Click
                                  'Se modifica el registro del log de interfaz con AXA (en caso de que aplique)...Guarda el número de cuenta, tipo de paciente y empleado
501                               If vglngCveInterfazWS > 0 And vgblnAbreCta And frmDatosWSAXA.vgblnConexionCorrecta = True Then
502                                   vgstrParametrosSP = "|" & vgintNumeroModulo & "|" & lngCveTipoIngreso & "|" & vglngCuentaPaciente & "|" & lngNumPaciente & "|" & "E|||" & IIf(frmDatosWSAXA.vgblnConexionCorrecta = False, "NO", "SI") & "||||" & vllngPersonaGraba & "|" & frmDatosWSAXA.vglngFolioTrans & "|0|"
503                                   frsEjecuta_SP vgstrParametrosSP, "sp_GNINSloginterfazaxa"
504                               End If
                                  
505                               If blnValidaDatos = False Then
506                                   Exit Sub
507                               End If
508                           Else
                                  'No se puede asignar el cuarto
509                               If chkAsignarCuarto.Value = 1 Then
510                                   blnSeleccionoCuarto = False
511                                   For lngContador = 1 To grdCuarto.Rows - 1
512                                       If Trim(grdCuarto.TextMatrix(lngContador, 0)) = ">" Then
513                                           blnSeleccionoCuarto = True
514                                       End If
515                                   Next lngContador
                                      
516                                   If blnSeleccionoCuarto Then
                                          'No es posible asignar un cuarto cuando no existe una cuenta abierta
517                                       MsgBox SIHOMsg(76), vbInformation + vbOKOnly, "Mensaje"
518                                       chkAsignarCuarto.Value = 0
519                                       Exit Sub
520                                   Else
                                          '¡No ha ingresado datos!
521                                       MsgBox SIHOMsg(2) & vbCrLf & "Cuarto", vbInformation + vbOKOnly, "Mensaje"
522                                       grdCuarto.SetFocus
523                                       Exit Sub
524                                   End If
                                      
525                               End If
526                               blnCuentaAbierta = False
527                           End If
528                       Else
                              'Médico o Empleado o se abre cuenta automáticamente
529                           blnValidaDatos = True
530                           cmdAbrirCuenta_Click
                                  
531                           If blnValidaDatos = False Then
532                               Exit Sub
533                           End If
534                       End If
535                   Else
536                       If chkAsignarCuarto.Value = 1 Then
537                           blnSeleccionoCuarto = False
                              
538                           For lngContador = 1 To grdCuarto.Rows - 1
539                               If Trim(grdCuarto.TextMatrix(lngContador, 0)) = ">" Then
540                                   blnSeleccionoCuarto = True
541                               End If
542                           Next lngContador
                              
543                           If Not blnSeleccionoCuarto Then
                                  '¡No ha ingresado datos!
544                               MsgBox SIHOMsg(2) & vbCrLf & "Cuarto", vbInformation + vbOKOnly, "Mensaje"
545                               grdCuarto.SetFocus
546                               Exit Sub
547                           Else
548                               blnValidaDatos = True
549                               cmdAbrirCuenta_Click
550                               If blnValidaDatos = False Then
551                                   Exit Sub
552                               End If
553                           End If
554                       End If
555                   End If
                      
556                   If blnActivar And Val(txtCuentaExterno.Text) > 0 Then
                          'Activar al paciente
557                       If cgstrModulo = "AD" Then
558                           If blnCuentaAbierta Then
559                               cmdActivarPaciente_Click
560                           End If
561                       Else
562                           cmdActivarPaciente_Click
563                       End If
564                   End If
                      
565                   cmdEgresar.Enabled = False
566                   cmdAbrirCuenta.Enabled = blnHabilitarAbrirCuenta
567                   cmdActivarPaciente.Enabled = blnHabilitarActivar
568                   fraDocumentos.Enabled = blnHabilitarReporte
569                   cmdImprimir.Enabled = blnHabilitarReporte
570               End If
                  
                  '-- Exporta paciente >>Interno<< a base de datos remota --'
571               If lngCveTipoIngreso <> clngCvePrevio And lngCveTipoIngreso <> clngCveUrgencias And lngCveTipoIngreso <> clngCveExterno And lngCveTipoIngreso <> clngCveConsultaExterna Then
572                   pInsertaPacienteRemoto lngnumCuenta, lngCveTipoIngreso, vlblnFueAlta
                      
                  '-- Exporta paciente >>Externo o de Urgencias<< a base de datos remota--'
                  '-> SOLO si ya se ha abierto la cuenta externa'
573               ElseIf lngCveTipoIngreso = clngCveUrgencias Or lngCveTipoIngreso = clngCveExterno Or lngCveTipoIngreso <> clngCveConsultaExterna Then
574                   If Not blnAbrirCuenta And Val(txtCuentaExterno.Text) <> 0 Then
575                       pInsertaPacienteRemoto Val(txtCuentaExterno.Text), lngCveTipoIngreso, False
576                   End If
577               End If
                  
578              llngCvePreRegistro = 0
                  
579           vlstrSentencia2 = "SELECT COUNT(*) TOTAL FROM ADRELACIONCUENTASFARMACIA WHERE intNumCuentaAdmision = " & lngnumCuenta & " and intNumCuentaFarmacia = " & lngnumCuenta2
580           Set rs = frsRegresaRs(vlstrSentencia2)
              
581           If vlblnGuardaFarmacia And rs!Total <> 1 Then
582               vlstrSentencia2 = "INSERT INTO ADRELACIONCUENTASFARMACIA (intNumCuentaAdmision, intCveTipoIngresoAdmision, intNumCuentaFarmacia, intCveTipoIngresoFarmacia) VALUES (" & lngnumCuenta & ", " & lngCveTipoIngreso & ", " & lngnumCuenta2 & ", " & vlintTipoIngresoCuenta2 & ")"
583               EntornoSIHO.ConeccionSIHO.Execute vlstrSentencia2
584               vlblnGuardaFarmacia = False
585           End If
                  
                  
                  'La operación se realizó satisfactoriamente.
586               If Not vlblnEsDeudorIncobrable Then
587                   MsgBox SIHOMsg(420), vbOKOnly + vbInformation, "Mensaje"
588                   pConsultaPuntosLealtad
589               Else
590                   MsgBox "No se realizó el proceso.", vbOKOnly + vbInformation, "Mensaje"
591               End If
592           Else
                  'Rollback a la transacción porque el cuarto ya no estaba disponible :(
593               EntornoSIHO.ConeccionSIHO.RollbackTrans
                  
                  'El cuarto no está disponible.
594               MsgBox SIHOMsg(583), vbOKOnly + vbExclamation, "Mensaje"
595               cmdSugerirCuarto.SetFocus
596           End If
597       End If
              
598       vlblnFueAlta = False
          
       Exit Sub
          
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdGrabar_Click" & " Linea:" & Erl()))
       Unload Me
End Sub

Public Function fstrCambiaHoraUnMinuto(vlStrFechaHora As String) As String
1         On Error GoTo NotificaError
          
          Dim vlstrMod As String
          Dim vlintNum As Integer
          
2         vlStrFechaHora = Replace(vlStrFechaHora, "'", "")
          
3         vlintNum = CInt(Right(vlStrFechaHora, 2))
          
4         If vlintNum > 9 And vlintNum <> 59 Then
5             vlintNum = vlintNum + 1
6             vlstrMod = Left(vlStrFechaHora, Len(vlStrFechaHora) - 2)
7             fstrCambiaHoraUnMinuto = "'" & vlstrMod & CStr(vlintNum) & "'"
8         ElseIf vlintNum > 9 And vlintNum = 59 Then
9             vlstrMod = Left(vlStrFechaHora, Len(vlStrFechaHora) - 2)
10            fstrCambiaHoraUnMinuto = "'" & vlstrMod & "00'"
11        ElseIf vlintNum < 10 Then
12            vlstrMod = Left(vlStrFechaHora, Len(vlStrFechaHora) - 2)
13            fstrCambiaHoraUnMinuto = "'" & vlstrMod & "15'"
14        End If
          
        Exit Function
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fstrCambiaHoraUnMinuto" & " Linea:" & Erl()))
End Function


Public Function fblnContinuarListaNegraFamiliar(lstrPaterno As String, lstrMaterno As String) As Boolean
'Funcion que busca si los apellidos del paciente a ingresar coinciden con personas/familiares
'relacionados con un paciente en lista negra
On Error GoTo NotificaError
    frmListaNegra.pConfiguraConsultaInicial
    If frmListaNegra.fblnAutorizacionFamiliar(lstrPaterno, lstrMaterno, (Trim(txtApellidoPaterno.Text) + " " + Trim(txtApellidoMaterno.Text) + " " + Trim(txtNombre.Text)), IIf(mskFechaNacimiento.ClipText = "", "", mskFechaNacimiento.Text)) Then
        fblnContinuarListaNegraFamiliar = True
        lLngCveListaNegraFamiliar = frmListaNegra.llngCveFamiliarListaNegra
        lblnCoincideListaNegraFam = frmListaNegra.lblnCoincidePersonListaNegra
    Else
        fblnContinuarListaNegraFamiliar = False
    End If
    Unload frmListaNegra
    
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fblnContinuarListaNegraFamiliar"))
End Function

Public Function fblnContinuarListaNegraFamiliar2(lstrPaterno As String, lstrMaterno As String) As Boolean
'Funcion que busca si los apellidos del paciente a ingresar coinciden con personas/familiares
'relacionados con un paciente en lista negra
On Error GoTo NotificaError
    If frmListaNegra.fblnAutorizacionFamiliar(lstrPaterno, lstrMaterno, (Trim(txtApellidoPaterno.Text) + " " + Trim(txtApellidoMaterno.Text) + " " + Trim(txtNombre.Text)), IIf(mskFechaNacimiento.ClipText = "", "", mskFechaNacimiento.Text)) Then
        fblnContinuarListaNegraFamiliar2 = True
        lLngCveListaNegraFamiliar = frmListaNegra.llngCveFamiliarListaNegra
        lblnCoincideListaNegraFam = frmListaNegra.lblnCoincidePersonListaNegra
    Else
        fblnContinuarListaNegraFamiliar2 = False
    End If
    Unload frmListaNegra
    
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fblnContinuarListaNegraFamiliar2"))
End Function


Private Sub pVerificarListaPrecio()
    Dim vlaryParametros() As String
    Dim vldblPrecio As Double
    Dim vllngCargos As Long
    Dim vllngContador As Long
    Dim vllngNumCargo As Long
    Dim vllngCveEmpresa As Long
    
    vlstrCargos = ""
    pLlenaCargos
    vldblPrecio = 0
    
    vllngCargos = lstCargos.ListCount
    vlrsSeleccionaCargos.Open
    For vllngContador = 0 To vllngCargos - 1
       vlrsSeleccionaCargos.MoveFirst
       vldblPrecio = 0
       vllngNumCargo = lstCargos.ItemData(vllngContador)
       'Si es la entrada en la lista del departamento ignorar
       If Mid(lstCargos.List(vllngContador), 1, 11) <> "---------- " Then
           'Si se escogió por cargos checar si esta seleccionado
            If cboEmpresa.ListIndex = -1 Or Not cboEmpresa.Enabled Then
                vllngCveEmpresa = 0
            Else
                vllngCveEmpresa = cboEmpresa.ItemData(cboEmpresa.ListIndex)
            End If
            'En caso de no existir si revisa todo pero si existe en 0 entonces no revisa todo y regresa 0
            'una validacion donde cheque que el cargo exista y tenga precio en la lista de precios a la cual se va a trasladar
            vgstrParametrosSP = Trim(txtCuentaExterno.Text) _
                                & "|" & "E" _
                                & "|" & Trim(txtCuentaInterno.Text) _
                                & "|" & "I" _
                                & "|" & CStr(cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex)) _
                                & "|" & CStr(vllngCveEmpresa) _
                                & "|" & Trim(Str(vllngNumCargo)) _
                                & "|" & 1 _
                                & "|" & 1 _
                                & "|" & 1 _
                                & "|" & 1 _
                                & "|" & 1 _
                                & "|" & 1 _
                                & "|" & CStr(vgintNumeroDepartamento)

            pCargaArreglo vlaryParametros, "|" & vbDouble
            frsEjecuta_SP vgstrParametrosSP, "SP_PVSELCHKTRASLADO", True, , vlaryParametros
            pObtieneValores vlaryParametros, vldblPrecio
            If vldblPrecio = 0 Then
                'vlstrCargos = vlstrCargos & Chr(13) & lstCargos.List(vllngContador)
                Do While vlrsSeleccionaCargos!IntNumCargo <> lstCargos.ItemData(vllngContador)
                    vlrsSeleccionaCargos.MoveNext
                Loop
                If InStr(1, vlstrCargos, vlrsSeleccionaCargos!DescripcionCargo) = 0 Then
                    vlstrCargos = vlstrCargos & Chr(13) & vlrsSeleccionaCargos!DescripcionCargo
                End If
           End If
       End If
    Next
    lstCargos.Clear
    vlrsSeleccionaCargos.Close
End Sub

Private Sub pLlenaCargos()
On Error GoTo NotificaError
    
    Dim vlstrSentencia As String
    Dim vlintContador As Integer
    Dim vlstrDepartamento As String
    
    Set vlrsSeleccionaCargos = frsEjecuta_SP(CLng(txtCuentaExterno.Text) & "|" & "E" & "|0|-1|C|N|0", "SP_PVSELCARGOSPACIENTE")
    vlrsSeleccionaCargos.Sort = "NombreDepartamento,dtmFechaHora,DescripcionCargo"
    
    lstCargos.Visible = False
    lstCargos.Clear
    With vlrsSeleccionaCargos
        vlstrDepartamento = ""
        Do While Not .EOF
            If vlstrDepartamento <> Trim(!nombreDepartamento) Then
                lstCargos.AddItem "---------- " & !nombreDepartamento & " ----------"
                lstCargos.ItemData(lstCargos.NewIndex) = -1
                vlstrDepartamento = Trim(!nombreDepartamento)
            End If
            lstCargos.AddItem "(" & !chrTipoCargo & ") - " & Format(!dtmFechahora, "dd/mm/yyyy") & " -- " & Trim(!DescripcionCargo) & " (" & Trim(Str(!MNYCantidad)) & ")"
            lstCargos.ItemData(lstCargos.NewIndex) = !IntNumCargo
            .MoveNext
        Loop
        .Close
    End With
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaCargos"))
    Unload Me
End Sub


Public Sub pObtieneValores(paryParametros() As String, Optional pvrtVariable1, Optional pvrtVariable2, Optional pvrtVariable3, Optional pvrtVariable4, Optional pvrtVariable5)
    Dim vlintRenglon As Integer
    
On Error GoTo NotificaError
    If Not IsMissing(pvrtVariable1) Then
        pvrtVariable1 = paryParametros(0, 0)
        If Not IsMissing(pvrtVariable2) Then
            pvrtVariable2 = paryParametros(0, 1)
            If Not IsMissing(pvrtVariable3) Then
                pvrtVariable3 = paryParametros(0, 2)
                If Not IsMissing(pvrtVariable4) Then
                    pvrtVariable4 = paryParametros(0, 3)
                    If Not IsMissing(pvrtVariable5) Then
                        pvrtVariable5 = paryParametros(0, 4)
                    End If
                End If
            End If
        End If
    End If
    Exit Sub
NotificaError:
    MsgBox Err.Description
End Sub


Public Sub pCargaArreglo(paryParametros() As String, pstrParametros As String)
    Dim vlIntCont As Integer
    Dim vlstrValParam As String
    Dim vlintRenglonArreglo As Integer
    Dim vlblnValor As Boolean

    ReDim paryParametros(2, 1)
    vlblnValor = True
    vlintRenglonArreglo = 1
    For vlIntCont = 1 To Len(pstrParametros) + 1
      'Busca el valor del parametro
      If (Mid(pstrParametros, vlIntCont, 1) <> "|") And (Len(pstrParametros) >= vlIntCont) Then
        vlstrValParam = vlstrValParam & Mid(pstrParametros, vlIntCont, 1)
      Else 'Encontró el valor o el tipo del parámetro
          If vlblnValor Then 'El parámetro encontrado es un valor
            ReDim Preserve paryParametros(2, vlintRenglonArreglo)
            paryParametros(0, vlintRenglonArreglo - 1) = vlstrValParam
          Else 'El parámetro encontrado es un tipo de dato
            paryParametros(1, vlintRenglonArreglo - 1) = vlstrValParam
            vlintRenglonArreglo = vlintRenglonArreglo + 1
          End If
          vlstrValParam = ""
          vlblnValor = Not vlblnValor
      End If
    Next vlIntCont

End Sub

Private Sub pAsignaDiagnostico()
    On Error GoTo NotificaError
    
    Dim strSentencia As String

    strSentencia = "delete FROM ExDiagnosticoPaciente where chrTipoPaciente = 'I' and chrProcedencia = 'AD' and intNumCuenta = " & Str(txtCuentaInterno.Text)
    pEjecutaSentencia strSentencia
    
    If vllngCveDiagnostico <> 0 Then
        vgstrParametrosSP = Str(vllngCveDiagnostico) & "|" & txtCuentaInterno.Text & "|I|I|AD| "
        frsEjecuta_SP vgstrParametrosSP, "SP_EXINSDIAGNOSTICOPACIENTE"
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pAsignaDiagnostico"))
    Unload Me
End Sub

Private Sub pCambiaEstadoCuarto()
    On Error GoTo NotificaError
    Dim strSentencia As String

    'Estado de ocupado al cuarto
    strSentencia = "update AdCuarto set tnyCveEstadoCuarto = " & Str(vglngCveEstadoCuartoOcupado) & " where vchNumCuarto = '" & Trim(RSAdSelCuartoApropiado!NumeroCuarto) & "'"
    pEjecutaSentencia strSentencia
    
    vgstrParametrosSP = txtExpedienteInterno.Text & "|" & txtCuentaInterno.Text & "|" & RSAdSelCuartoApropiado!NumeroCuarto _
    & "|" & fstrFechaSQL(fdtmServerFecha) & "|" & Format(fdtmServerHora, "hh:mm:ss") & "|" & Str(vllngPersonaGraba) & "|1|I"
    frsEjecuta_SP vgstrParametrosSP, "SP_ADINSCAMBIOCUARTO"

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pCambiaEstadoCuarto"))
    Unload Me
End Sub

Private Sub pCambiaEstadoCuartoExterno(lngNumPaciente As Long, lngnumCuenta As Long, llngNumCuartoNuevo As Long, lngCvePersonaGraba As Long, llngNumCuarto As Long, lstrNumCuartoNuevo As String)
1     On Error GoTo NotificaError
      Dim strSentencia As String
      Dim rsCuarto As New ADODB.Recordset
      Dim lngEstadoCuartoActual As Long
          
2         If llngNumCuarto <> 0 Then
3             strSentencia = "Select * From AdCambioCuarto Where numNumCuenta = " & lngnumCuenta & " And numCvePaciente = " & lngNumPaciente & " Order by dtmFechaIngreso Desc, dtmHoraIngreso desc"
4             Set rsCuarto = frsRegresaRs(strSentencia, adLockOptimistic, adOpenDynamic)
5             rsCuarto.MoveFirst
6             rsCuarto!dtmfechaegreso = fdtmServerFecha
7             rsCuarto!dtmHoraEgreso = fdtmServerHora
8             rsCuarto.Update
9             rsCuarto.Close
10        End If
          
11        If llngNumCuarto = 0 Then
12            lngEstadoCuartoActual = llngNumCuarto
13        Else
14            lngEstadoCuartoActual = cboEstadoCuartoActual.ItemData(cboEstadoCuartoActual.ListIndex)
15        End If
          
16        vgstrParametrosSP = lngNumPaciente & "|" & lngnumCuenta & "|" & llngNumCuarto & "|" & llngNumCuartoNuevo & "|" & lngEstadoCuartoActual & "|" & vglngCveEstadoCuartoOcupado
17        Call frsEjecuta_SP(vgstrParametrosSP, "sp_AdUpdCambiaCuarto")
          
18        vgstrParametrosSP = Str(lngNumPaciente) & "|" & Str(lngnumCuenta) & "|" & _
                              lstrNumCuartoNuevo & "|" & _
                              IIf(llngNumCuarto = 0, fstrFechaSQL(mskFechaIngreso.Text), fstrFechaSQL(fdtmServerFecha)) & "|" & _
                              IIf(llngNumCuarto = 0, Format(CDate(mskHoraIngreso.Text), "hh:mm:ss"), Format(fdtmServerHora, "hh:mm:ss")) & "|" & _
                              Str(vllngPersonaGraba) & "|" & "1|E"
19        frsEjecuta_SP vgstrParametrosSP, "SP_ADINSCAMBIOCUARTO"
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pCambiaEstadoCuartoExterno" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pAsignaPaquete(lngnumCuenta As Long, lngCvePaquete As Long, dblPrecio As Double, strTipoPaciente As String, Optional intbitpesos As Integer)
1         On Error GoTo NotificaError

          Dim strSentencia As String
          Dim dblIVA As Double
          Dim dblDescuento As Double
          Dim rsDescuento As New ADODB.Recordset
          Dim vllngCantPaquetesSinFacturar As Long
          Dim intBitValidaPaquetes As Long
          Dim strParametrosPaquetes As String

2         strSentencia = "UPDATE PvPaquetePaciente SET BITPAQUETEDEFAULT = 0 where chrTipoPaciente = '" & strTipoPaciente & "' and intMovPaciente = " & Str(lngnumCuenta)
3         pEjecutaSentencia strSentencia
          
          'Obtener el IVA del Paquete
4         strSentencia = " Select isnull(pvConceptoFacturacion.SMYIVA,0) smyIVA " & _
              " From PvPaquete " & _
              " Inner Join PvConceptoFacturacion On (pvPaquete.SMICONCEPTOFACTURA = pvConceptoFacturacion.SMICVECONCEPTO)" & _
              " Where pvPaquete.INTNUMPAQUETE = " & Trim(Str(lngCvePaquete))
              
5         dblIVA = frsRegresaRs(strSentencia, adLockOptimistic, adOpenForwardOnly)!smyIVA
          
          'Obtener descuento del paquete
6         dblDescuento = 0
          
7         strSentencia = "SELECT SP_pvseldescuentopaquete('" & strTipoPaciente & "', " & Str(lngnumCuenta) & ", " & Str(lngCvePaquete) & _
                                              ", " & Str(dblPrecio) & ", " & vgintNumeroDepartamento & ", '" & fdtmServerFecha & "') As Descuento " & _
                           "FROM DUAL"
              
8         Set rsDescuento = frsRegresaRs(strSentencia, adLockOptimistic, adOpenDynamic)
9         If rsDescuento.RecordCount > 0 Then
10            dblDescuento = rsDescuento!Descuento
11        End If
         
12        vgstrParametrosSP = Str(lngnumCuenta) & "|" & strTipoPaciente & "|" & Str(lngCvePaquete) & "|" & Str(dblPrecio) & "|" & "1" _
          & "|" & (dblPrecio - dblDescuento) * (dblIVA / 100) & "|" & Str(vllngPersonaGraba) & "|" & Str(dblDescuento) & "|1" & "|" & Trim(Str(intbitpesos))
          
13        frsEjecuta_SP vgstrParametrosSP, "SP_PVINSPAQUETEPACIENTE"
              
          '' SECCION AGREGADA PARA QUE SE ACTUALICEN LOS CARGOS CON LA ASIGNACIÓN DEL PAQUETE
              ' Valida que el paquete no esté facturado
14            vllngCantPaquetesSinFacturar = 1
15            strParametrosPaquetes = Str(lngnumCuenta) & "|" & strTipoPaciente & "|" & Str(lngCvePaquete)
16            frsEjecuta_SP strParametrosPaquetes, "FN_PVSELPAQUETESINFACTURAR", True, vllngCantPaquetesSinFacturar
              
              ' Regresa bit para validar paquetes
17            intBitValidaPaquetes = 1
18            frsEjecuta_SP Str(lngCvePaquete), "FN_PVSELVALIDACARGOSPAQUETE", True, intBitValidaPaquetes
              
19            vgstrParametrosSP = Str(lngnumCuenta) & "|" & strTipoPaciente & "|" & Str(lngCvePaquete) & "|" & vllngCantPaquetesSinFacturar & "|" & intBitValidaPaquetes & "|" & -1
20            frsEjecuta_SP vgstrParametrosSP, "sp_pvupdcargospaquete"
          '' SECCION AGREGADA PARA QUE SE ACTUALICEN LOS CARGOS CON LA ASIGNACIÓN DEL PAQUETE
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pAsignaPaquete" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pAgregarMedicoACargo()
1         On Error GoTo NotificaError
          Dim rsMedicoACargo As New ADODB.Recordset
          
2         Set rsMedicoACargo = frsRegresaRs("SELECT * FROM ExMedicoACargo WHERE chrEstatusMedico = 'A' AND numNumCuenta = " & Val(txtCuentaInterno.Text) & " AND chrTipoPaciente = 'I' AND intCveMedico = " & cboMedicoCargo.ItemData(cboMedicoCargo.ListIndex), adLockOptimistic, adOpenDynamic)

3         If rsMedicoACargo.RecordCount = 0 Then
4             rsMedicoACargo.AddNew
5             rsMedicoACargo!numNumCuenta = Val(txtCuentaInterno.Text)
6             rsMedicoACargo!intnumpaciente = Val(txtExpedienteInterno.Text)
7             rsMedicoACargo!CHRTIPOPACIENTE = "I"
8             rsMedicoACargo!intCveMedico = cboMedicoCargo.ItemData(cboMedicoCargo.ListIndex)
9             rsMedicoACargo!dtmFechaHoraCargo = fdtmServerFechaHora
10            rsMedicoACargo!chrEstatusMedico = "A"
11            rsMedicoACargo!bitMedicoResp = 1
12            rsMedicoACargo.Update
              'quitar la seleccion del medico responsable anterior
13            pEjecutaSentencia "update ExMedicoACargo set bitMedicoResp = 0 where numNumCuenta = " & Val(txtCuentaInterno.Text) & " AND chrTipoPaciente = 'I' AND intCveMedico <> " & cboMedicoCargo.ItemData(cboMedicoCargo.ListIndex)
14        Else
              'actualizar como medico responsable
15            rsMedicoACargo!chrEstatusMedico = "A"
16            rsMedicoACargo!bitMedicoResp = 1
17            rsMedicoACargo.Update
              'quitar la seleccion del medico responsable anterior
18            pEjecutaSentencia "update ExMedicoACargo set bitMedicoResp = 0 where numNumCuenta = " & Val(txtCuentaInterno.Text) & " AND chrTipoPaciente = 'I' AND intCveMedico <> " & cboMedicoCargo.ItemData(cboMedicoCargo.ListIndex)
19        End If

20        rsMedicoACargo.Close

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pAgregarMedcioACargo" & " Linea:" & Erl()))
End Sub

Private Sub cboArea_Click()
    If Not vlblnLlenandoAreas Then cmdSugerirCuarto_Click
End Sub

Private Sub cboCiudad_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    Dim vllngUltimaClave  As Long
    
    If KeyCode = vbKeyReturn Then
        If cboCiudad.ListIndex <> -1 Then
            If cboCiudad.ItemData(cboCiudad.ListIndex) = 0 Then
                
                frmMantoCiudad.Show vbModal, Me
                
                pLlenaCiudad
                
                vllngUltimaClave = frsRegresaRs("select isnull(max(intCveCiudad),0) from Ciudad").Fields(0)
                cboCiudad.ListIndex = flngLocalizaCbo_new(cboCiudad, Str(vllngUltimaClave))
            
            Else
              pEnfocaTextBox txtPadre
            End If
        Else
          pEnfocaTextBox txtPadre
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboCiudad_KeyDown"))
    Unload Me
End Sub

Private Sub cboCiudadForanea_KeyDown(KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
Dim vllngUltimaClave  As Long
    
    If KeyCode = vbKeyReturn Then
        If cboCiudadForanea.ListIndex <> -1 Then
            If cboCiudadForanea.ItemData(cboCiudadForanea.ListIndex) = 0 Then
                
                frmMantoCiudad.Show vbModal, Me
                
                pLlenaCiudad
                
                vllngUltimaClave = frsRegresaRs("select isnull(max(intCveCiudad),0) from Ciudad").Fields(0)
                cboCiudadForanea.ListIndex = flngLocalizaCbo_new(cboCiudadForanea, Str(vllngUltimaClave))
            
            Else
                SendKeys vbTab
            End If
        Else
            txtPadre.SetFocus
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboCiudadForanea_KeyDown"))
    Unload Me
End Sub

Private Sub cboCiudadNacimiento_Click()
On Error GoTo NotificaError

    llngCveCiudadNacto = 0
    If cboCiudadNacimiento.ListIndex <> -1 Then
        llngCveCiudadNacto = cboCiudadNacimiento.ItemData(cboCiudadNacimiento.ListIndex)
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboCiudadNacimiento_Click"))
    Unload Me
End Sub

Private Sub cboCiudadNacimiento_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    Dim vllngUltimaClave  As Long
    
    If KeyCode = vbKeyReturn Then
        If cboCiudadNacimiento.ListIndex <> -1 Then
            If cboCiudadNacimiento.ItemData(cboCiudadNacimiento.ListIndex) = 0 Then
                
                frmMantoCiudad.Show vbModal, Me
                
                pLlenaCiudad
                
                vllngUltimaClave = frsRegresaRs("select isnull(max(intCveCiudad),0) from Ciudad").Fields(0)
                cboCiudadNacimiento.ListIndex = flngLocalizaCbo_new(cboCiudadNacimiento, Str(vllngUltimaClave))
            
            Else
                cboNacionalidad.SetFocus
            End If
        Else
            cboNacionalidad.SetFocus
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboCiudadNacimiento_KeyDown"))
    Unload Me
End Sub

Private Sub cboDepartamentoAtiende_Click()
On Error GoTo NotificaError

    If cboDepartamentoAtiende.ListIndex <> -1 Then
        If IsDate(mskFechaInicioAtencion.Text) And IsDate(mskFechaTerminoAtencion.Text) Then
            pCargaExternos
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboDepartamentoAtiende_Click"))
    Unload Me
End Sub

Private Sub cboDepartamentoAtiende_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtInicialesExternos.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboDepartamentoAtiende_KeyDown"))
    Unload Me
End Sub

Private Sub cboDeptoIngreso_Click()
On Error GoTo NotificaError

'Se comentó esta linea por que tronaba desde AD (en un departamento diferente al configurado como depto. de ingreso)
'al seleccionar un paciente de internamiento normal de tipo convenio seleccionando un item de la lista de la póliza, y luego cambiarlo a externo

'    lintCveDeptoIngreso = 0
'    If cboTipoPoliza.ListIndex <> -1 Then
'        lintCveDeptoIngreso = cboDeptoIngreso.ItemData(cboDeptoIngreso.ListIndex)
'    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboDeptoIngreso_Click"))
    Unload Me
End Sub

Private Sub cboDeptoIngreso_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        If optOrden(0).Enabled Then
            If optOrden(0).Value Then
                optOrden(0).SetFocus
            Else
                optOrden(1).SetFocus
            End If
        Else
            SendKeys vbTab
        End If
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboDeptoIngreso_KeyDown"))
    Unload Me
End Sub

Private Sub cboEmpresaPaciente_Click()
On Error GoTo NotificaError

    llngCveEmpresaPaciente = 0
    If cboEmpresaPaciente.ListIndex <> -1 Then
        llngCveEmpresaPaciente = cboEmpresaPaciente.ItemData(cboEmpresaPaciente.ListIndex)
        

    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboEmpresaPaciente_Click"))
    Unload Me
End Sub

Private Sub cboEmpresaPaciente_KeyDown(KeyCode As Integer, Shift As Integer)
1     On Error GoTo NotificaError

2         If KeyCode = vbKeyReturn Then
3             If vlstrIngresoSeleccionado <> vlstrTipoIngresoRecienNacido Then
4                 If cboRelacion.Visible = True And cboRelacion.Enabled = True Then
5                     cboRelacion.SetFocus
6                 Else
7                     If txtAutoriza.Enabled = True Then
8                         txtAutoriza.SetFocus
9                     Else
10                        If cboSocio.Enabled = True Then
11                            cboSocio.SetFocus
12                        Else
13                            txtNumeroControl.SetFocus
14                        End If
15                    End If
16                End If
17            Else
18                If cboRelacion.Visible = True And cboRelacion.Enabled = True Then
19                    cboRelacion.SetFocus
20                Else
21                    If cboSocio.Visible = True And cboSocio.Enabled = True Then
22                        cboSocio.SetFocus
23                    Else
24                        If cboMadre.Visible = True And cboMadre.Enabled = True Then
25                            cboMadre.SetFocus
26                        Else
27                            If txtAutoriza.Enabled = True Then
28                                txtAutoriza.SetFocus
29                            Else
30                                If cboSocio.Enabled = True Then
31                                    cboSocio.SetFocus
32                                Else
33                                    txtNumeroControl.SetFocus
34                                End If
35                            End If
36                        End If
37                    End If
38                End If
39            End If
40        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboEmpresaPaciente_KeyDown" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub cboEmpresa_Click()
1     On Error GoTo NotificaError

          Dim vlstrSentenciaFirmas As String
          Dim rsfirmas As New ADODB.Recordset
          Dim vlstrSentenciaRequisitos As String
          Dim rsrequisitos As New ADODB.Recordset
          Dim algo As String
          Dim vlintNumero As Long
       
2             If cboEmpresa.Width = 5220 Then
3             If Len(cboEmpresa.Text) > 45 And cboEmpresa.Enabled = True Then
4                 cboEmpresa.Width = 12750
5                 Cmdrequisitos.Visible = False
6                 OptPaqueteOtros(0).Visible = False
7                 OptPaqueteOtros(1).Visible = False
8                 cboPlanPaqueteCirugia.Visible = False
9             End If
10        Else
11            If Len(cboEmpresa.Text) <= 45 Then
12                cboEmpresa.Width = 5220
13                Cmdrequisitos.Visible = True
14                OptPaqueteOtros(0).Visible = True
15                OptPaqueteOtros(1).Visible = True
16                cboPlanPaqueteCirugia.Visible = True
17            End If
18        End If
          
19        If cboEmpresa.ListIndex <> -1 Then
20           Cmdrequisitos.Enabled = False
21           vlstrSentenciaFirmas = "SELECT CCFIRMASEMPRESA.BLBIMAGENFIRMA FROM CCFIRMASEMPRESA  WHERE INTCVEEMPRESA=" & cboEmpresa.ItemData(cboEmpresa.ListIndex)
22           Set rsfirmas = frsRegresaRs(vlstrSentenciaFirmas, adLockOptimistic, adOpenDynamic)
23           If rsfirmas.RecordCount > 0 Then
24              Cmdrequisitos.Enabled = True
25              Exit Sub
26           End If
             
27           vlstrSentenciaRequisitos = "SELECT  ascii(vchrequisitosingreso) Numero,vchrequisitosingreso req FROM CCEMPRESA WHERE INTCVEEMPRESA=" & cboEmpresa.ItemData(cboEmpresa.ListIndex)
28           Set rsrequisitos = frsRegresaRs(vlstrSentenciaRequisitos, adLockOptimistic, adOpenDynamic)
29           If rsrequisitos.RecordCount > 0 Then
30              If rsrequisitos!numero <> 13 And rsrequisitos!req <> "" Then
31                Cmdrequisitos.Enabled = True
32              End If
33           End If
34        Else
35           Cmdrequisitos.Enabled = False

36        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboEmpresa_Click" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub cboEmpresa_LostFocus()
On Error GoTo NotificaError

    If cboEmpresa.ListIndex <> -1 Then
        If cboTipoIngreso.ListIndex > -1 Then
            pLlenaDocumentosIngreso Trim(Str(cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex)))
        End If
        txtNombreResponsable.Text = ""
        cmdCambiarFamiliarResponsable_Click
    Else
'        txtNombreResponsable.Text = ""
'        cboParentescoFamiliarResponsable.ListIndex = -1
'        txtDomicilioResponsable.Text = ""
'        txtTelefonoResponsable.Text = ""
'        If lblnHabilitarFechaNacimiento Then
'            mskNacimientoResponsable.Mask = ""
'            mskNacimientoResponsable.Text = ""
'            mskNacimientoResponsable.Mask = "##/##/####"
'        End If
    End If
cboEmpresa.Width = 5220
    Cmdrequisitos.Visible = True
    OptPaqueteOtros(0).Visible = True
    OptPaqueteOtros(1).Visible = True
    cboPlanPaqueteCirugia.Visible = True

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboEmpresa_LostFocus"))
    Unload Me
End Sub

Private Sub cboNacionalidad_Click()
On Error GoTo NotificaError

    llngCveNacionalidad = 0
    If cboNacionalidad.ListIndex <> -1 Then
        llngCveNacionalidad = cboNacionalidad.ItemData(cboNacionalidad.ListIndex)
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboNacionalidad_Click"))
    Unload Me
End Sub

Private Sub cboParentescoFamiliarEmergencia_Click()
On Error GoTo NotificaError

    llngCveParentescoEmergencia = 0
    If cboParentescoFamiliarEmergencia.ListIndex <> -1 Then
        llngCveParentescoEmergencia = cboParentescoFamiliarEmergencia.ItemData(cboParentescoFamiliarEmergencia.ListIndex)
        If lblnHabilitarFechaNacimiento Then
            pActualizaNacimiento False, llngCveParentescoEmergencia
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboParentescoFamiliarEmergencia_Click"))
    Unload Me
End Sub
'Actualiza y habilita la fecha de nacimiento de emergencias
'y responsable segun el parentesco seleccionado
Private Sub pActualizaNacimiento(blnEsResponsable As Boolean, lngIdParentesco As Long)
1     On Error GoTo NotificaError
          Dim lstrFechaNac As String
          Dim lblnHabilitar As Boolean
2         lstrFechaNac = ""
3         lblnHabilitar = True
4         If llngCveParentescoPadre = lngIdParentesco Then
5             lblnHabilitar = False
6             If IsDate(mskNacimientoPadre.Text) Then lstrFechaNac = mskNacimientoPadre.Text
7         ElseIf llngCveParentescoMadre = lngIdParentesco Then
8             lblnHabilitar = False
9             If IsDate(mskNacimientoMadre.Text) Then lstrFechaNac = mskNacimientoMadre.Text
10        ElseIf llngCveParentescoConyuge = lngIdParentesco Then
11            lblnHabilitar = False
12            If IsDate(mskNacimientoConyuge.Text) Then lstrFechaNac = mskNacimientoConyuge.Text
13        ElseIf llngCveParentescoMismo = lngIdParentesco Then
14            lblnHabilitar = False
15            If IsDate(mskFechaNacimiento.Text) Then lstrFechaNac = mskFechaNacimiento.Text
16        End If
17        If blnEsResponsable Then
18            mskNacimientoResponsable.Mask = ""
19            mskNacimientoResponsable.Text = lstrFechaNac
20            mskNacimientoResponsable.Mask = "##/##/####"
21            mskNacimientoResponsable.Enabled = lblnHabilitar
22        Else
23            mskNacimientoEmergencia.Mask = ""
24            mskNacimientoEmergencia.Text = lstrFechaNac
25            mskNacimientoEmergencia.Mask = "##/##/####"
26            mskNacimientoEmergencia.Enabled = lblnHabilitar
27        End If
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pActualizaNacimiento" & " Linea:" & Erl()))
End Sub
Private Sub cboParentescoFamiliarResponsable_Click()
On Error GoTo NotificaError

    llngCveParentescoResponsable = 0
    If cboParentescoFamiliarResponsable.ListIndex <> -1 Then
        llngCveParentescoResponsable = cboParentescoFamiliarResponsable.ItemData(cboParentescoFamiliarResponsable.ListIndex)
        If lblnHabilitarFechaNacimiento Then
            pActualizaNacimiento True, llngCveParentescoResponsable
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboParentescoFamiliarResponsable_Click"))
    Unload Me
End Sub

Private Sub cboProcedencia_Click()
On Error GoTo NotificaError

    llngCveProcedencia = 0
    If cboProcedencia.ListIndex <> -1 Then
        llngCveProcedencia = cboProcedencia.ItemData(cboProcedencia.ListIndex)
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & "cboProcedencia_Click"))
    Unload Me
End Sub

Private Sub cboProcedencia_KeyDown(KeyCode As Integer, Shift As Integer)
1         On Error GoTo NotificaError
          Dim vllngUltimaClave As Long
          
2         If KeyCode = vbKeyReturn Then
3             If cboProcedencia.ListIndex <> -1 Then
4                 If cboProcedencia.ItemData(cboProcedencia.ListIndex) = 0 Then
              
5                     frmMantoTresCampos.vllngCveCatalogo = 63
6                     frmMantoTresCampos.vlblnVisualizarCboCatalogos = False
7                     frmMantoTresCampos.Show vbModal, Me
                  
8                     pLlenaProcedencia
                  
9                     vllngUltimaClave = frsRegresaRs("select isnull(max(intCveProcedencia),0) from AdProcedencia").Fields(0)
10                    cboProcedencia.ListIndex = flngLocalizaCbo_new(cboProcedencia, Str(vllngUltimaClave))
                  
11                Else
12                    sstObj.Tab = 1
13                    MyTabHeader1.TabCurrent = 1
14                    cmdCambiarFamiliarEmergencia.SetFocus
15                End If
16            Else
17                sstObj.Tab = 1
18                MyTabHeader1.TabCurrent = 1
19                cmdCambiarFamiliarEmergencia.SetFocus
20            End If
21        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboProcedencia_KeyDown" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub cboReligion_Click()

    llngCveReligion = 0
    If cboReligion.ListIndex <> -1 Then
        llngCveReligion = cboReligion.ItemData(cboReligion.ListIndex)
    End If

End Sub

Private Sub cboTipopoliza_Click()

    llngCvePoliza = 0
    If cboTipoPoliza.ListIndex <> -1 Then
        llngCvePoliza = cboTipoPoliza.ItemData(cboTipoPoliza.ListIndex)
    End If
    
End Sub

Private Sub cboTipopoliza_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    Dim vllngUltimaClave As Long
    
    If KeyCode = vbKeyReturn Then
        If cboTipoPoliza.ListIndex = 1 Then
            If cboTipoPoliza.ItemData(cboTipoPoliza.ListIndex) = 0 Then
                frmMantoTresCampos.vllngCveCatalogo = 67
                frmMantoTresCampos.vlblnVisualizarCboCatalogos = False
                frmMantoTresCampos.Show vbModal, Me
                
                pLlenaTipoPolizaSeguros
            
                vllngUltimaClave = frsRegresaRs("select isnull(max(intIdTipoPoliza),0) from ADTipoPolizaSeguro").Fields(0)
                cboTipoPoliza.ListIndex = fintLocalizaCbo_new(cboTipoPoliza, Str(vllngUltimaClave))
            
            Else
                txtNumeroPoliza.SetFocus
            End If
        Else
            txtNumeroPoliza.SetFocus
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboTipoPoliza_KeyDown"))
    Unload Me
End Sub

Private Sub cboTipoConvenio_LostFocus()
    cboEmpresa_LostFocus
End Sub

Private Sub CboEmpresa_KeyDown(KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        If cboTipoIngreso.ListIndex > -1 Then
            pLlenaDocumentosIngreso Trim(Str(cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex)))
        End If
    
        If cboEmpresaPaciente.Enabled = True Then
            cboEmpresaPaciente.SetFocus
        Else
            If cboRelacion.Visible = True And cboRelacion.Enabled = True Then
                cboRelacion.SetFocus
            Else
                If txtAutoriza.Enabled Then
                    txtAutoriza.SetFocus
                Else
                    txtNumeroControl.SetFocus
                End If
           End If
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboEmpresa_KeyDown"))
    Unload Me
End Sub

Private Sub CboEstadoCivil_Click()
1         On Error GoTo NotificaError
          Dim vlblnCasado As Boolean

2         llngCveEstadoCivil = 0
3         If cboEstadoCivil.ListIndex <> -1 Then
              
4             llngCveEstadoCivil = cboEstadoCivil.ItemData(cboEstadoCivil.ListIndex)
              
5             txtConyuge.Text = ""
6             txtPaternoConyuge = ""
7             txtMaternoConyuge = ""
8             If lblnHabilitarFechaNacimiento Then
9                 mskNacimientoConyuge.Mask = ""
10                mskNacimientoConyuge.Text = ""
11                mskNacimientoConyuge.Mask = "##/##/####"
12            End If
              
13            vlblnCasado = frsRegresaRs("select bitCasado from SiEstadoCivil where intCveEstadoCivil=" & Str(cboEstadoCivil.ItemData(cboEstadoCivil.ListIndex))).Fields(0)
              
14            pHabilitaConyuge vlblnCasado
              
15             If lblnHabilitarFechaNacimiento Then
16                If llngCveParentescoEmergencia = llngCveParentescoConyuge And vlblnCasado = False Then
17                    mskNacimientoEmergencia.Mask = ""
18                    mskNacimientoEmergencia.Text = ""
19                    mskNacimientoEmergencia.Mask = "##/##/####"
20                End If
21                If llngCveParentescoResponsable = llngCveParentescoConyuge And vlblnCasado = False Then
22                    mskNacimientoResponsable.Mask = ""
23                    mskNacimientoResponsable.Text = ""
24                    mskNacimientoResponsable.Mask = "##/##/####"
25                End If
26            End If
27        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":CboEstadoCivil_Click" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pHabilitaConyuge(vlblnHabilita As Boolean)
    On Error GoTo NotificaError
    
    lblConyuge.Enabled = vlblnHabilita
    txtConyuge.Enabled = vlblnHabilita
    
    lblPaternoConyuge.Enabled = vlblnHabilita
    txtPaternoConyuge.Enabled = vlblnHabilita
    
    lblMaternoConyuge.Enabled = vlblnHabilita
    txtMaternoConyuge.Enabled = vlblnHabilita
    
    If lblnHabilitarFechaNacimiento Then
        lblNacimientoConyuge.Enabled = vlblnHabilita
        mskNacimientoConyuge.Enabled = vlblnHabilita
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pHabilitaConyuge"))
    Unload Me
End Sub

Private Sub cboEstadoCivil_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
       SendKeys vbTab
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboEstadoCivil_KeyDown"))
    Unload Me
End Sub

Private Sub cboMedicoCargo_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        If fraDiagnostico.Enabled Then
            cmdBuscarDiagnostico.SetFocus
        Else
            If txtMotivoIngreso.Visible Then
                txtMotivoIngreso.SetFocus
            ElseIf cmdSugerirCuarto.Enabled Then
                cmdSugerirCuarto.SetFocus
            Else
                cmdGrabar.SetFocus
            End If
        End If
    End If
        
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboMedicoCargo_KeyDown"))
    Unload Me
End Sub

Private Sub cboNacionalidad_KeyDown(KeyCode As Integer, Shift As Integer)
1         On Error GoTo NotificaError
          Dim vllngUltimaClave As Long
          
2         If KeyCode = vbKeyReturn Then
3             If cboNacionalidad.ListIndex <> -1 Then
4                 If cboNacionalidad.ItemData(cboNacionalidad.ListIndex) = 0 Then
5                     frmMantoTresCampos.vllngCveCatalogo = 33
6                     frmMantoTresCampos.vlblnVisualizarCboCatalogos = False
7                     frmMantoTresCampos.Show vbModal, Me
                  
8                     pLlenaNacionalidad
                  
9                     vllngUltimaClave = frsRegresaRs("select isnull(max(intCveNacionalidad),0) from Nacionalidad").Fields(0)
10                    cboNacionalidad.ListIndex = flngLocalizaCbo_new(cboNacionalidad, Str(vllngUltimaClave))
                  
11                Else
12                    cboIdioma.SetFocus
13                End If
14            Else
15                cboIdioma.SetFocus
16            End If
17        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboNacionalidad_KeyDown" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub cboParentescoFamiliarEmergencia_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtDomicilioEmergencia.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboParentescoFamiliarEmergencia_KeyDown"))
    Unload Me
End Sub

Private Sub cboParentescoFamiliarResponsable_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtDomicilioResponsable.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboParentescoFamiliarResponsable_KeyDown"))
    Unload Me
End Sub

Private Sub cboPlanPaqueteCirugia_Click()
    On Error GoTo NotificaError
    Dim vllngPosicion As Long

'****************************caso 20330 ***************************
    If OptPaqueteOtros(0).Value Then
         If cboPlanPaqueteCirugia.Width = 4860 Then
             If Len(cboPlanPaqueteCirugia.Text) > 35 Then
                cboPlanPaqueteCirugia.Width = 12550 '12750
                cboPlanPaqueteCirugia.Left = 2200 '1995
                OptPaqueteOtros(0).Left = 75

                OptPaqueteOtros(1).Left = 1255
                cboEmpresa.Visible = False
             End If
       Else
          cboPlanPaqueteCirugia.Width = 4860
          cboPlanPaqueteCirugia.Left = 9900
          OptPaqueteOtros(0).Left = 7845
          OptPaqueteOtros(1).Visible = True
          OptPaqueteOtros(1).Left = 9000
          cboEmpresa.Visible = True
        End If
          
    End If
 '****************************************************************************
    
    
    txtAnticipo.Text = ""
    If cboPlanPaqueteCirugia.ListIndex <> -1 Then
        If (vlstrTipoAnticipoSeleccionado <> vlstrTipoAnticipoOtros) Or (vlstrTipoAnticipoSeleccionado = vlstrTipoAnticipoOtros And cboPlanPaqueteCirugia.ListIndex > 0) Then
            If vlstrTipoAnticipoSeleccionado = vlstrTipoAnticipoOtros Then
                vllngPosicion = cboPlanPaqueteCirugia.ListIndex - 1
            Else
                vllngPosicion = cboPlanPaqueteCirugia.ListIndex
            End If
            
            rsPlanPaqueteCirugia.MoveFirst
            rsPlanPaqueteCirugia.Move vllngPosicion
            txtAnticipo.Text = FormatCurrency(rsPlanPaqueteCirugia!mnyAnticipoSugerido, 2)
            vlstrTipoTratamiento = IIf(Trim(rsPlanPaqueteCirugia!chrTratamiento) = "MEDICO", "M", "Q")
            
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboPlanPaqueteCirugia_Click"))
    Unload Me
End Sub

Private Sub cboPlanPaqueteCirugia_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    Dim vllngUltimaClave As Long

    If KeyCode = vbKeyReturn Then
        
        If cboPlanPaqueteCirugia.ListIndex <> -1 Then
            If cboPlanPaqueteCirugia.Text = "<AGREGAR>" Then
                frmMantoConceptoAnticipo.Show vbModal, Me
                
                vllngUltimaClave = frsRegresaRs("select isnull(max(intConsecutivo),0) from AdConceptoAnticipo").Fields(0)
                vllngClavePaqueteAnterior = vllngUltimaClave
                pCargaPaquetosOtros
                cboPlanPaqueteCirugia.ListIndex = flngLocalizaCbo_new(cboPlanPaqueteCirugia, Str(vllngUltimaClave))
            Else
                txtAnticipo.SetFocus
            End If
        Else
            txtAnticipo.SetFocus
        End If
    End If
        
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboPlanPaqueteCirugia_KeyDown"))
    Unload Me
End Sub

Private Sub cboRelacion_Click()
1     On Error GoTo NotificaError
          
          Dim vlStrTipoPaciente As String
          Dim vllngCveEmpleado As Long
          Dim vllngCveMedico As Long
          
2         If cboRelacion.ListIndex <> -1 Then
              '---------------------------------------------------------------------'
              ' Traer los familiares relacionados al empleado o médico seleccionado '
              '---------------------------------------------------------------------'
3             If (vlstrTipoTipoPaciente = "EM" Or vlstrTipoTipoPaciente = "ME") And vlblnFamiliar Then
4                 If vlstrIngresoSeleccionado <> vlstrTipoIngresoRecienNacido Then
5                     If rsFamiliar.State <> adStateClosed Then rsFamiliar.Close
          
6                     vlStrTipoPaciente = vlstrTipoTipoPaciente
7                     vllngCveEmpleado = cboRelacion.ItemData(cboRelacion.ListIndex)
8                     vllngCveMedico = 0
9                     If vlstrTipoTipoPaciente = "ME" Then
                          'Si el médico es empleado del hospital, buscar la clave de empleado
10                        vlstrSentencia = "SELECT INTCVEEMPLEADO FROM HOMEDICO WHERE INTCVEMEDICO = " & Str(vllngCveEmpleado)
11                        Set rsFamiliar = frsRegresaRs(vlstrSentencia)
12                        If rsFamiliar.RecordCount > 0 And rsFamiliar!intCveEmpleado <> 0 Then
13                            vlStrTipoPaciente = "EM"
14                            vllngCveEmpleado = rsFamiliar!intCveEmpleado
15                            vllngCveMedico = cboRelacion.ItemData(cboRelacion.ListIndex)
16                        End If
17                        rsFamiliar.Close
18                    End If
          
19                    vlstrSentencia = "SELECT INTCVEFAMILIAR, VCHAPELLIDOPATERNO || ' ' || VCHAPELLIDOMATERNO || ' ' || VCHNOMBRE NOMBRE " & _
                                       " FROM NoFamiliarEmpleado " & _
                                       " WHERE bitActivo = 1 "
20                    If vlstrTipoTipoPaciente = "ME" And vllngCveMedico <> 0 Then
21                        vlstrSentencia = vlstrSentencia & " AND ((intCveEmpleado = " & Str(vllngCveEmpleado) & " AND chrTipo = 'EM')"
22                        vlstrSentencia = vlstrSentencia & " OR (intCveEmpleado = " & Str(vllngCveMedico) & " AND chrTipo = 'ME'))"
23                    Else
24                        vlstrSentencia = vlstrSentencia & " AND intCveEmpleado = " & Str(vllngCveEmpleado) & " AND chrTipo = '" & vlStrTipoPaciente & "'"
25                    End If
26                    vlstrSentencia = vlstrSentencia & " ORDER BY 2 "
27                    Set rsFamiliar = frsRegresaRs(vlstrSentencia)
28                    If rsFamiliar.RecordCount <> 0 Then
29                        pLlenarCboRs_new cboFamiliar, rsFamiliar, 0, 1
30                    Else
31                        cboFamiliar.Clear
                          
32                    End If
          
33                    If vlstrTipoTipoPaciente = "EM" And vlblnFamiliarEmpleado = False Then
34                        cboFamiliar.Enabled = False
35                        lblFamiliar.Enabled = False
36                    Else
37                        cboFamiliar.Enabled = True
38                        lblFamiliar.Enabled = True
39                    End If
          
40                    cboFamiliar.AddItem "NINGUNO", 0 'Agregar dato por defecto
41                    cboFamiliar.ItemData(cboFamiliar.NewIndex) = 0
42                    cboFamiliar.ListIndex = 0
43                    cboMadre.Visible = False
                      
44                End If
45            End If
46        End If
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboRelacion_Click" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pLimpiaDatosEmpleadoMedico()
1     On Error GoTo NotificaError
          
2         txtApellidoPaterno.Text = ""
3         txtApellidoMaterno.Text = ""
4         txtNombre.Text = ""
5         mskFechaNacimiento.Mask = ""
6         mskFechaNacimiento.Text = ""
7         mskFechaNacimiento.Mask = "##/##/####"
8         txtEdad.Text = ""
9         optSexo(0).Value = False
10        optSexo(1).Value = False
11        mskRFC.Mask = ""
12        mskRFC.Text = ""
13        txtCurp.Text = ""
          
14        If cboEstadoCivil.ListCount > 0 Then cboEstadoCivil.ListIndex = 0
          
15        If cgstrModulo = "AD" Then '|  Admisión siempre tiene la opción <AGREGAR> por eso cuando no hay idiomas se selecciona esta opción por defecto
16            cboIdioma.ListIndex = IIf(cboIdioma.ListCount > 1, flngLocalizaCbo_new(cboIdioma, Str(vglngCveIdioma)), 0)
17        Else '|  Los demás módulos no tienen la opción <AGREGAR> por eso cuando no hay idiomas pone vacío
18            cboIdioma.ListIndex = IIf(cboIdioma.ListCount > 0, flngLocalizaCbo_new(cboIdioma, Str(vglngCveIdioma)), -1)
19            If cboIdioma.ListIndex = -1 Then 'Si el idioma predeterminado tienes estatus desactivado...
20                If cboIdioma.ListCount > 0 Then 'Si hay idiomas disponibles...
21                   cboIdioma.ListIndex = 0 'Seleccionar el primer idioma disponible
22                End If
23            End If
24        End If
          
25        cboOcupacion.ListIndex = -1
26        txtCorreoElectronico.Text = ""
27        OptEnvioPromo(0).Value = False
28        OptEnvioPromo(1).Value = IIf(fblnSolicitarEnvioPromociones, False, True)
          
29        txtAlergia.Text = "NINGUNA"
30        lstAlergias.Clear
          
31        txtCalle.Text = ""
32        txtNumeroExterior.Text = ""
33        txtNumeroInterior.Text = ""
34        txtColonia.Text = ""
35        txtCodigoPostal.Text = ""
36        txtTelefono.Text = ""
37        txtPadre.Text = ""
38        mskNacimientoPadre.Mask = ""
39        mskNacimientoPadre.Text = ""
40        mskNacimientoPadre.Mask = "##/##/####"
41        txtMadre.Text = ""
42        mskNacimientoMadre.Mask = ""
43        mskNacimientoMadre.Text = ""
44        mskNacimientoMadre.Mask = "##/##/####"
          
45        chkForaneo.Value = 0
46        txtDomicilioForaneo.Text = ""
47        txtColoniaForanea.Text = ""
48        txtCodigoPostalForaneo.Text = ""
49        txtTelefonoForaneo.Text = ""
          
50        txtNombreEmergencia.Text = ""
51        cboParentescoFamiliarEmergencia.ListIndex = -1
52        txtDomicilioEmergencia.Text = ""
53        txtTelefonoEmergencia.Text = ""
54        mskNacimientoEmergencia.Mask = ""
55        mskNacimientoEmergencia.Text = ""
56        mskNacimientoEmergencia.Mask = "##/##/####"
          
57        txtNombreResponsable.Text = ""
58        cboParentescoFamiliarResponsable.ListIndex = -1
59        txtDomicilioResponsable.Text = ""
60        txtTelefonoResponsable.Text = ""
61        txtLugarTrabajoResponsable.Text = ""
62        mskNacimientoResponsable.Mask = ""
63        mskNacimientoResponsable.Text = ""
64        mskNacimientoResponsable.Mask = "##/##/####"
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLimpiaDatosEmpleadoMedico" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub cboRelacion_KeyDown(KeyCode As Integer, Shift As Integer)
1     On Error GoTo NotificaError

          Dim rsEmpleado As New ADODB.Recordset
          
2         If KeyCode = vbKeyReturn Then
3             If cboTipoPaciente.ListIndex <> -1 Then
4                 If vlUsaSocios = True And vgLngTipoPacienteSocio = Str(cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex)) Then 'Si es un socio, no recarga nada, manda el foco al combo de socios
5                     cboSocio.SetFocus
6                     Exit Sub
7                 End If
8             End If
              
              'Si es recién nacido
9             If vlstrIngresoSeleccionado = vlstrTipoIngresoRecienNacido Then
10                If fblnCanFocus(cboMadre) Then cboMadre.SetFocus
11            Else
                  'Si es empleado
12                If vlstrTipoTipoPaciente = "EM" Then
13                    If vlblnFamiliar Then
14                        If fblnCanFocus(cboFamiliar) Then cboFamiliar.SetFocus  'Si es familiar del empleado
15                    Else
16                        If fblnCanFocus(cboOcupacion) Then cboOcupacion.SetFocus
17                    End If
                      
                  'Si es médico
18                ElseIf vlstrTipoTipoPaciente = "ME" Then
19                    If vlblnFamiliar Then
20                        If fblnCanFocus(cboFamiliar) Then cboFamiliar.SetFocus 'Si es familiar del médico
21                    Else
22                        If fblnCanFocus(mskFechaNacimiento) Then mskFechaNacimiento.SetFocus
23                    End If
                  'Otros
24                Else
25                    If txtAutoriza.Enabled Then
26                        txtAutoriza.SetFocus
27                    Else
28                        txtNumeroControl.SetFocus
29                    End If
30                End If
31            End If
32        End If
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboRelacion_KeyDown" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub cboReligion_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    Dim vllngUltimaClave As Long
    
    If KeyCode = vbKeyReturn Then
        If cboReligion.ListIndex <> -1 Then
            If cboReligion.ItemData(cboReligion.ListIndex) = 0 Then
                frmMantoTresCampos.vllngCveCatalogo = 24
                frmMantoTresCampos.vlblnVisualizarCboCatalogos = False
                frmMantoTresCampos.Show vbModal, Me
            
                pLlenaReligion
            
                vllngUltimaClave = frsRegresaRs("select isnull(max(intClave),0) from AdReligion").Fields(0)
                cboReligion.ListIndex = flngLocalizaCbo_new(cboReligion, Str(vllngUltimaClave))
            
            Else
                cboOcupacion.SetFocus
            End If
        Else
            cboOcupacion.SetFocus
        End If
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboReligion_KeyDown"))
    Unload Me
End Sub

Private Sub cboTipoConvenio_Click()
          Dim rsEmpresa As New ADODB.Recordset
          Dim rsempresapaciente As New ADODB.Recordset
          Dim lngTipoConvenio As Long
1         On Error GoTo NotificaError
          
2         cboEmpresa.Clear
3         cboEmpresa.ListIndex = -1
4         cboEmpresa.Enabled = False
5         lblEmpresa.Enabled = False
6         Cmdrequisitos.Enabled = False
          vlblnAsegurdora = False
7         If cboTipoConvenio.ListIndex <> -1 Then
              lngTipoConvenio = cboTipoConvenio.ItemData(cboTipoConvenio.ListIndex)
8             vlstrSentencia = "select distinct ccEmpresa.intCveEmpresa, ccEmpresa.vchDescripcion from CcEmpresa " & _
                               IIf(lblnManejaSucursales, " inner join gnSucursalEmpresa on ccEmpresa.intCveEmpresa = gnSucursalEmpresa.intCveEmpresa ", "") & _
                               " where CcEmpresa.tnyCveTipoConvenio =" & Str(cboTipoConvenio.ItemData(cboTipoConvenio.ListIndex)) & _
                               IIf(lblnManejaSucursales, " and intCveSucursal = " & llngCveSucursal, "")
              'Cuando es una consulta, se muestran todas las empresas, tambien las desactivadas
9             If vlblnConsultaEmpresa = False Then
10                vlstrSentencia = vlstrSentencia & " and bitActivo = 1"
11            End If
              If cgstrModulo = "PV" And vgstrForma = "frmPresupuestos" Then
                  vlstrSentencia = vlstrSentencia & " and intCveEmpresa = " & vglngEmpresaPaciente
              End If
12            Set rsEmpresa = frsRegresaRs(vlstrSentencia)
              
13            If rsEmpresa.RecordCount <> 0 Then
14                pLlenarCboRs_new cboEmpresa, rsEmpresa, 0, 1
15                cboEmpresa.ListIndex = 0
                  If cgstrModulo = "PV" And vgstrForma = "frmPresupuestos" Then
                      cboEmpresa.ListIndex = flngLocalizaCbo_new(cboEmpresa, Str(vglngEmpresaPaciente))
                  End If
16                cboEmpresa.Enabled = True
17                lblEmpresa.Enabled = True
18            End If
          
19            cboEmpresaPaciente.Clear
20            vlstrSentencia = "select intCveEmpresa, vchDescripcion from CcEmpresa where bitmostrarempresapaciente=1 and bitactivo=1"
21            Set rsempresapaciente = frsRegresaRs(vlstrSentencia)
22            If rsempresapaciente.RecordCount <> 0 Then
23                pLlenarCboRs_new cboEmpresaPaciente, rsempresapaciente, 0, 1
                  
24                lblempresapaciente.Enabled = True
25                cboEmpresaPaciente.Enabled = True
                  'rsempresapaciente.Close                            '
26                cboEmpresaPaciente.AddItem "", 0
27                cboEmpresaPaciente.ItemData(cboEmpresaPaciente.NewIndex) = 0
28                cboEmpresaPaciente.ListIndex = 0
29            End If
30          vlstrSentencia = "Select bitAseguradora From CcTipoConvenio Where tnyCveTipoConvenio = " & lngTipoConvenio
31          Set rs = frsRegresaRs(vlstrSentencia)
32          If rs.RecordCount <> 0 Then
                vlblnAsegurdora = IIf(rs!bitAseguradora = 1, True, False)
            End If
33        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboTipoConvenio_Click" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub cboTipoConvenio_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        If cboEmpresa.Enabled = False Then
            cboTipoConvenio_Click
            If cboEmpresa.Enabled = False Then
                If cboEmpresaPaciente.Enabled = True Then
                    cboEmpresaPaciente.SetFocus
                Else
                    txtNumeroControl.SetFocus
                End If
            
            End If
        Else
            cboEmpresa.SetFocus
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboTipoConvenio_KeyDown"))
    Unload Me
End Sub

Private Sub cboTipoIngreso_Click()
1     On Error GoTo NotificaError

          Dim lstrHoraIngreso As String
          Dim rsAsignaCamas As ADODB.Recordset
          Dim rsFormaNac As ADODB.Recordset
          Dim lstrActualiza As String
              
2         If cboTipoIngreso.ListIndex <> -1 Then
          
              'Forma de nacimiento
3             Set rsFormaNac = frsEjecuta_SP(IIf(Trim(txtExpedienteInterno.Text) = "", 0, Trim(txtExpedienteInterno)), "SP_EXSELFORMANACIMIENTO")
4             If rsFormaNac.RecordCount <> 0 And vlblnConsulta = True Then
5                 If Trim(rsFormaNac!vchFormaNacimiento) = "ABORTO" Then
6                     cboFormaNac.ListIndex = IIf(Trim(rsFormaNac!vchFormaNacimiento) = "ABORTO", 0, (IIf(Trim(rsFormaNac!vchFormaNacimiento) = "CESÁREA", 1, IIf(Trim(rsFormaNac!vchFormaNacimiento) = "PARTO", 2, -1))))
7                 Else
8                     cboFormaNac.ListIndex = IIf(Trim(rsFormaNac!vchFormaNacimiento) = "CESÁREA", 0, (IIf(Trim(rsFormaNac!vchFormaNacimiento) = "PARTO", 1, -1)))
9                 End If
10            ElseIf rsFormaNac.RecordCount <> 0 And vlblnConsulta = False Then
11                cboFormaNac.ListIndex = IIf(Trim(rsFormaNac!vchFormaNacimiento) = "CESÁREA", 0, (IIf(Trim(rsFormaNac!vchFormaNacimiento) = "PARTO", 1, -1)))
12            Else
13                cboFormaNac.ListIndex = -1
14            End If

15            If colIngresos.Item("K_" & cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex)) = 1 Then
16                cboDeptoIngreso.Enabled = True
17                lblLugarIngreso.Enabled = True
18            Else
19                cboDeptoIngreso.Enabled = False
20                lblLugarIngreso.Enabled = False
21                If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias _
                  Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveExterno Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveConsultaExterna Then
22                    cboDeptoIngreso.ListIndex = fintLocalizaCbo_new(cboDeptoIngreso, CStr(vgintNumeroDepartamento))
23                Else
24                    cboDeptoIngreso.ListIndex = fintLocalizaCbo_new(cboDeptoIngreso, CStr(vlintDeptoAdmision))
25                End If
26            End If
              
27            vlstrIngresoSeleccionadoPreviamente = vlstrIngresoSeleccionado
28            vlstrIngresoSeleccionado = Trim(cboTipoIngreso.List(cboTipoIngreso.ListIndex))
              
29            optSeleccion(2).Value = True    'Impresión de documentos (Predeterminados)
              
30            pHabilitaAsignacionCuarto True
              
31            If Not vlblnConsulta Then pLimpiaFamiliar
                      
32            If Not vlblnConsulta Then pLimpiaSocios
              
33            If Not vlblnConsulta Then
34                cboMadre.Visible = False
35                lblMadreRecienNacido.Visible = False
36            End If
              
              '- INTERNOS -'
37            If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveUrgencias _
              And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveExterno And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveConsultaExterna Then
38                pLlenaAreas "I"
39                chkAsignarCuarto.Enabled = False
40                vlblnCambioFechaIngreso = True
41                vlblnCambioHoraIngreso = True
                  
42                If Not vlblnConsulta Then
43                    cboMadre.Clear
44                    cboMadre.ListIndex = -1
45                    cboMadre.Enabled = True
46                    cboMadre.Visible = True
47                    lblMadreRecienNacido.Caption = "Madre"
48                    lblMadreRecienNacido.Visible = True
49                    lblMadreRecienNacido.Enabled = True
                      
50                    cboRelacion.Clear
51                    cboRelacion.ListIndex = -1
52                    cboRelacion.Visible = True
53                    cboRelacion.Enabled = False
54                    lblRelacion.Visible = True
55                    lblRelacion.Caption = "Relación"
56                    lblRelacion.Enabled = False
                                     
57                    If Not vlblnDatosCapturados Then
58                        pLimpiaDatosEmpleadoMedico
59                    End If
                      
60                    lblOrden.Enabled = True
61                    optOrden(0).Value = True
62                    optOrden(0).Enabled = True
63                    optOrden(1).Enabled = True
                      
64                    cboTipoPaciente.Clear
65                    cboTipoPaciente.ListIndex = -1
                      
                      '-------------------------------------------------------------
                      ' RECIEN NACIDOS (especificaciones)
                      '-------------------------------------------------------------

66                    If vlstrIngresoSeleccionado = vlstrTipoIngresoRecienNacido Then
                          'Carga los tipos de paciente, exceptuando médicos y empleados
                          'pLlenaTipoPaciente "where chrTipo <> 'EM' and chrTipo <> 'ME' and bitDesconocido = 0"
67                        pLlenaTipoPaciente " where (chrtipo <> 'EM' or (chrtipo = 'EM' and bitfamiliar = 1))  AND (chrtipo <> 'ME' or (chrtipo = 'ME' and bitfamiliar = 1)) and bitDesconocido = 0 and bitactivo=1 "
                      
68                        optOrden(1).Value = True
69                        optOrden(0).Enabled = False
70                        optOrden(1).Enabled = False
                          
71                        pCargaMamas

72                        lblFormaNac.Enabled = True
73                        cboFormaNac.Enabled = True
74                    Else
75                        If vlstrIngresoSeleccionado = vlstrTipoIngresoInternamientoNormal Or vlstrIngresoSeleccionado = vlstrTipoIngresoInternoFueUrgencias Then
                              'Solo en estos dos casos se cargan todos los tipos de paciente
76                            pLlenaTipoPaciente " where bitactivo=1 "
77                        Else
                              'Excepto el tipo de paciente desconocido
78                            pLlenaTipoPaciente " where bitDesconocido = 0 and bitactivo=1 "
79                        End If
                          
80                        lblFormaNac.Enabled = False
81                        cboFormaNac.Enabled = False
82                    End If
                      
                      'Diagnóstico preliminar al ingreso
83                    fraDiagnostico.Enabled = True
                      'Observaciones
84                    cmdObservaciones.Enabled = True
                      'txtObservaciones.Text = ""
85                    txtObservaciones.Enabled = True
86                Else
87                    optOrden(0).Enabled = True
88                    optOrden(1).Enabled = True
                      
89                    If vlstrIngresoSeleccionado = vlstrTipoIngresoRecienNacido Then
                          'Carga los tipos de paciente, exceptuando médicos y empleados
                          'pLlenaTipoPaciente "where chrTipo <> 'EM' and chrTipo <> 'ME' and bitDesconocido = 0"
90                        pLlenaTipoPaciente " where (chrtipo <> 'EM' or (chrtipo = 'EM' and bitfamiliar = 1))  AND (chrtipo <> 'ME' or (chrtipo = 'ME' and bitfamiliar = 1)) and bitDesconocido = 0 and bitactivo=1 "
                          
91                        pCargaMamas
92                    End If
                      
                      'Diagnóstico preliminar al ingreso
93                    fraDiagnostico.Enabled = True
                      'Observaciones
94                    cmdObservaciones.Enabled = True
                      'txtObservaciones.Text = ""
95                    txtObservaciones.Enabled = True
96                End If
97                If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveRecienNacido Then
98                        lblFormaNac.Enabled = False
99                        cboFormaNac.Enabled = False
100               End If
101               lblNumCuenta.Enabled = True
102               txtCuentaInterno.Enabled = True
103               lblCuentaExterno.Enabled = False
104               txtCuentaExterno.Enabled = False
                  
105               mskFechaIngreso.Enabled = True
106               mskHoraIngreso.Enabled = True
107               lblFechaIngreso.Enabled = True
                  
108               cboMedicoEmergencias.Enabled = False
109               lblMedicoEmergencias.Caption = "Médico emergencias"
110               lblMedicoEmergencias.Enabled = False
                  
111               cboMedicoCargo.Enabled = True
112               lblMedicoCargo.Caption = "Médico a cargo*"
113               lblMedicoCargo.Enabled = True
                 
                  '-------------------------------------------------------------
                  ' INTERNOS FUERON EXTERNOS (especificaciones)
                  '-------------------------------------------------------------
114               If lbFlag Then
115                    vlstrIngresoSeleccionado = vlstrTipoIngresoInternoFueUrgencias
116               End If
                  
117               If vlstrIngresoSeleccionado = vlstrTipoIngresoInternoFueUrgencias Then
118                   lblCuentaExterno.Enabled = True
119                   txtCuentaExterno.Enabled = True
                      
120                   cboMedicoEmergencias.Enabled = True
121                   lblMedicoEmergencias.Enabled = True
122               End If
                  
                  '-------------------------------------------------------------
                  ' PREPAGOS, PREVIOS, AMBULATORIOS (especificaciones)
                  '-------------------------------------------------------------
123               If vlstrIngresoSeleccionado = vlstrTipoIngresoPrepago _
                  Or vlstrIngresoSeleccionado = vlstrTipoIngresoPrevio _
                  Or (vlblnConsulta And Trim(grdCuarto.TextMatrix(1, 1)) <> "") Then
124                   pHabilitaAsignacionCuarto False
                      
125                   If vlstrIngresoSeleccionado = "INTERNAMIENTO NORMAL" Or vlstrIngresoSeleccionado = "AMBULATORIO" Or vlstrIngresoSeleccionado = "CORTA ESTANCIA" Or vlstrIngresoSeleccionado = "INTERNO FUE CORTA ESTANCIA" Then
126                       pLimpiaAsignacion
127                   End If
128               End If
                  
                  'Dado que la tabla de ingreso previo no tiene la procedencia, deshabilito el combo
129               If vlstrIngresoSeleccionado = vlstrTipoIngresoPrevio Then
130                   cboProcedencia.Enabled = False
131               Else
132                   cboProcedencia.Enabled = True
133               End If
                   If Trim(vgstrNombCortoCH) = Trim("SOM") Then
                    cboProcedencia.Enabled = True
                   End If
                   
134               If vlblnRegistroNuevo = False Then                       ' Actualizacion de fecha
135                   If lblnDePestanaPrepago = True Or (vlstrIngresoSeleccionado = vlstrTipoIngresoPrepago And vlblnPestanaGeneral) Then
136                       lstrHoraIngreso = IIf(vlstrIngresoSeleccionado = vlstrTipoIngresoPrepago And lstrHoraIngresoPrepago <> "", lstrHoraIngresoPrepago, fdtmServerHora)
137                       mskFechaIngreso.Mask = ""
138                       mskFechaIngreso.Text = IIf(vlstrIngresoSeleccionado = vlstrTipoIngresoPrepago And lstrHoraIngresoPrepago <> "", lstrFechaIngresoPrepago, fdtmServerFecha)
139                       mskFechaIngreso.Mask = "##/##/####"
140                       mskHoraIngreso.Mask = ""
141                       mskHoraIngreso.Text = IIf(Len(Trim(Str(Hour(lstrHoraIngreso)))) = 1, "0" + Trim(Str(Hour(lstrHoraIngreso))), Trim(Str(Hour(lstrHoraIngreso)))) + ":" + IIf(Len(Trim(Str(Minute(lstrHoraIngreso)))) = 1, "0" + Trim(Str(Minute(lstrHoraIngreso))), Trim(Str(Minute(lstrHoraIngreso))))
142                       mskHoraIngreso.Mask = "##:##"
143                       vlblnCambioFechaIngreso = True
144                       vlblnCambioHoraIngreso = True
145                   End If
146               End If
                
147               If vlblnRegistroNuevo = False Then                       ' Actualizacion de fecha
148                   If vlblnPacientePrevio = True Or (vlstrIngresoSeleccionado = vlstrTipoIngresoPrevio And vlblnPestanaGeneral) Then
149                       lstrHoraIngreso = IIf(vlstrIngresoSeleccionado = vlstrTipoIngresoPrevio And lstrHoraIngresoPrevio <> "", lstrHoraIngresoPrevio, fdtmServerHora)
150                       mskFechaIngreso.Mask = ""
151                       mskFechaIngreso.Text = IIf(vlstrIngresoSeleccionado = vlstrTipoIngresoPrevio And lstrHoraIngresoPrevio <> "", lstrHoraIngresoPrevio, fdtmServerFecha)
      '                    mskFechaIngreso.Mask = "##/##/####"
152                       mskHoraIngreso.Mask = ""
153                       mskHoraIngreso.Text = IIf(Len(Trim(Str(Hour(lstrHoraIngreso)))) = 1, "0" + Trim(Str(Hour(lstrHoraIngreso))), Trim(Str(Hour(lstrHoraIngreso)))) + ":" + IIf(Len(Trim(Str(Minute(lstrHoraIngreso)))) = 1, "0" + Trim(Str(Minute(lstrHoraIngreso))), Trim(Str(Minute(lstrHoraIngreso))))
154                       mskHoraIngreso.Mask = "##:##"
155                       vlblnCambioFechaIngreso = True
156                       vlblnCambioHoraIngreso = True
157                   End If
158               End If
                
159               cmdAbrirCuenta.Enabled = False
160               cmdActivarPaciente.Enabled = False
                  
                  'Modificación para campo Motivo Ingreso
161               fraDiagnostico.Visible = True
                  '****20329******************
                    fraProcedimiento.Visible = True
                    
                    chkAsignarCuarto.Top = 6760
                    
                    fraAsignacionCuarto.Top = 6760
                    fraAsignacionCuarto.Height = 2505
                    
                    grdCuarto.Top = 720
                    grdCuarto.Height = 1275
                    
                    lblEstadoCuartoActual.Top = 2100
                    cboEstadoCuartoActual.Top = 2040
                    
                    cmdObservaciones.Top = 9360
                    txtObservaciones.Top = 9600
                    txtObservaciones.Height = 585
                
                '**********************+

162               fraMotivoIngreso.Visible = False
                  'Modificación para procedencia
                  lblProcedencia.Caption = "Procedencia"
                  
              '- EXTERNOS -'
163           Else
164               lblFormaNac.Enabled = False
165               cboFormaNac.Enabled = False
              
166               If cgstrModulo = "AD" Then pLlenaAreas "E"
                  
167               If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveExterno Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveConsultaExterna Then
                      'A los Externos no se les asigna cuarto
168                   chkAsignarCuarto.Value = 0
169                   chkAsignarCuarto.Enabled = False
170                   pHabilitaAsignacionCuarto False
171               Else
172                   chkAsignarCuarto.Value = 0
                      
173                   Set rsAsignaCamas = frsEjecuta_SP(CStr(vgintNumeroDepartamento), "Sp_GnSelAsignaCamas")
174                   If rsAsignaCamas.RecordCount > 0 Then
175                       chkAsignarCuarto.Enabled = True
176                   Else
177                       chkAsignarCuarto.Enabled = False
178                   End If
179                   pHabilitaAsignacionCuarto False
180               End If
                  
181               If Not vlblnConsulta Then
182                   cboTipoPaciente.Clear
183                   cboTipoPaciente.ListIndex = -1
                      
184                   If blnHonorariosCC Then
                      'Si es de Honorarios médicos y el paciente no tiene Tipo de paciente,
                      'osea si es uno nuevo, que solo cargue los de tipo convenio?
185                       pLlenaTipoPaciente " Where chrTipo = 'CO' And bitActivo = 1 "
186                   Else
187                       pLlenaTipoPaciente " where bitactivo=1 "
188                   End If

189                   cboRelacion.Clear
190                   cboRelacion.ListIndex = -1
191                   cboRelacion.Visible = True
192                   cboRelacion.Enabled = False
193                   lblRelacion.Visible = True
194                   lblRelacion.Caption = "Relación"
195                   lblRelacion.Enabled = False
                      
196                   If Not vlblnDatosCapturados Then
197                       pLimpiaDatosEmpleadoMedico
198                   End If
199               End If
                  
200               lblNumCuenta.Enabled = False
201               txtCuentaInterno.Enabled = False
202               lblCuentaExterno.Enabled = True
203               txtCuentaExterno.Enabled = True
                  
'204               mskFechaIngreso.Enabled = False
'205               mskHoraIngreso.Enabled = False
'206               lblFechaIngreso.Enabled = False
204               mskFechaIngreso.Enabled = True
205               mskHoraIngreso.Enabled = True
206               lblFechaIngreso.Enabled = True
                  
                  'Orden de internamiento
207               lblOrden.Enabled = False
208               optOrden(1).Value = True
209               optOrden(0).Enabled = False
210               optOrden(1).Enabled = False
                  'Diagnóstico preliminar al ingreso
211               fraDiagnostico.Enabled = False
                  'Observaciones
212               cmdObservaciones.Enabled = True 'Modificado para que se habilite con Pac. Ext - 22/05/2012
                  'txtObservaciones.Text = ""
213               txtObservaciones.Enabled = True 'Modificado para que se habilite con Pac. Ext - 22/05/2012
                  'Egresar paciente
214               cmdEgresar.Enabled = False
                  
215               cboMedicoEmergencias.ListIndex = -1
216                cboMedicoEmergencias.Enabled = True
217               lblMedicoEmergencias.Caption = "Médico emergencias*"
218               lblMedicoEmergencias.Enabled = True
219               lblLugarIngreso.Caption = "Lugar de ingreso"
220               If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveConsultaExterna Then
221                   lblMedicoEmergencias.Caption = "Médico consulta"
222                   lblLugarIngreso.Caption = "Lugar de ingreso*"
223               End If
224               If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveExterno Then
225                   lblMedicoEmergencias.Caption = "Médico emergencias"
226               End If
227               cboMedicoCargo.ListIndex = -1
228               cboMedicoCargo.Enabled = False
229               lblMedicoCargo.Caption = "Médico a cargo"
230               lblMedicoCargo.Enabled = False
                  
231               If Val(txtCuentaExterno.Text) = 0 Then
232                   cmdAbrirCuenta.Enabled = False
233                   cmdActivarPaciente.Enabled = False
234               Else
235                   cmdAbrirCuenta.Enabled = blnHabilitarAbrirCuenta
236                   cmdActivarPaciente.Enabled = blnHabilitarActivar
237               End If
                  
                  'Modificación para campo Motivo Ingreso
238               fraDiagnostico.Visible = False

                '****20329******************
                fraProcedimiento.Visible = False
                
                chkAsignarCuarto.Top = 5640
                fraAsignacionCuarto.Top = 5590
                fraAsignacionCuarto.Height = 3105
                
                grdCuarto.Top = 720
                grdCuarto.Height = 1875
                
                lblEstadoCuartoActual.Top = 2700
                cboEstadoCuartoActual.Top = 2640
                
                cmdObservaciones.Top = 8760
                txtObservaciones.Top = 9000
                txtObservaciones.Height = 1190
                
                '**********************+
239               fraMotivoIngreso.Visible = True
                  'Modificación para procedencia
                  lblProcedencia.Caption = "Procedencia*"
240           End If
              
241           pLlenaDocumentosIngreso Trim(Str(cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex)))
242       End If
          
   Exit Sub
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboTipoIngreso_Click" & " Linea:" & Erl()))
       Unload Me
End Sub

Private Sub pCargaMamas()
    On Error GoTo NotificaError

    Set rs = frsEjecuta_SP("", "Sp_AdSelMujeres")
       
    If rs.RecordCount <> 0 Then
        pLlenarCboRs_new cboMadre, rs, 0, 1
        cboMadre.ListIndex = -1
        cboMadre.Visible = True
        cboMadre.Enabled = True
        lblMadreRecienNacido.Caption = "Madre"
        lblMadreRecienNacido.Visible = True
        lblMadreRecienNacido.Enabled = True
        cboRelacion.Enabled = False
        cboRelacion.Visible = False
        lblRelacion.Visible = False
    End If


    lblFormaNac.Enabled = True
    cboFormaNac.Enabled = True


Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pCargaMamas"))
    Unload Me
End Sub

Private Sub pHabilitaAsignacionCuarto(vlblnHabilita As Boolean)
    On Error GoTo NotificaError

    fraAsignacionCuarto.Enabled = vlblnHabilita
    cmdSugerirCuarto.Enabled = vlblnHabilita
    grdCuarto.Enabled = vlblnHabilita
    cboArea.Enabled = vlblnHabilita
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pHabilitaAsignacionCuarto"))
    Unload Me
End Sub

Private Sub pLimpia(Optional edo As String)
      'On Error GoTo NotificaError
          
1         pHabilitaFrames True
          
          'Limpiar variables
2         vllngPersonaGraba = 0
          
3         vlblnCambioFechaIngreso = False
4         vlblnCambioHoraIngreso = False
5         vlblnPacienteValidado = False
6         vlblnDatosCapturados = False
7         vlblnDatosCargados = False
8         vlblnConsulta = False
9         cboFormaNac.Clear
10        cboFormaNac.AddItem "CESÁREA"
11        cboFormaNac.ItemData(0) = 0
12        cboFormaNac.AddItem "PARTO"
13        cboFormaNac.ItemData(1) = 1
          
14        vlintPersonaEmergencia = 1
15        vlintPersonaResponsable = 1
16        vllngIngresoConsultado = 0
17        llngNumPacienteExterno = 0
18        vllngCveDiagnostico = 0
          vllngCveCirugia = 0 '20329
19        vlCveSocio = 0
          
20        vlstrTipoPacienteConsultado = ""
21        vglngCuentaPaciente = 0
          
22        vlstrTipoIngresoRegistradoPreviamente = ""
23        vlstrTipoIngresoAdmisionConsultada = ""
24        vlstrTipoIngresoAdmision = ""
          
25        vgLngTipoPacienteSocio = 0
26        lstrEstatusPaciente = ""
          
          'Parámetros de verificación de socios
27        vlUsaSocios = fblRevisaUsoSocios()
          
          'Se obtiene el tipo de paciente configurado como socio
28        If vlUsaSocios = True Then
29            vgLngTipoPacienteSocio = flngTipoPacienteSocio()
30        End If

31        vllngSocioRelacionado = 0
          
32        pLlenaTipoIngreso
          
          'Habilitar / deshabilitar controles
33        cmdSugerirCuarto.Caption = "Sugerir el cuarto"
          
34        cmdBusquedaPaciente.Enabled = True
35        cmdGrabar.Enabled = True
36        cmdEgresar.Enabled = False
37        cmdCancelarAdmision.Enabled = False
38        cmdAbrirCuenta.Enabled = False
39        cmdActivarPaciente.Enabled = False

40        tmrCargaEgresados.Enabled = False
41        tmrCargaExternos.Enabled = False
          
42        fraDocumentos.Enabled = False
43        cmdImprimir.Enabled = False
          
44        cboTipoIngreso.Enabled = True
45        lblTipoIngreso.Enabled = True
46        cboTipoPaciente.Enabled = True
47        lblTipoPaciente.Enabled = True
48        cboTipoConvenio.Enabled = True
49        cboEmpresa.Enabled = True
50        lblEmpresa.Enabled = True
51        Cmdrequisitos.Enabled = False
          
          'Limpiar Controles
52        txtExpedienteInterno.Text = frsRegresaRs("Select IsNull(Max(intNumPaciente), 0) + 1 From ExPaciente").Fields(0)
53        lblNumCuenta.Visible = IIf(cgstrModulo = "AD", True, False)
54        txtCuentaInterno.Text = ""
55        txtCuentaInterno.Visible = IIf(cgstrModulo = "AD", True, False)
56        txtCuentaExterno.Text = ""
57        txtCuentaExterno.Visible = True
          
58        txtApellidoPaterno.Text = ""
59        txtApellidoMaterno.Text = ""
60        txtNombre.Text = ""
61        mskFechaNacimiento.Mask = ""
62        mskFechaNacimiento.Text = ""
63        mskFechaNacimiento.Mask = "##/##/####"
64        txtEdad.Text = ""
65        optSexo(0).Value = True
66        optSexo(1).Value = False
67        mskRFC.Mask = ""
68        mskRFC.Text = ""
69        txtCurp.Text = ""
          
70        If cboEstadoCivil.ListCount <> 0 Then
71            cboEstadoCivil.ListIndex = 0
72        Else
73            cboEstadoCivil.ListIndex = -1
74        End If
          
75        pLlenaOcupaciones
76        cboOcupacion.ListIndex = -1
          
77        txtCorreoElectronico.Text = ""
78        OptEnvioPromo(0).Value = False
79        OptEnvioPromo(1).Value = IIf(fblnSolicitarEnvioPromociones, False, True)
          
          'Posicionar valores predeterminados (default)
80        cboReligion.ListIndex = flngLocalizaCbo_new(cboReligion, Str(vglngCveReligionPredeterminada))
81        cboCiudadNacimiento.ListIndex = flngLocalizaCbo_new(cboCiudadNacimiento, Str(vgintCveCiudadCH))
82        cboNacionalidad.ListIndex = flngLocalizaCbo_new(cboNacionalidad, Str(vglngCveNacionalidad))

83        cboCiudad.ListIndex = flngLocalizaCbo_new(cboCiudad, Str(vgintCveCiudadCH))
          
84        txtAlergia.Text = "NINGUNA"
85        lstAlergias.Clear
          
86        chkForaneo.Value = 0
87        txtCalle.Text = ""
88        txtNumeroExterior.Text = ""
89        txtNumeroInterior.Text = ""
90        txtColonia.Text = ""
91        txtCodigoPostal.Text = ""
92        txtTelefono.Text = ""
93        txtPadre.Text = ""
94        mskNacimientoPadre.Mask = ""
95        mskNacimientoPadre.Text = ""
96        mskNacimientoPadre.Mask = "##/##/####"
97        txtMadre.Text = ""
98        mskNacimientoMadre.Mask = ""
99        mskNacimientoMadre.Text = ""
100       mskNacimientoMadre.Mask = "##/##/####"
          
101       txtDomicilioForaneo.Text = ""
102       txtColoniaForanea.Text = ""
103       txtCodigoPostalForaneo.Text = ""
104       txtTelefonoForaneo.Text = ""
105       cboCiudadForanea.ListIndex = -1
106       txtConyuge.Text = ""
107       txtPaternoConyuge = ""
108       txtMaternoConyuge = ""
109       mskNacimientoConyuge.Mask = ""
110       mskNacimientoConyuge.Text = ""
111       mskNacimientoConyuge.Mask = "##/##/####"
          
112       If cgstrModulo = "AD" Then
113           cboTipoIngreso.ListIndex = 1    'para que se ejecute el click
114           cboTipoIngreso.ListIndex = 0
115       Else
116           If cgstrModulo = "LA" Or cgstrModulo = "IM" Or cgstrModulo = "PV" Or cgstrModulo = "CC" Or cgstrModulo = "BS" Then
117               cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveExterno)
118           Else
119               cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveUrgencias)
120           End If
121       End If

122       cboTipoPaciente.ListIndex = -1   'Para que se ejecute el click
123       cboTipoPaciente_Click
          
124       mskFechaIngreso.Mask = ""
125       mskFechaIngreso.Text = fdtmServerFecha
126       mskFechaIngreso.Mask = "##/##/####"
127       mskHoraIngreso.Mask = ""
128       mskHoraIngreso.Text = IIf(Len(Trim(Str(Hour(fdtmServerHora)))) = 1, "0" + Trim(Str(Hour(fdtmServerHora))), Trim(Str(Hour(fdtmServerHora)))) + ":" + IIf(Len(Trim(Str(Minute(fdtmServerHora)))) = 1, "0" + Trim(Str(Minute(fdtmServerHora))), Trim(Str(Minute(fdtmServerHora))))
129       mskHoraIngreso.Mask = "##:##"
          
130       txtAutoriza.Text = ""
131       txtNumeroPoliza.Text = ""
132       txtNumeroControl.Text = ""
          
          OptPaqueteOtros(1).Enabled = True
133       OptPaqueteOtros(1).Value = True
134       If edo <> "X" Then
135           vllngClavePaqueteAnterior = 0
136           pCargaPaquetosOtros
137       End If
          
138       If cboPlanPaqueteCirugia.ListCount <> 0 Then
139           If cboPlanPaqueteCirugia.ListCount > 1 Then
140               If edo <> "X" Then
141                   cboPlanPaqueteCirugia.ListIndex = 1
142               End If
143           End If
144           If edo <> "X" Then
145               cboPlanPaqueteCirugia.ListIndex = 0
146           End If
147       End If
          
          If cgstrModulo = "PV" And vgstrForma = "frmPresupuestos" Then
              cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCvePrepago)
              OptPaqueteOtros(1).Enabled = False
              OptPaqueteOtros(0).Value = True
              cboPlanPaqueteCirugia.ListIndex = fintLocalizaCbo_new(cboPlanPaqueteCirugia, CStr(vglngCvePaquete))
              cboPlanPaqueteCirugia.Enabled = False
              Call txtAlergia_KeyDown(13, 0)
          End If
          
148       txtAnticipo.Text = ""
          
149       If edo <> "X" Then
150           If cboProcedencia.ListIndex <> -1 Then
151               cboProcedencia.ListIndex = 0    'Para que se ejecute el click
152           End If
153       End If
          
154       txtNombreEmergencia.Text = ""
155       cboParentescoFamiliarEmergencia.ListIndex = -1
156       txtDomicilioEmergencia.Text = ""
157       txtTelefonoEmergencia.Text = ""
158       mskNacimientoEmergencia.Mask = ""
159       mskNacimientoEmergencia.Text = ""
160       mskNacimientoEmergencia.Mask = "##/##/####"
          
161       txtNombreResponsable.Text = ""
162       cboParentescoFamiliarResponsable.ListIndex = -1
163       txtDomicilioResponsable.Text = ""
164       txtTelefonoResponsable.Text = ""
165       txtLugarTrabajoResponsable.Text = ""
166       mskNacimientoResponsable.Mask = ""
167       mskNacimientoResponsable.Text = ""
168       mskNacimientoResponsable.Mask = "##/##/####"
          
169       cboMedicoEmergencias.ListIndex = -1
170       cboMedicoCargo.ListIndex = -1
          
171       txtDiagnostico.Text = ""
172       txtDiagnosticoEspecifico.Text = ""

          txtCirugia.Text = "" 'caso 20329
          cboTecnicaLateralidad.ListIndex = -1 'caso 20329
          
173       vlblnLlenandoAreas = True
174       cboArea.ListIndex = 0
175       vlblnLlenandoAreas = False
          
176       lblEstadoCuartoActual.Enabled = False
177       If vglngCveEstadoCuartoDisponible <> 0 Then
178           cboEstadoCuartoActual.ListIndex = flngLocalizaCbo_new(cboEstadoCuartoActual, CStr(vglngCveEstadoCuartoDisponible))
179       Else
180           cboEstadoCuartoActual.ListIndex = 0
181       End If
182       cboEstadoCuartoActual.Enabled = False
          
183       txtObservaciones.Text = ""
          
184       dtpFecIniEgr.Mask = ""
185       dtpFecIniEgr.Text = fdtmServerFecha
186       dtpFecIniEgr.Mask = "##/##/####"
187       dtpFecFinEgr.Mask = ""
188       dtpFecFinEgr.Text = fdtmServerFecha
189       dtpFecFinEgr.Mask = "##/##/####"

190       txtIniciales.Text = ""
          
          'Carga información del idioma
191       pCargarVarPrmGnrl 'Carga todos parámetros generales
192       If cgstrModulo = "AD" Then '|  Admisión siempre tiene la opción <AGREGAR> por eso cuando no hay idiomas se selecciona esta opción por defecto
193           cboIdioma.ListIndex = IIf(cboIdioma.ListCount > 1, flngLocalizaCbo_new(cboIdioma, Str(vglngCveIdioma)), 0)
194           If cboIdioma.ListIndex = -1 Then 'Si el idioma predeterminado tienes estatus desactivado, seleccionar la opción <AGREGAR>
195               vglngCveIdioma = 0
196               cboIdioma.ListIndex = IIf(cboIdioma.ListCount > 1, flngLocalizaCbo_new(cboIdioma, Str(vglngCveIdioma)), 0)
197           End If
198       Else '|  Los demás módulos no tienen la opción <AGREGAR> por eso...
199           cboIdioma.ListIndex = IIf(cboIdioma.ListCount > 0, flngLocalizaCbo_new(cboIdioma, Str(vglngCveIdioma)), -1)
200           If cboIdioma.ListIndex = -1 Then 'Si el idioma predeterminado tienes estatus desactivado...
201               If cboIdioma.ListCount > 0 Then 'Si hay idiomas disponibles...
202                  cboIdioma.ListIndex = 0 'Seleccionar el primer idioma disponible
203               End If
204           End If
205       End If
          
206       txtMotivoIngreso.Text = ""
207       vllngCveFamiliar = 0
208       cboFamiliar.Clear
          
209       cboMadre.Visible = False
210       lblMadreRecienNacido.Visible = False
211       pLimpiaGridCuartos
212       pConfiguraGridCuarto
213       vlblnPrepagoActivo = False
          
214       GrdAdjuntos.Clear
215       GrdAdjuntos.FormatString = "|Id|Descripción|Archivo|Estado"
          
216       GrdAdjuntos.ColWidth(0) = 0
217       GrdAdjuntos.ColWidth(1) = 0
218       GrdAdjuntos.ColWidth(2) = 100 '4000
219       GrdAdjuntos.ColWidth(3) = 0
220       GrdAdjuntos.ColWidth(4) = 0
          
221       GrdAdjuntos.Rows = 2
222       TextNombreAdjunto.Text = ""
          
223       llngCvePreRegistro = 0
          
   Exit Sub
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLimpia" & " Linea:" & Erl()))
       Unload Me
End Sub


Private Sub cboTipoIngreso_KeyDown(KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        SendKeys vbTab
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboTipoIngreso_KeyDown"))
    Unload Me
End Sub

Private Sub cboTipoPaciente_Click()
1     On Error GoTo NotificaError

          Dim llngCveEmpresaEmpleado As Long  'Clave de la empresa del empleado
          Dim lngCveParentesco As Long
             
2         pconfiguraCombos
3         pLimpiaSocios
4         pLimpiaFamiliar
              
5         vlblnFamiliarEmpleado = True
6         If cboTipoPaciente.ListIndex <> -1 Then
              vlblnAsegurdora = False
7             If cboTipoIngreso.ListIndex <> -1 Then
8                 pLlenaDocumentosIngreso Trim(Str(cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex)))
9             Else
                  'Se seleccionó un paciente del grdExterno
10                lbFlag = True
11            End If
              
12            If vlstrIngresoSeleccionado <> vlstrTipoIngresoRecienNacido Then
13                lblRelacion.Caption = "Relación"
14                lblRelacion.Enabled = False
15                cboRelacion.Clear
16                cboRelacion.ListIndex = -1
17                cboRelacion.Enabled = False
18                If (Not vlblnConsulta And Not vlblnDatosCapturados) And vlblSocioTemp = False Then
19                    pLimpiaDatosEmpleadoMedico
20                End If
21                vlblSocioTemp = False
22            Else
23                If vlstrIngresoSeleccionado = vlstrTipoIngresoRecienNacido Then
24                    lblMadreRecienNacido.Visible = True
25                    lblMadreRecienNacido.Enabled = True
26                    cboMadre.Visible = True
27                    cboMadre.Enabled = True
28                    lblRelacion.Visible = False
29                    cboRelacion.Visible = False
30                End If
31            End If
              
32            vlstrSentencia = "Select chrTipo, bitDesconocido, bitUtilizaConvenio, bitFamiliar From AdTipoPaciente Where tnyCveTipoPaciente = " & Str(cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex))
33            Set rs = frsRegresaRs(vlstrSentencia)
34            If rs.RecordCount <> 0 Then
35                vlstrTipoTipoPaciente = Trim(rs!chrTipo)
36                vlblnTipoPacienteDesconocido = rs!bitDesconocido
37                vlblnUtilizaConvenio = IIf(rs!bitUtilizaConvenio = 1, True, False)
38                vlblnFamiliar = IIf(rs!bitFamiliar = 1, True, False)
39            End If
40            rs.Close

              'Tipos de convenio
41            If vlstrTipoTipoPaciente = "CO" Then
42                txtNombreResponsable.Text = ""
                              
43                lblAutoriza.Enabled = True
44                txtAutoriza.Enabled = True
45                lblTipoPoliza.Enabled = True
46                cboTipoPoliza.Enabled = True
47                txtNumeroPoliza.Enabled = True
48                lblempresapaciente.Enabled = True
49                cboEmpresaPaciente.Enabled = True

50                vlstrSentencia = "Select tnyCveTipoConvenio, vchDescripcion From CcTipoConvenio"
                  If cgstrModulo = "PV" And vgstrForma = "frmPresupuestos" Then
                      vlstrSentencia = vlstrSentencia & " where tnyCveTipoConvenio = " & vglngTipoConvenio
                  End If
51                Set rs = frsRegresaRs(vlstrSentencia)
52                If rs.RecordCount <> 0 Then
53                    pLlenarCboRs_new cboTipoConvenio, rs, 0, 1
54                    cboTipoConvenio.ListIndex = 0
                      If cgstrModulo = "PV" And vgstrForma = "frmPresupuestos" Then
                          cboTipoConvenio.ListIndex = flngLocalizaCbo_new(cboTipoConvenio, Str(vglngTipoConvenio))
                      End If
55                    cboTipoConvenio.Enabled = True
56                    lblTipoConvenio.Enabled = True
57                End If
58                rs.Close
59            Else
60                If cboParentescoFamiliarResponsable.ListIndex <> -1 Then
61                    lngCveParentesco = frsRegresaRs("select intCveParentesco from SiParentesco where bitOtro = 1 ").Fields(0)
62                    If cboParentescoFamiliarResponsable.ItemData(cboParentescoFamiliarResponsable.ListIndex) = lngCveParentesco Then
63                        txtNombreResponsable.Text = ""
64                        cboParentescoFamiliarResponsable.ListIndex = -1
65                        txtDomicilioResponsable.Text = ""
66                        txtTelefonoResponsable.Text = ""
67                        If lblnHabilitarFechaNacimiento Then
68                            mskNacimientoResponsable.Mask = ""
69                            mskNacimientoResponsable.Text = ""
70                            mskNacimientoResponsable.Mask = "##/##/####"
71                        End If
72                    End If
73                End If
74            End If
              
              'Empleados
75            If vlstrTipoTipoPaciente = "EM" Then
76                If vlblnInternos = False Then
77                    llngCveEmpresaEmpleado = 1
78                    vlstrSentencia = "Select * From NoDepartamento Where smiCveDepartamento = " & vgintNumeroDepartamento
79                    Set rs = frsRegresaRs(vlstrSentencia)
80                    If rs.RecordCount <> 0 Then
81                        llngCveEmpresaEmpleado = rs!tnyClaveEmpresa
82                    End If
83                    rs.Close
84                    vlstrSentencia = "Select NoEmpleado.intCveEmpleado, " & _
                                       "Trim(NoEmpleado.vchApellidoPaterno)||' '||Trim(NoEmpleado.vchApellidoMaterno)||' '||Trim(NoEmpleado.vchNombre) Nombre " & _
                                       "From NoEmpleado" & _
                                       "     inner join  NoDepartamento on NoEmpleado.smiCveDepartamento = NoDepartamento.smiCveDepartamento " & _
                                       "Where bitActivo = 1 and NoDepartamento.tnyClaveEmpresa = " & llngCveEmpresaEmpleado
85                Else
86                    vlstrSentencia = "Select intCveEmpleado, " & _
                                       "Trim(vchApellidoPaterno)||' '||Trim(vchApellidoMaterno)||' '||Trim(vchNombre) Nombre " & _
                                       "From NoEmpleado " & _
                                       "Where bitActivo = 1 "
87                End If
88                Set rs = frsRegresaRs(vlstrSentencia)
89                cboRelacion.Visible = True
90                cboRelacion.Enabled = True
91                cboRelacion.ToolTipText = "Empleados"
92                lblRelacion.Caption = "Empleado"
93                lblRelacion.Visible = True
94                lblRelacion.Enabled = True
95                If rs.RecordCount <> 0 Then
96                    pLlenarCboRs_new cboRelacion, rs, 0, 1
97                    cboRelacion.ListIndex = -1
98                    vlblnFamiliarEmpleado = True
99                Else
100                   cboRelacion.Clear
101                   cboRelacion.AddItem "NINGUNO", 0 'Agregar dato por defecto
102                   cboFamiliar.Enabled = False
103                   vlblnFamiliarEmpleado = False
104               End If
105               rs.Close
106           End If
              
              'Médicos
107           If vlstrTipoTipoPaciente = "ME" Then
108               vlstrSentencia = "Select intCveMedico, " & _
                                   "Trim(vchApellidoPaterno)||' '||Trim(vchApellidoMaterno)||' '||Trim(vchNombre) Nombre " & _
                                   "From HoMedico " & _
                                   "Where bitEstaActivo = 1 "
109               If Not vlblnFamiliar Then
110                   vlstrSentencia = vlstrSentencia + " and nvl(intcveTipoPaciente,0) in (0," + Str(cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex)) + ")"
111               End If
112               Set rs = frsRegresaRs(vlstrSentencia)
113               If rs.RecordCount <> 0 Then
114                   pLlenarCboRs_new cboRelacion, rs, 0, 1
115                   cboRelacion.ListIndex = -1
116                   cboRelacion.Visible = True
117                   cboRelacion.Enabled = True
118                   cboRelacion.ToolTipText = IIf(vlblnFamiliar, "Médicos", "Médicos relacionados")
119                   lblRelacion.Caption = "Médico"
120                   lblRelacion.Visible = True
121                   lblRelacion.Enabled = True
122               End If
123               rs.Close
124           End If
              
              'Desconocidos
125           If vlblnTipoPacienteDesconocido And Not vlblnConsulta And Not vlblnDatosCapturados Then
126               txtApellidoPaterno.Text = Trim(vgstrPaternoDesconocido)
127               txtApellidoMaterno.Text = Trim(vgstrMaternoDesconocido)
128               txtNombre.Text = Trim(vgstrNombreDesconocido) + " " + Str(flngConsecutivoDesconocido())
129           End If
              
              'Reacomodo de los combos cboRelacion y cboFamiliar
130           If (vlstrTipoTipoPaciente = "EM" Or vlstrTipoTipoPaciente = "ME") And vlblnFamiliar Then
131               cboEmpresa.Visible = False
132               lblEmpresa.Visible = False
133               Cmdrequisitos.Visible = False
134               cboEmpresaPaciente.Top = 2320
135               lblempresapaciente.Top = 2380
136               cboRelacion.Top = 2730
137               lblRelacion.Top = 2790
138               cboRelacion.Visible = True
139               lblRelacion.Visible = True
140               cboFamiliar.Visible = True
141               lblFamiliar.Visible = True
142           End If
143           If vlstrTipoTipoPaciente = "EM" And vlblnFamiliarEmpleado = False Then
144               cboFamiliar.Enabled = False
145           End If
146       End If
              
          
147       If vlstrTipoTipoPaciente = "PA" Then
              'Si es un socio
148           If cboTipoPaciente.ListIndex <> -1 Then
149               If vlUsaSocios = True And vgLngTipoPacienteSocio = Str(cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex)) Then
150                   cboEmpresa.Visible = False
151                   lblEmpresa.Visible = False
152                   Cmdrequisitos.Visible = False
153                   cboEmpresaPaciente.Top = 2320
154                   lblempresapaciente.Top = 2380
155                   cboFamiliar.Visible = False
156                   lblFamiliar.Visible = False
                      
                      'Se valida si ya se tiene un socio relacionado previamente...
157                   If vlCveSocio <> 0 Then
158                       vlstrSentencia = "Select intCveSocio, " & _
                                           "Trim(vchApellidoPaterno)||' '||Trim(vchApellidoMaterno)||' '||Trim(vchNombre) Nombre " & _
                                           "From SoSocio " & _
                                           "Where intDerechos in (1)"
159                       Set rs = frsRegresaRs(vlstrSentencia)
160                       If rs.RecordCount <> 0 Then
161                           pLlenarCboRs_new cboSocio, rs, 0, 1
162                       End If
163                       rs.Close
                      
164                       cboSocio.Top = 2730
165                       lblSocio.Top = 2790
166                       cboSocio.Visible = True
167                       lblSocio.Visible = True
168                       cboSocio.ListIndex = flngLocalizaCbo_new(cboSocio, Str(vlCveSocio))
169                       cboSocio.Enabled = False
170                   Else
171                       vlstrSentencia = "Select intCveSocio, " & _
                                           "Trim(vchApellidoPaterno)||' '||Trim(vchApellidoMaterno)||' '||Trim(vchNombre) Nombre " & _
                                           "From SoSocio " & _
                                           "Where intDerechos in (1)"
172                       Set rs = frsRegresaRs(vlstrSentencia)
173                       If rs.RecordCount <> 0 Then
174                           pLlenarCboRs_new cboSocio, rs, 0, 1
175                           cboSocio.ListIndex = -1
176                           cboSocio.Enabled = True
177                           lblSocio.Enabled = True
178                       End If
179                       rs.Close
                          
180                       cboSocio.Top = 2730
181                       lblSocio.Top = 2790
182                       cboSocio.Visible = True
183                       lblSocio.Visible = True
184                   End If
185               End If
186           Else
                  'Si es un particular normal
187               lblempresapaciente.Enabled = True
188               cboEmpresaPaciente.Enabled = True
189           End If
190       End If
          
191       cboEmpresaPaciente.Clear
192       vlstrSentencia = "Select intCveEmpresa, vchDescripcion From CCEmpresa Where  bitMostrarEmpresaPaciente = 1 And bitActivo = 1"
193       Set rs = frsRegresaRs(vlstrSentencia)
194       If rs.RecordCount <> 0 Then
195           pLlenarCboRs_new cboEmpresaPaciente, rs, 0, 1
196           lblempresapaciente.Enabled = True
197           cboEmpresaPaciente.Enabled = True
198           cboEmpresaPaciente.AddItem "", 0
199           cboEmpresaPaciente.ItemData(cboEmpresaPaciente.NewIndex) = 0
200           cboEmpresaPaciente.ListIndex = 0
201       End If
202       rs.Close
              
   Exit Sub
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboTipoPaciente_Click" & " Linea:" & Erl()))
       Unload Me
End Sub

Private Function flngConsecutivoDesconocido() As Long
    On Error GoTo NotificaError
    Dim rs As ADODB.Recordset
    
    Set rs = frsSelParametros("AD", -1, "INTCONSECUTIVODESCONOCIDO")
    intNumeroPacienteDesconocido = CInt(IIf(IsNull(rs("Valor")), 0, rs("Valor")))
    
    flngConsecutivoDesconocido = IIf(intNumeroPacienteDesconocido = 0, 0, (intNumeroPacienteDesconocido + 1))

Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":flngConsecutivoDesconocido"))
    Unload Me
End Function

Private Sub cboTipoPaciente_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError

    If KeyCode = vbKeyReturn Then
        SendKeys vbTab
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboTipoPaciente_KeyDown"))
    Unload Me
End Sub

Private Sub chkFecEgr_Click()
  fraFecEgr.Visible = Not fraFecEgr.Visible
  pCargaEgresados
End Sub

Private Sub chkFecEgr_KeyPress(KeyAscii As Integer)
  If vbKeyReturn = KeyAscii Then
    pEnfocaTextBox txtIniciales
  End If
End Sub

Private Sub chkForaneo_Click()
    pHabilitaForaneo IIf(chkForaneo.Value = 1, True, False)
End Sub

Private Sub chkForaneo_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    If KeyAscii = vbKeyReturn Then
          pEnfocaTextBox txtCalle
    End If
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":chkForaneo_KeyPress"))
    Unload Me
End Sub

Private Sub Chkpacientesactivos_Click()
Dim vllngContador As Integer
    
    If IsDate(mskFechaInicioAtencion.Text) And IsDate(mskFechaTerminoAtencion.Text) Then
        pCargaExternos
        If Chkpacientesactivos.Value = 1 Then
            cmdActivaExterno.Visible = True
            Frame4.Caption = "Rango de fechas de activación"
            Frame5.Caption = "Departamento donde se activó el paciente externo"
        Else
            Frame4.Caption = "Rango de fechas de atención"
            Frame5.Caption = "Departamento donde se atendió el paciente externo"
            cmdActivaExterno.Visible = False
            For vllngContador = 1 To grdExternos.Rows - 1
                grdExternos.TextMatrix(vllngContador, 0) = " "
            Next vllngContador
        End If
    End If
        
End Sub

Private Sub cmdActivaExterno_Click()
    Dim vlstrSentencia As String
    Dim vlstrsql As String
    Dim rsCuarto As New ADODB.Recordset
    Dim vlblnSeleccionoCuarto As Boolean
    Dim vllngContador As Integer
    Dim vllngContadorborrar As Integer
    Dim lngNumPaciente As Long

    vlblnSeleccionoCuarto = False
    For vllngContador = 1 To grdExternos.Rows - 1
        If Trim(grdExternos.TextMatrix(vllngContador, 0)) = ">" Then
            vlblnSeleccionoCuarto = True
            Exit For
        End If
    Next vllngContador
    
    If Not vlblnSeleccionoCuarto Then
        '¡No ha ingresado datos!
        MsgBox "Seleccione el paciente", vbInformation + vbOKOnly, "Mensaje"
        grdExternos.SetFocus
        Exit Sub
    End If
    
    lngNumPaciente = 0
    lngNumPaciente = CLng(Trim(grdExternos.TextMatrix(grdExternos.Row, 11)))
    
    If MsgBox(SIHOMsg(690), vbYesNo + vbQuestion, "Mensaje") = vbYes Then
      vllngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
      If vllngPersonaGraba <> 0 Then
        If grdExternos.TextMatrix(grdExternos.Row, 11) <> "" Then
            vlstrSentencia = "update ExExternoActivado set " & _
            "chrEstatus = 'I', DTMFECHAHORASALIDA=getdate()" & _
             " Where " & _
            "intNumPaciente = " & grdExternos.TextMatrix(grdExternos.Row, 11) & " " & _
            "and intMovPaciente = " & grdExternos.TextMatrix(grdExternos.Row, 12) & " " & _
            "and smiCveDepto =  " & grdExternos.TextMatrix(grdExternos.Row, 13) & " " & _
            "and chrEstatus = 'A'"
            
            vlstrsql = "select isnull(vchNumCuarto,'N')cuarto from registroexterno where intNumCuenta = " & grdExternos.TextMatrix(grdExternos.Row, 12)
            Set rsCuarto = frsRegresaRs(vlstrsql)
            
            If rsCuarto.RecordCount > 0 Then
                If rsCuarto!Cuarto <> "N" Then
                    frmEgreso.vllngNumeroCuenta = Val(grdExternos.TextMatrix(grdExternos.Row, 12))
                    frmEgreso.vlblnesexterno = True
                    frmEgreso.vllngNumeroCuentaexterno = grdExternos.TextMatrix(grdExternos.Row, 12)
                    frmEgreso.Show vbModal, Me
                    
                    'Se valida si se egresó al paciente para poder desactivarlo...
                    If frmEgreso.vlblnEgresoPaciente = True Then
                        EntornoSIHO.ConeccionSIHO.BeginTrans
                        pEjecutaSentencia vlstrSentencia
                        EntornoSIHO.ConeccionSIHO.CommitTrans
                        ':: La operación se realizó satisfactoriamente. ::
                        ' Se comentó este mensaje para que no apareciera doble mensaje
'                        MsgBox "Desactivación" & ": " & SIHOMsg(420), vbOKOnly + vbInformation, "Mensaje"
                        frmEgreso.vlblnEgresoPaciente = False
                    End If
                Else
                    'Egresar al paciente
                     frsEjecuta_SP grdExternos.TextMatrix(grdExternos.Row, 12), "Sp_GnEgresaExterno"

                    EntornoSIHO.ConeccionSIHO.BeginTrans
                    pEjecutaSentencia vlstrSentencia
                    EntornoSIHO.ConeccionSIHO.CommitTrans
                    ':: La operación se realizó satisfactoriamente. ::
'                    MsgBox "Desactivación" & ": " & SIHOMsg(420), vbOKOnly + vbInformation, "Mensaje"
                    MsgBox SIHOMsg(420), vbOKOnly + vbInformation, "Mensaje"
                    pGuardarLogTransaccion Me.Name, EnmGrabar, vllngPersonaGraba, "DESACTIVACIÓN EXTERNO", Str(lngNumPaciente) & " Cta. " & Trim(vllngIngresoConsultado)
                End If
                 frmEgreso.vlblnesexterno = False
            End If
                        
            For vllngContadorborrar = 1 To grdExternos.Rows - 1
                If Trim(grdExternos.TextMatrix(vllngContadorborrar, 0)) = ">" Then
                    grdExternos.TextMatrix(vllngContadorborrar, 0) = " "
                End If
            Next vllngContadorborrar
            
            pCargaExternos
        
        End If
      Else
        Exit Sub
      End If
    Else
        Exit Sub
    End If
  
End Sub

Private Sub cmdBuscarDiagnostico_Click()
1         On Error GoTo NotificaError
          
2         Set frmBusquedaDiagnosticos.vlfrmForma = frmAdmisionPaciente
3         frmBusquedaDiagnosticos.Show vbModal, Me

4         If vglngCveDiagnostico > 0 Then
5             txtDiagnostico.Text = vgstrDescDiagnostico
6             vllngCveDiagnostico = vglngCveDiagnostico
7         Else
8            txtDiagnostico.Text = ""
9            vllngCveDiagnostico = 0
10        End If
          
11        If txtMotivoIngreso.Visible Then
12            If txtMotivoIngreso.Enabled Then
13                txtMotivoIngreso.SetFocus
14            End If
15        ElseIf chkAsignarCuarto.Enabled Then
16            chkAsignarCuarto.SetFocus
17        ElseIf cmdSugerirCuarto.Enabled And fraAsignacionCuarto.Enabled Then
18            cmdSugerirCuarto.SetFocus
19        Else
20            If cmdGrabar.Enabled Then
21                cmdGrabar.SetFocus
22            End If
23        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdBuscarDiagnostico_Click" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub cmdCambiarFamiliarEmergencia_Click()
    On Error GoTo NotificaError
    '1 = Paciente
    '2 = Conyuge
    '3 = Padre
    '4 = Madre
    
    If Trim(txtNombreEmergencia.Text) <> "" Then
        
        vlintPersonaEmergencia = vlintPersonaEmergencia + 1
        
        If vlintPersonaEmergencia = 2 And Not lblConyuge.Enabled Then
            vlintPersonaEmergencia = vlintPersonaEmergencia + 1
        End If
        
        If vlintPersonaEmergencia > 4 Then
            vlintPersonaEmergencia = 1
        End If
        
    Else
        vlintPersonaEmergencia = vlintPersonaEmergencia + 1
        
        If vlintPersonaEmergencia > 4 Then
            vlintPersonaEmergencia = 1
        End If
    
    End If
    
    pEditaDatos vlintPersonaEmergencia, True
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdCambiarFamiliarEmergencia_Click"))
    Unload Me
End Sub

Private Sub pEditaDatos(vlintPersona As Integer, vlblnDatosEmergencia As Boolean)
1         On Error GoTo NotificaError
          Dim vlstrsql As String
          Dim rs As New ADODB.Recordset
          '1 = Paciente
          '2 = Conyuge
          '3 = Padre
          '4 = Madre
          '5 = Convenio
          
          Dim vllngCveParentesco As Long
          Dim vlstrNombre As String
          Dim vlstrDomicilio As String
          Dim vlstrTelefono As String
          Dim lstrFechaNac As String

2         If vlintPersona <> 5 Then
3             vlstrDomicilio = Trim(txtCalle.Text) + " " + Trim(txtNumeroExterior.Text) + " " + Trim(txtColonia.Text)
4             vlstrTelefono = Trim(txtTelefono.Text)
5         Else
6             If cboEmpresa.Text <> "" Then
7                 vlstrsql = "SELECT * FROM ccEmpresa WHERE INTCVEEMPRESA = " & cboEmpresa.ItemData(cboEmpresa.ListIndex)
8                 Set rs = frsRegresaRs(vlstrsql, adLockOptimistic, adOpenDynamic)
9                 If rs.RecordCount <> 0 Then
10                    vlstrDomicilio = IIf(IsNull(rs!chrCalle), "", Trim(rs!chrCalle)) + " " + IIf(IsNull(rs!VCHNUMEROEXTERIOR), "", Trim(rs!VCHNUMEROEXTERIOR)) + " " + IIf(IsNull(rs!VCHNUMEROINTERIOR), "", IIf(rs!VCHNUMEROINTERIOR = "", "", "Int. " + rs!VCHNUMEROINTERIOR))
11                    vlstrTelefono = IIf(IsNull(rs!chrTelefonoEmpresa), "", rs!chrTelefonoEmpresa)
12                Else
13                    vlstrDomicilio = ""
14                    vlstrTelefono = ""
15                End If
16                rs.Close
17            Else
18                cboParentescoFamiliarResponsable.ListIndex = 0
19                txtNombreResponsable.Text = ""
20                vlstrDomicilio = ""
21                vlstrTelefono = ""
22            End If
23        End If
24        lstrFechaNac = ""
25        If vlintPersona = 1 Then
              'Posible modificacion
26            vlstrNombre = Trim(txtNombre.Text) + " " + Trim(txtApellidoPaterno.Text) + " " + Trim(txtApellidoMaterno.Text)
27            vllngCveParentesco = frsRegresaRs("select intCveParentesco from SiParentesco where bitPaciente = 1 ", adLockOptimistic, adOpenDynamic).Fields(0)
28            If lblnHabilitarFechaNacimiento Then
29                If IsDate(mskFechaNacimiento.Text) Then lstrFechaNac = mskFechaNacimiento.Text
30            End If
31        End If
32        If vlintPersona = 2 Then
              'Posible modificacion
33            vlstrNombre = Trim(txtPaternoConyuge.Text) + " " + Trim(txtMaternoConyuge.Text) + " " + Trim(txtConyuge.Text)
34            vllngCveParentesco = frsRegresaRs("select intCveParentesco from SiParentesco where bitConyuge = 1 ").Fields(0)
35            If lblnHabilitarFechaNacimiento Then
36                If IsDate(mskNacimientoConyuge.Text) Then lstrFechaNac = mskNacimientoConyuge.Text
37            End If
38        End If
39        If vlintPersona = 3 Then
40            vlstrNombre = Trim(txtPadre.Text)
41            vllngCveParentesco = frsRegresaRs("select intCveParentesco from SiParentesco where bitPadre = 1 ").Fields(0)
42            If lblnHabilitarFechaNacimiento Then
43                If IsDate(mskNacimientoPadre.Text) Then lstrFechaNac = mskNacimientoPadre.Text
44            End If
45        End If
46        If vlintPersona = 4 Then
47            vlstrNombre = Trim(txtMadre.Text)
48            vllngCveParentesco = frsRegresaRs("select intCveParentesco from SiParentesco where bitMadre = 1 ").Fields(0)
49            If lblnHabilitarFechaNacimiento Then
50                If IsDate(mskNacimientoMadre.Text) Then lstrFechaNac = mskNacimientoMadre.Text
51            End If
52        End If
53        If vlintPersona = 5 Then
54            vlstrNombre = Trim(cboEmpresa.Text)
55            vllngCveParentesco = frsRegresaRs("select intCveParentesco from SiParentesco where bitOtro = 1 ").Fields(0)
56        End If
          
57        If vlblnDatosEmergencia Then
58            txtNombreEmergencia.Text = vlstrNombre
59            cboParentescoFamiliarEmergencia.ListIndex = flngLocalizaCbo_new(cboParentescoFamiliarEmergencia, Str(vllngCveParentesco))
60            txtDomicilioEmergencia.Text = vlstrDomicilio
61            txtTelefonoEmergencia.Text = vlstrTelefono
62            If lblnHabilitarFechaNacimiento Then
63                mskNacimientoEmergencia.Mask = ""
64                mskNacimientoEmergencia.Text = lstrFechaNac 'fstrFechaSQL(lstrFechaNac)
65                mskNacimientoEmergencia.Mask = "##/##/####"
66                mskNacimientoEmergencia.Enabled = False
67            End If
68        Else
69            txtNombreResponsable.Text = vlstrNombre
70            cboParentescoFamiliarResponsable.ListIndex = flngLocalizaCbo_new(cboParentescoFamiliarResponsable, Str(vllngCveParentesco))
71            txtDomicilioResponsable.Text = vlstrDomicilio
72            txtTelefonoResponsable.Text = vlstrTelefono
73            txtLugarTrabajoResponsable.Text = ""
74            If lblnHabilitarFechaNacimiento Then
75                mskNacimientoResponsable.Mask = ""
76                mskNacimientoResponsable.Text = lstrFechaNac
77                mskNacimientoResponsable.Mask = "##/##/####"
78                mskNacimientoResponsable.Enabled = False
79            End If
80        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pEditaDatos" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub cmdCambiarFamiliarResponsable_Click()
1         On Error GoTo NotificaError
          '1 = Paciente
          '2 = Conyuge
          '3 = Padre
          '4 = Madre
          '5 = Convenio
          
2         If Trim(txtNombreResponsable.Text) <> "" Then
              
3             vlintPersonaResponsable = vlintPersonaResponsable + 1
              
4             If vlintPersonaResponsable = 2 And Not lblConyuge.Enabled Then
5                 vlintPersonaResponsable = vlintPersonaResponsable + 1
6             End If
7             If vlblnUtilizaConvenio Then
8                 If vlintPersonaResponsable > 5 Then
9                     vlintPersonaResponsable = 1
10                End If
11            Else
12                If vlintPersonaResponsable > 4 Then
13                    vlintPersonaResponsable = 1
14                End If
15            End If
16        ElseIf vlblnUtilizaConvenio Then
17            vlintPersonaResponsable = 5
18        Else
19            vlintPersonaResponsable = vlintPersonaResponsable + 1
20            If vlblnUtilizaConvenio Then
21                If vlintPersonaResponsable > 5 Then
22                    vlintPersonaResponsable = 1
23                End If
24            Else
25                If vlintPersonaResponsable > 4 Then
26                    vlintPersonaResponsable = 1
27                End If
28            End If
29        End If
          
30        pEditaDatos vlintPersonaResponsable, False

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdCambiarFamiliarResponsable_Click" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Function fDatosCorrectos() As Boolean
    Dim vlstrsql As String
    Dim vlIntColumnaExpediente As Integer
    Dim vlIntColumnaCuenta As Integer

    fDatosCorrectos = True
    vlblnDebeCapturarCuarto = False

    vlIntColumnaExpediente = IIf(optCriterio(3).Value, 1, 2)
    vlIntColumnaCuenta = IIf(optCriterio(0).Value, 3, IIf(optCriterio(1).Value, 3, IIf(optCriterio(2).Value, 3, IIf(optCriterio(3).Value, 2, 1))))

    If grdEgresados.TextMatrix(grdEgresados.Row, vlIntColumnaExpediente) <> "" Then
        vlstrsql = "SELECT CASE WHEN ADCUARTO.TNYCVEESTADOCUARTO = " & Str(vglngCveEstadoCuartoOcupado) & " THEN 'N' ELSE 'S' END FROM ADADMISION " & _
                   "INNER JOIN ADCUARTO ON ADCUARTO.VCHNUMCUARTO = ADADMISION.VCHNUMCUARTO " & _
                   "WHERE NUMnumCuenta = " & grdEgresados.TextMatrix(grdEgresados.Row, vlIntColumnaCuenta)
    
        If frsRegresaRs(vlstrsql, adLockOptimistic, adOpenDynamic).Fields(0) = "N" Then
            'El cuarto asignado al paciente ya no esta disponible. Favor de seleccionar uno nuevo.
            MsgBox SIHOMsg(601), vbInformation + vbOKOnly, "Mensaje"
            vlblnDebeCapturarCuarto = True
            fDatosCorrectos = False
        End If
    
        vlstrsql = "SELECT MAX(NUMNUMCUENTA) FROM ADADMISION WHERE NUMCVEPACIENTE = " & grdEgresados.TextMatrix(grdEgresados.Row, vlIntColumnaExpediente)
    
        If frsRegresaRs(vlstrsql, adLockOptimistic, adOpenDynamic).Fields(0) <> grdEgresados.TextMatrix(grdEgresados.Row, vlIntColumnaCuenta) Then
            'La cuenta seleccionada no es la ultima.
            MsgBox SIHOMsg(602), vbInformation + vbOKOnly, "Mensaje"
            fDatosCorrectos = False
        End If
    Else
        fDatosCorrectos = False
    End If

End Function

Private Sub pEgresarRecienNacido()
    Dim vlstrSentencia As String

    If vlblnRecienNacidoInternado Then
        '¿ El recien nacido actualmente se encuentra ingresado. Desea cambiarlo a recien nacido ?
        If MsgBox(SIHOMsg(603), vbQuestion + vbYesNo, "Mensaje") = vbYes Then
            vlstrSentencia = "UPDATE ExPacienteIngreso SET intCveTipoIngreso = 6 WHERE intNumCuenta = " & vllngNumeroCuentaRN & " AND CHRESTATUSADMISION = 'A'"
            vlstrSentencia = vlstrSentencia & "And intCveTipoIngreso In(Select intCveTipoIngreso From SiTipoIngreso Where chrTipoIngreso = 'I')"
            pEjecutaSentencia vlstrSentencia
        End If
    Else
        '¿ Desea ingresar tambien al recien nacido ?
        If MsgBox(SIHOMsg(604), vbQuestion + vbYesNo, "Mensaje") = vbYes Then
            pCancelarEgresoPersona vllngNumeroCuentaRN
        End If
    End If

End Sub

Private Function fTieneRecienNacido(vlintCvePaciente As Long) As Boolean
    Dim rsAdAdmisionRN As New ADODB.Recordset
    Dim vlstrSentencia As String

    vllngNumeroCuentaRN = 0
    fTieneRecienNacido = False
    
    vlstrSentencia = "SELECT * FROM AdAdmision WHERE numNumCuentaRel = " & vlintCvePaciente & " AND (CHRESTATUSADMISION = 'A' OR (CHRESTATUSADMISION = 'E' AND ( year(DTMFECHAEGRESO) = " & Year(vldtmFechaEgreso) & " and month(dtmFechaEgreso) = " & Month(vldtmFechaEgreso) & " and day(dtmFechaEgreso) = " & Day(vldtmFechaEgreso) & ")))"
    Set rsAdAdmisionRN = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)

    If rsAdAdmisionRN.RecordCount > 0 Then
        vllngNumeroCuentaRN = rsAdAdmisionRN!numNumCuenta
        fTieneRecienNacido = True
        vlblnRecienNacidoInternado = IIf(rsAdAdmisionRN!chrEstatusAdmision = "A", True, False)
    End If
    
    rsAdAdmisionRN.Close

End Function

Private Sub pCancelarEgresoPersona(vllngNoCuenta As Long)
    Dim rsAdAdmision As New ADODB.Recordset
    Dim rsAdCuarto As New ADODB.Recordset
    
    EntornoSIHO.ConeccionSIHO.BeginTrans
    frsEjecuta_SP vllngNoCuenta & "|" & IIf(vlblnDebeCapturarCuarto, 1, 0) & "|" & vglngCveEstadoCuartoOcupado, "sp_AdUpdCancelaEgreso", True
    EntornoSIHO.ConeccionSIHO.CommitTrans
    vlblnEgresoPaciente = True
    
End Sub

Private Sub pCancelarEgreso()
    Dim vllngNumeroCuenta As Long
    Dim vlIntColumnaCuenta As Integer
    Dim vlIntColumnaExpediente As Integer

    If fblnRevisaPermiso(vglngNumeroLogin, 705, "E") Then

        If fDatosCorrectos() Then
            vllngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
            If vllngPersonaGraba <> 0 Then
                
                vlIntColumnaCuenta = IIf(optCriterio(0).Value, 3, IIf(optCriterio(1).Value, 3, IIf(optCriterio(2).Value, 3, IIf(optCriterio(3).Value, 2, 1))))

                vllngNumeroCuenta = grdEgresados.TextMatrix(grdEgresados.Row, vlIntColumnaCuenta)
        
                pCancelarEgresoPersona vllngNumeroCuenta
                
                If vlblnEgresoPaciente Then
                    If fTieneRecienNacido(vlintNoCvePaciente) Then
                        pEgresarRecienNacido
                    End If
                End If
                
                If vlblnEgresoPaciente Then
                    If Not vlblnDebeCapturarCuarto Then
                        'La operación se realizó satisfactoriamente.
                        MsgBox SIHOMsg(420), vbOKOnly + vbInformation, "Mensaje"
                    End If
                Else
                    MsgBox SIHOMsg(vlintMensajeFalla), vbOKOnly + vbInformation, "Mensaje"
                End If
                
                vlIntColumnaExpediente = IIf(optCriterio(3).Value, 1, 2)
                
                If vlblnDebeCapturarCuarto Then
                    pLimpia
                    pDatosPacientes Val(grdEgresados.TextMatrix(grdEgresados.Row, vlIntColumnaExpediente))
                    pDatosIngreso Val(grdEgresados.TextMatrix(grdEgresados.Row, vlIntColumnaCuenta)), "I"
                
                    OptEnvioPromo(0).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnSiEnvioPromo)
                    OptEnvioPromo(1).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnNoEnvioPromo)
                
                    cmdCancelarAdmision.Enabled = False
                    cmdEgresar.Enabled = False
                                        
                    pHabilitaAsignacionCuarto True
                    sstObj.Tab = 1
                    MyTabHeader1.TabCurrent = 1
                    cmdSugerirCuarto_Click
                End If
                    
            End If
        End If
    End If

End Sub

Private Sub cmdEgresar_Click()
    On Error GoTo NotificaError
    Dim blnDatosValidos As Boolean
    
  If vlblnPermiteEgresarPaciente = True Then
    blnDatosValidos = True
    blnDatosValidos = fblnRevisaPermiso(vglngNumeroLogin, vllngNumeroOpcion, "E")
    If blnDatosValidos = False Then Exit Sub
   End If
   
      frmEgreso.vllngNumeroCuenta = Val(txtCuentaInterno.Text)
        frmEgreso.Show vbModal, Me
        
        If frmEgreso.vlblnEgresoPaciente Then
            pLimpia
            sstObj.Tab = 2
            MyTabHeader1.TabCurrent = 2
            pCuartosActuales
        End If
 
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdEgresar_Click"))
    Unload Me
End Sub

Private Sub cmdCancelarEgreso_Click()
    On Error GoTo NotificaError
        
'   <<  Procedimiento de Cancelacion de Egreso  >>
    pCancelarEgreso
        
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdCancelarEgreso_Click"))
    Unload Me
End Sub

Private Sub cmdCancelarAdmision_Click()
1         On Error GoTo NotificaError
          
          Dim rsAdAdmision As New ADODB.Recordset
          Dim rsAdCuarto As New ADODB.Recordset
          Dim rsCargos As New ADODB.Recordset
          Dim vlstrSentencia As String
          Dim vlstrSentenciacargos As String
          Dim lngCirugiasProgramadas As Long
          Dim strParametros As String
          
          
          
2         If fblnRevisaPermiso(vglngNumeroLogin, vllngNumeroOpcion, "E") Then
          
3             If fblnDatosValidosCancelAdmision() Then
                                 
4                 vllngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
5                 If vllngPersonaGraba <> 0 Then
                  
6                     lngCirugiasProgramadas = 1
                      
7                     strParametros = txtCuentaInterno.Text & "|" & "I"
                  
8                     frsEjecuta_SP strParametros, "FN_ADSELCIRUGIASPROGRAMADAS", True, lngCirugiasProgramadas

                      
9                     If lngCirugiasProgramadas = 0 Then
                      
10                        EntornoSIHO.ConeccionSIHO.BeginTrans
11                        vgstrParametrosSP = txtCuentaInterno.Text & "|" & fstrFechaSQL(fdtmServerFecha, fdtmServerHora) & "|" & vllngPersonaGraba & "|" & vglngCveEstadoCuartoDisponible
12                        frsEjecuta_SP vgstrParametrosSP, "sp_AdUpdCancelaIngreso", True
13                        EntornoSIHO.ConeccionSIHO.CommitTrans
                          
14                        pCuartosActuales
15                        MsgBox SIHOMsg(420), vbOKOnly + vbInformation, "Mensaje"
                      
16                        pLimpia
17                        sstObj.Tab = 0
18                        MyTabHeader1.TabCurrent = 0
                          
19                    Else
                      
20                         MsgBox SIHOMsg(1054), vbOKOnly + vbInformation, "Mensaje"
                           
21                         Exit Sub
                      
22                    End If
                      
23                End If
              
24            End If
              
25        End If
          
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdGrabar_Click" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Function fblnCuartoDisponible() As Boolean
    On Error GoTo NotificaError
    Dim rsCuartoDisponible As ADODB.Recordset
    
    '-------------------------------------------------
    ' Validar Estatus del Cuarto Asignado al Paciente
    '-------------------------------------------------
    Dim strSentencia As String
    
    fblnCuartoDisponible = True
    
    If fraAsignacionCuarto.Enabled Then
        strSentencia = "SELECT CASE WHEN TNYCVEESTADOCUARTO = " & vglngCveEstadoCuartoDisponible & " THEN 'S' ELSE 'N' END Disponible FROM adCuarto WHERE intCveCuarto = '" & Trim(RSAdSelCuartoApropiado!ClaveCuarto) & "'"
        Set rsCuartoDisponible = frsRegresaRs(strSentencia)
        If rsCuartoDisponible.RecordCount > 0 Then
            fblnCuartoDisponible = rsCuartoDisponible!Disponible = "S"
        Else
            fblnCuartoDisponible = False
        End If
    End If

Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fblnCuartoDisponible"))
    Unload Me
End Function

Private Function fblnDatosValidos() As Boolean
1     On Error GoTo NotificaError
          Dim vllngContador As Long
          Dim vlblnSeleccionoCuarto As Boolean
          Dim vllngEmpresa As Long
          Dim vlaryParametrosSalida() As String
          Dim vlstrSentenciaCorreo As String
          Dim rsCorreo As ADODB.Recordset
          Dim vlstrSentencia As String
          Dim rsCuarto As ADODB.Recordset
          Dim intCveIdioma As Integer
          Dim rsInterfazWS As New ADODB.Recordset
          Dim lngIdparentescoResponsable As Long
          Dim llngCveEmpresaEmpleado As Long
          Dim rs As New ADODB.Recordset
          Dim rs2 As New ADODB.Recordset
          Dim vlstrSentencia2 As String
2         vlblnUsaFarmacia = False
          
3         vlstrSentencia2 = "select * from GNPARAMETROSFARMACIA where TNYCLAVEEMPRESAHOSPITAL = " & vgintClaveEmpresaContable & " and BITACTIVO = 1"
4         Set rs = frsRegresaRs(vlstrSentencia2)
          
          
5         If rs.RecordCount = 0 Then
              
6             vlblnUsaFarmacia = False
          
7         Else
          
8             Set rs2 = frsRegresaRs("SELECT * FROM SIPARAMETRO WHERE VCHNOMBRE = 'INTCVEDEPARTAMENTOADMISION' and INTCVEEMPRESACONTABLE = " & rs!TNYCLAVEEMPRESAFARMACIA)
          
9             If rs2.RecordCount <> 0 Then
10                vlblnUsaFarmacia = True
11            Else
12                fblnDatosValidos = False
13                MsgBox SIHOMsg(1629), vbOKOnly + vbInformation, "Mensaje"
14                Exit Function
15            End If
          
16        End If
          
          
17        fblnDatosValidos = True
18        lngIdparentescoResponsable = -1
19        If cboTipoIngreso.ListIndex = -1 Then
20            fblnDatosValidos = False
21            MsgBox SIHOMsg(2), vbOKOnly + vbInformation, "Mensaje"
22            If cboTipoIngreso.Enabled = True Then cboTipoIngreso.SetFocus
23            Exit Function
24        End If
          
25        If cboNacionalidad.ListIndex = -1 Then
26            fblnDatosValidos = False
              '¡No ha ingresado datos!
27            MsgBox SIHOMsg(2) & vbCrLf & "Nacionalidad", vbInformation + vbOKOnly, "Mensaje"
28            sstObj.Tab = 0
29            MyTabHeader1.TabCurrent = 0
30            cboNacionalidad.SetFocus
31            Exit Function
32        End If
          
33        If cboCiudad.ListIndex = -1 Then
34            fblnDatosValidos = False
              '¡No ha ingresado datos!
35            MsgBox SIHOMsg(2) & vbCrLf & "Ciudad", vbInformation + vbOKOnly, "Mensaje"
36            sstObj.Tab = 0
37            MyTabHeader1.TabCurrent = 0
38            cboCiudad.SetFocus
39            Exit Function
40        End If
          
          If cgstrModulo = "PV" And vgstrForma = "frmPresupuestos" Then
            fblnDatosValidos = True
          Else
41          If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveExterno _
            And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveUrgencias And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveConsultaExterna Then
42              fblnDatosValidos = fblnRevisaPermiso(vglngNumeroLogin, vllngNumeroOpcion, "E")
43          Else
44              fblnDatosValidos = fblnRevisaPermiso(vglngNumeroLogin, vllngNumeroOpcionExterno, "E")
45          End If
          End If
          '-----------------------------------------------------------------------------
          ' DATOS GENERALES DEL PACIENTE
          '-----------------------------------------------------------------------------
46        If fblnDatosValidos And Trim(txtApellidoPaterno.Text) = "" And Mid(Trim(lblApellidoPaterno.Caption), Len(Trim(lblApellidoPaterno.Caption)), 1) = "*" Then
47            fblnDatosValidos = False
              '¡No ha ingresado datos!
48            MsgBox SIHOMsg(2) & vbCrLf & "Apellido paterno paciente", vbInformation + vbOKOnly, "Mensaje"
49            sstObj.Tab = 0
50            MyTabHeader1.TabCurrent = 0
51            txtApellidoPaterno.SetFocus
52        End If
53        If fblnDatosValidos And Trim(txtApellidoMaterno.Text) = "" And Mid(Trim(lblApellidoMaterno.Caption), Len(Trim(lblApellidoMaterno.Caption)), 1) = "*" Then
54            fblnDatosValidos = False
              '¡No ha ingresado datos!
55            MsgBox SIHOMsg(2) & vbCrLf & "Apellido materno paciente", vbInformation + vbOKOnly, "Mensaje"
56            sstObj.Tab = 0
57            MyTabHeader1.TabCurrent = 0
58            txtApellidoMaterno.SetFocus
59        End If
60        If fblnDatosValidos And Trim(txtNombre.Text) = "" And Mid(Trim(lblNombre.Caption), Len(Trim(lblNombre.Caption)), 1) = "*" Then
61            fblnDatosValidos = False
              '¡No ha ingresado datos!
62            MsgBox SIHOMsg(2) & vbCrLf & "Nombre paciente", vbInformation + vbOKOnly, "Mensaje"
63            sstObj.Tab = 0
64            MyTabHeader1.TabCurrent = 0
65            If txtNombre.Enabled Then txtNombre.SetFocus
66        End If
67        If fblnDatosValidos And Not vlblnConsulta And Not vlblnPacienteValidado And Not cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveRecienNacido Then
68            fblnDatosValidos = False
              'Es necesario realizar una búsqueda del paciente antes de registrarlo.
              'Presione <enter> en el apellido materno del paciente.
69            MsgBox SIHOMsg(562), vbOKOnly + vbInformation, "Mensaje"
70            If sstObj.Tab = 1 Then sstObj.Tab = 0
71            txtApellidoMaterno.SetFocus
                 
72        End If
73        If fblnDatosValidos And Trim(mskFechaNacimiento.ClipText) = "" Then
74            If Not IsDate(mskFechaNacimiento.Text) Then
75                fblnDatosValidos = False
                  '¡Fecha no válida!, formato de fecha dd/mm/aaaa
76                MsgBox SIHOMsg(29), vbOKOnly + vbInformation, "Mensaje"
77                mskFechaNacimiento.SetFocus
78            Else
79                If CDate(mskFechaNacimiento.Text) > fdtmServerFecha Then
80                    fblnDatosValidos = False
                      '¡La fecha debe ser menor o igual a la del sistema!
81                    MsgBox SIHOMsg(40), vbOKOnly + vbInformation, "Mensaje"
82                    mskFechaNacimiento.SetFocus
83                ElseIf CDate(mskFechaNacimiento.Text) > CDate(mskFechaIngreso.Text) Then
84                    fblnDatosValidos = False
                      '¡La fecha de nacimiento debe ser menor a la fecha de ingreso!
85                    MsgBox Replace(SIHOMsg(853), ".", "") & "la fecha de nacimiento del paciente.", vbOKOnly + vbInformation, "Mensaje"
86                    mskFechaIngreso.SetFocus
87                End If
88            End If
89        End If
90        If fblnDatosValidos And Not optSexo(0).Value And Not optSexo(1).Value Then
91            fblnDatosValidos = False
              '¡No ha ingresado datos!
92            MsgBox SIHOMsg(2) & vbCrLf & "Sexo", vbInformation + vbOKOnly, "Mensaje"
93            sstObj.Tab = 0
94            MyTabHeader1.TabCurrent = 0
95            optSexo(0).SetFocus
96        End If
97        If fblnDatosValidos And Trim(mskRFC.ClipText) = "" And Mid(Trim(lblRfc.Caption), Len(Trim(lblRfc.Caption)), 1) = "*" Then
98            fblnDatosValidos = False
              '¡No ha ingresado datos!
99            MsgBox SIHOMsg(2) & vbCrLf & "RFC", vbInformation + vbOKOnly, "Mensaje"
100           sstObj.Tab = 0
101           MyTabHeader1.TabCurrent = 0
102           mskRFC.SetFocus
103       End If

        If fblnDatosValidos And blnSolicitaRFC And Len(Trim(mskRFC.ClipText)) <> 13 Then
            fblnDatosValidos = False
              '¡No ha ingresado datos!
            MsgBox SIHOMsg(1345), vbInformation + vbOKOnly, "Mensaje"
           sstObj.Tab = 0
           MyTabHeader1.TabCurrent = 0
           mskRFC.SetFocus
       End If

104       If fblnDatosValidos And Trim(txtCurp.Text) = "" And Mid(Trim(lblCurp.Caption), Len(Trim(lblCurp.Caption)), 1) = "*" Then
105           fblnDatosValidos = False
              '¡No ha ingresado datos!
106           MsgBox SIHOMsg(2) & vbCrLf & "CURP", vbInformation + vbOKOnly, "Mensaje"
107           sstObj.Tab = 0
108           MyTabHeader1.TabCurrent = 0
109           txtCurp.SetFocus
110       End If
111       If fblnDatosValidos And cboCiudadNacimiento.ItemData(cboCiudadNacimiento.ListIndex) = 0 And Mid(Trim(lblCiudadNacimiento.Caption), Len(Trim(lblCiudadNacimiento.Caption)), 1) = "*" Then
112           fblnDatosValidos = False
              '¡No ha ingresado datos!
113           MsgBox SIHOMsg(2) & vbCrLf & "Ciudad de nacimiento", vbInformation + vbOKOnly, "Mensaje"
114           sstObj.Tab = 0
115           MyTabHeader1.TabCurrent = 0
116           cboCiudadNacimiento.SetFocus
117       End If
118       If fblnDatosValidos And cboNacionalidad.ItemData(cboNacionalidad.ListIndex) = 0 And Mid(Trim(lblNacionalidad.Caption), Len(Trim(lblNacionalidad.Caption)), 1) = "*" Then
119           fblnDatosValidos = False
              '¡No ha ingresado datos!
120           MsgBox SIHOMsg(2) & vbCrLf & "Nacionalidad", vbInformation + vbOKOnly, "Mensaje"
121           sstObj.Tab = 0
122           MyTabHeader1.TabCurrent = 0
123           cboNacionalidad.SetFocus
124       End If
          
          '|  Admisión siempre tiene al menos la opción de <AGREGAR> por eso siempre se selecciona el ItemData
125       If cgstrModulo = "AD" Then
126           intCveIdioma = cboIdioma.ItemData(cboIdioma.ListIndex)
127       Else
128           If cboIdioma.ListCount > 0 And cboIdioma.ListIndex <> -1 Then
129               intCveIdioma = cboIdioma.ItemData(cboIdioma.ListIndex)
130           Else
131               intCveIdioma = 0
132           End If
133       End If
          
134       If fblnDatosValidos And intCveIdioma = 0 And Mid(Trim(lblIdioma.Caption), Len(Trim(lblIdioma.Caption)), 1) = "*" Then
135           fblnDatosValidos = False
              '¡No ha ingresado datos!
136           MsgBox SIHOMsg(2) & vbCrLf & "Idioma", vbInformation + vbOKOnly, "Mensaje"
137           sstObj.Tab = 0
138           MyTabHeader1.TabCurrent = 0
139           cboIdioma.SetFocus
140       End If
141       If fblnDatosValidos And cboReligion.ItemData(cboReligion.ListIndex) = 0 And Mid(Trim(lblPreferenciaReligiosa.Caption), Len(Trim(lblPreferenciaReligiosa.Caption)), 1) = "*" Then
142           fblnDatosValidos = False
              '¡No ha ingresado datos!
143           MsgBox SIHOMsg(2) & vbCrLf & "Religión", vbInformation + vbOKOnly, "Mensaje"
144           sstObj.Tab = 0
145           MyTabHeader1.TabCurrent = 0
146           cboReligion.SetFocus
147       End If
148       If fblnDatosValidos And cboOcupacion.ListIndex <= 0 And Mid(Trim(lblOcupacion.Caption), Len(Trim(lblOcupacion.Caption)), 1) = "*" Then
149           fblnDatosValidos = False
              '¡No ha ingresado datos!
150           MsgBox SIHOMsg(2) & vbCrLf & "Ocupación", vbInformation + vbOKOnly, "Mensaje"
151           sstObj.Tab = 0
152           MyTabHeader1.TabCurrent = 0
153           cboOcupacion.SetFocus
154       End If
155       If fblnDatosValidos And cboOcupacion.ListIndex > 0 Then
          'Validar que la ocupación está activa
156           If cboOcupacion.ItemData(cboOcupacion.ListIndex) < 0 Then
157               fblnDatosValidos = False
                  'La ocupación seleccionada está inactiva.
158               MsgBox SIHOMsg(1040), vbInformation + vbOKOnly, "Mensaje"
159               sstObj.Tab = 0
160               MyTabHeader1.TabCurrent = 0
161               cboOcupacion.SetFocus
162           End If
163       End If
          'If fblnDatosValidos And Trim(txtCorreoElectronico.Text) = "" And Mid(Trim(lblCorreoElectronico.Caption), Len(Trim(lblCorreoElectronico.Caption)), 1) = "*" Then
164       If fblnDatosValidos Then
165           If Trim(txtCorreoElectronico.Text) = "" Then
166               vlstrSentenciaCorreo = "SELECT VCHVALOR FROM SIPARAMETRO WHERE  VCHNOMBRE = 'INTCORREOELECTRONICOOBLIGATORIO' AND INTCVEEMPRESACONTABLE = " & vgintClaveEmpresaContable
167               Set rsCorreo = frsRegresaRs(vlstrSentenciaCorreo)
168               If rsCorreo.RecordCount > 0 Then
169                   If Trim(rsCorreo!VCHVALOR) = "1" Then
170                       fblnDatosValidos = False
                          '¡No ha ingresado datos!
171                       MsgBox SIHOMsg(2) & vbCrLf & "Correo electrónico", vbInformation + vbOKOnly, "Mensaje"
172                       sstObj.Tab = 0
173                       MyTabHeader1.TabCurrent = 0
174                       txtCorreoElectronico.SetFocus
175                   End If
176                   rsCorreo.Close
177               End If
178           Else
179               If InStr(Trim(txtCorreoElectronico.Text), "@") <= 0 Then
180                   fblnDatosValidos = False
                      'La dirección del correo no es válida.
181                   MsgBox SIHOMsg(1196), vbCritical, "Mensaje"
182                   sstObj.Tab = 0
183                   MyTabHeader1.TabCurrent = 0
184                   txtCorreoElectronico.SetFocus
185               End If
186           End If
187       End If
          
188       If fblnDatosValidos Then
189           If vlstrTipoTipoPaciente = "EM" Then
190               llngCveEmpresaEmpleado = 1
191               vlstrSentencia = "Select * From NoDepartamento Where smiCveDepartamento = " & vgintNumeroDepartamento
192               Set rs = frsRegresaRs(vlstrSentencia)
193               If rs.RecordCount <> 0 Then
194                   llngCveEmpresaEmpleado = rs!tnyClaveEmpresa
195               End If
196               rs.Close
197               vlstrSentencia = "Select NoEmpleado.intCveEmpleado, " & _
                                   "Trim(NoEmpleado.vchApellidoPaterno)||' '||Trim(NoEmpleado.vchApellidoMaterno)||' '||Trim(NoEmpleado.vchNombre) Nombre " & _
                                   "From NoEmpleado" & _
                                   "     inner join  NoDepartamento on NoEmpleado.smiCveDepartamento = NoDepartamento.smiCveDepartamento " & _
                                   "Where bitActivo = 1 and NoDepartamento.tnyClaveEmpresa = " & llngCveEmpresaEmpleado
198               Set rs = frsRegresaRs(vlstrSentencia)
199               If rs.RecordCount = 0 Then
200                   fblnDatosValidos = False
                      '¡No ha ingresado datos!
201                   MsgBox SIHOMsg(2) & vbCrLf & "Empleado", vbInformation + vbOKOnly, "Mensaje"
202                   sstObj.Tab = 0
203                   MyTabHeader1.TabCurrent = 0
204                   cboRelacion.SetFocus
205               End If
206               rs.Close
207           End If
208       End If
          
209       If fblnDatosValidos And OptEnvioPromo(0).Enabled And OptEnvioPromo(1).Enabled And fblnSolicitarEnvioPromociones Then
210           If OptEnvioPromo(0).Value = False And OptEnvioPromo(1).Value = False Then
211               fblnDatosValidos = False
                  'No ha seleccionado información.
212               MsgBox SIHOMsg(873), vbInformation + vbOKOnly, "Mensaje"
213               sstObj.Tab = 0
214               MyTabHeader1.TabCurrent = 0
215               OptEnvioPromo(1).SetFocus
216               OptEnvioPromo(0).Value = False
217               OptEnvioPromo(1).Value = False
218           End If
219       End If
          
220       If fblnDatosValidos And lstAlergias.ListCount < 1 And Mid(Trim(lblAlergias.Caption), Len(Trim(lblAlergias.Caption)), 1) = "*" And Not vlblnTipoPacienteDesconocido Then
221           fblnDatosValidos = False
              '¡No ha ingresado datos!
222           MsgBox SIHOMsg(2) & vbCrLf & "Alergias", vbInformation + vbOKOnly, "Mensaje"
223           sstObj.Tab = 0
224           MyTabHeader1.TabCurrent = 0
225           txtAlergia.SetFocus
226       End If
          '-----------------------------------------------------------------------------
          ' DOMICILIO Y FAMILIARES
          '-----------------------------------------------------------------------------
227       If fblnDatosValidos And Trim(txtCalle.Text) = "" And Mid(Trim(lblDomicilio.Caption), Len(Trim(lblDomicilio.Caption)), 1) = "*" Then
228           fblnDatosValidos = False
              '¡No ha ingresado datos!
229           MsgBox SIHOMsg(2) & vbCrLf & "Domicilio", vbInformation + vbOKOnly, "Mensaje"
230           sstObj.Tab = 0
231           MyTabHeader1.TabCurrent = 0
232           txtCalle.SetFocus
233       End If
234       If fblnDatosValidos And Trim(txtNumeroExterior.Text) = "" And Mid(Trim(lblNumeroExterior.Caption), Len(Trim(lblNumeroExterior.Caption)), 1) = "*" Then
235           fblnDatosValidos = False
              '¡No ha ingresado datos!
236           MsgBox SIHOMsg(2) & vbCrLf & "Número exterior", vbInformation + vbOKOnly, "Mensaje"
237           sstObj.Tab = 0
238           MyTabHeader1.TabCurrent = 0
239           txtNumeroExterior.SetFocus
240       End If
241       If fblnDatosValidos And Trim(txtColonia.Text) = "" And Mid(Trim(lblColonia.Caption), Len(Trim(lblColonia.Caption)), 1) = "*" Then
242           fblnDatosValidos = False
              '¡No ha ingresado datos!
243           MsgBox SIHOMsg(2) & vbCrLf & "Colonia", vbInformation + vbOKOnly, "Mensaje"
244           sstObj.Tab = 0
245           MyTabHeader1.TabCurrent = 0
246           txtColonia.SetFocus
247       End If
248       If fblnDatosValidos And Trim(txtCodigoPostal.Text) = "" And Mid(Trim(lblCodigoPostal.Caption), Len(Trim(lblCodigoPostal.Caption)), 1) = "*" Then
249           fblnDatosValidos = False
              '¡No ha ingresado datos!
250           MsgBox SIHOMsg(2) & vbCrLf & "Código postal", vbInformation + vbOKOnly, "Mensaje"
251           sstObj.Tab = 0
252           MyTabHeader1.TabCurrent = 0
253           txtCodigoPostal.SetFocus
254       End If
255       If fblnDatosValidos And Trim(txtCodigoPostal.Text) <> "" Then
256           If Len(Trim(txtCodigoPostal.Text)) <> 5 Then
                  '!Dato no válido, el código postal debe ser de 5 dígitos!
257               MsgBox SIHOMsg(1181), vbExclamation, "Mensaje"
258               fblnDatosValidos = False
259               sstObj.Tab = 0
260               MyTabHeader1.TabCurrent = 0
261               txtCodigoPostal.SetFocus
262           End If
263       End If
264       If fblnDatosValidos And Trim(txtTelefono.Text) = "" And Mid(Trim(lblTelefono.Caption), Len(Trim(lblTelefono.Caption)), 1) = "*" Then
265           fblnDatosValidos = False
              '¡No ha ingresado datos!
266           MsgBox SIHOMsg(2) & vbCrLf & "Teléfono", vbInformation + vbOKOnly, "Mensaje"
267           sstObj.Tab = 0
268           MyTabHeader1.TabCurrent = 0
269           txtTelefono.SetFocus
270       End If
271       If fblnDatosValidos And cboCiudad.ItemData(cboCiudad.ListIndex) = 0 And Mid(Trim(lblCiudad.Caption), Len(Trim(lblCiudad.Caption)), 1) = "*" Then
272           fblnDatosValidos = False
              '¡No ha ingresado datos!
273           MsgBox SIHOMsg(2) & vbCrLf & "Ciudad", vbInformation + vbOKOnly, "Mensaje"
274           sstObj.Tab = 0
275           MyTabHeader1.TabCurrent = 0
276           cboCiudad.SetFocus
277       End If
          
278       If fblnDatosValidos And chkForaneo.Value = 1 Then
279           If fblnDatosValidos And Trim(txtDomicilioForaneo.Text) = "" And Mid(Trim(lblDomicilioForaneo.Caption), Len(Trim(lblDomicilioForaneo.Caption)), 1) = "*" Then
280               fblnDatosValidos = False
                  '¡No ha ingresado datos!
281               MsgBox SIHOMsg(2) & vbCrLf & "Domicilio foráneo", vbInformation + vbOKOnly, "Mensaje"
282               sstObj.Tab = 0
283               MyTabHeader1.TabCurrent = 0
284               txtDomicilioForaneo.SetFocus
285           End If
286           If fblnDatosValidos And Trim(txtColoniaForanea.Text) = "" And Mid(Trim(lblColoniaForanea.Caption), Len(Trim(lblColoniaForanea.Caption)), 1) = "*" Then
287               fblnDatosValidos = False
                  '¡No ha ingresado datos!
288               MsgBox SIHOMsg(2) & vbCrLf & "Colonia foránea", vbInformation + vbOKOnly, "Mensaje"
289               sstObj.Tab = 0
290               MyTabHeader1.TabCurrent = 0
291               txtColoniaForanea.SetFocus
292           End If
293           If fblnDatosValidos And Trim(txtCodigoPostalForaneo.Text) = "" And Mid(Trim(lblCodigoPostalForaneo.Caption), Len(Trim(lblCodigoPostalForaneo.Caption)), 1) = "*" Then
294               fblnDatosValidos = False
                  '¡No ha ingresado datos!
295               MsgBox SIHOMsg(2) & vbCrLf & "Código postal foráneo", vbInformation + vbOKOnly, "Mensaje"
296               sstObj.Tab = 0
297               MyTabHeader1.TabCurrent = 0
298               txtCodigoPostalForaneo.SetFocus
299           End If
300           If fblnDatosValidos And Trim(txtCodigoPostalForaneo.Text) <> "" Then
301               If Len(Trim(txtCodigoPostalForaneo.Text)) <> 5 Then
                      '!Dato no válido, el código postal debe ser de 5 dígitos!
302                   MsgBox SIHOMsg(1181), vbExclamation, "Mensaje"
303                   fblnDatosValidos = False
304                   sstObj.Tab = 0
305                   MyTabHeader1.TabCurrent = 0
306                   txtCodigoPostalForaneo.SetFocus
307               End If
308           End If
309           If fblnDatosValidos And Trim(txtTelefonoForaneo.Text) = "" And Mid(Trim(lblTelefonoForaneo.Caption), Len(Trim(lblTelefonoForaneo.Caption)), 1) = "*" Then
310               fblnDatosValidos = False
                  '¡No ha ingresado datos!
311               MsgBox SIHOMsg(2) & vbCrLf & "Teléfono foráneo", vbInformation + vbOKOnly, "Mensaje"
312               sstObj.Tab = 0
313               MyTabHeader1.TabCurrent = 0
314               txtTelefonoForaneo.SetFocus
315           End If
316           If fblnDatosValidos And cboCiudadForanea.ItemData(cboCiudadForanea.ListIndex) = 0 And Mid(Trim(lblCiudadForanea.Caption), Len(Trim(lblCiudadForanea.Caption)), 1) = "*" Then
317               fblnDatosValidos = False
                  '¡No ha ingresado datos!
318               MsgBox SIHOMsg(2) & vbCrLf & "Ciudad foránea", vbInformation + vbOKOnly, "Mensaje"
319               sstObj.Tab = 0
320               MyTabHeader1.TabCurrent = 0
321               cboCiudadForanea.SetFocus
322           End If
323       End If
324       If fblnDatosValidos And Trim(txtPadre.Text) = "" And Mid(Trim(lblPadre.Caption), Len(Trim(lblPadre.Caption)), 1) = "*" Then
325           fblnDatosValidos = False
              '¡No ha ingresado datos!
326           MsgBox SIHOMsg(2) & vbCrLf & "Padre", vbInformation + vbOKOnly, "Mensaje"
327           sstObj.Tab = 0
328           MyTabHeader1.TabCurrent = 0
329           txtPadre.SetFocus
330       End If
331       If fblnDatosValidos And Trim(txtMadre.Text) = "" And Mid(Trim(lblMadre.Caption), Len(Trim(lblMadre.Caption)), 1) = "*" Then
332           fblnDatosValidos = False
              '¡No ha ingresado datos!
333           MsgBox SIHOMsg(2) & vbCrLf & "Madre", vbInformation + vbOKOnly, "Mensaje"
334           sstObj.Tab = 0
335           MyTabHeader1.TabCurrent = 0
336           txtMadre.SetFocus
337       End If
          'Si el paciente es menor de edad, se debe capturar por lo menos uno de los padres
338       If fblnDatosValidos And Trim(mskFechaNacimiento.ClipText) <> "" Then
339           If ((fdtmServerFecha - CDate(mskFechaNacimiento.Text)) / 365) < 18 Then
340               If Trim(txtPadre.Text) = "" And Trim(txtMadre.Text) = "" Then
341                   fblnDatosValidos = False
                      '¡No ha ingresado datos!
342                   MsgBox SIHOMsg(1032), vbInformation + vbOKOnly, "Mensaje"
343                   sstObj.Tab = 0
344                   MyTabHeader1.TabCurrent = 0
345                   txtPadre.SetFocus
346               End If
347           End If
348       End If
          ' validaciones fechas de nacimiento padre, madre y cónyuge
349       If fblnDatosValidos And lblnHabilitarFechaNacimiento And Trim(txtPadre.Text) <> "" And Trim(mskNacimientoPadre.ClipText) = "" Then
350           fblnDatosValidos = False
              '¡No ha ingresado datos!
351           MsgBox SIHOMsg(2) & vbCrLf & "Fecha nacimiento padre", vbInformation + vbOKOnly, "Mensaje"
352           sstObj.Tab = 0
353           MyTabHeader1.TabCurrent = 0
354           mskNacimientoPadre.SetFocus
355       End If
356       If fblnDatosValidos And lblnHabilitarFechaNacimiento And Trim(mskNacimientoPadre.ClipText) <> "" Then
357           If Not fblnFechaNacimientoValida(mskNacimientoPadre.Text) Then
358               fblnDatosValidos = False
359               sstObj.Tab = 0
360               MyTabHeader1.TabCurrent = 0
361               mskNacimientoPadre.SetFocus
362           End If
363       End If
364       If fblnDatosValidos And lblnHabilitarFechaNacimiento And Trim(mskNacimientoPadre.ClipText) <> "" And Trim(txtPadre.Text) = "" Then
365           fblnDatosValidos = False
366           MsgBox SIHOMsg(2) & vbCrLf & "Padre", vbInformation + vbOKOnly, "Mensaje"
367           sstObj.Tab = 0
368           MyTabHeader1.TabCurrent = 0
369           txtPadre.SetFocus
370       End If
371       If fblnDatosValidos And lblnHabilitarFechaNacimiento And Trim(txtMadre.Text) <> "" And Trim(mskNacimientoMadre.ClipText) = "" Then
372           fblnDatosValidos = False
              '¡No ha ingresado datos!
373           MsgBox SIHOMsg(2) & vbCrLf & "Fecha nacimiento madre", vbInformation + vbOKOnly, "Mensaje"
374           sstObj.Tab = 0
375           MyTabHeader1.TabCurrent = 0
376           mskNacimientoMadre.SetFocus
377       End If
378       If fblnDatosValidos And lblnHabilitarFechaNacimiento And Trim(mskNacimientoMadre.ClipText) <> "" Then
379           If Not fblnFechaNacimientoValida(mskNacimientoMadre.Text) Then
380               fblnDatosValidos = False
381               sstObj.Tab = 0
382               MyTabHeader1.TabCurrent = 0
383               mskNacimientoMadre.SetFocus
384           End If
385       End If
386       If fblnDatosValidos And lblnHabilitarFechaNacimiento And Trim(mskNacimientoMadre.ClipText) <> "" And Trim(txtMadre.Text) = "" Then
387           fblnDatosValidos = False
388           MsgBox SIHOMsg(2) & vbCrLf & "Madre", vbInformation + vbOKOnly, "Mensaje"
389           sstObj.Tab = 0
390           MyTabHeader1.TabCurrent = 0
391           txtMadre.SetFocus
392       End If
393       If fblnDatosValidos And lblConyuge.Enabled And (Trim(txtConyuge.Text) + Trim(txtPaternoConyuge.Text) + Trim(txtMaternoConyuge.Text)) = "" And Mid(Trim(lblConyuge.Caption), Len(Trim(lblConyuge.Caption)), 1) = "*" Then
394           fblnDatosValidos = False
              '¡No ha ingresado datos!
395           MsgBox SIHOMsg(2) & vbCrLf & "Cónyuge", vbInformation + vbOKOnly, "Mensaje"
396           sstObj.Tab = 0
397           MyTabHeader1.TabCurrent = 0
398           txtConyuge.SetFocus
399       End If
400       If fblnDatosValidos And lblnHabilitarFechaNacimiento And lblConyuge.Enabled And (Trim(txtConyuge.Text) + Trim(txtPaternoConyuge.Text) + Trim(txtMaternoConyuge.Text)) <> "" And Trim(mskNacimientoConyuge.ClipText) = "" Then
401           fblnDatosValidos = False
              '¡No ha ingresado datos!
402           MsgBox SIHOMsg(2) & vbCrLf & "Fecha nacimiento cónyuge", vbInformation + vbOKOnly, "Mensaje"
403           sstObj.Tab = 0
404           MyTabHeader1.TabCurrent = 0
405           mskNacimientoConyuge.SetFocus
406       End If
407       If fblnDatosValidos And lblnHabilitarFechaNacimiento And Trim(mskNacimientoConyuge.ClipText) <> "" Then
408           If Not fblnFechaNacimientoValida(mskNacimientoConyuge.Text) Then
409               fblnDatosValidos = False
410               sstObj.Tab = 0
411               MyTabHeader1.TabCurrent = 0
412               mskNacimientoConyuge.SetFocus
413           End If
414       End If
415       If fblnDatosValidos And lblnHabilitarFechaNacimiento And Trim(mskNacimientoConyuge.ClipText) <> "" And Trim(txtConyuge.Text) = "" Then
416           fblnDatosValidos = False
417           MsgBox SIHOMsg(2) & vbCrLf & "Nombre cónyuge", vbInformation + vbOKOnly, "Mensaje"
418           sstObj.Tab = 0
419           MyTabHeader1.TabCurrent = 0
420           txtConyuge.SetFocus
421       End If
              
422       If fblnDatosValidos And lblAutoriza.Enabled And Trim(txtAutoriza.Text) = "" And Mid(Trim(lblAutoriza.Caption), Len(Trim(lblAutoriza.Caption)), 1) = "*" Then
423           fblnDatosValidos = False
              '¡No ha ingresado datos!
424           MsgBox SIHOMsg(2) & vbCrLf & "Autoriza", vbInformation + vbOKOnly, "Mensaje"
425           sstObj.Tab = 0
426           MyTabHeader1.TabCurrent = 0
427           txtAutoriza.SetFocus
428       End If
          
429       If fblnDatosValidos And cboTipoPaciente.ListIndex < 0 And Mid(Trim(lblTipoPaciente.Caption), Len(Trim(lblTipoPaciente.Caption)), 1) = "*" Then
430           fblnDatosValidos = False
              '¡No ha ingresado datos!
431           MsgBox SIHOMsg(2) & vbCrLf & "Tipo de paciente", vbInformation + vbOKOnly, "Mensaje"
432           sstObj.Tab = 0
433           MyTabHeader1.TabCurrent = 0
434           If fblnCanFocus(cboTipoPaciente) Then cboTipoPaciente.SetFocus
435       End If
          
          '-----------------------------------------------------------------------------
          ' REFERENTE AL INGRESO
          '-----------------------------------------------------------------------------
          'Si es empleado o médico, que se haya indicado el empleado
436       If fblnDatosValidos And (vlstrTipoTipoPaciente = "EM" Or vlstrTipoTipoPaciente = "ME") And cboRelacion.ListIndex = -1 Then
437           fblnDatosValidos = False
              '¡No ha ingresado datos!
438           MsgBox SIHOMsg(2) & vbCrLf & IIf(vlstrTipoTipoPaciente = "EM", "Empleado", "Médico"), vbInformation + vbOKOnly, "Mensaje"
439           sstObj.Tab = 0
440           MyTabHeader1.TabCurrent = 0
441           If cboRelacion.Enabled Then cboRelacion.SetFocus
442       End If
          
          'Si es familiar de empleado o médico, verificar que se haya indicado el familiar
443       If fblnDatosValidos And Not vlblnConsulta And (vlstrTipoTipoPaciente = "EM" Or vlstrTipoTipoPaciente = "ME") And vlblnFamiliar Then
444           If vlstrIngresoSeleccionado <> vlstrTipoIngresoRecienNacido Then
445               If cboFamiliar.ListIndex < 0 Or cboFamiliar.ItemData(cboFamiliar.ListIndex) = 0 Then
446                   fblnDatosValidos = False
                      '¡No ha ingresado datos!
447                   MsgBox SIHOMsg(2) & vbCrLf & "Familiar", vbInformation + vbOKOnly, "Mensaje"
448                   sstObj.Tab = 0
449                   MyTabHeader1.TabCurrent = 0
450                   cboFamiliar.SetFocus
451               End If
452           Else
453               If cboMadre.ListIndex < 0 Then
454                   fblnDatosValidos = False
                      '¡No ha ingresado datos!
455                   MsgBox SIHOMsg(2) & vbCrLf & "Madre", vbInformation + vbOKOnly, "Mensaje"
456                   sstObj.Tab = 0
457                   MyTabHeader1.TabCurrent = 0
458                   cboMadre.SetFocus
459               End If
460           End If
461       End If
          
          'Si es socio, verificar que se haya indicado el socio
462       If cboTipoPaciente.ListIndex > 0 Then
463           If fblnDatosValidos And (vlstrTipoTipoPaciente = "PA") And vlUsaSocios = True And vgLngTipoPacienteSocio = Str(cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex)) Then
464               If cboSocio.ListIndex < 0 Then
465                   fblnDatosValidos = False
                      '¡No ha ingresado datos!
466                   MsgBox SIHOMsg(2) & vbCrLf & "Socio", vbInformation + vbOKOnly, "Mensaje"
467                   sstObj.Tab = 0
468                   MyTabHeader1.TabCurrent = 0
469                   If cboSocio.Enabled = True Then
470                       cboSocio.SetFocus
471                   ElseIf cboTipoPaciente.Enabled = True Then
472                       cboTipoPaciente.SetFocus
473                   Else
474                       cboTipoIngreso.SetFocus
475                   End If
                          
476               End If
477           End If
478       End If
          
479       If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveExterno _
          And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveUrgencias And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveConsultaExterna Then
          '----------------------------------------------------------------------------
          'Validaciones solo para internos
          '----------------------------------------------------------------------------
              'Si es recién nacido que se haya indicado la madre
480           If fblnDatosValidos And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveRecienNacido And cboMadre.ListIndex = -1 Then
481               fblnDatosValidos = False
                  '¡No ha ingresado datos!
482               MsgBox SIHOMsg(2) & vbCrLf & "Madre", vbInformation + vbOKOnly, "Mensaje"
483               sstObj.Tab = 0
484               MyTabHeader1.TabCurrent = 0
485               cboMadre.SetFocus
486           End If
              
              'Si no es previo
487           If fblnDatosValidos And cboTipoIngreso.ListIndex <> fintLocalizaCritCbo_new(cboTipoIngreso, vlstrTipoIngresoPrevio) Then
488               If lstrEstatusPaciente <> "E" Then
489                   If cboProcedencia.ListIndex = -1 Then
490                       fblnDatosValidos = False
491                   Else
492                       If cboProcedencia.ItemData(cboProcedencia.ListIndex) <= 0 Then
493                           fblnDatosValidos = False
494                       End If
495                   End If
496               End If
497               If Not fblnDatosValidos Then
                      '¡No ha ingresado datos!
498                   MsgBox SIHOMsg(2) & vbCrLf & "Procedencia", vbInformation + vbOKOnly, "Mensaje"
499                   sstObj.Tab = 0
500                   MyTabHeader1.TabCurrent = 0
501                   cboProcedencia.SetFocus
502                   Exit Function
503               End If
                  'tipo de convenio y empresa si no es previo
504               If vlstrTipoTipoPaciente = "CO" Then
505                   If fblnDatosValidos And cboEmpresa.ListIndex < 0 Then
506                       fblnDatosValidos = False
                          '¡No ha ingresado datos!
507                       MsgBox SIHOMsg(2) & vbCrLf & "Empresa", vbInformation + vbOKOnly, "Mensaje"
508                       sstObj.Tab = 0
509                       MyTabHeader1.TabCurrent = 0
510                       If fblnCanFocus(cboEmpresa) Then cboEmpresa.SetFocus
511                   End If
512               End If
513           End If
              ' AQUI
514           If fblnDatosValidos And vlstrIngresoSeleccionado <> vlstrTipoIngresoPrevio Then
515               If CDate(mskFechaIngreso.Text) > fdtmServerFecha Then
516                   fblnDatosValidos = False
                      '¡La fecha debe ser menor o igual a la del sistema! 40
517                   MsgBox SIHOMsg(40), vbOKOnly + vbInformation, "Mensaje"
518                   mskFechaIngreso.SetFocus
519               ElseIf CDate(mskHoraIngreso.Text) > fdtmServerHora And Not CDate(mskFechaIngreso.Text) < fdtmServerFecha Then
520                   fblnDatosValidos = False
                      '¡La hora debe ser menor o igual a la del sistema! 42
521                   MsgBox SIHOMsg(42), vbOKOnly + vbInformation, "Mensaje"
522                   mskHoraIngreso.SetFocus
523               End If
524           End If
              
              
525           If fblnDatosValidos And lblNumeroControl.Enabled And Trim(txtNumeroControl.Text) = "" And Mid(Trim(lblNumeroControl.Caption), Len(Trim(lblNumeroControl.Caption)), 1) = "*" Then
526               fblnDatosValidos = False
                  '¡No ha ingresado datos!
527               MsgBox SIHOMsg(2) & vbCrLf & "Número de control", vbInformation + vbOKOnly, "Mensaje"
528               sstObj.Tab = 0
529               MyTabHeader1.TabCurrent = 0
530               txtNumeroControl.SetFocus
531           End If
532           vllngEmpresa = 0
533           If cboEmpresa.ListIndex <> -1 Then
534               vllngEmpresa = cboEmpresa.ItemData(cboEmpresa.ListIndex)
535           End If
536           If fblnDatosValidos And cboPlanPaqueteCirugia.ListIndex <> -1 And OptPaqueteOtros(0).Value Then
537               vlintBitPesos = 0
538               pCargaArreglo vlaryParametrosSalida, "|" & adDecimal & "||" & adDecimal & "||" & adDecimal
539               frsEjecuta_SP cboPlanPaqueteCirugia.ItemData(cboPlanPaqueteCirugia.ListIndex) & "|" & "PA" & "|" & cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex) & "|" & vllngEmpresa & "|I|0|01/01/1900|" & vgintClaveEmpresaContable, "SP_PVSELOBTENERPRECIOBIT", , , vlaryParametrosSalida
                  
540               pObtieneValores vlaryParametrosSalida, vldblPrecio, vldblIncrementoTarifa, vlintBitPesos
541               If vldblPrecio = -1 Or vldblPrecio = 0 Then
                      'El elemento seleccionado no cuenta con un precio capturado.
542                   MsgBox SIHOMsg(301), vbInformation, "Mensaje"
543                   fblnDatosValidos = False
544                   sstObj.Tab = 0
545                   MyTabHeader1.TabCurrent = 0
546                   cboPlanPaqueteCirugia.SetFocus
547               End If
548           End If
549           If fblnDatosValidos And vlblnVerificaEmpresa And cboEmpresa.ListIndex > -1 Then
550               If frsRegresaRs("select bitActivo from ccempresa where intCveEmpresa = " & cboEmpresa.ItemData(cboEmpresa.ListIndex), adLockOptimistic, adOpenDynamic).Fields(0) = 0 Then
                      'La empresa no está activa, seleccione otra empresa.
551                   MsgBox SIHOMsg(691), vbExclamation + vbOKOnly, "Mensaje"
552                   sstObj.Tab = 0
553                   MyTabHeader1.TabCurrent = 0
                      
554                   If Not cboEmpresa.Enabled Then
555                       cboEmpresa.Enabled = True
556                       lblEmpresa.Enabled = True
557                       Cmdrequisitos.Enabled = True
558                   End If
559                   cboEmpresa.SetFocus
                      
560                   fblnDatosValidos = False
561               End If
562           End If
              '-----------------------------------------------------------------------------
              ' PARA CASOS DE EMERGENCIA
              '-----------------------------------------------------------------------------
563           If fblnDatosValidos And Trim(txtNombreEmergencia.Text) = "" And Mid(Trim(lblNombreEmergencia.Caption), Len(Trim(lblNombreEmergencia.Caption)), 1) = "*" Then
564               fblnDatosValidos = False
                  '¡No ha ingresado datos!
565               MsgBox SIHOMsg(2) & vbCrLf & "Nombre emergencia", vbInformation + vbOKOnly, "Mensaje"
566               sstObj.Tab = 1
567               MyTabHeader1.TabCurrent = 1
568               txtNombreEmergencia.SetFocus
569           End If
570           If fblnDatosValidos And Trim(txtNombreEmergencia.Text) = "" And cboParentescoFamiliarEmergencia.Text = "PADRE" Then
571               fblnDatosValidos = False
                  '¡No ha ingresado datos!
572               MsgBox SIHOMsg(2) & vbCrLf & "Nombre emergencia", vbInformation + vbOKOnly, "Mensaje"
573               sstObj.Tab = 1
574               MyTabHeader1.TabCurrent = 1
575               txtNombreEmergencia.SetFocus
576           End If
577           If fblnDatosValidos And Trim(txtDomicilioEmergencia.Text) = "" And Mid(Trim(lblDomicilioEmergencia.Caption), Len(Trim(lblDomicilioEmergencia.Caption)), 1) = "*" Then
578               fblnDatosValidos = False
                  '¡No ha ingresado datos!
579               MsgBox SIHOMsg(2) & vbCrLf & "Domicilio emergencia", vbInformation + vbOKOnly, "Mensaje"
580               sstObj.Tab = 1
581               MyTabHeader1.TabCurrent = 1
582               txtDomicilioEmergencia.SetFocus
583           End If
584           If fblnDatosValidos And Trim(txtTelefonoEmergencia.Text) = "" And Mid(Trim(lblTelefonoEmergencia.Caption), Len(Trim(lblTelefonoEmergencia.Caption)), 1) = "*" Then
585               fblnDatosValidos = False
                  '¡No ha ingresado datos!
586               MsgBox SIHOMsg(2) & vbCrLf & "Teléfono emergencia", vbInformation + vbOKOnly, "Mensaje"
587               sstObj.Tab = 1
588               MyTabHeader1.TabCurrent = 1
589               txtTelefonoEmergencia.SetFocus
590           End If
591           If fblnDatosValidos And cboParentescoFamiliarEmergencia.ListIndex = -1 And Mid(Trim(lblParentescoEmergencia.Caption), Len(Trim(lblParentescoEmergencia.Caption)), 1) = "*" Then
592               fblnDatosValidos = False
                  '¡No ha ingresado datos!
593               MsgBox SIHOMsg(2) & vbCrLf & "Parenteso emergencia", vbInformation + vbOKOnly, "Mensaje"
594               sstObj.Tab = 1
595               MyTabHeader1.TabCurrent = 1
596               cboParentescoFamiliarEmergencia.SetFocus
597           End If
598           If fblnDatosValidos And lblnHabilitarFechaNacimiento And Trim(txtNombreEmergencia.Text) <> "" And Trim(mskNacimientoEmergencia.ClipText) = "" And mskNacimientoEmergencia.Enabled = True Then
599               fblnDatosValidos = False
                  '¡No ha ingresado datos!
600               MsgBox SIHOMsg(2) & vbCrLf & "Fecha nacimiento emergencia", vbInformation + vbOKOnly, "Mensaje"
601               sstObj.Tab = 1
602               MyTabHeader1.TabCurrent = 1
603               If fblnCanFocus(mskNacimientoEmergencia) Then mskNacimientoEmergencia.SetFocus
604           End If
605           If fblnDatosValidos And lblnHabilitarFechaNacimiento And Trim(mskNacimientoEmergencia.ClipText) <> "" Then
606               If Not fblnFechaNacimientoValida(mskNacimientoEmergencia.Text) Then
607                   fblnDatosValidos = False
608                   sstObj.Tab = 1
609                   MyTabHeader1.TabCurrent = 1
610                   If fblnCanFocus(mskNacimientoEmergencia) Then mskNacimientoEmergencia.SetFocus
611               End If
612           End If
613           If fblnDatosValidos And lblnHabilitarFechaNacimiento And Trim(mskNacimientoEmergencia.ClipText) <> "" And Trim(txtNombreEmergencia.Text) = "" Then
614               fblnDatosValidos = False
615               MsgBox SIHOMsg(2) & vbCrLf & "Nombre emergencia", vbInformation + vbOKOnly, "Mensaje"
616               sstObj.Tab = 1
617               MyTabHeader1.TabCurrent = 1
618               txtNombreEmergencia.SetFocus
619           End If
              '-----------------------------------------------------------------------------
              ' RESPONSABLE DE LA CUENTA
              '-----------------------------------------------------------------------------
620           If fblnDatosValidos And Trim(txtNombreResponsable.Text) = "" And Mid(Trim(lblNombreResponsable.Caption), Len(Trim(lblNombreResponsable.Caption)), 1) = "*" Then
621               fblnDatosValidos = False
                  '¡No ha ingresado datos!
622               MsgBox SIHOMsg(2) & vbCrLf & "Nombre responsable", vbInformation + vbOKOnly, "Mensaje"
623               sstObj.Tab = 1
624               MyTabHeader1.TabCurrent = 1
625               txtNombreResponsable.SetFocus
626           End If
627           If fblnDatosValidos And Trim(txtNombreResponsable.Text) = "" And cboParentescoFamiliarResponsable.Text = "PADRE" Then
628               fblnDatosValidos = False
                  '¡No ha ingresado datos!
629               MsgBox SIHOMsg(2) & vbCrLf & "Nombre responsable", vbInformation + vbOKOnly, "Mensaje"
630               sstObj.Tab = 1
631               MyTabHeader1.TabCurrent = 1
632               txtNombreResponsable.SetFocus
633           End If
634           If fblnDatosValidos And Trim(txtDomicilioResponsable.Text) = "" And Mid(Trim(lblDomicilioResponsable.Caption), Len(Trim(lblDomicilioResponsable.Caption)), 1) = "*" Then
635               fblnDatosValidos = False
                  '¡No ha ingresado datos!
636               MsgBox SIHOMsg(2) & vbCrLf & "Domicilio responsable", vbInformation + vbOKOnly, "Mensaje"
637               sstObj.Tab = 1
638               MyTabHeader1.TabCurrent = 1
639               txtDomicilioResponsable.SetFocus
640           End If
641           If fblnDatosValidos And Trim(txtTelefonoResponsable.Text) = "" And Mid(Trim(lblTelefonoResponsable.Caption), Len(Trim(lblTelefonoResponsable.Caption)), 1) = "*" Then
642               fblnDatosValidos = False
                  '¡No ha ingresado datos!
643               MsgBox SIHOMsg(2) & vbCrLf & "Teléfono responsable", vbInformation + vbOKOnly, "Mensaje"
644               sstObj.Tab = 1
645               MyTabHeader1.TabCurrent = 1
646               txtTelefonoResponsable.SetFocus
647           End If
648           If fblnDatosValidos And cboParentescoFamiliarResponsable.ListIndex = -1 And Mid(Trim(lblParentescoResponsable.Caption), Len(Trim(lblParentescoResponsable.Caption)), 1) = "*" Then
649               fblnDatosValidos = False
                  '¡No ha ingresado datos!
650               MsgBox SIHOMsg(2) & vbCrLf & "Parentesco responsable", vbInformation + vbOKOnly, "Mensaje"
651               sstObj.Tab = 1
652               MyTabHeader1.TabCurrent = 1
653               cboParentescoFamiliarResponsable.SetFocus
654           End If
655           If cboParentescoFamiliarResponsable.ListIndex <> -1 Then lngIdparentescoResponsable = cboParentescoFamiliarResponsable.ItemData(cboParentescoFamiliarResponsable.ListIndex)
656           If fblnDatosValidos And lblnHabilitarFechaNacimiento And Trim(txtNombreResponsable.Text) <> "" And mskNacimientoResponsable.Enabled = True And Trim(mskNacimientoResponsable.ClipText) = "" Then
657               If lngIdparentescoResponsable <> llngCveParentescoOtro Then
658                   fblnDatosValidos = False
                      '¡No ha ingresado datos!
659                   MsgBox SIHOMsg(2) & vbCrLf & "Fecha nacimiento responsable", vbInformation + vbOKOnly, "Mensaje"
660                   sstObj.Tab = 1
661                   MyTabHeader1.TabCurrent = 1
662                   If fblnCanFocus(mskNacimientoResponsable) Then mskNacimientoResponsable.SetFocus
663               End If
664           End If
665           If fblnDatosValidos And lblnHabilitarFechaNacimiento And Trim(mskNacimientoResponsable.ClipText) <> "" Then
666               If Not fblnFechaNacimientoValida(mskNacimientoResponsable.Text) Then
667                   fblnDatosValidos = False
668                   sstObj.Tab = 1
669                   MyTabHeader1.TabCurrent = 1
670                   If fblnCanFocus(mskNacimientoResponsable) Then mskNacimientoResponsable.SetFocus
671               End If
672           End If
673           If fblnDatosValidos And lblnHabilitarFechaNacimiento And Trim(mskNacimientoResponsable.ClipText) <> "" And Trim(txtNombreResponsable.Text) = "" Then
674               fblnDatosValidos = False
675               MsgBox SIHOMsg(2) & vbCrLf & "Nombre responsable", vbInformation + vbOKOnly, "Mensaje"
676               sstObj.Tab = 1
677               MyTabHeader1.TabCurrent = 1
678               txtNombreResponsable.SetFocus
679           End If
680           If fblnDatosValidos And Trim(txtLugarTrabajoResponsable.Text) = "" And Mid(Trim(lblLugarTrabajo.Caption), Len(Trim(lblLugarTrabajo.Caption)), 1) = "*" Then
681               fblnDatosValidos = False
                  '¡No ha ingresado datos!
682               MsgBox SIHOMsg(2) & vbCrLf & "Lugar de trabajo responsable", vbInformation + vbOKOnly, "Mensaje"
683               sstObj.Tab = 1
684               MyTabHeader1.TabCurrent = 1
685               txtLugarTrabajoResponsable.SetFocus
686           End If
              '-----------------------------------------------------------------------------
              ' MÉDICOS
              '-----------------------------------------------------------------------------
             
687           If fblnDatosValidos And lblMedicoEmergencias.Enabled And cboMedicoEmergencias.ListIndex = -1 And Mid(Trim(lblMedicoEmergencias.Caption), Len(Trim(lblMedicoEmergencias.Caption)), 1) = "*" Then
688               fblnDatosValidos = False
                  '¡No ha ingresado datos!
689               MsgBox SIHOMsg(2) & vbCrLf & "Médico emergencias", vbInformation + vbOKOnly, "Mensaje"
690               sstObj.Tab = 1
691               MyTabHeader1.TabCurrent = 1
692               cboMedicoEmergencias.SetFocus
693           End If
694           If fblnDatosValidos And lblMedicoCargo.Enabled And cboMedicoCargo.ListIndex = -1 And Mid(Trim(lblMedicoCargo.Caption), Len(Trim(lblMedicoCargo.Caption)), 1) = "*" Then
695               fblnDatosValidos = False
                  '¡No ha ingresado datos!
696               MsgBox SIHOMsg(2) & vbCrLf & "Médico a cargo", vbInformation + vbOKOnly, "Mensaje"
697               sstObj.Tab = 1
698               MyTabHeader1.TabCurrent = 1
699               cboMedicoCargo.SetFocus
700           End If
701           If cboMedicoCargo.ListIndex > -1 Then
702               If fblnDatosValidos And lblMedicoCargo.Enabled And cboMedicoCargo.ItemData(cboMedicoCargo.ListIndex) < 0 And Mid(Trim(lblMedicoCargo.Caption), Len(Trim(lblMedicoCargo.Caption)), 1) = "*" Then
703                   fblnDatosValidos = False
                      'No se puede asignar el médico seleccionado
704                   MsgBox SIHOMsg(1035) & vbCrLf, vbInformation + vbOKOnly, "Mensaje"
705                   sstObj.Tab = 1
706                   MyTabHeader1.TabCurrent = 1
707                   cboMedicoCargo.ListIndex = 0
708                   cboMedicoCargo.SetFocus
709               End If
710           End If
              '-----------------------------------------------------------------------------
              ' DIAGNÓSTICO PRELIMINAR AL INGRESO
              '-----------------------------------------------------------------------------
711           If fblnDatosValidos And fraDiagnostico.Enabled And Trim(txtDiagnostico.Text) = "" And Mid(Trim(fraDiagnostico.Caption), Len(Trim(fraDiagnostico.Caption)), 1) = "*" Then
712               fblnDatosValidos = False
                  '¡No ha ingresado datos!
713               MsgBox SIHOMsg(2) & vbCrLf & "Diagnóstico", vbInformation + vbOKOnly, "Mensaje"
714               sstObj.Tab = 1
715               MyTabHeader1.TabCurrent = 1
716               cmdBuscarDiagnostico.SetFocus
717           End If
             
              '-----------------------------------------------------------------------------
              ' ASIGNACIÓN DE CUARTO
              '-----------------------------------------------------------------------------
718           If fblnDatosValidos And fraAsignacionCuarto.Enabled Then
719               vlblnSeleccionoCuarto = False
720               For vllngContador = 1 To grdCuarto.Rows - 1
721                   If Trim(grdCuarto.TextMatrix(vllngContador, 0)) = ">" Then
722                       vlblnSeleccionoCuarto = True
723                       Exit For
724                   End If
725               Next vllngContador
726               If Not vlblnSeleccionoCuarto Then
727                   fblnDatosValidos = False
                      '¡No ha ingresado datos!
728                   MsgBox SIHOMsg(2) & vbCrLf & "Cuarto", vbInformation + vbOKOnly, "Mensaje"
729                   sstObj.Tab = 1
730                   MyTabHeader1.TabCurrent = 1
731                   cmdSugerirCuarto.SetFocus
732               End If
733           End If
              
              'Si se hace un cambio a ambulatorio el paciente debe estar en un cuarto no censable
734           If fblnDatosValidos And Val(txtCuentaInterno.Text) <> 0 And cboTipoIngreso.List(cboTipoIngreso.ListIndex) = vlstrTipoIngresoAmbulatorio Then
735               vlstrSentencia = "select AdCuarto.intCensable From AdAdmision inner join AdCuarto on Trim(AdAdmision.VCHNUMCUARTO) = Trim(AdCuarto.VCHNUMCUARTO) where AdAdmision.NUMNUMCUENTA = " & txtCuentaInterno.Text
736               Set rsCuarto = frsRegresaRs(vlstrSentencia)
737               If rsCuarto.RecordCount > 0 Then
738                   If rsCuarto!intCensable = 0 Then
                          'Asigne al paciente a un cuarto no censable antes de cambiar al tipo de ingreso ambulatorio.
739                       MsgBox SIHOMsg(708), vbOKOnly + vbInformation, "Mensaje"
740                       fblnDatosValidos = False
741                   End If
742               Else
743                   vlstrSentencia = "Select intCensable From AdCuarto Where intCveCuarto = " & CStr(RSAdSelCuartoApropiado!ClaveCuarto)
744                   Set rsCuarto = frsRegresaRs(vlstrSentencia)
745                   If rsCuarto.RecordCount > 0 Then
746                       If rsCuarto!intCensable = 0 Then
                              'Asigne al paciente a un cuarto no censable antes de cambiar al tipo de ingreso ambulatorio.
747                           MsgBox SIHOMsg(708), vbOKOnly + vbInformation, "Mensaje"
748                           fblnDatosValidos = False
749                       End If
750                   End If
751               End If
752               rsCuarto.Close
753           End If
              
754           If fblnDatosValidos And fraAsignacionCuarto.Enabled Then
755               If Not fblnVerficaLicenciaCuartos(RSAdSelCuartoApropiado!NumeroCuarto) Then
                      'El número de licencias permitidas en la admisión de pacientes ha llegado a su límite
756                   MsgBox SIHOMsg(975), vbOKOnly + vbExclamation, "Mensaje"
757                   fblnDatosValidos = False
758               End If
759           End If
              
760           If fblnDatosValidos And vlblnDebeCapturarCuarto Then
761               fblnDatosValidos = False
762           End If
              
              '-----------------------------------------------------------------------------
              ' Validacion medicos que manejan paquetes pacientes internos
              '-----------------------------------------------------------------------------
763           If cboMedicoCargo.ListIndex > -1 And vgblnAsignarPaqueteAdmision Then
764               If fblnDatosValidos And lblMedicoCargo.Enabled And Mid(Trim(lblMedicoCargo.Caption), Len(Trim(lblMedicoCargo.Caption)), 1) = "*" And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCvePrevio Then
765                   pValidarPaquetesMedico cboMedicoCargo.ItemData(cboMedicoCargo.ListIndex), vllngEmpresa
766               End If
767           End If
              '-----------------------------------------------------------------------------
              ' Validacion tipo ingreso prepago, sólo 1 prepago activo
              '-----------------------------------------------------------------------------
768           If fblnDatosValidos And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCvePrepago And vlblnPrepagoActivo Then
                   ' El paciente ya tiene una cuenta de prepago activa
769                MsgBox SIHOMsg(1492), vbOKOnly + vbInformation, "Mensaje"
770                fblnDatosValidos = False
771           End If
          
              '================================= VALIDACIONES PARA INTERFAZ DE WS =================================
772           If fblnDatosValidos Then
                  
                  'Se valida si el paciente tiene licencia para el ingreso por WS
773               If vglngCveInterfazWS > 0 And ((cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveInternamientoNormal Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCvePrevio Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveInternoFueUrgencias)) Then
                      'Se valida la información requerida para un paciente de tipo "INTERNAMIENTO NORMAL" o "PREVIO" o "INTERNO FUÉ URGENCIAS"
                      
                          ' - Número de proveedor AXA
774                           Set rsInterfazWS = frsEjecuta_SP(CStr(vgintClaveEmpresaContable), "SP_GNSELCONFIGINTERFAZWS")
775                           If fblnDatosValidos And rsInterfazWS!CVEPROVEEDOR = "" Then
776                               fblnDatosValidos = False
                                  '¡No ha ingresado datos!
777                               MsgBox "No se ha configurado la clave de proveedor AXA para el uso de la interfaz con el web service.", vbInformation + vbOKOnly, "Mensaje"
778                           End If
                              
                          ' - Número de contrato AXA
779                           Set rsInterfazWS = frsEjecuta_SP(cboEmpresa.ItemData(cboEmpresa.ListIndex) & "|" & "CONTRATO", "SP_SISELEQUIVALENCIA")
780                           If fblnDatosValidos And rsInterfazWS.RecordCount = 0 Then
781                               fblnDatosValidos = False
                                  '¡No ha ingresado datos!
782                               MsgBox "No se ha configurado la clave de contrato configurada para la empresa del paciente.", vbInformation + vbOKOnly, "Mensaje"
783                           End If
                          
                          ' - Número de control (número de nómina AXA)
784                           If fblnDatosValidos And lblNumeroControl.Enabled And Trim(txtNumeroControl.Text) = "" Then
785                               fblnDatosValidos = False
                                  '¡No ha ingresado datos!
786                               MsgBox SIHOMsg(2) & vbCrLf & "No se ha configurado el número de control del paciente.", vbInformation + vbOKOnly, "Mensaje"
787                               sstObj.Tab = 0
788                               MyTabHeader1.TabCurrent = 0
789                               txtNumeroControl.SetFocus
790                           End If
                          
                          ' - Médico a cargo (Ya está validado previamente)
                          
                          '- Validaciones especificas para ingreso de tipo "INTERNO FUÉ URGENCIAS"
      '                        If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveInternoFueUrgencias Then
      '                            ' - Número o nombre de la habitación (Ya está validado previamente)
      '
      '                            ' - Número de autorización ¿general o especial? (Ya está validado previamente)
      '                        End If
                          
791               End If
792           End If
              '============================================================================================
          
793       Else
          '----------------------------------------------------------------------------
          'Validaciones solo para externos
          '----------------------------------------------------------------------------
              'Si es EX, CC, TS y no se mandó llamar desde CC-Honorarios médicos
794           If fblnDatosValidos And ((vgintNumeroModulo = 5 Or vgintNumeroModulo = 17 Or vgintNumeroModulo = 7 Or vgintNumeroModulo = 9) And Not blnHonorariosCC And cboMedicoEmergencias.ListIndex < 0) Then
                  'Se agrego validación para poner obligatoria la procedencia
                  If fblnDatosValidos And cboProcedencia.ListIndex < 0 And (cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveExterno Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveConsultaExterna) Then
                      fblnDatosValidos = False
                      '¡No ha ingresado datos!
                      MsgBox SIHOMsg(2) & vbCrLf & "Procedencia", vbInformation + vbOKOnly, "Mensaje"
                      sstObj.Tab = 0
                      MyTabHeader1.TabCurrent = 0
                      cboProcedencia.SetFocus
                  End If
                  'Que tenga médico
795               If fblnDatosValidos And lblMedicoEmergencias.Enabled And cboMedicoEmergencias.ListIndex = -1 And Mid(Trim(lblMedicoEmergencias.Caption), Len(Trim(lblMedicoEmergencias.Caption)), 1) = "*" Then
796                   fblnDatosValidos = False
                      '¡No ha ingresado datos!
797                   MsgBox SIHOMsg(2) & vbCrLf & "Médico emergencias", vbInformation + vbOKOnly, "Mensaje"
798                   sstObj.Tab = 1
799                   MyTabHeader1.TabCurrent = 1
800                   cboMedicoEmergencias.SetFocus
801               End If
                  
802           End If
              
              '------------------------------------------------------------------------------------------
              ' Validación para que sea obligatorio poner el Médico cuando sea una Consulta Externa 20004
              '------------------------------------------------------------------------------------------
              If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveConsultaExterna Then
                  If fblnDatosValidos And lblMedicoEmergencias.Enabled And cboMedicoEmergencias.ListIndex = -1 And Mid(Trim(lblMedicoEmergencias.Caption), Len(Trim(lblMedicoEmergencias.Caption)), 1) = "*" Then
                      fblnDatosValidos = False
                       '¡No ha ingresado datos!
                      MsgBox SIHOMsg(2) & vbCrLf & "Médico consulta", vbInformation + vbOKOnly, "Mensaje"
                      sstObj.Tab = 1
                      MyTabHeader1.TabCurrent = 1
                      cboMedicoEmergencias.SetFocus
                  End If
              End If
              
              '-----------------------------------------------------------------------------
              ' Validacion medicos que manejan paquetes pacientes exernos
              '-----------------------------------------------------------------------------
      '        If fblnDatosValidos And vgblnAsignarPaqueteAdmision And (vgintNumeroModulo = 5 Or vgintNumeroModulo = 11) And cboMedicoEmergencias.ListIndex <> -1 Then
      '            pValidarPaquetesMedico cboMedicoEmergencias.ItemData(cboMedicoEmergencias.ListIndex), vllngEmpresa
      '        End If
                     
              '================================= VALIDACIONES PARA INTERFAZ DE WS =================================
803           If fblnDatosValidos Then
                  
                  'Se valida si el paciente tiene licencia para el ingreso por WS
804               If vglngCveInterfazWS > 0 And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias Then
                      'Se valida la información requerida para un paciente de tipo "URGENCIAS"
                      
      '                    ' - Número de proveedor AXA
      '                        Set rsInterfazWS = frsEjecuta_SP(cboEmpresa.ItemData(cboEmpresa.ListIndex) & "|" & "PROVEEDOR", "SP_SISELEQUIVALENCIA")
      '                        If fblnDatosValidos And rsInterfazWS.RecordCount = 0 Then
      '                            fblnDatosValidos = False
      '                            '¡No ha ingresado datos!
      '                            MsgBox SIHOMsg(2) & vbCrLf & "PROVEEDOR AXA", vbInformation + vbOKOnly, "Mensaje"
      '                        End If
                              
                          ' - Número de contrato AXA
805                           Set rsInterfazWS = frsEjecuta_SP(cboEmpresa.ItemData(cboEmpresa.ListIndex) & "|" & "CONTRATO", "SP_SISELEQUIVALENCIA")
806                           If fblnDatosValidos And rsInterfazWS.RecordCount = 0 Then
807                               fblnDatosValidos = False
                                  '¡No ha ingresado datos!
808                               MsgBox SIHOMsg(2) & vbCrLf & "No se ha configurado la clave de contrato configurada para la empresa del paciente.", vbInformation + vbOKOnly, "Mensaje"
809                           End If
                          
                          ' - Número de control (número de nómina AXA)
810                           If fblnDatosValidos And lblNumeroControl.Enabled And Trim(txtNumeroControl.Text) = "" Then
811                               fblnDatosValidos = False
                                  '¡No ha ingresado datos!
812                               MsgBox SIHOMsg(2) & vbCrLf & "No se ha configurado el número de control del paciente.", vbInformation + vbOKOnly, "Mensaje"
813                               txtNumeroControl.SetFocus
814                           End If
                          
                          ' - Médico de emergencias
815                           If fblnDatosValidos And lblMedicoEmergencias.Enabled And cboMedicoEmergencias.ListIndex = -1 And Mid(Trim(lblMedicoEmergencias.Caption), Len(Trim(lblMedicoEmergencias.Caption)), 1) = "*" Then
816                               fblnDatosValidos = False
                                  '¡No ha ingresado datos!
817                               MsgBox SIHOMsg(2) & vbCrLf & "Médico emergencias", vbInformation + vbOKOnly, "Mensaje"
818                               sstObj.Tab = 1
819                               MyTabHeader1.TabCurrent = 1
820                               cboMedicoEmergencias.SetFocus
821                           End If
                          
822               End If
823           End If
              '============================================================================================ interfaz
              
824       End If
          
825       If fblnDatosValidos Then
826           vllngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
827           vllngPersonaGrabaAXA = vllngPersonaGraba
828           fblnDatosValidos = vllngPersonaGraba <> 0
829       End If
              
830       If fblnDatosValidos And cboEmpresa.ListIndex > -1 Then
831           pAlertaLimiteCredito
832       End If
              
   Exit Function
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fblnDatosValidos" & " Linea:" & Erl()))
       Unload Me
End Function
Private Sub pValidarPaquetesMedico(lngCveMedico As Long, lngCveEmpresa As Long)
1     On Error GoTo NotificaError
          Dim rsMedicoPaquete As New ADODB.Recordset
          Dim lblnPaqueteAsignado As Boolean
          
2         Set rsMedicoPaquete = frsEjecuta_SP(lngCveMedico & "|" & vgintNumeroDepartamento, "Sp_AdSelMedicoPaquetesDepto")
3         If rsMedicoPaquete.RecordCount <> 0 Then
          ' si el medico maneja paquetes se valida que se seleccione para el paciente uno de los asignados al medico (aunque no es obligatorio indicar el paquete, si se selecciona debe corresponder a los asignados al medico)
4             If fblnPaquetesMedicoXtipoPac(lngCveMedico, cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex)) Then
              'si se manejan paquetes para el tipo de paciente seleccionado
5                 If cboPlanPaqueteCirugia.ListIndex = -1 Or (cboPlanPaqueteCirugia.ListIndex = 0 And OptPaqueteOtros(1).Value) Then
                      'si no se selecciono ni paquete ni otro, se manda un mensaje
                      'El médico seleccionado maneja paquetes con el hospital ¿Desea asignar un paquete?
6                     If MsgBox(SIHOMsg(1455), vbYesNo + vbQuestion, "Mensaje") = vbYes Then
7                         frmPaquetesMedico.glngIdPaquete = -1
8                         frmPaquetesMedico.pIniciar rsMedicoPaquete, "Seleccione el paquete.", cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex), lngCveEmpresa
9                         frmPaquetesMedico.Show vbModal
10                        If frmPaquetesMedico.glngIdPaquete <> -1 Then
11                            OptPaqueteOtros(0).Value = True
12                            cboPlanPaqueteCirugia.ListIndex = flngLocalizaCbo_new(cboPlanPaqueteCirugia, frmPaquetesMedico.glngIdPaquete)
13                            vldblPrecio = frmPaquetesMedico.gdblPrecio
14                        Else
15                            OptPaqueteOtros(1).Value = True
16                            cboPlanPaqueteCirugia.ListIndex = 0
17                        End If
18                    End If
19                Else
20                    If OptPaqueteOtros(0).Value Then
                          'si se seleccionó un paquete se valida que sea uno de los asignados al medico
21                        lblnPaqueteAsignado = False
22                        Do While Not rsMedicoPaquete.EOF
23                            If cboPlanPaqueteCirugia.ItemData(cboPlanPaqueteCirugia.ListIndex) = rsMedicoPaquete!Clave Then
24                                lblnPaqueteAsignado = True
25                            End If
26                            rsMedicoPaquete.MoveNext
27                        Loop
28                        If Not lblnPaqueteAsignado Then
29                            frmPaquetesMedico.glngIdPaquete = -1
30                            rsMedicoPaquete.MoveFirst
31                            frmPaquetesMedico.pIniciar rsMedicoPaquete, "El paquete seleccionado no es parte de los paquetes que maneja el médico, seleccione un paquete de la lista.", cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex), lngCveEmpresa
32                            frmPaquetesMedico.Show vbModal
33                            If frmPaquetesMedico.glngIdPaquete <> -1 Then
34                                OptPaqueteOtros(0).Value = True
35                                cboPlanPaqueteCirugia.ListIndex = flngLocalizaCbo_new(cboPlanPaqueteCirugia, frmPaquetesMedico.glngIdPaquete)
36                                vldblPrecio = frmPaquetesMedico.gdblPrecio
37                            Else
38                                OptPaqueteOtros(1).Value = True
39                                cboPlanPaqueteCirugia.ListIndex = 0
40                            End If
41                        End If
42                    End If
43                End If
44            End If
45        End If

    Exit Sub
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pValidarPaquetesMedico" & " Linea:" & Erl()))
End Sub

Private Function fblnPaquetesMedicoXtipoPac(lngCveMedico As Long, lngCveTipoPac As Long) As Boolean
On Error GoTo NotificaError
    Dim rs As New ADODB.Recordset
    
    fblnPaquetesMedicoXtipoPac = False
    Set rs = frsRegresaRs("select * from HOMEDICOTIPOPACPAQUETE where intCveMedico = " & lngCveMedico & " and intCveTipoPaciente = " & lngCveTipoPac)
    If rs.RecordCount <> 0 Then
        fblnPaquetesMedicoXtipoPac = True
    End If

Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fblnPaquetesMedicoXtipoPac"))
End Function

Private Function fblnFechaNacimientoValida(fecha As String)
On Error GoTo NotificaError
    fblnFechaNacimientoValida = True
    If Not IsDate(fecha) Then
        fblnFechaNacimientoValida = False
        '¡Fecha no válida!, formato de fecha dd/mm/aaaa
        MsgBox SIHOMsg(29), vbOKOnly + vbInformation, "Mensaje"
    Else
        If CDate(fecha) > fdtmServerFecha Then
            fblnFechaNacimientoValida = False
            '¡La fecha debe ser menor o igual a la del sistema!
            MsgBox SIHOMsg(40), vbOKOnly + vbInformation, "Mensaje"
        End If
    End If
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fblnFechaNacimientoValida"))
End Function

Private Function fblnDatosValidosCancelAdmision() As Boolean
    On Error GoTo NotificaError
    Dim rsCargos As New ADODB.Recordset
    
    fblnDatosValidosCancelAdmision = True

    vlstrSentencia = "SELECT * FROM pvCargo WHERE chrTipoPaciente = 'I' and intMovPaciente = " & Val(txtCuentaInterno.Text)
    Set rsCargos = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
    
    If rsCargos.RecordCount <> 0 Then
        fblnDatosValidosCancelAdmision = False
        'Este paciente tiene cargos asignados. Favor de verificarlo en caja.
        MsgBox SIHOMsg(605), vbOKOnly + vbInformation, "Mensaje"
        sstObj.Tab = 0
        MyTabHeader1.TabCurrent = 0
        txtNombre.SetFocus
    End If

    rsCargos.Close

Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fblnDatosValidosCancelAdmision"))
    Unload Me
End Function

Private Function fblnDatosValidosCuenta()
1     On Error GoTo NotificaError
      Dim blnSeleccionoCuarto As Boolean
      Dim lngContador As Long
      Dim lngIdparentescoResponsable As Long
      Dim llngEmpresa As Long
      Dim rsPaquete As New ADODB.Recordset
          Dim rs As New ADODB.Recordset
          Dim rs2 As New ADODB.Recordset
          Dim vlstrSentencia2 As String
2         vlblnUsaFarmacia = False
          
          
3         vlstrSentencia2 = "select * from GNPARAMETROSFARMACIA where TNYCLAVEEMPRESAHOSPITAL = " & vgintClaveEmpresaContable & " and BITACTIVO = 1"
4         Set rs = frsRegresaRs(vlstrSentencia2)
          
          
5         If rs.RecordCount = 0 Then
              
6             vlblnUsaFarmacia = False
          
7         Else
          
8             Set rs2 = frsRegresaRs("SELECT * FROM SIPARAMETRO WHERE VCHNOMBRE = 'INTCVEDEPARTAMENTOADMISION' and INTCVEEMPRESACONTABLE = " & rs!TNYCLAVEEMPRESAFARMACIA)
          
9             If rs2.RecordCount <> 0 Then
10                vlblnUsaFarmacia = True
11            Else
12                fblnDatosValidosCuenta = False
13                MsgBox SIHOMsg(1629), vbOKOnly + vbInformation, "Mensaje"
14                Exit Function
15            End If
          
16        End If


      'Validaciones de datos necesarios para abrir una cuenta
17        lngIdparentescoResponsable = -1
18        fblnDatosValidosCuenta = True
          'Se agrego validación para poner obligatoria la procedencia
          If fblnDatosValidosCuenta And cboProcedencia.ListIndex < 0 And (cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveExterno Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveConsultaExterna) Then
              fblnDatosValidosCuenta = False
             '¡No ha ingresado datos!
             MsgBox SIHOMsg(2) & vbCrLf & "Procedencia", vbInformation + vbOKOnly, "Mensaje"
             sstObj.Tab = 0
             MyTabHeader1.TabCurrent = 0
             cboProcedencia.SetFocus
          End If
          'Fecha nacimiento emergencia
19        If fblnDatosValidosCuenta And lblnHabilitarFechaNacimiento And Trim(txtNombreEmergencia.Text) <> "" And Trim(mskNacimientoEmergencia.ClipText) = "" And mskNacimientoEmergencia.Enabled = True Then
20            fblnDatosValidosCuenta = False
              '¡No ha ingresado datos!
21            MsgBox SIHOMsg(2) & vbCrLf & "Fecha nacimiento emergencia", vbInformation + vbOKOnly, "Mensaje"
22            sstObj.Tab = 1
23            MyTabHeader1.TabCurrent = 1
24            If fblnCanFocus(mskNacimientoEmergencia) Then mskNacimientoEmergencia.SetFocus
25        End If
26        If fblnDatosValidosCuenta And lblnHabilitarFechaNacimiento And Trim(mskNacimientoEmergencia.ClipText) <> "" Then
27            If Not fblnFechaNacimientoValida(mskNacimientoEmergencia.Text) Then
28                fblnDatosValidosCuenta = False
29                sstObj.Tab = 1
30                MyTabHeader1.TabCurrent = 1
31                If fblnCanFocus(mskNacimientoEmergencia) Then mskNacimientoEmergencia.SetFocus
32            End If
33        End If
34        If fblnDatosValidosCuenta And lblnHabilitarFechaNacimiento And Trim(mskNacimientoEmergencia.ClipText) <> "" And Trim(txtNombreEmergencia.Text) = "" Then
35            fblnDatosValidosCuenta = False
36            MsgBox SIHOMsg(2) & vbCrLf & "Nombre emergencia", vbInformation + vbOKOnly, "Mensaje"
37            sstObj.Tab = 1
38            MyTabHeader1.TabCurrent = 1
39            txtNombreEmergencia.SetFocus
40        End If
          'fecha nacimiento responsable
41        If cboParentescoFamiliarResponsable.ListIndex <> -1 Then lngIdparentescoResponsable = cboParentescoFamiliarResponsable.ItemData(cboParentescoFamiliarResponsable.ListIndex)
42        If fblnDatosValidosCuenta And lblnHabilitarFechaNacimiento And Trim(txtNombreResponsable.Text) <> "" And mskNacimientoResponsable.Enabled = True And Trim(mskNacimientoResponsable.ClipText) = "" Then
43            If lngIdparentescoResponsable <> llngCveParentescoOtro Then
44                fblnDatosValidosCuenta = False
                  '¡No ha ingresado datos!
45                MsgBox SIHOMsg(2) & vbCrLf & "Fecha nacimiento responsable", vbInformation + vbOKOnly, "Mensaje"
46                sstObj.Tab = 1
47                MyTabHeader1.TabCurrent = 1
48                If fblnCanFocus(mskNacimientoResponsable) Then mskNacimientoResponsable.SetFocus
49            End If
50        End If
51        If fblnDatosValidosCuenta And lblnHabilitarFechaNacimiento And Trim(mskNacimientoResponsable.ClipText) <> "" Then
52            If Not fblnFechaNacimientoValida(mskNacimientoResponsable.Text) Then
53                fblnDatosValidosCuenta = False
54                sstObj.Tab = 1
55                MyTabHeader1.TabCurrent = 1
56                If fblnCanFocus(mskNacimientoResponsable) Then mskNacimientoResponsable.SetFocus
57            End If
58        End If
59        If fblnDatosValidosCuenta And lblnHabilitarFechaNacimiento And Trim(mskNacimientoResponsable.ClipText) <> "" And Trim(txtNombreResponsable.Text) = "" Then
60            fblnDatosValidosCuenta = False
61            MsgBox SIHOMsg(2) & vbCrLf & "Nombre responsable", vbInformation + vbOKOnly, "Mensaje"
62            sstObj.Tab = 1
63            MyTabHeader1.TabCurrent = 1
64            txtNombreResponsable.SetFocus
65        End If
          
66        If vlstrTipoTipoPaciente = "CO" Then
67            If fblnDatosValidosCuenta And cboEmpresa.ListIndex < 0 Then
68                fblnDatosValidosCuenta = False
                  '¡No ha ingresado datos!
69                MsgBox SIHOMsg(2) & vbCrLf & "Empresa", vbInformation + vbOKOnly, "Mensaje"
70                sstObj.Tab = 0
71                MyTabHeader1.TabCurrent = 0
72                If fblnCanFocus(cboEmpresa) Then cboEmpresa.SetFocus
73            End If
74        End If
          
          'Que se seleccione médico cuando no son los módulos de Laboratorio o Servicios auxiliares:
75        If fblnDatosValidosCuenta And (cboMedicoEmergencias.ListCount = 0 Or cboMedicoEmergencias.ListIndex < 0) _
          And cgstrModulo <> "LA" And cgstrModulo <> "SA" And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias Then
76            fblnDatosValidosCuenta = False
              '¡No ha ingresado datos!
77            MsgBox SIHOMsg(2) & vbCrLf & "Médico emergencias", vbInformation + vbOKOnly, "Mensaje"
78            sstObj.Tab = 1
79            MyTabHeader1.TabCurrent = 1
80            cboMedicoEmergencias.SetFocus
81        End If
          
          'Que se haya seleccionado cuarto si es de tipo Urgencias y se marcó para asignar cuarto
82        If fblnDatosValidosCuenta And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias And chkAsignarCuarto.Value = 1 Then
              
83            blnSeleccionoCuarto = False
84            For lngContador = 1 To grdCuarto.Rows - 1
85                If Trim(grdCuarto.TextMatrix(lngContador, 0)) = ">" Then
86                    blnSeleccionoCuarto = True
87                    Exit For
88                End If
89            Next lngContador
90            If Not blnSeleccionoCuarto Then
91                fblnDatosValidosCuenta = False
                  '¡No ha ingresado datos!
92                MsgBox SIHOMsg(2) & vbCrLf & "Cuarto", vbInformation + vbOKOnly, "Mensaje"
93                sstObj.Tab = 1
94                MyTabHeader1.TabCurrent = 1
95                cmdSugerirCuarto.SetFocus
96            End If
             
97        End If
          
98        If fblnDatosValidosCuenta And chkAsignarCuarto.Value = 1 Then
99            If Not fblnVerficaLicenciaCuartosexternos(RSAdSelCuartoApropiado!NumeroCuarto) Then
                  'El número de licencias permitidas en la admisión de pacientes externos ha llegado a su límite
100               MsgBox SIHOMsg(976), vbOKOnly + vbExclamation, "Mensaje"
101               fblnDatosValidosCuenta = False
102           End If
103       End If
          
          'Validacion medicos que manejan paquetes
104       If fblnDatosValidosCuenta And vgblnAsignarPaqueteAdmision And cboMedicoEmergencias.ListIndex <> -1 And (cgstrModulo = "AD" Or cgstrModulo = "EX") Then
105           If cboEmpresa.ListIndex <> -1 Then
106               llngEmpresa = cboEmpresa.ItemData(cboEmpresa.ListIndex)
107           End If
108           pValidarPaquetesMedico cboMedicoEmergencias.ItemData(cboMedicoEmergencias.ListIndex), llngEmpresa
109       End If
          
110       lblnAsignarPaquete = False
111       If (vgblnAsignarPaqueteAdmision And cgstrModulo <> "AD" And cgstrModulo <> "EX") Then
112           If OptPaqueteOtros(0).Value And cboPlanPaqueteCirugia.ListIndex > -1 Then
113               Set rsPaquete = frsRegresaRs("select * from PvPaquetePaciente where chrtipopaciente = 'E' and intMovPaciente = " + IIf(Val(txtCuentaExterno.Text) = 0, "0", txtCuentaExterno.Text) + " and intNumPaquete = " + CStr(cboPlanPaqueteCirugia.ItemData(cboPlanPaqueteCirugia.ListIndex)))
114               If rsPaquete.RecordCount = 0 Or Val(txtCuentaExterno.Text) = 0 Then 'que la cuenta sea cero, porque en SA al guardar con un paquete seleccionado, lo agrega a PVpaquetePaciente con cuenta cero :S
115                   If MsgBox(SIHOMsg(1460), vbYesNo + vbQuestion, "Mensaje") = vbYes Then
116                       lblnAsignarPaquete = True
117                   End If
118               End If
119           End If
120       End If
          
121       If fblnDatosValidosCuenta And vllngPersonaGraba = 0 Then
122           vllngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
123           fblnDatosValidosCuenta = vllngPersonaGraba <> 0
124       End If
          
          'si es tipo de ingreso Consulta externa, deberá pedir el Lugar donde ingresó.
125       If fblnDatosValidosCuenta And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveConsultaExterna _
          And (cboDeptoIngreso.ListCount = 0 Or cboDeptoIngreso.ListIndex < 0) And cboDeptoIngreso.Enabled Then
126            fblnDatosValidosCuenta = False
              '¡No ha ingresado datos!
127           MsgBox SIHOMsg(2) & vbCrLf & "Lugar de ingreso", vbInformation + vbOKOnly, "Mensaje"
128           sstObj.Tab = 0
129           MyTabHeader1.TabCurrent = 0
130           cboDeptoIngreso.SetFocus
131       End If

   Exit Function
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fblnDatosValidosCancelAdmision" & " Linea:" & Erl()))
End Function

Private Sub cmdHonorarios_Click()
On Error GoTo NotificaError
'Si el paciente tiene paquete, o se le asigna un paquete debe habilitar el boton, mientras no
    Dim rsHonorarios As ADODB.Recordset
    Dim rsPaqueteCirugia As ADODB.Recordset
    Dim strSentencia As String
    Dim lngNumPaquete As Long
    
    lngNumPaquete = cboPlanPaqueteCirugia.ItemData(cboPlanPaqueteCirugia.ListIndex)

        strSentencia = "SELECT count(*) numero From PVPAQUETEHONORARIOS  WHERE PVPAQUETEHONORARIOS.INTCVEPAQUETE =" & lngNumPaquete
        Set rsHonorarios = frsRegresaRs(strSentencia)
        If rsHonorarios!numero > 0 Then
            frmHonorariosCirugia.lngNumPaquete = lngNumPaquete
            frmHonorariosCirugia.blnSelecciona = False
            Set rsPaqueteCirugia = frsRegresaRs("Select BITSELECCIONARHONORARIOS from PvPaquete where intnumpaquete= " & lngNumPaquete)
            'Si el paciente es prepago, el paquete es basico(pide seleccionar), y es de convenio, permitira seleccionar los honorarios
            If vlstrIngresoSeleccionado = vlstrTipoIngresoPrepago And vlblnUtilizaConvenio Then
                
                If rsPaqueteCirugia!bitSeleccionarHonorarios = 1 And txtCuentaInterno.Text <> "" Then
                    frmHonorariosCirugia.strNumCuenta = txtCuentaInterno.Text
                Else
                    frmHonorariosCirugia.strNumCuenta = ""
                End If
            Else
                frmHonorariosCirugia.strNumCuenta = ""
            End If
            
            If rsPaqueteCirugia!bitSeleccionarHonorarios = 1 And txtCuentaInterno.Text <> "" Then
                    frmHonorariosCirugia.strNumCuenta = txtCuentaInterno.Text
            Else
                    frmHonorariosCirugia.strNumCuenta = ""
            End If
            frmHonorariosCirugia.Show vbModal
            
        Else
            MsgBox SIHOMsg(13), vbExclamation, "Mensaje"
        End If
 Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdHonorarios_Click"))
        
End Sub

Private Sub cmdImprimir_Click()
1         On Error GoTo NotificaError
          Dim vlrptReporte As CRAXDRT.Report
          Dim vllngContador As Long
          Dim rsAdDocumentoIngreso As New ADODB.Recordset
          Dim rsobservacion As New ADODB.Recordset
          Dim subreporteobservaciones As CRAXDRT.Report
          Dim SQL As String
          Dim rsReporte As ADODB.Recordset
          Dim vlstrSentencia As String
          
2         If lstDocumentos.ListCount <> 0 Then
3             vllngContador = 0
4             Do While vllngContador <= lstDocumentos.ListCount - 1
                  
5                 If lstDocumentos.Selected(vllngContador) Then
                  
6                     If Trim(lstDocumentos.List(vllngContador)) = "SERVICIO DE URGENCIAS" And lstDocumentos.ItemData(vllngContador) = 0 Then
                          
7                         pImprimeServicioUrgencias IIf(chkVistaPreliminar.Value = 1, "P", "I")
                          
8                     ElseIf lstDocumentos.ItemData(vllngContador) > 0 Then
                      
9                         vlstrSentencia = "select * from AdDocumentoIngreso where intConsecutivo = " & Str(lstDocumentos.ItemData(vllngContador))
10                        Set rsAdDocumentoIngreso = frsRegresaRs(vlstrSentencia)
11                        If rsAdDocumentoIngreso.RecordCount <> 0 Then
                              
12                            If Trim(rsAdDocumentoIngreso!vchNombreReporteCrystal) <> "" Then
13                                pInstanciaReporte vlrptReporte, rsAdDocumentoIngreso!vchNombreReporteCrystal
14                                vlrptReporte.DiscardSavedData
15                                Set rsReporte = frsEjecuta_SP(Val(txtExpedienteInterno.Text) & "|" & IIf(vlstrTipoPacienteConsultado = "I", vllngIngresoConsultado, vglngCuentaPaciente) & "|" & UCase(Trim(vgstrNombreHospitalCH)) & "|" & UCase(Trim(rsAdDocumentoIngreso!VCHNOMBREDOCUMENTO)) & "|" & vgintClaveEmpresaContable & "|" & vlstrTipoPacienteConsultado, rsAdDocumentoIngreso!vchStoredProcedure)
16                                If rsReporte.EOF Then
17                                    MsgBox SIHOMsg(13), vbInformation, "Mensaje"
18                                Else
19                                    If chkVistaPreliminar.Value = 1 Then
20                                        pImprimeReporte vlrptReporte, rsReporte, "P", rsAdDocumentoIngreso!VCHNOMBREDOCUMENTO
21                                    Else
22                                        If MsgBox(SIHOMsg(587) & " " & Trim(rsAdDocumentoIngreso!VCHNOMBREDOCUMENTO) & "?", vbQuestion + vbYesNo, "Mensaje") = vbYes Then
23                                            pImprimeReporte vlrptReporte, rsReporte, "I", rsAdDocumentoIngreso!VCHNOMBREDOCUMENTO, , rsAdDocumentoIngreso!intCopias
24                                        End If
25                                    End If
26                                End If
27                                rsReporte.Close
28                            End If
                              
29                        End If
30                    Else
31                        pImprimePulsera lstDocumentos.ItemData(vllngContador) * -1, IIf(vlstrTipoPacienteConsultado = "I", vllngIngresoConsultado, vglngCuentaPaciente), vlstrTipoPacienteConsultado
32                    End If
33                End If
34                vllngContador = vllngContador + 1
35            Loop
36        End If
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdImprimir_Click" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub cmdObservaciones_Click()
    On Error GoTo NotificaError

    txtObservaciones.Text = vgstrObservacionesIngreso
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdObservaciones_Click"))
    Unload Me
End Sub

Private Sub Cmdrequisitos_Click()
On Error GoTo NotificaError

    If cboEmpresa.ListIndex <> -1 Then
        Frmingresoyfirmas.intcveempresa = cboEmpresa.ItemData(cboEmpresa.ListIndex)
        Frmingresoyfirmas.vchnombreempresa = cboEmpresa.Text
    Else
        Frmingresoyfirmas.intcveempresa = 0
    End If
    
    Frmingresoyfirmas.Show vbModal
    If cboEmpresa.Enabled = True Then
        cboEmpresa.SetFocus
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":Cmdrequisitos_Click"))
    Unload Me
End Sub

Private Sub Cmdrequisitos_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
End Sub

Private Sub cmdSugerirCuarto_Click()
1     On Error GoTo NotificaError
          Dim vllngEmpresaTipoPaciente As Long
          Dim vllngEdad As Long
              
2         If RSAdSelCuartoApropiado.State = 1 Then
3             RSAdSelCuartoApropiado.Close
4         End If
          
5         If Not IsDate(mskFechaNacimiento.Text) Then
              'Faltan datos para una mejor sugerencia del cuarto. Dato:
6             MsgBox Trim(SIHOMsg(560)) & " " & Trim(mskFechaNacimiento.ToolTipText), vbOKOnly + vbInformation, "Mensaje"
7             vllngEdad = 0
8         Else
9             vllngEdad = Year(fdtmServerFecha) - Year(CDate(mskFechaNacimiento.Text))
10        End If
          
11        If cboEmpresa.ListCount = 0 Then
12            If cboTipoPaciente.ListIndex = -1 Then
                  '¡No ha ingresado datos!
13                MsgBox SIHOMsg(2) & vbCrLf & "Tipo de paciente", vbInformation + vbOKOnly, "Mensaje"
14                sstObj.Tab = 0
15                MyTabHeader1.TabCurrent = 0
16                cboTipoPaciente.SetFocus
17                Exit Sub
18            Else
19            vllngEmpresaTipoPaciente = cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex) * -1
20            End If
21        Else
22            If cboEmpresa.ListIndex <> -1 Then
23                vllngEmpresaTipoPaciente = cboEmpresa.ItemData(cboEmpresa.ListIndex)
24            End If
25        End If
              
26        pLimpiaGridCuartos
          
27        vgstrParametrosSP = vglngCveEstadoCuartoDisponible & "|" & vllngEmpresaTipoPaciente & "|" & IIf(optSexo(0).Value, "M", "F") & "|" & vllngEdad
28        If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias Then
29            vgstrParametrosSP = vgstrParametrosSP & "|" & vgintNumeroDepartamento
30            Set RSAdSelCuartoApropiado = frsEjecuta_SP(vgstrParametrosSP, "SP_ADSELCUARTOAPROPIADOEXTERNO")
31        Else
32            vgstrParametrosSP = vgstrParametrosSP & "|" & Trim(cboTipoIngreso.Text) & "|" & vgintNumeroDepartamento
33            Set RSAdSelCuartoApropiado = frsEjecuta_SP(vgstrParametrosSP, "SP_ADSELCUARTOAPROPIADO")
34        End If
          
35        RSAdSelCuartoApropiado.Filter = IIf(cboArea.ListIndex = 0, adFilterNone, "Area = '" & cboArea.Text & "'")
          
36        If RSAdSelCuartoApropiado.RecordCount <> 0 Then
37            pLlenarMshFGrdRs grdCuarto, RSAdSelCuartoApropiado
38        Else
              'No se encontraron cuartos disponibles.
39            MsgBox SIHOMsg(561), vbOKOnly + vbInformation, "Mensaje"
40        End If
          
41        pConfiguraGridCuarto
          
42        grdCuarto.Row = 1
43        grdCuarto.Col = 1
44        grdCuarto.SetFocus
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdSugerirCuarto_Click" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pConfiguraGridCuarto()
On Error GoTo NotificaError
    
    With grdCuarto
        .FixedCols = 1
        .FixedRows = 1
        
        .FormatString = "|Tipo cuarto|Área|Cuarto|||||"
        
        .ColWidth(0) = 200
        .ColWidth(1) = 3200
        .ColWidth(2) = 3900
        .ColWidth(3) = 2550
        .ColWidth(4) = 0
        .ColWidth(5) = 0
        .ColWidth(6) = 0
        .ColWidth(7) = 0
        .ColWidth(8) = 0
        
        .ColAlignment(1) = flexAlignLeftCenter
        .ColAlignment(2) = flexAlignLeftCenter
        .ColAlignment(3) = flexAlignLeftCenter
        
        .ColAlignmentFixed(1) = flexAlignCenterCenter
        .ColAlignmentFixed(2) = flexAlignCenterCenter
        .ColAlignmentFixed(3) = flexAlignCenterCenter
    End With
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pConfiguraGridCuarto"))
    Unload Me
End Sub

Private Sub pLimpiaGridCuartos()
    On Error GoTo NotificaError
    Dim vllngContador As Long
    
    grdCuarto.Redraw = False
    
    grdCuarto.Cols = 9
    grdCuarto.Rows = 2
    
    For vllngContador = 0 To grdCuarto.Cols - 1
        grdCuarto.TextMatrix(1, vllngContador) = ""
    Next vllngContador
    
    grdCuarto.Redraw = True

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLimpiaGridCuartos"))
    Unload Me
End Sub


Private Sub cmdAgregaAdjunto_Click()
    
    DoEvents
    Dim intRenglon As Integer
    Dim bolExiste As Boolean
    
    bolExiste = False
    
    If TextNombreAdjunto.Text <> "" Then
        
        For intRenglon = 1 To GrdAdjuntos.Rows - 1
            'No se toman en cuenta los eliminados
            If GrdAdjuntos.TextMatrix(intRenglon, 4) <> "BORRADO" Then
                
                'Se valida que no esté agregado con el mismo nombre
                If GrdAdjuntos.TextMatrix(intRenglon, 2) = TextNombreAdjunto.Text Then
                    bolExiste = True
                End If
                
            End If
            
        Next
        
        If bolExiste = True Then
            MsgBox "Esta descripción ya fue utilizada.", vbInformation + vbOKOnly, "Mensaje"
            TextNombreAdjunto.SetFocus
        Else
            CmlDocumentoAdjunto.Filter = "Documento PDF(*.pdf)|*.pdf|JPG Images(*.jpg)|*.jpg|PNG Images (*.png)|*.png"
            CmlDocumentoAdjunto.Flags = cdlOFNHideReadOnly
            CmlDocumentoAdjunto.FileName = ""
            CmlDocumentoAdjunto.ShowOpen
            
            If CmlDocumentoAdjunto.FileName <> "" Then
                vlintNumDocu = GrdAdjuntos.Rows
                
                'Agregar bandera para veificar que se hayan agregado desde la base de datos
                If vlintNumDocu = 2 Then
                    If GrdAdjuntos.TextMatrix(vlintNumDocu - 1, 2) = "" Then
                        GrdAdjuntos.TextMatrix(vlintNumDocu - 1, 1) = 0
                        GrdAdjuntos.TextMatrix(vlintNumDocu - 1, 2) = TextNombreAdjunto.Text
                        GrdAdjuntos.TextMatrix(vlintNumDocu - 1, 3) = CmlDocumentoAdjunto.FileName
                        GrdAdjuntos.TextMatrix(vlintNumDocu - 1, 4) = "AGREGADO" 'Estado del documento
                        GrdAdjuntos.RowHeight(vlintNumDocu - 1) = 250
                    Else
                        GrdAdjuntos.AddItem "" & TextNombreAdjunto.Text & CmlDocumentoAdjunto.FileName
                        GrdAdjuntos.TextMatrix(vlintNumDocu, 1) = 0
                        GrdAdjuntos.TextMatrix(vlintNumDocu, 2) = TextNombreAdjunto.Text
                        GrdAdjuntos.TextMatrix(vlintNumDocu, 3) = CmlDocumentoAdjunto.FileName
                        GrdAdjuntos.TextMatrix(vlintNumDocu, 4) = "AGREGADO" 'Estado del documento
                        GrdAdjuntos.RowHeight(vlintNumDocu) = 250
                    End If
                    
                Else
                    GrdAdjuntos.AddItem "" & TextNombreAdjunto.Text & CmlDocumentoAdjunto.FileName
                    GrdAdjuntos.TextMatrix(vlintNumDocu, 1) = 0
                    GrdAdjuntos.TextMatrix(vlintNumDocu, 2) = TextNombreAdjunto.Text
                    GrdAdjuntos.TextMatrix(vlintNumDocu, 3) = CmlDocumentoAdjunto.FileName
                    GrdAdjuntos.TextMatrix(vlintNumDocu, 4) = "AGREGADO" 'Estado del documento
                    GrdAdjuntos.RowHeight(vlintNumDocu) = 250
                End If
                
                TextNombreAdjunto.Text = ""
            End If
        End If
    
    Else
        MsgBox "No ha ingresado el título del documento adjunto.", vbInformation + vbOKOnly, "Mensaje"
        TextNombreAdjunto.SetFocus
    End If
    
    
End Sub

Private Sub dtpFecFinEgr_KeyDown(KeyCode As Integer, Shift As Integer)
  If KeyCode = vbKeyReturn Then
        If Not IsDate(dtpFecFinEgr.Text) Then
            dtpFecFinEgr = fdtmServerFecha
        Else
    
        End If
    
        pCargaEgresados
    pEnfocaTextBox txtIniciales
  End If
End Sub

Private Sub dtpFecFinEgr_LostFocus()
    If Not IsDate(dtpFecFinEgr.Text) Then
        dtpFecFinEgr = fdtmServerFecha
    Else
    
    End If
    pCargaEgresados
End Sub

Private Sub dtpFecFinEgr_Validate(Cancel As Boolean)
    If Not IsDate(dtpFecFinEgr.Text) Then
        dtpFecFinEgr = fdtmServerFecha
    Else
    
    End If
End Sub

Private Sub dtpFecIniEgr_KeyPress(KeyAscii As Integer)
    If KeyAscii = vbKeyReturn Then
        
        If Not IsDate(dtpFecIniEgr.Text) Then
            dtpFecIniEgr = fdtmServerFecha
        Else
    
        End If

        If vdtmFecIniEgr <> dtpFecIniEgr Then
            pCargaEgresados
            vdtmFecIniEgr = dtpFecIniEgr
        End If
    End If
End Sub

Private Sub dtpFecIniEgr_KeyUp(KeyCode As Integer, Shift As Integer)
  If KeyCode = vbKeyReturn Then
    dtpFecFinEgr.SetFocus
  End If
End Sub

Private Sub dtpFecIniEgr_LostFocus()
    If Not IsDate(dtpFecIniEgr.Text) Then
        dtpFecIniEgr = fdtmServerFecha
    Else
    
    End If

    If vdtmFecIniEgr <> dtpFecIniEgr Then
        pCargaEgresados
        vdtmFecIniEgr = dtpFecIniEgr
    End If
End Sub

Private Sub Form_Activate()
1     On Error GoTo NotificaError
          Dim SQL As String
          Dim rs2 As ADODB.Recordset
          Dim vlstrSentenciaCorreo As String
          Dim rsCorreo As ADODB.Recordset
          
2         vlblnFamiliarEmpleado = True
3         vlblnInternos = False
4         vlblnPacientePrevio = False
5         fblnCargaPermisos
6         vgstrNombreForm = Me.Name
              
7         If vlintDeptoAdmision = 0 Then
              'La empresa a la que pertenece el usuario, no tiene configurado el departamento de admisión para el ingreso de pacientes.
8             MsgBox SIHOMsg(1613), vbOKOnly + vbInformation, "Mensaje"
9             Unload Me
10        End If
          
11        pParametrosCuartos
12        pCuartosActuales
          
13        If Not fblnVerficaLicenciaCuartos("") Then
14            tmrBlink.Enabled = True
15        End If
          
16        If Not fblnVerficaLicenciaCuartosexternos("") Then
17            tmrBlinkexternos.Enabled = True
18        End If
          
19        If sstObj.Tab = 2 Then
20            grdInternoAmbulatorio.SetFocus
21        End If
          
22        If sstObj.Tab = 6 Then
23            pCargaExternos
24        End If

25        If cgstrModulo <> "AD" Then 'Si se accede desde otro módulo que no sea AD...
26            If Trim(cboIdioma.Text) = "" Then 'Si no hay idioma configurado, mostrar mensaje y restringir el acceso
27                MsgBox SIHOMsg(1049), vbOKOnly + vbCritical, "Mensaje"
28                Unload Me
29            End If
30        End If


          'Parámetros de verificación de socios
31        vlUsaSocios = fblRevisaUsoSocios()


          'Se obtiene el tipo de paciente configurado como socio
32        If vlUsaSocios = True Then
33            vgLngTipoPacienteSocio = flngTipoPacienteSocio()
34        End If
          
          
          'Se obtiene el valor del parámetro INTCORREOELECTRONICOOBLIGATORIO para determinar si el correo electrónico es obligatorio
35        vlstrSentenciaCorreo = "SELECT VCHVALOR FROM SIPARAMETRO WHERE  VCHNOMBRE = 'INTCORREOELECTRONICOOBLIGATORIO' AND INTCVEEMPRESACONTABLE = " & vgintClaveEmpresaContable
36        Set rsCorreo = frsRegresaRs(vlstrSentenciaCorreo)
37        If rsCorreo.RecordCount > 0 Then
38            If Trim(rsCorreo!VCHVALOR) = "1" Then
39                lblCorreoElectronico.Caption = "Correo electrónico*"
40            End If
41            rsCorreo.Close
42        End If

        Exit Sub
          
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":Form_Activate" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub Form_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError

    If KeyAscii = 27 Then
        If vlblnDatosCapturados Or vlblnDatosCargados Then
            '¿Desea abandonar la operación?
            If MsgBox(SIHOMsg(17), vbYesNo + vbQuestion, "Mensaje") = vbYes Then
                pHabilitaFrames True
                pLimpia
                lblnDePestanaPrepago = False
                vlblnPestanaGeneral = False                            ' Desactivar la modificacion de fecha
                KeyAscii = 0
                sstObj.Tab = 0
                MyTabHeader1.TabCurrent = 0
                txtApellidoPaterno.SetFocus
                FraAdjuntos.Enabled = False
                cmdAgregaAdjunto.Enabled = False
                TextNombreAdjunto.Enabled = False
                GrdAdjuntos.Enabled = False
                vlblnInternos = False
                
            End If
        Else
            KeyAscii = 0
            Unload Me
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":Form_KeyPress"))
    Unload Me
End Sub

Private Sub Form_Load()
      'On Error GoTo NotificaError
          Dim SQL As String
          Dim rs2 As ADODB.Recordset
          Dim rsEmergencias As ADODB.Recordset
          Dim rsUltimaCuentaE As ADODB.Recordset
          Dim rsTipo As New ADODB.Recordset
          Dim lngContador As Long
          Dim rsVeri As ADODB.Recordset
          
1         vlblnInternos = False
2         vlblnPacientePrevio = False
3         vlintNumDocu = 1
4         lstrEstatusPaciente = ""
              
          'Color de Tab
5         SetStyle sstObj.hwnd, 0
6         SetSolidColor sstObj.hwnd, 16777215
7         SSTabSubclass sstObj.hwnd
          
8         Set rsVeri = frsSelParametros("SI", -1, "BITENVIODEPROMOCIONES")
9         If Not rsVeri.EOF Then
10            fblnSolicitarEnvioPromociones = IIf(IIf(IsNull(rsVeri("Valor")), 0, rsVeri("Valor")) = 0, False, True)
11        Else
12            fblnSolicitarEnvioPromociones = False
13        End If

        Set rsVeri = frsSelParametros("AD", -1, "BITABRIRCUENTASEXTRAEX")
         If Not rsVeri.EOF Then
            blnAbrirCuentasExtraEx = IIf(IIf(IsNull(rsVeri("Valor")), 0, rsVeri("Valor")) = 0, False, True)
        Else
            blnAbrirCuentasExtraEx = False
        End If
    

        Set rsVeri = frsSelParametros("AD", -1, "BITRFCOBLIGATORIO")
         If Not rsVeri.EOF Then
            blnSolicitaRFC = IIf(IIf(IsNull(rsVeri("Valor")), 0, rsVeri("Valor")) = 0, False, True)
        Else
            blnSolicitaRFC = False
        End If
        
        If blnSolicitaRFC Then
            lblRfc.Caption = "RFC*"
        End If
          
14        Set rsVeri = frsSelParametros("AD", -1, "BITHABILITARFECHANACIMIENTO")
15        If Not rsVeri.EOF Then
16            lblnHabilitarFechaNacimiento = IIf(IIf(IsNull(rsVeri("Valor")), 0, rsVeri("Valor")) = 0, False, True)
17        Else
18            lblnHabilitarFechaNacimiento = False
19        End If
          
20        lblnCargarCuarto = False
21        Set rsVeri = frsSelParametros("AD", -1, "BITCARGOCUARTOINGRESO")
22        If Not rsVeri.EOF Then
23            lblnCargarCuarto = IIf(IIf(IsNull(rsVeri("Valor")), 0, rsVeri("Valor")) = 0, False, True)
24        End If
25        lstrHoraInicioMediaEstancia = ""
26        lstrHoraFinMediaEstancia = ""
27        If lblnCargarCuarto Then
28            Set rsVeri = frsSelParametros("AD", -1, "DTMHORAINICIOMEDIAESTANCIA")
29            If Not rsVeri.EOF Then
30                lstrHoraInicioMediaEstancia = IIf(IsNull(rsVeri("Valor")), "", rsVeri("Valor"))
31            End If
32            Set rsVeri = frsSelParametros("AD", -1, "DTMHORAFINMEDIAESTANCIA")
33            If Not rsVeri.EOF Then
34                lstrHoraFinMediaEstancia = IIf(IsNull(rsVeri("Valor")), "", rsVeri("Valor"))
35            End If
36        End If
37        rsVeri.Close
          
38        lblnManejaSucursales = False
39        Set rsVeri = frsRegresaRs("SELECT count(*) total FROM GNSUCURSAL ")
40        If rsVeri.RecordCount <> 0 Then
41            If rsVeri!Total > 0 Then
42                lblnManejaSucursales = True
43            End If
44        End If
45        rsVeri.Close
          
46        llngCveSucursal = -1
47        Set rsVeri = frsRegresaRs("SELECT GNSUCURSALDEPARTAMENTO.INTCVESUCURSAL idSucursal FROM GNSUCURSALDEPARTAMENTO WHERE GNSUCURSALDEPARTAMENTO.INTCVEDEPARTAMENTO = " & vgintNumeroDepartamento)
48        If rsVeri.RecordCount <> 0 Then
49            If Not IsNull(rsVeri!idSucursal) Then
50                llngCveSucursal = rsVeri!idSucursal
51            End If
52        End If
53        rsVeri.Close
          
          
54        OptEnvioPromo(0).Enabled = IIf(fblnSolicitarEnvioPromociones, True, False)
55        OptEnvioPromo(1).Enabled = IIf(fblnSolicitarEnvioPromociones, True, False)
          
56        txtEnvioPromo.Visible = IIf(fblnSolicitarEnvioPromociones, True, False)
57        OptEnvioPromo(0).Visible = IIf(fblnSolicitarEnvioPromociones, True, False)
58        OptEnvioPromo(1).Visible = IIf(fblnSolicitarEnvioPromociones, True, False)
          
59        OptEnvioPromo(0).Value = False
60        OptEnvioPromo(1).Value = IIf(fblnSolicitarEnvioPromociones, False, True)
          
61        fraDatosGenerales.Top = IIf(fblnSolicitarEnvioPromociones, 190, 190)
          
62        Me.Icon = frmMenuPrincipal.Icon
          
63        txtObservaciones.Text = vgstrObservacionesIngreso
           
64        vlintDeptoAdmision = fintCveDeptoAdmision
65        If vlintDeptoAdmision = 0 Then
              'La empresa a la que pertenece el usuario, no tiene configurado el departamento para ingreso en admisión
66            Exit Sub
67        Else
          
68            pLlenaColIngresos
              
69            vgOrden = 1
70            vlblnDatosCapturados = False
              
71            fraGrabar.Visible = False
              
              'sstObj.TabVisible(0) = vlblnMostrarTabGenerales
              'MyTabHeader1.TabEnabled(0) = vlblnMostrarTabGenerales
72            sstObj.TabVisible(1) = vlblnMostrarTabInternamiento
73            MyTabHeader1.TabEnabled(1) = vlblnMostrarTabInternamiento
74            sstObj.TabVisible(2) = vlblnMostrarTabInternos
75            MyTabHeader1.TabEnabled(2) = vlblnMostrarTabInternos
76            sstObj.TabVisible(3) = vlblnMostrarTabPrepagos
77            MyTabHeader1.TabEnabled(3) = vlblnMostrarTabPrepagos
78            sstObj.TabVisible(4) = vlblnMostrarTabIngresosPrevios
79            MyTabHeader1.TabEnabled(4) = vlblnMostrarTabIngresosPrevios
80            sstObj.TabVisible(5) = vlblnMostrarTabEgresados
81            MyTabHeader1.TabEnabled(5) = vlblnMostrarTabEgresados
82            sstObj.TabVisible(6) = vlblnMostrarTabExternos
83            MyTabHeader1.TabEnabled(6) = vlblnMostrarTabExternos
84            vlblnPermiteEgresarPaciente = vlblnPermiteEgresar
                  
85            vlvarColorRecienNacido = &HFF0000
86            vlvarColorInternoFueExterno = &H800080
87            vlvarColorInternamientoNormal = &H80000012
88            vlvarColorInternoFueAmbulatorio = &H80&
89            vlvarColorAmbulatorio = &H8000&
90            vlvarColorExpress = &HFF00FF
91            vlvarColorPrepagos = &H404040
92            vlvarColorIngresoPrevio = &H404040
93            vlvarColorEgresados = &H404040
94            vlvarColorExternos = &H404040
95            vlvarColorInternoFueCortaEstancia = &H8080FF    'TODO
96            vlvarColorCortaEstancia = &HC0C000
97            vlvarColorCortaEstanciaFueAmbulatorio = &HFF8080      '&H00404000& &H808000
              
98            vlstrMensajeCuarto = "No hay disponibles."
99            vlblnFamiliarEmpleado = True
              
100           Set rsTipo = frsEjecuta_SP("", "SP_SISELTIPOINGRESO")
101           For lngContador = 1 To rsTipo.RecordCount
102               If rsTipo!intCveTipoIngreso >= 1 And rsTipo!intCveTipoIngreso <= 13 Then
103                   If rsTipo!intCveTipoIngreso = 1 Then vlstrTipoIngresoInternamientoNormal = rsTipo!vchNombre
104                   If rsTipo!intCveTipoIngreso = 2 Then vlstrTipoIngresoAmbulatorio = rsTipo!vchNombre
105                   If rsTipo!intCveTipoIngreso = 3 Then vlstrTipoIngresoPrepago = rsTipo!vchNombre
106                   If rsTipo!intCveTipoIngreso = 4 Then vlstrTipoIngresoInternoFueUrgencias = rsTipo!vchNombre
107                   If rsTipo!intCveTipoIngreso = 5 Then vlstrTipoIngresoInternoFueAmbulatorio = rsTipo!vchNombre
108                   If rsTipo!intCveTipoIngreso = 6 Then vlstrTipoIngresoRecienNacido = rsTipo!vchNombre
109                   If rsTipo!intCveTipoIngreso = 7 Then vlstrTipoIngresoUrgencias = rsTipo!vchNombre
110                   If rsTipo!intCveTipoIngreso = 8 Then vlstrTipoIngresoExterno = rsTipo!vchNombre
111                   If rsTipo!intCveTipoIngreso = 10 Then vlstrTipoIngresoConsultaExterna = rsTipo!vchNombre
112                   If rsTipo!intCveTipoIngreso = 11 Then vlstrTipoIngresoCortaEstancia = rsTipo!vchNombre
113                   If rsTipo!intCveTipoIngreso = 12 Then vlstrTipoIngresoInternoFueCortaEstancia = rsTipo!vchNombre
114                   If rsTipo!intCveTipoIngreso = 13 Then vlstrTipoIngresoCortaEstanciaFueAmbulatorio = rsTipo!vchNombre
115               End If
116               rsTipo.MoveNext
117           Next lngContador
118           rsTipo.Close
          
119           vlstrTipoIngresoPrevio = "PREVIO"
120           vlstrTipoIngresoRegistradoPreviamente = ""
              
121           vlstrTipoAnticipoOtros = "OTROS"
              
              'Combos que no tienen opción para agregar mas datos
122           pLlenaTipoIngreso
123           pLlenaDeptoIngreso
124           OptPaqueteOtros(1).Value = True
125           pLlenaMedicos
              pLlenaTecnicayLateralidad 'caso 20329
126           pLlenaDepartamentoAtencionExternos
127           pLlenaEstadoCuarto
                      
              'Combos en los que se pueden agregar mas datos
128           pLlenaCiudad
129           pLlenaReligion
130           pLlenaNacionalidad
131           pLlenaProcedencia
132           pLlenaIdiomas
              'pLlenaOcupaciones se cambió al plimpia
              
133           If cgstrModulo = "AD" Then
134               pLlenaAreas "I"
135           Else
136               pLlenaAreas "E"
137           End If
              
138           pLlenaTipoPolizaSeguros
              
              'Combos de tablas del sistema, no hay catálogo porque estos datos no se mueven
139           pLlenaEstadoCivil
140           pLlenaParentesco
              
              'Borrar los ingresos previos registrados que sobrepasan los días de espera de internamiento
141           pBorraIngresoPrevio
              
142           If vlintPestañaInicial = 0 Then
143               sstObj.Tab = 0
144               MyTabHeader1.TabCurrent = 0
145               SSTObj_Click 0
146           Else
147               pCargaInternosAmbulatorios
148               sstObj.Tab = 2
149               MyTabHeader1.TabCurrent = 2
150           End If
              
              'Bandera que indica si se verifica la empresa
151           vlblnVerificaEmpresa = False
152           vlblnConsultaEmpresa = False
              
153           chkForaneo_Click
154           cboTipoIngreso.ListIndex = 0
155           pLimpia
              
156           If blnConsulta And vglngExpedienteConsulta > 0 Then
157               pDatosPacientes vglngExpedienteConsulta
158               vglngExpediente = vglngExpedienteConsulta
                  
159               Set rsUltimaCuentaE = frsEjecuta_SP(CStr(vglngExpedienteConsulta) & "|" & vgintClaveEmpresaContable & "|" & vgintNumeroDepartamento, "sp_GnSelUltimaCuentaPaciente")
160               If Not rsUltimaCuentaE.EOF Then
                      'Se agregó la siguiente condición para cuando se manda llamar la frmAdmisionPaciente desde otro módulo y se quiere consultar un paciente
                      'la funcion regresa los datos de la última cuenta si tiene estatus 'E'
161                   If rsUltimaCuentaE!Estatus = "E" Then
162                       pDatosUltimaCuenta rsUltimaCuentaE!cuenta, rsUltimaCuentaE!tipo
163                   ElseIf rsUltimaCuentaE!Estatus = "A" And rsUltimaCuentaE!tipo = "E" Then
164                       pDatosIngreso rsUltimaCuentaE!cuenta, rsUltimaCuentaE!tipo
165                       vlblnDatosCapturados = True
166                   End If
167               End If
                  
168               OptEnvioPromo(0).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnSiEnvioPromo)
169               OptEnvioPromo(1).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnNoEnvioPromo)
170               rsUltimaCuentaE.Close
171           Else
172               vglngExpediente = 0
173           End If
              
174           vllngCveFamiliar = 0  'Valor por defecto de la clave de familiar
              
175           pHabilitarFechasNacimiento
              
176           GrdAdjuntos.FormatString = "|Id|Descripción|Archivo|Estado"
177           GrdAdjuntos.ColWidth(0) = 0
178           GrdAdjuntos.ColWidth(1) = 0
179           GrdAdjuntos.ColWidth(2) = 100 '4000
180           GrdAdjuntos.ColWidth(3) = 0
181           GrdAdjuntos.ColWidth(4) = 0
182           GrdAdjuntos.Rows = 2
183           If StmAdjunto.State = 0 Then
184               StmAdjunto.Type = adTypeBinary
185               StmAdjunto.Open
186           End If
              
187           FraAdjuntos.Enabled = False
188           GrdAdjuntos.Enabled = False
189           cmdAgregaAdjunto.Enabled = False
190           TextNombreAdjunto.Text = ""
191           TextNombreAdjunto.Enabled = False
              
192           If Screen.Height <= 12050 Then
193               pcambiarT2
194           End If
              
              'Validar licencia para generar la lealtad del cliente y el médico con el hospital por medio del otorgamiento de puntos
195           blnLicenciaLealtadCliente = fblnLicenciaLealtadCliente

196       End If
          
   Exit Sub
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":Form_Load" & " Linea:" & Erl()))
       Unload Me
End Sub

Private Sub pHabilitarFechasNacimiento()
On Error GoTo NotificaError
    mskNacimientoConyuge.Enabled = lblnHabilitarFechaNacimiento
    mskNacimientoEmergencia.Enabled = lblnHabilitarFechaNacimiento
    mskNacimientoMadre.Enabled = lblnHabilitarFechaNacimiento
    mskNacimientoPadre.Enabled = lblnHabilitarFechaNacimiento
    mskNacimientoResponsable.Enabled = lblnHabilitarFechaNacimiento
    lblNacimientoConyuge.Enabled = lblnHabilitarFechaNacimiento
    lblNacimientoEmergencia.Enabled = lblnHabilitarFechaNacimiento
    lblNacimientoMadre.Enabled = lblnHabilitarFechaNacimiento
    lblNacimientoPadre.Enabled = lblnHabilitarFechaNacimiento
    lblNacimientoResponsable.Enabled = lblnHabilitarFechaNacimiento
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pHabilitarFechasNacimiento"))
End Sub

Private Sub pLlenaAreas(strTipoPaciente As String)
On Error GoTo NotificaError
  
    vlblnLlenandoAreas = True
    cboArea.Clear
    Set rs = frsEjecuta_SP(strTipoPaciente & "|0|" & vgintNumeroDepartamento & "|1", "SP_ADSELAREASTIPOPACIENTE")
    If rs.RecordCount <> 0 Then
        pLlenarCboRs_new cboArea, rs, 0, 1
    End If
    rs.Close
    cboArea.AddItem "<TODAS LAS ÁREAS>", 0
    cboArea.ItemData(cboArea.NewIndex) = 0
    cboArea.ListIndex = 0
    vlblnLlenandoAreas = False
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaAreas"))
    Unload Me
End Sub

Private Sub pLlenaTipoPolizaSeguros()
On Error GoTo NotificaError
  
    vlblnLlenandoTipoPoliza = True
    vlstrSentencia = "select intIdTipoPoliza, vchdescripcion from ADTipoPolizaSeguro where bitActivo <> 0"
    txtNumeroPoliza.Text = ""
    Set rs = frsRegresaRs(vlstrSentencia)
    If rs.RecordCount <> 0 Then
        pLlenarCboRs_new cboTipoPoliza, rs, 0, 1
    End If
    rs.Close
    cboTipoPoliza.AddItem "", 0
    cboTipoPoliza.ItemData(cboTipoPoliza.NewIndex) = 0
    cboTipoPoliza.AddItem "<AGREGAR>", 1
    cboTipoPoliza.ItemData(cboTipoPoliza.NewIndex) = 0
    cboTipoPoliza.ListIndex = 0
    vlblnLlenandoTipoPoliza = False
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaTipoPolizaSeguros"))
    Unload Me
End Sub

Private Sub pLlenaDepartamentoAtencionExternos()
    On Error GoTo NotificaError

    vlstrSentencia = "select smiCveDepartamento, vchDescripcion from NoDepartamento where ((chrEnfermeria = 'E' or bitAtiendePacientes = 1) and tnyClaveEmpresa = " & vgintClaveEmpresaContable & _
                     ") AND ( (" & llngCveSucursal & " > 0  AND NODEPARTAMENTO.SMICVEDEPARTAMENTO IN (SELECT INTCVEDEPARTAMENTO FROM GNSUCURSALDEPARTAMENTO WHERE INTCVESUCURSAL = " & llngCveSucursal & ")) " & _
                     "   OR (" & llngCveSucursal & " <= 0 AND NODEPARTAMENTO.SMICVEDEPARTAMENTO NOT IN (SELECT INTCVEDEPARTAMENTO FROM GNSUCURSALDEPARTAMENTO)) )"
    Set rs = frsRegresaRs(vlstrSentencia)
    If rs.RecordCount <> 0 Then
        pLlenarCboRs_new cboDepartamentoAtiende, rs, 0, 1
    End If
    cboDepartamentoAtiende.AddItem "<TODOS>", 0
    cboDepartamentoAtiende.ItemData(cboDepartamentoAtiende.NewIndex) = 0
    cboDepartamentoAtiende.ListIndex = 0
    rs.Close
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLLenaDepartamentoAtencionExternos"))
    Unload Me
End Sub

Private Sub pBorraIngresoPrevio()
1         On Error GoTo NotificaError
          
          Dim rsIngresosPrevios As New ADODB.Recordset
          Dim vllngDiasEsperados As Long
          
              'EVITAR QUE SE ELIMINEN DE LOS INGRESOS PREVIOS LOS PACIENTES DE CHECKUP, POR LO MENOS POR ESTE MEDIO
2         vlstrSentencia = "select * from AdIngresoPrevio where numcvepaciente not in (select cupresupuestopaciente.INTNUMPACIENTE " & _
                                                                                        "From cupresupuestopaciente " & _
                                                                                        "where cupresupuestopaciente.INTCTAPACIENTE = 0 " & _
                                                                                        "or cupresupuestopaciente.INTCTAPACIENTE is null)"
3         Set rsIngresosPrevios = frsRegresaRs(vlstrSentencia)
          
4         With rsIngresosPrevios
5             If .RecordCount <> 0 Then
              
6                 .MoveFirst
7                 Do While Not .EOF
8                     If !dtmfechaingreso < fdtmServerFecha Then
9                         vllngDiasEsperados = fdtmServerFecha - !dtmfechaingreso
10                        If vllngDiasEsperados > vglngDiasIngresoPrevio Then
                              
                              'Borrar el ingreso previo
11                            vlstrSentencia = "delete FROM AdIngresoPrevio where numCvePaciente = " & Trim(Str(!numCvePaciente))
12                            pEjecutaSentencia vlstrSentencia
                              
                              'Quitar estado de ingreso previo al paciente
13                            vlstrSentencia = "update ExPaciente set intPrevio = 0 where intNumPaciente = " & Trim(Str(!numCvePaciente))
14                            pEjecutaSentencia vlstrSentencia
15                        End If
16                    End If
17                    .MoveNext
18                Loop
              
19            End If
20            .Close
21        End With
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pBorraIngresoPrevio" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Function fSeleccionaPredeterminados(vlstrTipoIngreso As String, vlintReporte As Integer) As Boolean
    Dim vlintEmpresaTipoPaciente As Integer
    Dim rsPredeterminados As New ADODB.Recordset

    fSeleccionaPredeterminados = False

    If fintLocalizaCritCbo_new(cboEmpresa, cboEmpresa.Text) <> -1 Then
        vlintEmpresaTipoPaciente = cboEmpresa.ItemData(fintLocalizaCritCbo_new(cboEmpresa, cboEmpresa.Text))
    ElseIf fintLocalizaCritCbo_new(cboTipoPaciente, cboTipoPaciente.Text) <> -1 Then
        vlintEmpresaTipoPaciente = cboTipoPaciente.ItemData(fintLocalizaCritCbo_new(cboTipoPaciente, cboTipoPaciente.Text)) * -1
    Else
        vlintEmpresaTipoPaciente = 0
    End If

    vlstrSentencia = "" & _
    "select " & _
        "AdDocumentoIngreso.intConsecutivo," & _
        "AdDocumentoIngreso.vchNombreDocumento " & _
    "from " & _
        "AdDocumentoIngreso " & _
        "inner join AdDocumentoIngresoTipoIngreso on " & _
        "AdDocumentoIngreso.intConsecutivo = AdDocumentoIngresoTipoIngreso.intConsecutivoReporte " & _
    "where " & _
        "AdDocumentoIngreso.intConsecutivo = " & vlintReporte & " AND " & _
        " trim(AdDocumentoIngresoTipoIngreso.chrTipoIngreso) = '" & Trim(vlstrTipoIngreso) & "' " & _
        "and ( AdDocumentoIngresoTipoIngreso.intCveEmpresaTipoPaciente = '" & vlintEmpresaTipoPaciente & "' or AdDocumentoIngresoTipoIngreso.intCveEmpresaTipoPaciente = 0 )" & _
    "Order by " & _
        "AdDocumentoIngreso.intOrden"
        
    Set rsPredeterminados = frsRegresaRs(vlstrSentencia)
    
    If rsPredeterminados.RecordCount <> 0 Then
        fSeleccionaPredeterminados = True
    End If

End Function

Private Sub pLlenaDocumentosIngreso(vlstrTipoIngreso As String)
1     On Error GoTo NotificaError
      Dim rsllenadocumentos As ADODB.Recordset
      Dim strTipoPaciente As String
          
2         lstDocumentos.Clear
          
3         strTipoPaciente = IIf((cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveUrgencias And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveExterno And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveConsultaExterna), "I", "E")
4         vgstrParametrosSP = "-1|" & strTipoPaciente & "|" & vgintClaveEmpresaContable
5         Set rsllenadocumentos = frsEjecuta_SP(vgstrParametrosSP, "SP_GNSELDOCUMENTOSINGRESO")
          
6         If strTipoPaciente = "E" Then
7             lstDocumentos.AddItem "SERVICIO DE URGENCIAS"
8             lstDocumentos.ItemData(lstDocumentos.NewIndex) = 0
9             lstDocumentos.Selected(lstDocumentos.NewIndex) = True
10        End If
          
11        If rsllenadocumentos.RecordCount <> 0 Then
          
12            rsllenadocumentos.MoveFirst
13            Do While Not rsllenadocumentos.EOF
14                lstDocumentos.AddItem rsllenadocumentos!VCHNOMBREDOCUMENTO
15                lstDocumentos.ItemData(lstDocumentos.NewIndex) = rsllenadocumentos!intConsecutivo
'16                lstDocumentos.Selected(lstDocumentos.NewIndex) = fSeleccionaPredeterminados(IIf(strTipoPaciente = "I", vlstrTipoIngreso, "8"), rsllenadocumentos!intConsecutivo)
                    lstDocumentos.Selected(lstDocumentos.NewIndex) = fSeleccionaPredeterminados(IIf(strTipoPaciente = "I", vlstrTipoIngreso, IIf(vlstrTipoIngreso = "7", vlstrTipoIngreso, "8")), rsllenadocumentos!intConsecutivo)
17                rsllenadocumentos.MoveNext
18            Loop
19        End If
20        rsllenadocumentos.Close
          
21        vlstrSentencia = "select * from SIDocumentoZPL where chrTipoDocumento = 'P' and intCveDepartamento = " & vgintNumeroDepartamento & " order by vchDescripcion"
22        Set rsllenadocumentos = frsRegresaRs(vlstrSentencia)
23        Do Until rsllenadocumentos.EOF
24            lstDocumentos.AddItem rsllenadocumentos!VCHDESCRIPCION
25            lstDocumentos.ItemData(lstDocumentos.NewIndex) = rsllenadocumentos!intCveDocumento * -1
26            rsllenadocumentos.MoveNext
27        Loop
28        rsllenadocumentos.Close
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaDocumentosIngreso" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pLlenaNacionalidad()
    On Error GoTo NotificaError

    vlstrSentencia = "select intCveNacionalidad, vchDescripcion from Nacionalidad"
    Set rs = frsRegresaRs(vlstrSentencia)
    pLlenarCboRs_new cboNacionalidad, rs, 0, 1, IIf(cgstrModulo = "AD", 1, 0)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaNacionalidad"))
    Unload Me
End Sub

Private Sub pLlenaParentesco()
    On Error GoTo NotificaError

    vlstrSentencia = "select * from SiParentesco"
    Set rs = frsRegresaRs(vlstrSentencia)
    If rs.RecordCount <> 0 Then
        pLlenarCboRs_new cboParentescoFamiliarEmergencia, rs, 0, 1
        pLlenarCboRs_new cboParentescoFamiliarResponsable, rs, 0, 1
        rs.MoveFirst
        Do Until rs.EOF
            If rs!bitPadre = 1 Then
                llngCveParentescoPadre = rs!intCveParentesco
            ElseIf rs!bitMadre = 1 Then
                llngCveParentescoMadre = rs!intCveParentesco
            ElseIf rs!bitConyuge = 1 Then
                llngCveParentescoConyuge = rs!intCveParentesco
            ElseIf rs!bitPaciente = 1 Then
                llngCveParentescoMismo = rs!intCveParentesco
            ElseIf rs!bitOtro = 1 Then
                llngCveParentescoOtro = rs!intCveParentesco
            End If
            rs.MoveNext
        Loop
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaParentesco"))
    Unload Me
End Sub

Private Sub pLlenaEstadoCivil()
    On Error GoTo NotificaError

    Set rs = frsEjecuta_SP("-1", "SP_GNSELESTADOCIVIL")
    If rs.RecordCount <> 0 Then
        pLlenarCboRs_new cboEstadoCivil, rs, 0, 1
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaEstadoCivil"))
    Unload Me
End Sub

Private Sub pLlenaEstadoCuarto()
On Error GoTo NotificaError

    cboEstadoCuartoActual.Clear
    Set rs = frsEjecuta_SP("1|" & Str(vglngCveEstadoCuartoOcupado), "Sp_AdSelEstadosCuarto")
    If rs.RecordCount <> 0 Then
        pLlenarCboRs_new cboEstadoCuartoActual, rs, 0, 1
        If vglngCveEstadoCuartoDisponible <> 0 Then
            cboEstadoCuartoActual.ListIndex = flngLocalizaCbo_new(cboEstadoCuartoActual, CStr(vglngCveEstadoCuartoDisponible))
        Else
            cboEstadoCuartoActual.ListIndex = 0
        End If
    End If
    rs.Close
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaEstadoCuarto"))
    Unload Me
End Sub

Private Sub pLlenaIdiomas()
On Error GoTo NotificaError
    
    Set rs = frsEjecuta_SP("-1|1", "Sp_GnSelIdiomas")
'|    If rs.RecordCount = 0 And cgstrModulo <> "AD" Then
'|        lblIdioma.Caption = "Idioma"
'|   Else
        lblIdioma.Caption = "Idioma*"
'|    End If
    pLlenarCboRs_new cboIdioma, rs, 0, 1, IIf(cgstrModulo = "AD", 1, 0)
    rs.Close
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaIdiomas"))
    Unload Me
End Sub

Private Sub pLlenaOcupaciones()
On Error GoTo NotificaError
    
    Set rs = frsEjecuta_SP("-1|1", "Sp_GnSelOcupaciones")
    pLlenarCboRs_new cboOcupacion, rs, 0, 1, IIf(cgstrModulo = "AD", 1, 0)
    rs.Close

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaIdiomas"))
    Unload Me
End Sub

Private Sub pLlenaReligion()
    On Error GoTo NotificaError
    
    vlstrSentencia = "select intClave,vchDescripcion from AdReligion where bitStatus=1"
    Set rs = frsRegresaRs(vlstrSentencia)
    pLlenarCboRs_new cboReligion, rs, 0, 1, IIf(cgstrModulo = "AD", 1, 0)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaReligion"))
    Unload Me
End Sub

Private Sub pLlenaCiudad()
1         On Error GoTo NotificaError
          Dim vllngCveCiudadNacimiento  As Long
          Dim vllngCveCiudadForanea  As Long
          Dim vllngCveCiudadDomicilio As Long
          
2         vllngCveCiudadNacimiento = 0
3         vllngCveCiudadForanea = 0
4         vllngCveCiudadDomicilio = 0
          
5         If cboCiudadNacimiento.ListCount <> 0 Then
6             If cboCiudadNacimiento.ListIndex <> -1 Then
7                 vllngCveCiudadNacimiento = cboCiudadNacimiento.ItemData(cboCiudadNacimiento.ListIndex)
8             End If
9         End If
10        If cboCiudadForanea.ListCount <> 0 Then
11            If cboCiudadForanea.ListIndex <> -1 Then
12                vllngCveCiudadForanea = cboCiudadForanea.ItemData(cboCiudadForanea.ListIndex)
13            End If
14        End If
15        If cboCiudad.ListCount <> 0 Then
16            If cboCiudad.ListIndex <> -1 Then
17                vllngCveCiudadDomicilio = cboCiudad.ItemData(cboCiudad.ListIndex)
18            End If
19        End If
          
      '    vlstrSentencia = "SELECT INTCVECIUDAD, TRIM(VCHDESCRIPCION) || ' (' || (SELECT TRIM(VCHDESCRIPCION) FROM ESTADO WHERE INTCVEESTADO = CIUDAD.INTCVEESTADO) || ')' AS VCHDESCRIPCION FROM CIUDAD"
      '    Set rs = frsRegresaRs(vlstrSentencia)
          
20        Set rs = frsEjecuta_SP("", "Sp_GnSelCiudadEstado")

21        pLlenarCboRs_new cboCiudadNacimiento, rs, 0, 1, IIf(cgstrModulo = "AD", 1, 0)
22        pLlenarCboRs_new cboCiudadForanea, rs, 0, 1, IIf(cgstrModulo = "AD", 1, 0)
23        pLlenarCboRs_new cboCiudad, rs, 0, 1, IIf(cgstrModulo = "AD", 1, 0)

24        If vllngCveCiudadNacimiento <> 0 Then
25            cboCiudadNacimiento.ListIndex = flngLocalizaCbo_new(cboCiudadNacimiento, Str(vllngCveCiudadNacimiento))
26        End If
27        If vllngCveCiudadForanea <> 0 Then
28            cboCiudadForanea.ListIndex = flngLocalizaCbo_new(cboCiudadForanea, Str(vllngCveCiudadForanea))
29        End If
30        If vllngCveCiudadDomicilio <> 0 Then
31            cboCiudad.ListIndex = flngLocalizaCbo_new(cboCiudad, Str(vllngCveCiudadDomicilio))
32        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaCiudad" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pLlenaMedicos()
    On Error GoTo NotificaError
    
    Set rs = frsEjecuta_SP("-1", "Sp_GnSelMedicosAdmision")
    If rs.RecordCount <> 0 Then
        pLlenarCboRs_new cboMedicoCargo, rs, 0, 1
    End If
    
    Set rs = frsEjecuta_SP("1", "Sp_GnSelMedicosAdmision")
    If rs.RecordCount <> 0 Then
        pLlenarCboRs_new cboMedicoEmergencias, rs, 0, 1
    End If
    rs.Close

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaMedicos"))
    Unload Me
End Sub

Private Sub pLlenaTecnicayLateralidad() 'caso 20329
    On Error GoTo NotificaError
    
    vlstrSentencia = "select INTIDCONSECUTIVO, VCHDESCRIPCION from ADTecnicaLateralidad"
    Set rs = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
    
    
    If rs.RecordCount <> 0 Then
        pLlenarCboRs_new cboTecnicaLateralidad, rs, 0, 1
        
        cboTecnicaLateralidad.AddItem "", 0
        cboTecnicaLateralidad.ItemData(cboTecnicaLateralidad.NewIndex) = 0
        cboTecnicaLateralidad.ListIndex = 0
    End If
    
  

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaTecnicayLateralidad"))
    Unload Me
End Sub

Private Sub pLlenaTipoPaciente(vlstrCondicion As String)
    On Error GoTo NotificaError
    Dim lstrSentenciaSucursal As String
    
    'se agrego el bitactivo
    If vlstrCondicion <> "" Then
        vlstrSentencia = "select distinct AdTipoPaciente.tnyCveTipoPaciente, vchDescripcion from AdTipoPaciente " & _
                          IIf(lblnManejaSucursales, " inner join gnSucursalTipoPaciente on AdTipoPaciente.tnyCveTipoPaciente = gnSucursalTipoPaciente.intCveTipoPaciente ", "") & _
                          vlstrCondicion & IIf(lblnManejaSucursales, " and intCveSucursal = " & llngCveSucursal, "")
    Else
        vlstrSentencia = "select distinct AdTipoPaciente.tnyCveTipoPaciente, vchDescripcion from AdTipoPaciente " & _
                          IIf(lblnManejaSucursales, " inner join gnSucursalTipoPaciente on AdTipoPaciente.tnyCveTipoPaciente = gnSucursalTipoPaciente.intCveTipoPaciente ", "") & _
                          IIf(lblnManejaSucursales, " where intCveSucursal = " & llngCveSucursal, "")
    End If
    
    If cgstrModulo = "PV" And vgstrForma = "frmPresupuestos" Then
        If InStr(1, vlstrSentencia, "where") = 0 Then
            vlstrSentencia = vlstrSentencia & " where tnyCveTipoPaciente = " & vglngTipoPaciente
        Else
            vlstrSentencia = vlstrSentencia & " and tnyCveTipoPaciente = " & vglngTipoPaciente
        End If
    End If
    Set rs = frsRegresaRs(vlstrSentencia)
    If rs.RecordCount <> 0 Then
        pLlenarCboRs_new cboTipoPaciente, rs, 0, 1
        cboTipoPaciente.ListIndex = -1
        If cgstrModulo = "PV" And vgstrForma = "frmPresupuestos" Then
            cboTipoPaciente.ListIndex = flngLocalizaCbo_new(cboTipoPaciente, Str(vglngTipoPaciente))
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaTipoPaciente"))
    Unload Me
End Sub

Private Sub pLlenaTipoIngreso()
1         On Error GoTo NotificaError

2         cboTipoIngreso.Clear
          
3         If cgstrModulo = "AD" Then

4             If vlstrTipoIngresoRegistradoPreviamente = "" Or sstObj.Tab = 5 Then
5                 If vlstrTipoIngresoInternamientoNormal <> "" Then
6                     cboTipoIngreso.AddItem vlstrTipoIngresoInternamientoNormal
7                     cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveInternamientoNormal
8                 End If
9                 If vlstrTipoIngresoAmbulatorio <> "" Then
10                    cboTipoIngreso.AddItem vlstrTipoIngresoAmbulatorio
11                    cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveAmbulatorio
12                End If
13                If vlstrTipoIngresoCortaEstanciaFueAmbulatorio <> "" Then
14                    cboTipoIngreso.AddItem vlstrTipoIngresoCortaEstanciaFueAmbulatorio
15                    cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveCortaEstanciaFueAmbulatorio
16                End If
17                If vlstrTipoIngresoCortaEstancia <> "" Then
18                    cboTipoIngreso.AddItem vlstrTipoIngresoCortaEstancia
19                    cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveCortaEstancia
20                End If
21                If vlstrTipoIngresoPrepago <> "" Then
22                    cboTipoIngreso.AddItem vlstrTipoIngresoPrepago
23                    cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCvePrepago
24                End If
25                If vlstrTipoIngresoInternoFueUrgencias <> "" Then
26                    cboTipoIngreso.AddItem vlstrTipoIngresoInternoFueUrgencias
27                    cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveInternoFueUrgencias
28                End If
29                If vlstrTipoIngresoInternoFueAmbulatorio <> "" Then
30                    cboTipoIngreso.AddItem vlstrTipoIngresoInternoFueAmbulatorio
31                    cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveInternoFueAmbulatorio
32                End If
33                If vlstrTipoIngresoInternoFueCortaEstancia <> "" Then
34                    cboTipoIngreso.AddItem vlstrTipoIngresoInternoFueCortaEstancia
35                    cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveInternoFueCortaEstancia
36                End If
37                If vlstrTipoIngresoRecienNacido <> "" Then
38                    cboTipoIngreso.AddItem vlstrTipoIngresoRecienNacido
39                    cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveRecienNacido
40                End If
41                If vlstrTipoIngresoUrgencias <> "" Then
42                    cboTipoIngreso.AddItem vlstrTipoIngresoUrgencias
43                    cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveUrgencias
44                End If
45                If vlstrTipoIngresoExterno <> "" Then
46                    cboTipoIngreso.AddItem vlstrTipoIngresoExterno
47                    cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveExterno
48                End If
49                If vlstrTipoIngresoConsultaExterna <> "" Then
50                    cboTipoIngreso.AddItem vlstrTipoIngresoConsultaExterna
51                    cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveConsultaExterna
52                End If
53                If vlstrTipoIngresoPrevio <> "" Then
54                    cboTipoIngreso.AddItem vlstrTipoIngresoPrevio
55                    cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCvePrevio 'Previo
56                End If
              'Si es internamiento normal
57            ElseIf vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoInternamientoNormal Then
58                cboTipoIngreso.AddItem vlstrTipoIngresoInternamientoNormal
59                cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveInternamientoNormal
60                cboTipoIngreso.AddItem vlstrTipoIngresoAmbulatorio
61                cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveAmbulatorio
62                cboTipoIngreso.AddItem vlstrTipoIngresoCortaEstancia
63                cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveCortaEstancia
                  
              'Si es Interno fue externo
64            ElseIf vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoInternoFueUrgencias Then
65                cboTipoIngreso.AddItem vlstrTipoIngresoInternoFueUrgencias
66                cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveInternoFueUrgencias
                  
67                cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveInternoFueUrgencias)
              
              'Si es Interno fue Ambulatorio
68            ElseIf vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoInternoFueAmbulatorio Then
69                cboTipoIngreso.AddItem vlstrTipoIngresoInternoFueAmbulatorio
70                cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveInternoFueAmbulatorio
                  
71                cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveInternoFueAmbulatorio)
              
              'Si es recien nacido
72            ElseIf vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoRecienNacido Then
73                cboTipoIngreso.AddItem vlstrTipoIngresoInternamientoNormal
74                cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveInternamientoNormal
75                cboTipoIngreso.AddItem vlstrTipoIngresoRecienNacido
76                cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveRecienNacido
77                cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveRecienNacido)
                  
78                lblFormaNac.Enabled = True
79                cboFormaNac.Enabled = True
              
              'Si es Ambulatorio
80            ElseIf vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoAmbulatorio Then
81                cboTipoIngreso.AddItem vlstrTipoIngresoAmbulatorio
82                cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveAmbulatorio
83                cboTipoIngreso.AddItem vlstrTipoIngresoCortaEstanciaFueAmbulatorio
84                cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveCortaEstanciaFueAmbulatorio
85                cboTipoIngreso.AddItem vlstrTipoIngresoInternoFueAmbulatorio
86                cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveInternoFueAmbulatorio
                  
87                cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveInternoFueAmbulatorio)
              
              'Si es Prepago
88            ElseIf vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoPrepago Then
89                cboTipoIngreso.AddItem vlstrTipoIngresoInternamientoNormal
90                cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveInternamientoNormal
91                cboTipoIngreso.AddItem vlstrTipoIngresoAmbulatorio
92                cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveAmbulatorio
93                cboTipoIngreso.AddItem vlstrTipoIngresoCortaEstancia
94                cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveCortaEstancia
95                cboTipoIngreso.AddItem vlstrTipoIngresoPrepago
96                cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCvePrepago
      '            cboTipoIngreso.AddItem vlstrTipoIngresoConsultaExterna
      '            cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveConsultaExterna
97                cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCvePrepago)
                  
              'Si es Previo
98            ElseIf vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoPrevio Then
99                cboTipoIngreso.AddItem vlstrTipoIngresoInternamientoNormal
100               cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveInternamientoNormal
101               cboTipoIngreso.AddItem vlstrTipoIngresoAmbulatorio
102               cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveAmbulatorio
103               cboTipoIngreso.AddItem vlstrTipoIngresoCortaEstancia
104               cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveCortaEstancia
105               cboTipoIngreso.AddItem vlstrTipoIngresoPrepago
106               cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCvePrepago
107               cboTipoIngreso.AddItem vlstrTipoIngresoPrevio
108               cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCvePrevio
                 If Trim(vgstrNombCortoCH) = Trim("SOM") Then
             
                  cboTipoIngreso.AddItem vlstrTipoIngresoExterno
                  cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveExterno
109               cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCvePrevio)
              End If
              'Si es Urgencias
110           ElseIf vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoUrgencias Then
111               cboTipoIngreso.AddItem vlstrTipoIngresoUrgencias
112               cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveUrgencias
113               cboTipoIngreso.AddItem vlstrTipoIngresoExterno
114               cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveExterno
                  
115               cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveUrgencias)
              
              'Si es Externo
116           ElseIf vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoExterno Then
117               cboTipoIngreso.AddItem vlstrTipoIngresoUrgencias
118               cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveUrgencias
119               cboTipoIngreso.AddItem vlstrTipoIngresoExterno
120               cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveExterno
                  
121               cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveExterno)
              'Si es Consulta Externa
122           ElseIf vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoConsultaExterna Then
                  'cboTipoIngreso.AddItem vlstrTipoIngresoUrgencias
                  'cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveUrgencias
                  'cboTipoIngreso.AddItem vlstrTipoIngresoExterno
                  'cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveExterno
                  'cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveExterno)
123               cboTipoIngreso.AddItem vlstrTipoIngresoConsultaExterna
124               cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveConsultaExterna
              
              'Si es corta estancia
125           ElseIf vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoCortaEstancia Then
126               cboTipoIngreso.AddItem vlstrTipoIngresoCortaEstancia
127               cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveCortaEstancia
128               cboTipoIngreso.AddItem vlstrTipoIngresoInternoFueCortaEstancia
129               cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveInternoFueCortaEstancia
130               cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveInternoFueAmbulatorio)
              
              'Si es interno fue corta estancia
131           ElseIf vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoInternoFueCortaEstancia Then
132               cboTipoIngreso.AddItem vlstrTipoIngresoInternoFueCortaEstancia
133               cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveInternoFueCortaEstancia
134               cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveInternoFueCortaEstancia)
              
              'si es corta estancia fue ambulatorio
135           ElseIf vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoCortaEstanciaFueAmbulatorio Then
136               cboTipoIngreso.AddItem vlstrTipoIngresoCortaEstanciaFueAmbulatorio
137               cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveCortaEstanciaFueAmbulatorio
138               cboTipoIngreso.AddItem vlstrTipoIngresoInternoFueCortaEstancia
139               cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveInternoFueCortaEstancia
140               cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveCortaEstanciaFueAmbulatorio)
              
141           End If
              
          ElseIf cgstrModulo = "PV" And vgstrForma = "frmPresupuestos" Then
143           cboTipoIngreso.AddItem vlstrTipoIngresoPrepago
144           cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCvePrepago
146           cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCvePrepago)
147       Else
148           cboTipoIngreso.AddItem vlstrTipoIngresoUrgencias
149           cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveUrgencias
150           cboTipoIngreso.AddItem vlstrTipoIngresoExterno
151           cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveExterno
152           cboTipoIngreso.AddItem vlstrTipoIngresoConsultaExterna
153           cboTipoIngreso.ItemData(cboTipoIngreso.NewIndex) = clngCveConsultaExterna
154       End If

   Exit Sub
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaTipoIngreso" & " Linea:" & Erl()))
       Unload Me
End Sub

Private Sub pLlenaDeptoIngreso()
    On Error GoTo NotificaError

    vlstrSentencia = "select smiCveDepartamento, vchDescripcion from NODepartamento where bitEstatus = 1 and (bitAtiendePacientes = 1 or smiCveDepartamento = " & vlintDeptoAdmision & ")" & _
                     " AND ( (" & llngCveSucursal & " > 0  AND NODEPARTAMENTO.SMICVEDEPARTAMENTO IN (SELECT INTCVEDEPARTAMENTO FROM GNSUCURSALDEPARTAMENTO WHERE INTCVESUCURSAL = " & llngCveSucursal & ")) " & _
                     "   OR (" & llngCveSucursal & " <= 0 AND NODEPARTAMENTO.SMICVEDEPARTAMENTO NOT IN (SELECT INTCVEDEPARTAMENTO FROM GNSUCURSALDEPARTAMENTO))" & _
                     "   OR NODEPARTAMENTO.SMICVEDEPARTAMENTO = " & vlintDeptoAdmision & ") "
    Set rs = frsRegresaRs(vlstrSentencia)
    If rs.RecordCount <> 0 Then
        pLlenarCboRs_new cboDeptoIngreso, rs, 0, 1
    End If
    rs.Close

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaDeptoIngreso"))
    Unload Me
End Sub

Private Sub pLlenaProcedencia()
    On Error GoTo NotificaError
    Dim vllngCveProcedencia  As Long
    
    vllngCveProcedencia = 0
    
    If cboProcedencia.ListCount <> 0 Then
        If cboProcedencia.ListIndex <> -1 Then
            vllngCveProcedencia = cboProcedencia.ItemData(cboProcedencia.ListIndex)
        End If
    End If
    
    vlstrSentencia = "select intCveProcedencia, vchDescripcion, bitactivo from AdProcedencia where bitactivo=1"
    Set rs = frsRegresaRs(vlstrSentencia)

    pLlenarCboRs_new cboProcedencia, rs, 0, 1, IIf(cgstrModulo = "AD", 1, 0)

    If vllngCveProcedencia <> 0 Then
        cboProcedencia.ListIndex = flngLocalizaCbo_new(cboProcedencia, Str(vllngCveProcedencia))
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLlenaCiudad"))
    Unload Me
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
1         On Error GoTo NotificaError

2         If sstObj.Tab <> 0 Then
3             If vlintPestañaInicial = 0 Then
4                 sstObj.Tab = 0
5                 MyTabHeader1.TabCurrent = 0
6                 Cancel = True
7             End If
8         Else
9             If vlblnConsulta Then
                  If (cgstrModulo = "PV" And vgstrForma = "frmPresupuestos") Then
                    'PREPAGO
                  Else
                    '¿Desea abandonar la operación?
10                  If MsgBox(SIHOMsg(17), vbQuestion + vbYesNo, "Mensaje") = vbYes Then
11                      pLimpia
12                      cboTipoIngreso.SetFocus
                        'Bandera que indica si se verifica la empresa
13                      vlblnVerificaEmpresa = False
14                      vlblnConsultaEmpresa = False
15                      lblnDePestanaPrepago = False
                        
16                      vlblnPestanaGeneral = False
                        
17                      txtApellidoPaterno.SetFocus
                        
18                      FraAdjuntos.Enabled = False
19                      cmdAgregaAdjunto.Enabled = False
20                      TextNombreAdjunto.Enabled = False
21                      GrdAdjuntos.Enabled = False
22                      vlblnInternos = False
                        
23                  End If
24                  Cancel = True
                  End If
25            Else
26                If RSAdSelCuartoApropiado.State = 1 Then
27                    RSAdSelCuartoApropiado.Close
28                End If
29                If RSExDocumentoAdjunto.State = 1 Then
30                    RSExDocumentoAdjunto.Close
31                End If
                  
32            End If
33        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":Form_QueryUnload" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub GrdAdjuntos_DblClick()
    'Se cambia el estado del documento para solo borrar sólo lo que se necesita
    Dim vllngRenglonSeleccionado As Long
    
    If Trim(GrdAdjuntos.TextMatrix(1, 1)) <> "" Then
    
        vllngRenglonSeleccionado = GrdAdjuntos.Row
        GrdAdjuntos.TextMatrix(vllngRenglonSeleccionado, 4) = "BORRADO"
        GrdAdjuntos.RowHeight(vllngRenglonSeleccionado) = 0
        'GrdAdjuntos.RowHidden(vllngRenglonSeleccionado) = True
        
    End If
    
End Sub

Private Sub grdCuarto_DblClick()
1         On Error GoTo NotificaError
          Dim vllngContador As Long
          Dim vllngColumnas As Long
          Dim vllngRenglonSeleccionado As Long

2         If Trim(grdCuarto.TextMatrix(1, 1)) <> "" Then
          
3             vllngRenglonSeleccionado = grdCuarto.Row
          
4             For vllngContador = 1 To grdCuarto.Rows - 1
                  
5                 grdCuarto.TextMatrix(vllngContador, 0) = ""
6                 grdCuarto.Row = vllngContador
                  
7                 For vllngColumnas = 0 To grdCuarto.Cols - 1
8                     grdCuarto.Col = vllngColumnas
9                     grdCuarto.CellForeColor = vlvarColorInternamientoNormal
10                Next vllngColumnas
                  
11            Next vllngContador
              
              
12            grdCuarto.Row = vllngRenglonSeleccionado
13            grdCuarto.TextMatrix(grdCuarto.Row, 0) = ">"
              
14            RSAdSelCuartoApropiado.MoveFirst
15            vllngContador = 0
16            Do While vllngContador < grdCuarto.Row - 1
17                RSAdSelCuartoApropiado.MoveNext
18                vllngContador = vllngContador + 1
19            Loop
              
20            For vllngContador = 0 To grdCuarto.Cols - 1
21                grdCuarto.Col = vllngContador
22                grdCuarto.CellForeColor = vlvarColorRecienNacido
23            Next vllngContador
              
24            grdCuarto.Col = 1
          
25        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":grdCuarto_DblClick" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub grdCuarto_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError

    If KeyCode = vbKeyReturn Then
        grdCuarto_DblClick
        txtObservaciones.SelStart = Len(txtObservaciones.Text)
        If fblnCanFocus(txtObservaciones) Then txtObservaciones.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":grdCuarto_KeyDown"))
    Unload Me
End Sub

Private Sub grdEgresados_DblClick()
    On Error GoTo NotificaError
    
    grdEgresados_KeyDown vbKeyReturn, 0

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":grdEgresados_DblClick"))
    Unload Me
End Sub

Private Sub grdEgresados_KeyDown(KeyCode As Integer, Shift As Integer)
1         On Error GoTo NotificaError
          Dim rsUltimaCuenta As New ADODB.Recordset
          Dim vlstrSentenciaCuentaEgresado As String
          Dim rsCuentaEgresado As New ADODB.Recordset
          
2         If grdEgresados.Rows > 0 Then
3             If KeyCode = vbKeyUp Or KeyCode = vbKeyDown Then
4                 pDesSel grdEgresados, KeyCode
5             End If
6         End If
             
7         If KeyCode = vbKeyLeft Then
8             If grdEgresados.Row = 1 And grdEgresados.Col = 1 Then txtIniciales.SetFocus
9         Else
10            If KeyCode = vbKeyReturn Then
11                If Trim(grdEgresados.TextMatrix(1, 1)) <> "" Then
                      '¿Desea reingresar al paciente?
12                    If MsgBox(SIHOMsg(1067), vbYesNo + vbQuestion, "Mensaje") = vbYes Then
                          'Se trata de un reingreso
                          
                          'Bandera que indica si se verifica la empresa
13                        vlblnConsultaEmpresa = True
14                        vlblnVerificaEmpresa = True
15                        lblnDePestanaPrepago = False
16                        pLimpia
          
                          'Cuando es egresado no trae datos del ingreso solo datos personales
17                        pDatosPacientes Val(grdEgresados.TextMatrix(grdEgresados.Row, 11))
                          
18                        Set rsUltimaCuenta = frsEjecuta_SP(grdEgresados.TextMatrix(grdEgresados.Row, 11) & "|" & vgintClaveEmpresaContable & "|" & vgintNumeroDepartamento, "sp_GnSelUltimaCuentaPaciente")
19                        If Not rsUltimaCuenta.EOF Then
                              'Se agregó la siguiente condición para cuando se manda llamar la frmAdmisionPaciente desde otro módulo y se quiere consultar un paciente
                              'la funcion regresa los datos de la última cuenta si tiene estatus 'E'
20                            If rsUltimaCuenta!Estatus = "E" Then
21                                pDatosUltimaCuenta rsUltimaCuenta!cuenta, rsUltimaCuenta!tipo
22                            ElseIf rsUltimaCuenta!Estatus = "A" And rsUltimaCuenta!tipo = "E" Then
23                                pDatosIngreso rsUltimaCuenta!cuenta, rsUltimaCuenta!tipo
24                                vlblnDatosCapturados = True
25                            End If
26                        End If
                          
27                        OptEnvioPromo(0).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnSiEnvioPromo)
28                        OptEnvioPromo(1).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnNoEnvioPromo)
                          
29                        rsUltimaCuenta.Close
                          
30                        If fblnPacienteInternoPrepago(Val(grdEgresados.TextMatrix(grdEgresados.Row, 11))) Then
31                            cmdGrabar.Enabled = False
32                        End If
33                        sstObj.Tab = 0
34                        MyTabHeader1.TabCurrent = 0
35                    Else
                          'Se trata de una consulta del paciente egresado
36                        lblnDePestanaPrepago = False
                          
37                        lblnDePestanaPrepago = False
38                        pLimpia
                          
                          'Cuando es egresado no trae datos del ingreso solo datos personales
39                        pDatosPacientes Val(grdEgresados.TextMatrix(grdEgresados.Row, 11))
                          
40                        vlstrSentenciaCuentaEgresado = "SELECT EXPACIENTEINGRESO.IntNumCuenta Cuenta, SITIPOINGRESO.ChrTipoIngreso Tipo, EXPACIENTEINGRESO.ChrEstatus Estatus From EXPACIENTEINGRESO INNER JOIN SITIPOINGRESO ON EXPACIENTEINGRESO.IntCveTipoIngreso = SITIPOINGRESO.IntCveTipoingreso Where EXPACIENTEINGRESO.IntNumPaciente = " & Val(grdEgresados.TextMatrix(grdEgresados.Row, 11)) & " And EXPACIENTEINGRESO.IntNumCuenta = " & Val(grdEgresados.TextMatrix(grdEgresados.Row, 12))
41                        Set rsCuentaEgresado = frsRegresaRs(vlstrSentenciaCuentaEgresado)
42                        If Not rsCuentaEgresado.EOF Then
43                            pDatosIngreso rsCuentaEgresado!cuenta, rsCuentaEgresado!tipo
44                            vlblnDatosCapturados = True
45                            lstrEstatusPaciente = rsCuentaEgresado!Estatus
                              
                              'Si es un socio, se carga el socio en el combo (aunque el socio tenga actualmente la membresía, suspendida o dada de baja
46                            If vgLngTipoPacienteSocio = Str(cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex)) Then
                                  'Se valida si ya se tiene un socio relacionado previamente...
47                                If vlCveSocio <> 0 Then
48                                    vlstrSentencia = "Select intCveSocio, " & _
                                                       "Trim(vchApellidoPaterno)||' '||Trim(vchApellidoMaterno)||' '||Trim(vchNombre) Nombre " & _
                                                       "From SoSocio "
49                                    Set rs = frsRegresaRs(vlstrSentencia)
50                                    If rs.RecordCount <> 0 Then
51                                        pLlenarCboRs_new cboSocio, rs, 0, 1
52                                        cboSocio.ListIndex = flngLocalizaCbo_new(cboSocio, Str(vlCveSocio))
53                                    End If
54                                    rs.Close
55                                End If
56                            End If
                              
57                        End If
                          
58                        OptEnvioPromo(0).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnSiEnvioPromo)
59                        OptEnvioPromo(1).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnNoEnvioPromo)
                          
60                        rsCuentaEgresado.Close
61                        cmdAbrirCuenta.Enabled = False
62                        cmdActivarPaciente.Enabled = False
                                      
63                        cmdGrabar.Enabled = False
64                        sstObj.Tab = 0
65                        MyTabHeader1.TabCurrent = 0
66                        pHabilitaFrames False
                          
67                        If cgstrModulo = "AD" Then
68                            fraGeneralesPaciente.Enabled = True
69                            fraDomicilio.Enabled = True
70                            cmdGrabar.Enabled = True
71                            txtNombre.Enabled = False
72                            txtApellidoMaterno.Enabled = False
73                            txtApellidoPaterno.Enabled = False
74                            fraAsignacionCuarto.Enabled = False
75                        End If
                          
                          
76                    End If
77                End If
78            End If
79        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":grdEgresados_KeyDown" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Function fblnPacienteInternoPrepago(vllngNumeroExpediente As Long) As Boolean
    On Error GoTo NotificaError
    Dim rsAdmisionInterno As New ADODB.Recordset
    
    fblnPacienteInternoPrepago = False

    vlstrSentencia = "select * from AdAdmision where numNumCuenta = (select max(numNumCuenta) from AdAdmision where numCvePaciente =" & Trim(Str(vllngNumeroExpediente)) & ")"
    Set rsAdmisionInterno = frsRegresaRs(vlstrSentencia)
    If rsAdmisionInterno.RecordCount <> 0 Then
        If Trim(rsAdmisionInterno!chrEstatusAdmision) = "A" Or Trim(rsAdmisionInterno!chrEstatusAdmision) = "P" Then
            fblnPacienteInternoPrepago = True
        End If
    End If

Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fblnPacienteInternoPrepago"))
    Unload Me
End Function

Private Sub grdEgresados_KeyPress(KeyAscii As Integer)
    If grdEgresados.Col = 1 Then
        pLocalizaGrid grdEgresados, KeyAscii, True
    End If
End Sub

Private Sub grdExternos_Click()
1     On Error GoTo NotificaError
          Dim vllngContador As Long
          Dim vllngColumnas As Long
          Dim vllngRenglonSeleccionado As Long

2         If Chkpacientesactivos.Value = 1 Then
3             If Trim(grdExternos.TextMatrix(1, 1)) <> "" Then
4                 vllngRenglonSeleccionado = grdExternos.Row
          
5                 For vllngContador = 1 To grdExternos.Rows - 1
6                     grdExternos.TextMatrix(vllngContador, 0) = ""
7                     grdExternos.Row = vllngContador
          
8                     For vllngColumnas = 0 To grdExternos.Cols - 1
9                         grdExternos.Col = vllngColumnas
10                        grdExternos.CellForeColor = &H80000012
11                    Next vllngColumnas
12                Next vllngContador
          
13                grdExternos.Row = vllngRenglonSeleccionado
14                grdExternos.TextMatrix(grdExternos.Row, 0) = ">"
          
15                For vllngContador = 0 To grdExternos.Cols - 1
16                    grdExternos.Col = vllngContador
17                    grdExternos.CellForeColor = &HFF0000
18                Next vllngContador
          
19                grdExternos.Col = 1
20            End If
21        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":grdExternos_Click" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub grdExternos_DblClick()
    On Error GoTo NotificaError

    grdExternos_KeyDown vbKeyReturn, 0
    lbFlag = False

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":grdExternos_DblClick"))
    Unload Me
End Sub

Private Sub grdExternos_KeyDown(KeyCode As Integer, Shift As Integer)
1     On Error GoTo NotificaError

          Dim rsRegistroExternoPaciente As New ADODB.Recordset
          Dim rsAdmisionPaciente As New ADODB.Recordset
          Dim rsUltimaCuenta As New ADODB.Recordset
          Dim vllngCuentaExternoSeleccionada As Long
          Dim vllngUltimaCuentaExterno As Long
          Dim lngUltimaCuentaPaciente As Long
          Dim strTipoPacienteUltimaCuenta As String
          Dim strEstatus As String
          Dim vlintCveDepartamento As Integer
          Dim rsCveDepartamento As New ADODB.Recordset
          Dim rsUltimaCuentaExterno As New ADODB.Recordset

          Dim i As Integer
              
2         If grdExternos.Rows > 0 Then
3             If KeyCode = vbKeyUp Or KeyCode = vbKeyDown Then
4                 pDesSel grdExternos, KeyCode
5             End If
6         End If
          
7         If KeyCode = vbKeyReturn Then
8             If Trim(grdExternos.TextMatrix(1, 1)) <> "" Then
                  'Bandera que indica si se verifica la empresa
9                 vlblnConsultaEmpresa = True
10                vlblnVerificaEmpresa = True
11                vlblnHacerTraslado = False
              
12                pLimpia

13                With grdExternos
14                    llngNumPacienteExterno = Val(.TextMatrix(.Row, 11))
15                    vllngCuentaExternoSeleccionada = Val(.TextMatrix(.Row, 12))
                      
16                    vlstrSentencia = "Select intcvedepartamento From RegistroExterno where intNumCuenta = " & vllngCuentaExternoSeleccionada
17                    Set rsCveDepartamento = frsRegresaRs(vlstrSentencia)
18                    If rsCveDepartamento.RecordCount <> 0 Then vlintCveDepartamento = rsCveDepartamento!intCveDepartamento
19                    If vlintCveDepartamento > 0 Then
20                        vlstrSentencia = " Select Nvl(Max(intNumCuenta), 0) Cuenta" & _
                                           " from RegistroExterno " & _
                                           "      left outer join nodepartamento on (nodepartamento.smicvedepartamento = registroexterno.intcvedepartamento) " & _
                                           " where intNumPaciente = " & Str(llngNumPacienteExterno) & _
                                           "   and registroexterno.intcvedepartamento = " & vlintCveDepartamento
21                        Set rsUltimaCuentaExterno = frsRegresaRs(vlstrSentencia)
22                        If rsUltimaCuentaExterno.RecordCount <> 0 Then vllngUltimaCuentaExterno = rsUltimaCuentaExterno!cuenta
23                    Else
24                        vlstrSentencia = "Select Nvl(Max(intNumCuenta), 0) From RegistroExterno where intNumPaciente = " & Str(llngNumPacienteExterno)
25                        vllngUltimaCuentaExterno = frsRegresaRs(vlstrSentencia).Fields(0)
26                    End If
                      
                      
27                    Set rsUltimaCuenta = frsEjecuta_SP(CStr(llngNumPacienteExterno) & "|" & vgintClaveEmpresaContable & "|" & vgintNumeroDepartamento, "sp_GnSelUltimaCuentaPaciente")
28                    If Not rsUltimaCuenta.EOF Then
29                        lngUltimaCuentaPaciente = rsUltimaCuenta!cuenta
30                        strTipoPacienteUltimaCuenta = rsUltimaCuenta!tipo
31                        strEstatus = rsUltimaCuenta!Estatus
32                    Else
33                        lngUltimaCuentaPaciente = vllngUltimaCuentaExterno
34                        strTipoPacienteUltimaCuenta = "E"
35                        strEstatus = IIf(Trim(grdExternos.TextMatrix(.Row, 6)) <> "", "E", "A")
36                    End If
                      
37                    If vllngCuentaExternoSeleccionada <> vllngUltimaCuentaExterno Then
                          'La cuenta seleccionada no corresponde a la última atención otorgada al paciente,
                          'se usará como referencia la última cuenta del paciente.
38                        MsgBox SIHOMsg(576), vbOKOnly + vbInformation, "Mensaje"
39                        vllngCuentaExternoSeleccionada = vllngUltimaCuentaExterno
40                    End If

41                    txtCuentaExterno.Text = vllngCuentaExternoSeleccionada
42                    txtExpedienteInterno.Text = llngNumPacienteExterno
                      
43                    If strTipoPacienteUltimaCuenta = "I" And strEstatus = "A" Then
                          '- El paciente ya tiene cuenta como interno, se muestran los datos -'
44                        pDatosPacientes llngNumPacienteExterno
45                        pDatosIngreso lngUltimaCuentaPaciente, "I"
46                    Else
                          '- Se cargan los datos del paciente -'
47                        pDatosPacientes llngNumPacienteExterno

                          '- Asignar los datos de la última cuenta del paciente a la cuenta (tipo de paciente, convenio y empresa) -'
48                        pDatosUltimaCuenta lngUltimaCuentaPaciente, strTipoPacienteUltimaCuenta
                          
49                        vlblnHacerTraslado = IIf(strTipoPacienteUltimaCuenta = "E", True, False)
                          
                          'Interno fue externo
50                        cboTipoIngreso.ListIndex = fintLocalizaCritCbo_new(cboTipoIngreso, vlstrTipoIngresoInternoFueUrgencias)
51                        cboTipoIngreso.Enabled = False
52                        lblTipoIngreso.Enabled = False
53                        vlblnDatosCargados = True
54                    End If
                      
55                    OptEnvioPromo(0).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnSiEnvioPromo)
56                    OptEnvioPromo(1).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnNoEnvioPromo)
57                End With
                  
58                If vlblnMostrarTabGenerales Then
59                    sstObj.Tab = 0
60                    MyTabHeader1.TabCurrent = 0
                      
                      
61                End If
                  
62                For i = 0 To (lstDocumentos.ListCount - 1)
63                    If lstDocumentos.Selected(i) = True Then
64                        fraDocumentos.Enabled = True
65                        cmdImprimir.Enabled = True
                          
66                        i = lstDocumentos.ListCount
67                    End If
68                Next i
69            End If
70        End If
          
71        If KeyCode = vbKeyReturn Then
72            DoEvents
73            If MyTabHeader1.TabCurrent = 0 Then
74                If pValidaListaNegra() Then
75                        Exit Sub
76                    Else
77                End If
78            End If
79        End If
          

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":grdExternos_KeyDown" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub grdExternos_KeyPress(KeyAscii As Integer)
    If grdExternos.Col = 1 Then
        pLocalizaGrid grdExternos, KeyAscii, True
    End If
End Sub

Private Sub grdIngresosPrevios_DblClick()
On Error GoTo NotificaError

    Dim vllngColumnaActual As Long
    vlblnPacientePrevio = True

    With grdIngresosPrevios
        If (.MouseRow > 0) And (.MouseCol > 0) Then
            grdIngresosPrevios_KeyDown vbKeyReturn, 0
        Else
            If (.MouseRow = 0) And (.MouseCol > 0) Then
                vllngColumnaActual = .Col
            
                vgintColOrd = .Col
                
                'Escoge el Tipo de Ordenamiento
                If vgintTipoOrd = 1 Then
                    vgintTipoOrd = 2
                Else
                    vgintTipoOrd = 1
                End If
                pOrdColMshFGrid grdIngresosPrevios, vgintTipoOrd
                pDesSelMshFGrid grdIngresosPrevios
                pPintaGrid grdIngresosPrevios, vlvarColorIngresoPrevio
                
                .Col = vllngColumnaActual
                .Row = 1
            End If
        End If
    End With

    Exit Sub
    
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":grdIngresosPrevios_DblClick"))
    Unload Me
End Sub

Private Sub grdIngresosPrevios_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If grdIngresosPrevios.Rows > 0 Then
        If KeyCode = vbKeyUp Or KeyCode = vbKeyDown Then
            pDesSel grdIngresosPrevios, KeyCode
        End If
    End If
    
    If KeyCode = vbKeyReturn Then
        If Trim(grdIngresosPrevios.TextMatrix(1, 1)) <> "" Then
            'Bandera que indica si se verifica la empresa
            vlblnConsultaEmpresa = True
            vlblnVerificaEmpresa = False
            
            pLimpia
            
            lblnDePestanaPrepago = False
            
            pDatosPacientes Val(grdIngresosPrevios.TextMatrix(grdIngresosPrevios.Row, 1))
            
            OptEnvioPromo(0).Value = vlblnSiEnvioPromo
            OptEnvioPromo(1).Value = vlblnNoEnvioPromo
            
            vlstrTipoIngresoRegistradoPreviamente = vlstrTipoIngresoPrevio
            
            pLlenaTipoIngreso
            
            vlblnDatosCargados = True
            sstObj.Tab = 0
            MyTabHeader1.TabCurrent = 0
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":grdIngresosPrevios_KeyDown"))
    Unload Me
End Sub

Private Sub grdIngresosPrevios_KeyPress(KeyAscii As Integer)

    If grdIngresosPrevios.Col = 2 Then
        pLocalizaGrid grdIngresosPrevios, KeyAscii, True
    End If
    
End Sub

Private Sub grdInternoAmbulatorio_Click()
    grdInternoAmbulatorio.Redraw = True
    grdInternoAmbulatorio.Visible = True
    grdInternoAmbulatorio.SetFocus
    pDesSel grdInternoAmbulatorio, 40
    pPintaGridInternosAmbulatorios
End Sub

Private Sub grdInternoAmbulatorio_DblClick()
On Error GoTo NotificaError
    Dim vllngColumnaActual As Long

    vlblnInternos = True
    With grdInternoAmbulatorio
        If (.MouseRow > 0) And (.MouseCol > 0) Then
            grdInternoAmbulatorio_KeyDown vbKeyReturn, 0
        Else
            If (.MouseRow = 0) And (.MouseCol > 0) Then
                vllngColumnaActual = .Col
                vgintColOrd = .Col
                
                'Escoge el Tipo de Ordenamiento
                If vgintTipoOrd = 1 Then
                    vgintTipoOrd = 2
                Else
                    vgintTipoOrd = 1
                End If
                pOrdColMshFGrid grdInternoAmbulatorio, vgintTipoOrd
                pDesSelMshFGrid grdInternoAmbulatorio
                pPintaGridInternosAmbulatorios
                
                .Col = vllngColumnaActual
                .Row = 1
            End If
        End If
    End With
    
    Exit Sub
    
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":grdInternoAmbulatorio_DblClick"))
    Unload Me
End Sub

Private Sub grdInternoAmbulatorio_KeyDown(KeyCode As Integer, Shift As Integer)
1     On Error GoTo NotificaError
          
2         vlblnInternos = True
3         If grdInternoAmbulatorio.Rows > 0 Then
4             If KeyCode = vbKeyUp Or KeyCode = vbKeyDown Then
5                 pDesSel grdInternoAmbulatorio, KeyCode
6                 pPintaGridInternosAmbulatorios
7             End If
8         End If
              
9         If KeyCode = vbKeyReturn Then
10            If Trim(grdInternoAmbulatorio.TextMatrix(1, 1)) <> "" Then
                  'Bandera que indica si se verifica la empresa
11                vlblnConsultaEmpresa = True
12                vlblnVerificaEmpresa = False
                  
13                pLimpia
14                lblnDePestanaPrepago = False

15                pDatosPacientes Val(grdInternoAmbulatorio.TextMatrix(grdInternoAmbulatorio.Row, 1))
16                pDatosIngreso Val(grdInternoAmbulatorio.TextMatrix(grdInternoAmbulatorio.Row, 2)), "I"
17                If cboTipoIngreso.ListIndex <> -1 Then
18                    pLlenaDocumentosIngreso Trim(Str(cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex)))
19                End If
20                OptEnvioPromo(0).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnSiEnvioPromo)
21                OptEnvioPromo(1).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnNoEnvioPromo)
22                vlblnDatosCargados = True
                  
23                If vlblnMostrarTabGenerales Then
24                    sstObj.Tab = 0
25                    MyTabHeader1.TabCurrent = 0
26                    If pValidaListaNegra() Then
                          'End Sub
27                    Else
28                    End If
29                End If
30            End If
31        End If
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":grdInternoAmbulatorio_KeyDown" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub grdInternoAmbulatorio_KeyPress(KeyAscii As Integer)
    
    vlblnInternos = True
    If grdInternoAmbulatorio.Col = 3 Then
        pLocalizaGrid grdInternoAmbulatorio, KeyAscii, True
        pPintaGridInternosAmbulatorios
    End If
End Sub

Private Sub grdPrepagos_DblClick()
On Error GoTo NotificaError
    Dim vllngColumnaActual As Long

    With grdPrepagos
        If (.MouseRow > 0) And (.MouseCol > 0) Then
            grdPrepagos_KeyDown vbKeyReturn, 0
        Else
            If (.MouseRow = 0) And (.MouseCol > 0) Then
                vllngColumnaActual = .Col
                vgintColOrd = .Col
                'Escoge el Tipo de Ordenamiento
                If vgintTipoOrd = 1 Then
                    vgintTipoOrd = 2
                Else
                    vgintTipoOrd = 1
                End If
                pOrdColMshFGrid grdPrepagos, vgintTipoOrd
                pDesSelMshFGrid grdPrepagos
                pPintaGrid grdPrepagos, vlvarColorPrepagos
                
                .Col = vllngColumnaActual
                .Row = 1
            End If
        End If
    End With

    Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":grdPrepagos_DblClick"))
    Unload Me
End Sub

Private Sub grdPrepagos_KeyDown(KeyCode As Integer, Shift As Integer)
          Dim rsTemp As ADODB.Recordset
          Dim blnCargos As Boolean
          Dim dblPagos As Double
          Dim dblDevoluciones As Double
          
1     On Error GoTo NotificaError
          
2         If grdPrepagos.Rows > 0 Then
3             If KeyCode = vbKeyUp Or KeyCode = vbKeyDown Then
4                 pDesSel grdPrepagos, KeyCode
5             End If
6         End If
          
7         If KeyCode = vbKeyReturn Then
8             If Trim(grdPrepagos.TextMatrix(1, 1)) <> "" Then
                  'Bandera que indica si se verifica la empresa
9                 vlblnConsultaEmpresa = True
10                vlblnVerificaEmpresa = False
                  
11                pLimpia
12                lblnDePestanaPrepago = True

13                pDatosPacientes Val(grdPrepagos.TextMatrix(grdPrepagos.Row, 1))
14                pDatosIngreso Val(grdPrepagos.TextMatrix(grdPrepagos.Row, 2)), "I"
                   
15                OptEnvioPromo(0).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnSiEnvioPromo)
16                OptEnvioPromo(1).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnNoEnvioPromo)
17                vlblnDatosCargados = True
                  
18                sstObj.Tab = 0
19                MyTabHeader1.TabCurrent = 0
20            End If
21        End If

22        If KeyCode = vbKeyDelete Then
23            vllngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
24            If vllngPersonaGraba <> 0 Then
              
25                vgstrParametrosSP = grdPrepagos.TextMatrix(grdPrepagos.Row, 2) & "|I|0||C|N|0"
26                Set rsTemp = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelCargosPaciente")
27                blnCargos = Not rsTemp.EOF
                  
28                dblPagos = 0
29                Set rsTemp = frsEjecuta_SP(grdPrepagos.TextMatrix(grdPrepagos.Row, 2), "sp_AdSelPagosCuentaPrepago")
30                If Not rsTemp.EOF Then dblPagos = rsTemp!pagos
                  
31                dblDevoluciones = 0
32                Set rsTemp = frsEjecuta_SP(grdPrepagos.TextMatrix(grdPrepagos.Row, 2), "sp_AdSelSalidasCuentaPrepago")
33                If Not rsTemp.EOF Then dblDevoluciones = rsTemp!Devoluciones
34                rsTemp.Close
                  
35                If Not blnCargos Then
                      'Si no tiene pagos o si los pagos son iguales a las devoluciones se cancela la cuenta
36                    If dblPagos = 0 Or (dblPagos = dblDevoluciones) Then
                          'Se cancela y cierra la cuenta
                          '¿Está seguro que desea cancelar la cuenta?
37                        If MsgBox(SIHOMsg(1008), (vbQuestion + vbYesNo), "Mensaje") = vbYes Then
38                            EntornoSIHO.ConeccionSIHO.BeginTrans
39                            Call frsEjecuta_SP(grdPrepagos.TextMatrix(grdPrepagos.Row, 2), "sp_AdUpdCancelaCuentaPrepago", True)
40                            pGuardarLogTransaccion Me.Name, EnmCambiar, vllngPersonaGraba, "CANCELAR CUENTA PREPAGO", grdPrepagos.TextMatrix(grdPrepagos.Row, 2)
41                            EntornoSIHO.ConeccionSIHO.CommitTrans
                              
42                            grdPrepagos.RemoveItem (grdPrepagos.Row)
                              
                              'La información se actualizó satisfactoriamente.
43                            MsgBox SIHOMsg(284), vbOKOnly + vbInformation, "Mensaje"
44                        End If
45                    Else
                          'No se puede cancelar la cuenta, el paciente tiene pagos
46                        MsgBox SIHOMsg(1009), vbOKOnly + vbInformation, "Mensaje"
47                    End If
48                Else
                      'No se puede cancelar la cuenta, el paciente tiene cargos
49                    MsgBox SIHOMsg(1010), vbOKOnly + vbInformation, "Mensaje"
50                End If
51            End If
52        End If

        Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":grdPrepagos_KeyDown" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub grdPrepagos_KeyPress(KeyAscii As Integer)
    If grdPrepagos.Col = 3 Then
        pLocalizaGrid grdPrepagos, KeyAscii, True
    End If
End Sub

Private Sub lstAlergias_DblClick()
On Error GoTo NotificaError

    lstAlergias.RemoveItem (lstAlergias.ListIndex)
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":lstAlergias_DblClick"))
    Unload Me
End Sub

Private Sub lstAlergias_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
End Sub

Private Sub mskFechaIngreso_GotFocus()
On Error GoTo NotificaError
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
    vlstrFechaAnterior = mskFechaIngreso.Text
    pSelMkTexto mskFechaIngreso

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskFechaIngreso_GotFocus"))
    Unload Me
End Sub

Private Sub mskFechaIngreso_KeyDown(KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError

    If KeyCode = vbKeyReturn Then
        mskHoraIngreso.SetFocus
    Else
        If KeyCode <> vbKeyEscape Then          'vlblnConsulta
            If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveUrgencias _
                  And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveExterno _
                  And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveConsultaExterna Then
                'Internos
                If Not fblnRevisaPermiso(vglngNumeroLogin, 7042, "E", True) Then
                    ' Permiso 7042 Menú principal - Admisión - Fecha y hora del ingreso (Internos)
                    '¡El usuario no tiene permiso para modificar la fecha del ingreso a pacientes internos!
                    MsgBox "¡El usuario no tiene permiso para modificar la fecha del ingreso a pacientes internos!", vbOKOnly + vbInformation, "Mensaje"
                    If KeyCode = vbKeyDelete Then
                        mskFechaIngreso.Mask = ""
                        mskFechaIngreso.Text = vlstrFechaAnterior       'fdtmServerFecha
                        mskFechaIngreso.Mask = "##/##/####"
                    End If
                End If
            Else
                'Externos
                If Not fblnRevisaPermiso(vglngNumeroLogin, 7041, "E", True) Then
                    ' Permiso 7041 Menú principal - Admisión - Fecha y hora del ingreso (Externos)
                    '¡El usuario no tiene permiso para modificar la fecha del ingreso a pacientes externos!
                    MsgBox "¡El usuario no tiene permiso para modificar la fecha del ingreso a pacientes externos!", vbOKOnly + vbInformation, "Mensaje"
                    If KeyCode = vbKeyDelete Then
                        mskFechaIngreso.Mask = ""
                        mskFechaIngreso.Text = vlstrFechaAnterior
                        mskFechaIngreso.Mask = "##/##/####"
                    End If
                End If
            End If
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskFechaIngreso_KeyDown"))
    Unload Me
End Sub

Private Sub mskFechaIngreso_LostFocus()
On Error GoTo NotificaError
    
    If Not IsDate(mskFechaIngreso.Text) Then
        mskFechaIngreso.Mask = ""
        mskFechaIngreso.Text = fdtmServerFecha
        mskFechaIngreso.Mask = "##/##/####"
    ElseIf Trim(mskFechaNacimiento.ClipText) <> "" Then
        If CDate(mskFechaIngreso.Text) < CDate(mskFechaNacimiento.Text) Then
            MsgBox Replace(SIHOMsg(853), ".", "") & "la fecha de nacimiento del paciente.", vbOKOnly + vbInformation, "Mensaje"
            mskFechaIngreso.Text = fdtmServerFecha
            mskFechaIngreso.Mask = "##/##/####"
        End If
    End If
    
    If vlstrFechaAnterior <> mskFechaIngreso.Text Then
        vlblnCambioFechaIngreso = True
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskFechaIngreso_LostFocus"))
    Unload Me
End Sub

Private Sub mskFechaInicioAtencion_GotFocus()
On Error GoTo NotificaError
    
    pSelMkTexto mskFechaInicioAtencion

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskFechaInicioAtencion_GotFocus"))
    Unload Me
End Sub

Private Sub mskFechaInicioAtencion_KeyDown(KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        mskFechaTerminoAtencion.SetFocus
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskFechaInicioAtencion_KeyDown"))
    Unload Me
End Sub

Private Sub mskFechaInicioAtencion_LostFocus()
On Error GoTo NotificaError

    If Not IsDate(mskFechaInicioAtencion.Text) Then
        mskFechaInicioAtencion.Mask = ""
        mskFechaInicioAtencion.Text = fdtmServerFecha
        mskFechaInicioAtencion.Mask = "##/##/####"
    Else
        If CDate(mskFechaInicioAtencion.Text) > fdtmServerFecha Then
            '¡La fecha debe ser menor o igual a la del sistema!
            MsgBox SIHOMsg(40), vbOKOnly + vbInformation, "Mensaje"
            mskFechaInicioAtencion.Mask = ""
            mskFechaInicioAtencion.Text = fdtmServerFecha
            mskFechaInicioAtencion.Mask = "##/##/####"
        End If
    End If
    pCargaExternos
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskFechaInicioAtencion_LostFocus"))
    Unload Me
End Sub

Private Sub mskFechaNacimiento_GotFocus()
On Error GoTo NotificaError
    
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
    pSelMkTexto mskFechaNacimiento

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskFechaNacimiento_GotFocus"))
    Unload Me
End Sub

Private Sub mskFechaNacimiento_KeyDown(KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        If Trim(txtApellidoPaterno.Text) <> "" And Trim(txtApellidoMaterno.Text) <> "" And Trim(txtNombre.Text) <> "" And IsDate(mskFechaNacimiento.Text) Then
            mskRFC.Mask = ""
            mskRFC.Text = fstrRFC(Trim(txtApellidoPaterno.Text), Trim(txtApellidoMaterno.Text), Trim(txtNombre.Text), Trim(mskFechaNacimiento.Text))
        End If
        
        If optSexo(0).Value Then
            optSexo(0).SetFocus
        Else
            If optSexo(1).Value Then
                optSexo(1).SetFocus
            Else
                optSexo(0).SetFocus
            End If
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskFechaNacimiento_KeyDown"))
    Unload Me
End Sub

Private Sub mskFechaNacimiento_LostFocus()
On Error GoTo NotificaError
    
    If IsDate(mskFechaNacimiento.Text) Then
        If (mskFechaNacimiento.Text > fdtmServerFecha) Or (mskFechaNacimiento.Text < CDate("01/01/1900")) Then
            MsgBox SIHOMsg(254), vbOKOnly + vbInformation, "Mensaje"
            mskFechaNacimiento.SetFocus
        End If
        txtEdad.Text = fstrObtieneEdad(CDate(mskFechaNacimiento.Text), fdtmServerFecha)
    Else
        txtEdad.Text = ""
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskFechaNacimiento_LostFocus"))
    Unload Me
End Sub

Private Sub mskFechaTerminoAtencion_GotFocus()
On Error GoTo NotificaError
    
    pSelMkTexto mskFechaTerminoAtencion

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskFechaTerminoAtencion_GotFocus"))
    Unload Me
End Sub

Private Sub mskFechaTerminoAtencion_KeyDown(KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtInicialesExternos.SetFocus
    End If
        
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskFechaTerminoAtencion_KeyDown"))
    Unload Me
End Sub

Private Sub mskFechaTerminoAtencion_LostFocus()
On Error GoTo NotificaError
    
    If Not IsDate(mskFechaTerminoAtencion.Text) Then
        mskFechaTerminoAtencion.Mask = ""
        mskFechaTerminoAtencion.Text = fdtmServerFecha
        mskFechaTerminoAtencion.Mask = "##/##/####"
    Else
        If CDate(mskFechaTerminoAtencion.Text) > fdtmServerFecha Then
            '¡La fecha debe ser menor o igual a la del sistema!
            MsgBox SIHOMsg(40), vbOKOnly + vbInformation, "Mensaje"
            mskFechaTerminoAtencion.Mask = ""
            mskFechaTerminoAtencion.Text = fdtmServerFecha
            mskFechaTerminoAtencion.Mask = "##/##/####"
        End If
    End If
    pCargaExternos
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskFechaTerminoAtencion_LostFocus"))
    Unload Me
End Sub

Private Sub mskHoraIngreso_GotFocus()
On Error GoTo NotificaError
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
    vlstrHoraAnterior = mskHoraIngreso.Text
    pSelMkTexto mskHoraIngreso

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskHoraIngreso_GotFocus"))
    Unload Me
End Sub

Private Sub mskHoraIngreso_KeyDown(KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError

    If KeyCode = vbKeyReturn Then
        SendKeys vbTab
    Else
        If KeyCode <> vbKeyEscape Then          'vlblnConsulta
            If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveUrgencias _
                  And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveExterno _
                  And cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) <> clngCveConsultaExterna Then
                'Internos
                If Not fblnRevisaPermiso(vglngNumeroLogin, 7042, "E", True) Then
                    ' Permiso 7042 Menú principal - Admisión - Fecha y hora del ingreso (Internos)
                    '¡El usuario no tiene permiso para modificar la hora del ingreso a pacientes internos!
                    MsgBox "¡El usuario no tiene permiso para modificar la hora del ingreso a pacientes internos!", vbOKOnly + vbInformation, "Mensaje"
                    If KeyCode = vbKeyDelete Then
                        mskHoraIngreso.Mask = ""
                        mskHoraIngreso.Text = IIf(Len(Trim(Str(Hour(vlstrHoraAnterior)))) = 1, "0" + Trim(Str(Hour(vlstrHoraAnterior))), Trim(Str(Hour(vlstrHoraAnterior)))) + ":" + IIf(Len(Trim(Str(Minute(vlstrHoraAnterior)))) = 1, "0" + Trim(Str(Minute(vlstrHoraAnterior))), Trim(Str(Minute(vlstrHoraAnterior))))
                        mskHoraIngreso.Mask = "##:##"
                    End If
                End If
            Else
                'Externos
                If Not fblnRevisaPermiso(vglngNumeroLogin, 7041, "E", True) Then
                    ' Permiso 7041 Menú principal - Admisión - Fecha y hora del ingreso (Externos)
                    '¡El usuario no tiene permiso para modificar la hora del ingreso a pacientes externos!
                    MsgBox "¡El usuario no tiene permiso para modificar la hora del ingreso a pacientes externos!", vbOKOnly + vbInformation, "Mensaje"
                    If KeyCode = vbKeyDelete Then
                        mskHoraIngreso.Mask = ""
                        mskHoraIngreso.Text = IIf(Len(Trim(Str(Hour(vlstrHoraAnterior)))) = 1, "0" + Trim(Str(Hour(vlstrHoraAnterior))), Trim(Str(Hour(vlstrHoraAnterior)))) + ":" + IIf(Len(Trim(Str(Minute(vlstrHoraAnterior)))) = 1, "0" + Trim(Str(Minute(vlstrHoraAnterior))), Trim(Str(Minute(vlstrHoraAnterior))))
                        mskHoraIngreso.Mask = "##:##"
                    End If
                End If
            End If
        End If
End If
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskHoraIngreso_KeyDown"))
    Unload Me
End Sub

Private Sub mskHoraIngreso_LostFocus()
On Error GoTo NotificaError
    
    If Not IsDate(mskHoraIngreso.Text) Then
        mskHoraIngreso.Mask = ""
        mskHoraIngreso.Text = IIf(Len(Trim(Str(Hour(fdtmServerHora)))) = 1, "0" + Trim(Str(Hour(fdtmServerHora))), Trim(Str(Hour(fdtmServerHora)))) + ":" + IIf(Len(Trim(Str(Minute(fdtmServerHora)))) = 1, "0" + Trim(Str(Minute(fdtmServerHora))), Trim(Str(Minute(fdtmServerHora))))
        mskHoraIngreso.Mask = "##:##"
    End If
        
    If vlstrHoraAnterior <> mskHoraIngreso.Text Then
        vlblnCambioHoraIngreso = True
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskHoraIngreso_LostFocus"))
    Unload Me
End Sub

Private Sub mskNacimientoConyuge_GotFocus()
    pSelMkTexto mskNacimientoConyuge
End Sub

Private Sub mskNacimientoConyuge_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        SendKeys vbTab
    End If
End Sub

Private Sub mskNacimientoConyuge_LostFocus()
    If IsDate(mskNacimientoConyuge.Text) Then
        If (mskNacimientoConyuge.Text > fdtmServerFecha) Or (mskNacimientoConyuge.Text < CDate("01/01/1900")) Then
            MsgBox SIHOMsg(254), vbOKOnly + vbInformation, "Mensaje"
            mskNacimientoConyuge.SetFocus
        Else
            If llngCveParentescoEmergencia = llngCveParentescoConyuge Then
                mskNacimientoEmergencia.Mask = ""
                mskNacimientoEmergencia.Text = mskNacimientoConyuge.Text
                mskNacimientoEmergencia.Mask = "##/##/####"
            End If
            If llngCveParentescoResponsable = llngCveParentescoConyuge Then
                mskNacimientoResponsable.Mask = ""
                mskNacimientoResponsable.Text = mskNacimientoConyuge.Text
                mskNacimientoResponsable.Mask = "##/##/####"
            End If
        End If
    Else
        If llngCveParentescoEmergencia = llngCveParentescoConyuge Then
            mskNacimientoEmergencia.Mask = ""
            mskNacimientoEmergencia.Text = ""
            mskNacimientoEmergencia.Mask = "##/##/####"
        End If
        If llngCveParentescoResponsable = llngCveParentescoConyuge Then
            mskNacimientoResponsable.Mask = ""
            mskNacimientoResponsable.Text = ""
            mskNacimientoResponsable.Mask = "##/##/####"
        End If
    End If
End Sub

Private Sub mskNacimientoEmergencia_GotFocus()
    pSelMkTexto mskNacimientoEmergencia
End Sub

Private Sub mskNacimientoEmergencia_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        cmdCambiarFamiliarResponsable.SetFocus
    End If
End Sub

Private Sub mskNacimientoEmergencia_LostFocus()
    If IsDate(mskNacimientoEmergencia.Text) Then
        If (mskNacimientoEmergencia.Text > fdtmServerFecha) Or (mskNacimientoEmergencia.Text < CDate("01/01/1900")) Then
            MsgBox SIHOMsg(254), vbOKOnly + vbInformation, "Mensaje"
            mskNacimientoEmergencia.SetFocus
        End If
    End If
End Sub

Private Sub mskNacimientoMadre_GotFocus()
    pSelMkTexto mskNacimientoMadre
End Sub

Private Sub mskNacimientoMadre_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If chkForaneo.Value = 1 Then
            txtDomicilioForaneo.SetFocus
        Else
            SendKeys vbTab
        End If
    End If
End Sub

Private Sub mskNacimientoMadre_LostFocus()
    If IsDate(mskNacimientoMadre.Text) Then
        If (mskNacimientoMadre.Text > fdtmServerFecha) Or (mskNacimientoMadre.Text < CDate("01/01/1900")) Then
            MsgBox SIHOMsg(254), vbOKOnly + vbInformation, "Mensaje"
            mskNacimientoMadre.SetFocus
        Else
            If llngCveParentescoEmergencia = llngCveParentescoMadre Then
                mskNacimientoEmergencia.Mask = ""
                mskNacimientoEmergencia.Text = mskNacimientoMadre.Text
                mskNacimientoEmergencia.Mask = "##/##/####"
            End If
            If llngCveParentescoResponsable = llngCveParentescoMadre Then
                mskNacimientoResponsable.Mask = ""
                mskNacimientoResponsable.Text = mskNacimientoMadre.Text
                mskNacimientoResponsable.Mask = "##/##/####"
            End If
        End If
    Else
        If llngCveParentescoEmergencia = llngCveParentescoMadre Then
            mskNacimientoEmergencia.Mask = ""
            mskNacimientoEmergencia.Text = ""
            mskNacimientoEmergencia.Mask = "##/##/####"
        End If
        If llngCveParentescoResponsable = llngCveParentescoMadre Then
            mskNacimientoResponsable.Mask = ""
            mskNacimientoResponsable.Text = ""
            mskNacimientoResponsable.Mask = "##/##/####"
        End If
    End If
End Sub

Private Sub mskNacimientoPadre_GotFocus()
    pSelMkTexto mskNacimientoPadre
End Sub

Private Sub mskNacimientoPadre_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        txtMadre.SetFocus
    End If
End Sub

Private Sub mskNacimientoPadre_LostFocus()
    If IsDate(mskNacimientoPadre.Text) Then
        If (mskNacimientoPadre.Text > fdtmServerFecha) Or (mskNacimientoPadre.Text < CDate("01/01/1900")) Then
            MsgBox SIHOMsg(254), vbOKOnly + vbInformation, "Mensaje"
            mskNacimientoPadre.SetFocus
        Else
            If llngCveParentescoEmergencia = llngCveParentescoPadre Then
                mskNacimientoEmergencia.Mask = ""
                mskNacimientoEmergencia.Text = mskNacimientoPadre.Text
                mskNacimientoEmergencia.Mask = "##/##/####"
            End If
            If llngCveParentescoResponsable = llngCveParentescoPadre Then
                mskNacimientoResponsable.Mask = ""
                mskNacimientoResponsable.Text = mskNacimientoPadre.Text
                mskNacimientoResponsable.Mask = "##/##/####"
            End If
        End If
    Else
        If llngCveParentescoEmergencia = llngCveParentescoPadre Then
            mskNacimientoEmergencia.Mask = ""
            mskNacimientoEmergencia.Text = ""
            mskNacimientoEmergencia.Mask = "##/##/####"
        End If
        If llngCveParentescoResponsable = llngCveParentescoPadre Then
            mskNacimientoResponsable.Mask = ""
            mskNacimientoResponsable.Text = ""
            mskNacimientoResponsable.Mask = "##/##/####"
        End If
    End If
End Sub

Private Sub mskNacimientoResponsable_GotFocus()
    pSelMkTexto mskNacimientoResponsable
End Sub

Private Sub mskNacimientoResponsable_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        txtLugarTrabajoResponsable.SetFocus
    End If
End Sub

Private Sub mskNacimientoResponsable_LostFocus()
    If IsDate(mskNacimientoResponsable.Text) Then
        If (mskNacimientoResponsable.Text > fdtmServerFecha) Or (mskNacimientoResponsable.Text < CDate("01/01/1900")) Then
            MsgBox SIHOMsg(254), vbOKOnly + vbInformation, "Mensaje"
            mskNacimientoResponsable.SetFocus
        End If
    End If
End Sub

Private Sub mskRFC_GotFocus()
On Error GoTo NotificaError
    
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
    pSelMkTexto mskRFC

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskRFC_GotFocus"))
    Unload Me
End Sub

Private Sub mskRFC_KeyDown(KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtCurp.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":mskRFC_KeyDown"))
    Unload Me
End Sub

Private Sub mskRFC_KeyPress(KeyAscii As Integer)
    KeyAscii = fNoAdmitePipes(KeyAscii)
End Sub

Private Sub MyCombo1_Click()

End Sub

Private Sub MyTabHeader1_Click(Index As Integer)
    sstObj.Tab = Index
End Sub

Private Sub optCriterio_Click(Index As Integer)
On Error GoTo NotificaError
    
    txtIniciales.Text = ""

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":optCriterio_Click"))
    Unload Me
End Sub

Private Sub optCriterio_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtIniciales.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":optCriterio_KeyDown"))
    Unload Me
End Sub

Private Sub optCriterio2_Click(Index As Integer)
On Error GoTo NotificaError
    
    txtInicialesExternos.Text = ""
    tmrCargaExternos.Enabled = True

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":optCriterio2_Click"))
    Unload Me
End Sub

Private Sub optCriterio2_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtInicialesExternos.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":optCriterio2_KeyDown"))
    Unload Me
End Sub

Private Sub pHabilitaForaneo(vlblnHabilita As Boolean)
On Error GoTo NotificaError

    lblDomicilioForaneo.Enabled = vlblnHabilita
    lblColoniaForanea.Enabled = vlblnHabilita
    lblCodigoPostalForaneo.Enabled = vlblnHabilita
    lblTelefonoForaneo.Enabled = vlblnHabilita
    lblCiudadForanea.Enabled = vlblnHabilita
    
    txtDomicilioForaneo.Enabled = vlblnHabilita
    txtColoniaForanea.Enabled = vlblnHabilita
    txtCodigoPostalForaneo.Enabled = vlblnHabilita
    txtTelefonoForaneo.Enabled = vlblnHabilita
    cboCiudadForanea.Enabled = vlblnHabilita
    txtDomicilioForaneo.Text = ""
    txtColoniaForanea.Text = ""
    txtCodigoPostalForaneo.Text = ""
    txtTelefonoForaneo.Text = ""
    If vlblnHabilita = True Then
    cboCiudadForanea.ListIndex = 1
    Else
    cboCiudadForanea.ListIndex = -1
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pHabilitaForaneo"))
    Unload Me
End Sub

Private Sub OptEnvioPromo_GotFocus(Index As Integer)
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
End Sub

Private Sub OptEnvioPromo_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    If KeyCode = vbKeyReturn Then
        SendKeys vbTab
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":OptEnvioPromo_KeyDown"))
    Unload Me
End Sub

Private Sub optOrden_GotFocus(Index As Integer)
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
End Sub

Private Sub optOrden_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        SendKeys vbTab
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":optOrden_KeyDown"))
    Unload Me
End Sub

Private Sub OptPaqueteOtros_Click(Index As Integer)
    pCargaPaquetosOtros
    If OptPaqueteOtros(0).Value Then
        cmdHonorarios.Enabled = True
     Else
        cmdHonorarios.Enabled = False
    End If
End Sub

Private Sub OptPaqueteOtros_GotFocus(Index As Integer)
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
End Sub

Private Sub OptPaqueteOtros_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        SendKeys vbTab
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":OptPaqueteOtros_KeyDown"))
    Unload Me
End Sub

Private Sub optSeleccion_Click(Index As Integer)
On Error GoTo NotificaError
Dim vllngContador As Long
    
    If optSeleccion(2).Value Then
        pLlenaDocumentosIngreso Trim(Str(cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex)))
    Else
        If lstDocumentos.ListCount <> 0 Then
            For vllngContador = 0 To lstDocumentos.ListCount - 1
                lstDocumentos.Selected(vllngContador) = IIf(optSeleccion(0).Value, True, False)
            Next vllngContador
        End If
    End If

    If lstDocumentos.ListCount > 0 Then lstDocumentos.ListIndex = 0

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":optSeleccion_Click"))
    Unload Me
End Sub

Private Sub optSexo_GotFocus(Index As Integer)
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
End Sub

Private Sub optSexo_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        mskRFC.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":optSexo_KeyDown"))
    Unload Me
End Sub

Private Sub SSTObj_Click(PreviousTab As Integer)
1     On Error GoTo NotificaError
          
2         FraCancelar.Visible = False
          
          'Captura inicial del ingreso
3         If sstObj.Tab = 0 Then
4             fraGrabar.Visible = True
5         End If
          
          'Continuación captura ingreso
6         If sstObj.Tab = 1 Then
7             fraGrabar.Visible = True
8         End If
          
          'Consulta de internos / ambulatorios
9         If sstObj.Tab = 2 Then
10            fraGrabar.Visible = False
11            pCargaInternosAmbulatorios
12            pDesSel grdInternoAmbulatorio, 40
13            pPintaGridInternosAmbulatorios
14        End If
          
          'Consulta de prepagos
15        If sstObj.Tab = 3 Then
16            fraGrabar.Visible = False
17            pCargaPrepagos
18        End If
          
          'Consulta de ingresos previos
19        If sstObj.Tab = 4 Then
20            fraGrabar.Visible = False
21            pCargaIngresosPrevios
22        End If
          
          'Consulta de egresados
23        If sstObj.Tab = 5 Then
24            fraGrabar.Visible = False
25            FraCancelar.Visible = True
26            cmdCancelarEgreso.Enabled = True
27            optCriterio(0).Value = True
28            pLimpiaGrid grdEgresados, 13
29            pConfiguraGridEgresados
              'txtIniciales.SetFocus
30            chkFecEgr.SetFocus
31        End If
          
          'Consulta de externos
32        If sstObj.Tab = 6 Then
33            Chkpacientesactivos.Value = 1
34            cmdActivaExterno.Visible = True
35            Frame4.Caption = "Rango de fechas de activación"
36            Frame5.Caption = "Departamento donde se activó el paciente externo"
              
37            fraGrabar.Visible = False
38            optCriterio2(0).Value = True
              
39            mskFechaInicioAtencion.Mask = ""
40            mskFechaInicioAtencion.Text = fdtmServerFecha
41            mskFechaInicioAtencion.Mask = "##/##/####"
              
42            mskFechaTerminoAtencion.Mask = ""
43            mskFechaTerminoAtencion.Text = fdtmServerFecha
44            mskFechaTerminoAtencion.Mask = "##/##/####"
              
45            cboDepartamentoAtiende.ListIndex = flngLocalizaCbo_new(cboDepartamentoAtiende, Str(vlintDeptoAdmision))
46            If cboDepartamentoAtiende.ListIndex = -1 Then
47                cboDepartamentoAtiende.ListIndex = 0
48            End If
              
49            pCargaExternos
              
50            If Trim(grdExternos.TextMatrix(1, 1)) <> "" Then
51                grdExternos.SetFocus
52            Else
53                txtInicialesExternos.SetFocus
54            End If
55        End If
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":sstObj_Click" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pPintaGridInternosAmbulatorios()
1         On Error GoTo NotificaError
          Dim vllngRenglon As Long
          Dim vllngColumna As Long
          Dim vllngRengSel As Long
          Dim vllngActCol As Long
          
2         vllngActCol = grdInternoAmbulatorio.Col
3         vllngRengSel = 0

4         grdInternoAmbulatorio.Visible = False
5         For vllngRenglon = 1 To grdInternoAmbulatorio.Rows - 1

6             grdInternoAmbulatorio.Row = vllngRenglon
                  
7             If grdInternoAmbulatorio.CellBackColor <> vbActiveTitleBar Then
8                 For vllngColumna = 1 To grdInternoAmbulatorio.Cols - 1
9                     grdInternoAmbulatorio.Col = vllngColumna
                      
10                    If Trim(grdInternoAmbulatorio.TextMatrix(vllngRenglon, 21)) = "1" Then
11                        grdInternoAmbulatorio.CellForeColor = vlvarColorInternamientoNormal
12                    End If
13                    If Trim(grdInternoAmbulatorio.TextMatrix(vllngRenglon, 21)) = "2" Then
14                        grdInternoAmbulatorio.CellForeColor = vlvarColorAmbulatorio
15                    End If
16                    If Trim(grdInternoAmbulatorio.TextMatrix(vllngRenglon, 21)) = "4" Then
17                        grdInternoAmbulatorio.CellForeColor = vlvarColorInternoFueExterno
18                    End If
19                    If Trim(grdInternoAmbulatorio.TextMatrix(vllngRenglon, 21)) = "5" Then
20                        grdInternoAmbulatorio.CellForeColor = vlvarColorInternoFueAmbulatorio
21                    End If
22                    If Trim(grdInternoAmbulatorio.TextMatrix(vllngRenglon, 21)) = "6" Then
23                        grdInternoAmbulatorio.CellForeColor = vlvarColorRecienNacido
24                    End If
25                    If Trim(grdInternoAmbulatorio.TextMatrix(vllngRenglon, 21)) = "9" Then
26                        grdInternoAmbulatorio.CellForeColor = vlvarColorExpress
27                    End If
28                    If Trim(grdInternoAmbulatorio.TextMatrix(vllngRenglon, 21)) = "11" Then
29                        grdInternoAmbulatorio.CellForeColor = vlvarColorCortaEstancia
30                    End If
31                    If Trim(grdInternoAmbulatorio.TextMatrix(vllngRenglon, 21)) = "12" Then
32                        grdInternoAmbulatorio.CellForeColor = vlvarColorInternoFueCortaEstancia
33                    End If
34                    If Trim(grdInternoAmbulatorio.TextMatrix(vllngRenglon, 21)) = "13" Then
35                        grdInternoAmbulatorio.CellForeColor = vlvarColorCortaEstanciaFueAmbulatorio
36                    End If
37                Next vllngColumna
38            Else
39               vllngRengSel = grdInternoAmbulatorio.Row
40            End If
41        Next vllngRenglon
          
42        If vllngRengSel <= 0 Then vllngRengSel = 1
          
43        grdInternoAmbulatorio.RowPosition(vllngRengSel) = vllngRengSel
44        grdInternoAmbulatorio.Row = vllngRengSel
45        grdInternoAmbulatorio.Col = vllngActCol
46        grdInternoAmbulatorio.Redraw = True
47        grdInternoAmbulatorio.Visible = True
48        If grdInternoAmbulatorio.Visible And grdInternoAmbulatorio.Enabled Then
49            grdInternoAmbulatorio.SetFocus
50        End If
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pPintaGridInternosAmbulatorios" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pPintaGrid(grdGrid As MSHFlexGrid, vlvarColor As Variant)
On Error GoTo NotificaError
Dim vllngRenglon As Long
Dim vllngColumna As Long

    grdGrid.Visible = False
    For vllngRenglon = 1 To grdGrid.Rows - 1
        grdGrid.Row = vllngRenglon
    
        For vllngColumna = 1 To grdGrid.Cols - 1
            grdGrid.Col = vllngColumna
            grdGrid.CellForeColor = vlvarColorPrepagos
        Next vllngColumna
    
    Next vllngRenglon
    grdGrid.Visible = True

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pPintaGrid"))
    Unload Me
End Sub

Private Sub pCargaIngresosPrevios()
1         On Error GoTo NotificaError
          Dim vllngRenglon As Long
          Dim vllngColumna As Long

2         grdIngresosPrevios.Visible = False
          
3         pLimpiaGrid grdIngresosPrevios, 9

4         vgstrParametrosSP = vgintNumeroDepartamento
                  
5         Set RSAdSelIngresosPrevios = frsEjecuta_SP(vgstrParametrosSP, "SP_ADSELINGRESOSPREVIOS")
                  
6         With RSAdSelIngresosPrevios
7             If .RecordCount <> 0 Then
8                 .MoveFirst
9                 Do While Not .EOF
10                    If Trim(grdIngresosPrevios.TextMatrix(1, 1)) = "" Then
11                        vllngRenglon = 1
12                    Else
13                        vllngRenglon = grdIngresosPrevios.Rows
14                        grdIngresosPrevios.Rows = grdIngresosPrevios.Rows + 1
15                    End If
16                    grdIngresosPrevios.Row = vllngRenglon
17                    For vllngColumna = 0 To .Fields.Count - 1
18                        grdIngresosPrevios.Col = vllngColumna + 1
19                        grdIngresosPrevios.CellForeColor = vlvarColorIngresoPrevio
20                        If IsDate(.Fields(vllngColumna)) Then
21                            If Year(.Fields(vllngColumna)) < Year(fdtmServerFecha) Then
22                                grdIngresosPrevios.TextMatrix(vllngRenglon, vllngColumna + 1) = .Fields(vllngColumna)
23                            Else
24                                grdIngresosPrevios.TextMatrix(vllngRenglon, vllngColumna + 1) = Format(.Fields(vllngColumna), "dd/mmm/yyyy")
25                            End If
26                        Else
27                            If Not IsNull(.Fields(vllngColumna)) Then
28                                grdIngresosPrevios.TextMatrix(vllngRenglon, vllngColumna + 1) = .Fields(vllngColumna)
29                            End If
30                        End If
31                    Next vllngColumna
32                    .MoveNext
33                Loop
34            End If
35            .Close
36        End With

37        pConfiguraGridIngresosPrevios

38        grdIngresosPrevios.Visible = True

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pCargaIngresosPrevios" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pCargaPrepagos()
1     On Error GoTo NotificaError
      Dim vllngRenglon As Long
      Dim vllngColumna As Long

2         grdPrepagos.Visible = False
          
3         pLimpiaGrid grdPrepagos, 9

4         vgstrParametrosSP = vgintNumeroDepartamento
                  
5         Set RSAdSelPrepagos = frsEjecuta_SP(vgstrParametrosSP, "SP_ADSELPREPAGOS")

6         With RSAdSelPrepagos
7             If .RecordCount <> 0 Then
8                 .MoveFirst
9                 Do While Not .EOF
10                    If Trim(grdPrepagos.TextMatrix(1, 1)) = "" Then
11                        vllngRenglon = 1
12                    Else
13                        vllngRenglon = grdPrepagos.Rows
14                        grdPrepagos.Rows = grdPrepagos.Rows + 1
15                    End If
16                    grdPrepagos.Row = vllngRenglon
17                    For vllngColumna = 0 To .Fields.Count - 1
18                        grdPrepagos.Col = vllngColumna + 1
19                        grdPrepagos.CellForeColor = vlvarColorPrepagos
20                        If IsDate(.Fields(vllngColumna)) Then
21                            If Year(.Fields(vllngColumna)) < Year(fdtmServerFecha) Then
22                                grdPrepagos.TextMatrix(vllngRenglon, vllngColumna + 1) = .Fields(vllngColumna)
23                            Else
24                                grdPrepagos.TextMatrix(vllngRenglon, vllngColumna + 1) = Format(.Fields(vllngColumna), "dd/mmm/yyyy")
25                            End If
26                        Else
27                            grdPrepagos.TextMatrix(vllngRenglon, vllngColumna + 1) = IIf(IsNull(.Fields(vllngColumna)), "", .Fields(vllngColumna))
28                        End If
29                    Next vllngColumna
30                    .MoveNext
31                Loop
32            End If
33            .Close
34        End With

35        pConfiguraGridPrepagos

36        grdPrepagos.Visible = True

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pCargaPrepagos" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pCargaInternosAmbulatorios()
1     On Error GoTo NotificaError
      Dim vllngRenglon As Long
      Dim vllngColumna As Long
      Dim vlintYear As Integer

2         vlintYear = Year(fdtmServerFecha)

3         grdInternoAmbulatorio.Visible = False
          
4         pLimpiaGrid grdInternoAmbulatorio, 23

5         vgstrParametrosSP = vgintNumeroDepartamento
6         Set RSAdSelInternosAmbulatorios = frsEjecuta_SP(vgstrParametrosSP, "SP_ADSELINTERNOSAMBULATORIOS")

7         If RSAdSelInternosAmbulatorios.RecordCount <> 0 Then
8             With RSAdSelInternosAmbulatorios

9                 .MoveFirst
10                Do While Not .EOF
                      
11                    If Trim(grdInternoAmbulatorio.TextMatrix(1, 1)) = "" Then
12                        vllngRenglon = 1
13                    Else
14                        vllngRenglon = grdInternoAmbulatorio.Rows
15                        grdInternoAmbulatorio.Rows = grdInternoAmbulatorio.Rows + 1
16                    End If
                      
17                    grdInternoAmbulatorio.Row = vllngRenglon
18                    For vllngColumna = 0 To .Fields.Count - 1
19                        grdInternoAmbulatorio.Col = vllngColumna + 1
                          
20                        Select Case !chrTipoIngreso
                          Case "1"
21                            grdInternoAmbulatorio.CellForeColor = vlvarColorInternamientoNormal
22                        Case "2"
23                            grdInternoAmbulatorio.CellForeColor = vlvarColorAmbulatorio
24                        Case "4"
25                            grdInternoAmbulatorio.CellForeColor = vlvarColorInternoFueExterno
26                        Case "5"
27                            grdInternoAmbulatorio.CellForeColor = vlvarColorInternoFueAmbulatorio
28                        Case "6"
29                            grdInternoAmbulatorio.CellForeColor = vlvarColorRecienNacido
30                        Case "9"
31                            grdInternoAmbulatorio.CellForeColor = vlvarColorExpress
32                        Case "11"
33                            grdInternoAmbulatorio.CellForeColor = vlvarColorCortaEstancia
34                        Case "12"
35                            grdInternoAmbulatorio.CellForeColor = vlvarColorInternoFueCortaEstancia
36                        Case "13"
37                            grdInternoAmbulatorio.CellForeColor = vlvarColorCortaEstanciaFueAmbulatorio
38                        End Select
                          
39                        If IsDate(.Fields(vllngColumna)) Then
40                            If Year(.Fields(vllngColumna)) < vlintYear Then
41                                grdInternoAmbulatorio.TextMatrix(vllngRenglon, vllngColumna + 1) = .Fields(vllngColumna)
42                            Else
43                                grdInternoAmbulatorio.TextMatrix(vllngRenglon, vllngColumna + 1) = Format(.Fields(vllngColumna), "dd/mmm/yyyy")
44                            End If
45                        Else
46                            grdInternoAmbulatorio.TextMatrix(vllngRenglon, vllngColumna + 1) = IIf(IsNull(.Fields(vllngColumna)), "", .Fields(vllngColumna))
47                        End If
48                    Next vllngColumna
                      
49                    .MoveNext
50                Loop
51                .Close
              
52            End With
53        End If

54        pConfiguraGridInternosAmbulatorios
55        grdInternoAmbulatorio.Row = 1
56        grdInternoAmbulatorio.Col = 3
57        grdInternoAmbulatorio.Visible = True

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pCargaInternosAmbulatorios" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pConfiguraGridInternosAmbulatorios()
On Error GoTo NotificaError

    With grdInternoAmbulatorio
        .FixedCols = 1
        .FixedRows = 1
        .FormatString = "|Expediente|Cuenta|Paciente|Estado de salud|Tipo de ingreso|Fecha ingreso|Hora ingreso|Área|Cuarto|Médico a cargo|Diagnóstico preliminar|Empresa|Nacionalidad|Estado civil|Cónyuge|Persona caso emergencia|Parentesco con paciente|Domicilio en emergencia|Teléfono emergencia|Persona que ingresó||Persona que modificó"
        .ColWidth(0) = 100
        .ColWidth(1) = 1250     'Expediente
        .ColWidth(2) = 1400     'Cuenta
        .ColWidth(3) = 4000     'Paciente
        .ColWidth(4) = 1800     'Estado salud
        .ColWidth(5) = 3000     'Descripción Tipo ingreso
        .ColWidth(6) = 1500     'Fecha ingreso
        .ColWidth(7) = 1350     'Hora ingreso
        .ColWidth(8) = 2000     'Area
        .ColWidth(9) = 1300     'Cuarto
        .ColWidth(10) = 3000     'Médico cargo
        .ColWidth(11) = 2500     'Diagnostico preliminar
        .ColWidth(12) = 2200     'EmpresaConvenio
        .ColWidth(13) = 1500     'Nacionalidad
        .ColWidth(14) = 1500     'Estado civil
        .ColWidth(15) = 2600     'Conyuge
        .ColWidth(16) = 2600     'Persona emergencia
        .ColWidth(17) = 2650     'Parentesco con paciente
        .ColWidth(18) = 2600     'Domicilio emergencia
        .ColWidth(19) = 2300     'Telefono emergencia
        .ColWidth(20) = 2200     'Empleado
        .ColWidth(21) = 0        'Clave Tipo Ingreso
        .ColWidth(22) = 2200     'Empleado
        
        .ColAlignment(1) = flexAlignRightCenter 'Expediente
        .ColAlignment(2) = flexAlignRightCenter 'Cuenta
        .ColAlignment(3) = flexAlignLeftCenter  'Paciente
        .ColAlignment(4) = flexAlignLeftCenter  'Estado salud
        .ColAlignment(5) = flexAlignLeftCenter  'Tipo ingreso
        .ColAlignment(6) = flexAlignLeftCenter  'Fecha ingreso
        .ColAlignment(7) = flexAlignLeftCenter  'Hora ingreso
        .ColAlignment(8) = flexAlignLeftCenter  'Area
        .ColAlignment(9) = flexAlignLeftCenter  'Cuarto
        .ColAlignment(10) = flexAlignLeftCenter 'Médico cargo
        .ColAlignment(11) = flexAlignLeftCenter 'Diagnostico preliminar
        .ColAlignment(12) = flexAlignLeftCenter 'Empresa
        .ColAlignment(13) = flexAlignLeftCenter 'Nacionalidad
        .ColAlignment(14) = flexAlignLeftCenter 'Estado civil
        .ColAlignment(15) = flexAlignLeftCenter 'Conyuge
        .ColAlignment(16) = flexAlignLeftCenter 'Persona emergencia
        .ColAlignment(17) = flexAlignLeftCenter 'Parentesco con paciente
        .ColAlignment(18) = flexAlignLeftCenter 'Domicilio emergencia
        .ColAlignment(19) = flexAlignLeftCenter 'Telefono emergencia
        .ColAlignment(20) = flexAlignLeftCenter 'Empleado
        .ColAlignment(22) = flexAlignLeftCenter 'Empleado
        
        .ColAlignmentFixed(1) = flexAlignCenterCenter 'Expediente
        .ColAlignmentFixed(2) = flexAlignCenterCenter 'Cuenta
        .ColAlignmentFixed(3) = flexAlignCenterCenter  'Paciente
        .ColAlignmentFixed(4) = flexAlignCenterCenter  'Estado salud
        .ColAlignmentFixed(5) = flexAlignCenterCenter  'Tipo ingreso
        .ColAlignmentFixed(6) = flexAlignCenterCenter  'Fecha ingreso
        .ColAlignmentFixed(7) = flexAlignCenterCenter  'Hora ingreso
        .ColAlignmentFixed(8) = flexAlignCenterCenter  'Area
        .ColAlignmentFixed(9) = flexAlignCenterCenter  'Cuarto
        .ColAlignmentFixed(10) = flexAlignCenterCenter 'Médico cargo
        .ColAlignmentFixed(11) = flexAlignCenterCenter 'Diagnostico preliminar
        .ColAlignmentFixed(12) = flexAlignCenterCenter 'Empresa / Tipo de paciente
        .ColAlignmentFixed(13) = flexAlignCenterCenter 'Nacionalidad
        .ColAlignmentFixed(14) = flexAlignCenterCenter 'Estado civil
        .ColAlignmentFixed(15) = flexAlignCenterCenter 'Conyuge
        .ColAlignmentFixed(16) = flexAlignCenterCenter 'Persona emergencia
        .ColAlignmentFixed(17) = flexAlignCenterCenter 'Parentesco con paciente
        .ColAlignmentFixed(18) = flexAlignCenterCenter 'Domicilio emergencia
        .ColAlignmentFixed(19) = flexAlignCenterCenter 'Telefono emergencia
        .ColAlignmentFixed(20) = flexAlignCenterCenter 'Empleado
        .ColAlignmentFixed(22) = flexAlignCenterCenter 'Empleado
        
    End With

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pConfiguraGridInternosAmbulatorios"))
    Unload Me
End Sub

Private Sub pConfiguraGridPrepagos()
On Error GoTo NotificaError

    With grdPrepagos
        .FixedCols = 1
        .FixedRows = 1
        .FormatString = "|Expediente|Cuenta|Paciente|Fecha prepago|Hora prepago|Médico a cargo|Plan / paquete|Persona que registró"
        .ColWidth(0) = 100
        .ColWidth(1) = 1250     'Expediente
        .ColWidth(2) = 1500     'Cuenta
        .ColWidth(3) = 4000     'Paciente
        .ColWidth(4) = 1750     'Fecha prepago
        .ColWidth(5) = 1750     'Hora prepago
        .ColWidth(6) = 3500     'Médico cargo
        .ColWidth(7) = 3500     'Plan paquete
        .ColWidth(8) = 3000     'Empleado
        
        .ColAlignment(1) = flexAlignRightCenter 'Expediente
        .ColAlignment(2) = flexAlignRightCenter 'Cuenta
        .ColAlignment(3) = flexAlignLeftCenter  'Paciente
        .ColAlignment(4) = flexAlignLeftCenter  'Fecha prepago
        .ColAlignment(5) = flexAlignLeftCenter  'Hora prepago
        .ColAlignment(6) = flexAlignLeftCenter  'Médico
        .ColAlignment(7) = flexAlignLeftCenter  'Plan paquete
        .ColAlignment(8) = flexAlignLeftCenter  'Persona registro
        
        .ColAlignmentFixed(1) = flexAlignCenterCenter 'Expediente
        .ColAlignmentFixed(2) = flexAlignCenterCenter 'Cuenta
        .ColAlignmentFixed(3) = flexAlignCenterCenter  'Paciente
        .ColAlignmentFixed(4) = flexAlignCenterCenter  'Fecha prepago
        .ColAlignmentFixed(5) = flexAlignCenterCenter  'Hora prepago
        .ColAlignmentFixed(6) = flexAlignCenterCenter  'Médico
        .ColAlignmentFixed(7) = flexAlignCenterCenter  'Plan paquete
        .ColAlignmentFixed(8) = flexAlignCenterCenter  'Persona registro
    End With

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pConfiguraGridPrepagos"))
    Unload Me
End Sub

Private Sub pConfiguraGridIngresosPrevios()
On Error GoTo NotificaError

    With grdIngresosPrevios
        .FixedCols = 1
        .FixedRows = 1
        .FormatString = "|Expediente|Paciente|Fecha ingreso|Hora ingreso|Médico a cargo|Empresa|Domicilio particular|Persona que registró"
        .ColWidth(0) = 100
        .ColWidth(1) = 1250     'Expediente
        .ColWidth(2) = 4000     'Paciente
        .ColWidth(3) = 1500     'Fecha ingreso
        .ColWidth(4) = 1500     'Hora ingreso
        .ColWidth(5) = 3500     'Médico cargo
        .ColWidth(6) = 3500     'Empresa/Tipo de paciente
        .ColWidth(7) = 4000     'Domicilio particular
        .ColWidth(8) = 3000     'Empleado
        
        .ColAlignment(1) = flexAlignRightCenter 'Expediente
        .ColAlignment(2) = flexAlignLeftCenter  'Paciente
        .ColAlignment(3) = flexAlignLeftCenter  'Fecha ingreso
        .ColAlignment(4) = flexAlignLeftCenter  'Hora ingreso
        .ColAlignment(5) = flexAlignLeftCenter  'Medico a cargo
        .ColAlignment(6) = flexAlignLeftCenter  'Empresa/Tipo de paciente
        .ColAlignment(7) = flexAlignLeftCenter  'Domicilio particular
        .ColAlignment(8) = flexAlignLeftCenter  'Persona registro
        
        .ColAlignmentFixed(1) = flexAlignCenterCenter   'Expediente
        .ColAlignmentFixed(2) = flexAlignCenterCenter   'Paciente
        .ColAlignmentFixed(3) = flexAlignCenterCenter   'Fecha ingreso
        .ColAlignmentFixed(4) = flexAlignCenterCenter   'Hora ingreso
        .ColAlignmentFixed(5) = flexAlignCenterCenter   'Medico a cargo
        .ColAlignmentFixed(6) = flexAlignCenterCenter   'Empresa/Tipo paciente
        .ColAlignmentFixed(7) = flexAlignCenterCenter   'Domicilio particular
        .ColAlignmentFixed(8) = flexAlignCenterCenter   'Persona registro
    End With

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pConfiguraGridIngresosPrevios"))
    Unload Me
End Sub

Private Sub pLimpiaGrid(grdGrid As MSHFlexGrid, vllngColumnas As Long)
On Error GoTo NotificaError
    Dim vllngContador As Long

    With grdGrid
        .Cols = vllngColumnas
        .Rows = 2
    
        For vllngContador = 1 To .Cols - 1
            .TextMatrix(1, vllngContador) = ""
        Next vllngContador
    End With

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLimpiaGrid"))
    Unload Me
End Sub

Private Sub Text1_Change()

End Sub

Private Sub Text1_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
    KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtLugarTrabajoResponsable_KeyPress"))
    Unload Me
End Sub

Private Sub TextNombreAdjunto_KeyDown(KeyCode As Integer, Shift As Integer)
    
    If KeyCode = vbKeyReturn Then
        cmdAgregaAdjunto.SetFocus
    End If
    
End Sub

Private Sub TextNombreAdjunto_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
        
       KeyAscii = fNoAdmitePipes(KeyAscii)
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtApellidoPaterno_KeyPress"))
    Unload Me
End Sub

Private Sub tmrBlink_Timer()
On Error GoTo NotificaError

    Static bytSeg As Byte
    If fblnVerficaLicenciaCuartos("") Then
        lblLicencias.Visible = False
        tmrBlink.Enabled = False
    Else
        If lblLicencias.Visible And bytSeg < 3 Then
            bytSeg = bytSeg + 1
        Else
            lblLicencias.Visible = Not lblLicencias.Visible
        End If
        If Not lblLicencias.Visible Then
            bytSeg = 0
        End If
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":tmrBlink_Timer"))
End Sub

Private Sub tmrBlinkexternos_Timer()
On Error GoTo NotificaError

    Static bytSeg As Byte
    If fblnVerficaLicenciaCuartosexternos("") Then
        Lbllicenciasexternos.Visible = False
        tmrBlinkexternos.Enabled = False
    Else
        If Lbllicenciasexternos.Visible And bytSeg < 3 Then
            bytSeg = bytSeg + 1
        Else
            Lbllicenciasexternos.Visible = Not Lbllicenciasexternos.Visible
        End If
        If Not Lbllicenciasexternos.Visible Then
            bytSeg = 0
        End If
    End If
    
    Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":tmrBlinkexternos_Timer"))
End Sub

Private Sub tmrCargaEgresados_Timer()
    On Error GoTo NotificaError
    
    tmrCargaEgresados.Enabled = False
    pCargaEgresados
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":tmrCargaEgresados_Timer"))
    Unload Me
End Sub

Private Sub tmrCargaExternos_Timer()
    On Error GoTo NotificaError
    
    tmrCargaExternos.Enabled = False
    pCargaExternos

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":tmrCargaExternos_Timer"))
    Unload Me
End Sub

Private Sub txtAlergia_GotFocus()
On Error GoTo NotificaError
    
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
    pSelTextBox txtAlergia

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtAlergia_GotFocus"))
    Unload Me
End Sub

Private Sub txtAlergia_KeyDown(KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
    
        If Trim(txtAlergia.Text) <> "" Then

            If lstAlergias.ListCount > 0 Then
            'Valida que no esté la alergia
                For intcontador = 0 To lstAlergias.ListCount - 1
                    If Trim(txtAlergia.Text) = lstAlergias.List(intcontador) Then
                        Exit Sub
                    End If
                Next intcontador
            End If
            lstAlergias.AddItem Trim(txtAlergia.Text)
            txtAlergia.Text = ""
            
        Else
            txtCorreoElectronico.SetFocus
        End If
        
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtAlergia_KeyDown"))
    Unload Me
End Sub

Private Sub txtAlergia_KeyPress(KeyAscii As Integer)
On Error GoTo NotificaError

     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtAlergia_KeyPress"))
    Unload Me
End Sub

Private Sub txtAnticipo_GotFocus()
    On Error GoTo NotificaError
    
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
    txtAnticipo.Text = Str(Val(Format(txtAnticipo.Text, "###############.00")))
    pSelTextBox txtAnticipo
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtAnticipo_GotFocus"))
    Unload Me
End Sub

Private Sub txtAnticipo_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        If cmdHonorarios.Enabled Then
            cmdHonorarios.SetFocus
            Exit Sub
        End If

        If fblnCanFocus(cboProcedencia) Then
            cboProcedencia.SetFocus
        Else
            sstObj.Tab = 1
            MyTabHeader1.TabCurrent = 1
            txtNombreEmergencia.SetFocus
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtAnticipo_KeyDown"))
    Unload Me
End Sub

Private Sub txtAnticipo_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError

    If Not IsNumeric(Chr(KeyAscii)) And Not KeyAscii = vbKeyBack And Not KeyAscii = vbKeyReturn And Not KeyAscii = 46 Or (KeyAscii = 46 And fblnValidaPunto(txtAnticipo)) Then
        KeyAscii = 7
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtAnticipo_KeyPress"))
    Unload Me
End Sub

Private Sub txtAnticipo_LostFocus()
    On Error GoTo NotificaError
    
    txtAnticipo.Text = FormatCurrency(Val(txtAnticipo.Text), 2)
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtAnticipo_LostFocus"))
    Unload Me
End Sub

Private Sub txtApellidoMaterno_GotFocus()
    On Error GoTo NotificaError
    
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
    pSelTextBox txtApellidoMaterno

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtApellidoMaterno_GotFocus"))
    Unload Me
End Sub

Private Sub txtApellidoMaterno_KeyDown(KeyCode As Integer, Shift As Integer)
1     On Error GoTo NotificaError

          Dim rsUltimaCuenta As New ADODB.Recordset
          Dim rsCuenta As New ADODB.Recordset
          Dim vllngAdeudosAnteriores As Long
          Dim vllngExpediente As Long
          Dim vlblnListaNegra As Boolean
          Dim blnUsaCuentaPrepago As Boolean
2         blnUsaCuentaPrepago = False
3         vlblnPestanaGeneral = True                              ' Para actualizacion de fecha
          
4         If KeyCode = vbKeyReturn Then
5             If Not vlblnConsulta And vlstrIngresoSeleccionado <> vlstrTipoIngresoRecienNacido Then
6                 If fblnDatosCompletosNombre() Then

7                     vlblnPacienteValidado = True
8                     llngCvePreRegistro = 0
                      
9                     With frmPacienteMismoNombre
10                        .vllngNumeroExpediente = 0
11                        .vllngNumeroCuenta = 0
12                        .vlstrEstadoAdmision = ""
13                        .vlblnIngresoPrevio = False
14                        .vlstrNombreBuscar = Trim(txtNombre.Text)
15                        .vlstrPaternoBuscar = Trim(txtApellidoPaterno.Text)
16                        .vlstrMaternoBuscar = Trim(txtApellidoMaterno.Text)
17                        .lblnMotrarPreregistro = True
18                        .Show vbModal, Me
                          
19                        Unload frmPacienteMismoNombre
                          
                          '======================================================
                          'Mostrar los datos del paciente en AdPaciente
                          '======================================================
20                        If .vllngNumeroExpediente > 0 Then           ' Validacion para actualizar fecha
21                            vlblnRegistroNuevo = False
22                        Else
23                            vlblnRegistroNuevo = True
24                        End If
                          
25                        If .vllngNumeroExpediente < 0 Then
26                            llngCvePreRegistro = Abs(.vllngNumeroExpediente)
27                            pDatosPreRegistro
28                            .vllngNumeroExpediente = 0
29                        ElseIf .vllngNumeroExpediente > 0 Then
30                            vgstrParametrosSP = Str(.vllngNumeroExpediente) & "|" & Str(vgintClaveEmpresaContable) & "|" & IIf(.vlstrEstadoAdmision <> "X", "I", "E")
31                            vllngAdeudosAnteriores = frsEjecuta_SP(vgstrParametrosSP, "SP_ADSELADEUDOPACIENTE")!ImporteAdeudo
                              
32                            If vllngAdeudosAnteriores > 0 Then
                                  'Este paciente tiene adeudos anteriores $#00.00. Favor de avisar a caja.
33                                MsgBox Mid(SIHOMsg(605), 1, 20) & "adeudos anteriores por " & Format(vllngAdeudosAnteriores, "$###,##0.00") & ". Favor de avisar a caja.", vbInformation + vbOKOnly, "Mensaje"
34                            End If
                              
35                            pDatosPacientes .vllngNumeroExpediente
36                            vllngExpediente = .vllngNumeroExpediente
                              
                              'Si es AD y es interno, se cargan los datos de la cuenta
37                            If cgstrModulo = "AD" And (.vlstrEstadoAdmision = "A") And Not .vlblnIngresoPrevio Then
38                                vlblnDatosCapturados = True
                                  'Tipo de paciente
39                                pDatosIngreso .vllngNumeroCuenta, "I"
40                            ElseIf .vlstrEstadoAdmision = "P" Then
                                  
                                  '|  ¿Desea usar la cuenta de prepago?
41                                If MsgBox(SIHOMsg(1495), vbQuestion + vbYesNo, "Mensaje") = vbYes Then blnUsaCuentaPrepago = True
42                                If blnUsaCuentaPrepago Then
43                                    pDatosIngreso .vllngNumeroCuenta, "I"
                                      
44                                Else
45                                    vlblnPrepagoActivo = True
46                                End If
47                            Else
                                  'Buscar la última cuenta
48                                Set rsUltimaCuenta = frsEjecuta_SP(CStr(.vllngNumeroExpediente) & "|" & vgintClaveEmpresaContable & "|" & vgintNumeroDepartamento, "sp_GnSelUltimaCuentaPaciente")
49                                If Not rsUltimaCuenta.EOF Then
50                                    vgstrParametrosSP = Str(rsUltimaCuenta!cuenta) & "|" & rsUltimaCuenta!tipo
51                                    Set rsCuenta = frsEjecuta_SP(vgstrParametrosSP, "Sp_ExSelPacienteIngreso")
52                                    If rsCuenta.RecordCount > 0 Then
53                                        With rsCuenta
54                                            If !chrEstatus = "A" And (cgstrModulo = "AD" Or rsUltimaCuenta!tipo = "E") Then
                                                  'Es externo y tiene cuenta abierta, se cargan los datos
55                                                pDatosIngreso rsUltimaCuenta!cuenta, rsUltimaCuenta!tipo
56                                            Else
                                                  'Carga algunos datos de la última cuenta del paciente
                                                   'Consulta externa
57                                                 If rsUltimaCuenta!CveTipo = clngCveConsultaExterna And !chrEstatus = "E" Then
                                                      'Solo debe cargar los datos del paciente, no la cuenta. Deberá abrir una nueva
58                                                Else
59                                                     pDatosUltimaCuenta rsUltimaCuenta!cuenta, rsUltimaCuenta!tipo
60                                                     pCargaFamiliar Str(vllngExpediente), Str(rsUltimaCuenta!cuenta)
61                                                End If
                                                  
62                                            End If
63                                        End With
64                                    End If
65                                Else
                                  'Externo, no tiene cuenta solo se registraron los datos
66                                    vlstrTipoPacienteConsultado = "E"
                                      'Dependiendo del módulo, es el tipo de ingreso predeterminado
67                                    If cgstrModulo = "LA" Or cgstrModulo = "IM" Or cgstrModulo = "PV" Or cgstrModulo = "CC" Or cgstrModulo = "BS" Then
68                                        cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveExterno)
69                                    Else
70                                        cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, clngCveUrgencias)
71                                    End If
                                      
72                                    pCargaFamiliar Str(vllngExpediente)
73                                End If
74                                rsUltimaCuenta.Close
75                            End If
                              
76                            OptEnvioPromo(0).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnSiEnvioPromo)
77                            OptEnvioPromo(1).Value = IIf(Val(txtCuentaInterno.Text) = 0 And Val(txtCuentaExterno.Text) = 0, False, vlblnNoEnvioPromo)
78                        End If
                         
79                    End With
                      
80                    If vlblnConsultaPostGuardado = True Then
81                        vlblnConsultaPostGuardado = False
82                    Else
83                        If pValidaListaNegra() Then
                              'End Sub
84                        Else
85                        End If
86                    End If
                      
87                    If fblnCanFocus(txtNombre) Then   ' para nuevo registro
88                        txtNombre.SetFocus
89                    Else
90                        pEnfocaMkTexto mskFechaNacimiento
91                    End If
92                End If
93            Else
94                txtNombre.SetFocus
95            End If
96        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtApellidoMaterno_KeyDown" & " Linea:" & Erl()))
        Unload Me
End Sub
Private Sub pDatosPreRegistro()
1     On Error GoTo NotificaError
          Dim rsDatos As New ADODB.Recordset
          Dim lstrAlergia As String
          
2         Set rsDatos = frsRegresaRs("select pre.*, trim(tipo.vchDescripcion) tipoCuarto from ExPacientePreregistro pre left join adTipoCuarto tipo on pre.intCveTipoCuarto = tipo.tnyCveTipoCuarto where intConsecutivo = " & llngCvePreRegistro)
3         If rsDatos.RecordCount <> 0 Then
4             With rsDatos
5                 txtApellidoPaterno.Text = IIf(IsNull(Trim(!vchApellidoPaterno)), "", Trim(!vchApellidoPaterno))
6                 txtApellidoMaterno.Text = IIf(IsNull(Trim(!vchApellidoMaterno)), "", Trim(!vchApellidoMaterno))
7                 txtNombre.Text = IIf(IsNull(Trim(!vchNombre)), "", Trim(!vchNombre))
8                 mskFechaNacimiento.Mask = ""
9                 mskFechaNacimiento.Text = IIf(IsNull(!dtmFechaNacimiento), "", !dtmFechaNacimiento)
10                mskFechaNacimiento.Mask = "##/##/####"
11                If Not IsNull(!dtmFechaNacimiento) Then
12                    txtEdad.Text = fstrObtieneEdad(CDate(mskFechaNacimiento.Text), fdtmServerFecha)
13                End If
14                optSexo(0).Value = Trim(IIf(IsNull(!chrSexo), "", !chrSexo)) = "M"
15                optSexo(1).Value = Trim(IIf(IsNull(!chrSexo), "", !chrSexo)) = "F"
                  
16                mskRFC.Mask = ""
17                If Trim(txtApellidoPaterno.Text) <> "" And Trim(txtApellidoMaterno.Text) <> "" And Trim(txtNombre.Text) <> "" And IsDate(mskFechaNacimiento.Text) Then
18                    mskRFC.Text = fstrRFC(Trim(txtApellidoPaterno.Text), Trim(txtApellidoMaterno.Text), Trim(txtNombre.Text), Trim(mskFechaNacimiento.Text))
19                Else
20                    mskRFC.Text = ""
21                End If
                  
22                If IIf(IsNull(!intCveEstadoCivil), 0, !intCveEstadoCivil) = 0 Then
23                    cboEstadoCivil.ListIndex = 0
24                Else
25                    cboEstadoCivil.ListIndex = flngLocalizaCbo_new(cboEstadoCivil, Str(!intCveEstadoCivil))
26                End If
                  
27                If IIf(IsNull(!intCveReligion), 0, !intCveReligion) = 0 Then
                      'el dato predeterminado
28                    cboReligion.ListIndex = flngLocalizaCbo_new(cboReligion, Str(vglngCveReligionPredeterminada))
29                Else
30                    cboReligion.ListIndex = flngLocalizaCbo_new(cboReligion, Str(!intCveReligion))
31                End If
32                txtAlergia.Text = ""
33                lstAlergias.Clear
34                lstrAlergia = ""
35                If IIf(IsNull(!vchAlergias), "", Trim(!vchAlergias)) <> "" Then
36                    For intcontador = 1 To Len(!vchAlergias)
37                        If (Mid(!vchAlergias, intcontador, 1) <> ",") And (Len(!vchAlergias) >= intcontador) Then
38                            lstrAlergia = lstrAlergia & Mid(!vchAlergias, intcontador, 1)
39                        Else
40                            lstAlergias.AddItem lstrAlergia
41                            lstrAlergia = ""
42                        End If
43                    Next intcontador
44                    If lstrAlergia <> "" Then
45                        lstAlergias.AddItem lstrAlergia
46                        lstrAlergia = ""
47                    End If
48                Else
49                    txtAlergia.Text = "NINGUNA"
50                End If
51                txtCorreoElectronico.Text = Trim(IIf(IsNull(!vchCorreoElectronico), "", !vchCorreoElectronico))
                  
52                txtCalle.Text = Trim(IIf(IsNull(!vchCalle), "", !vchCalle))
53                txtNumeroExterior.Text = Trim(IIf(IsNull(!VCHNUMEROEXTERIOR), "", !VCHNUMEROEXTERIOR))
54                txtNumeroInterior.Text = Trim(IIf(IsNull(!VCHNUMEROINTERIOR), "", !VCHNUMEROINTERIOR))
55                txtColonia.Text = Trim(IIf(IsNull(!VCHCOLONIA), "", !VCHCOLONIA))
56                txtCodigoPostal.Text = Trim(IIf(IsNull(!VCHCODIGOPOSTAL), "", !VCHCODIGOPOSTAL))
57                cboCiudad.ListIndex = flngLocalizaCbo_new(cboCiudad, Str(IIf(IsNull(!INTCVECIUDAD), 0, !INTCVECIUDAD)))
58                txtTelefono.Text = Trim(IIf(IsNull(!vchTelefono), "", !vchTelefono))
                  
59                txtPadre.Text = Trim(IIf(IsNull(!vchPadre), "", !vchPadre))
60                txtMadre.Text = Trim(IIf(IsNull(!vchMadre), "", !vchMadre))
                  
61                txtNombreEmergencia.Text = Trim(IIf(IsNull(!VCHNOMBREEMERGENCIAS), "", !VCHNOMBREEMERGENCIAS))
62                txtDomicilioEmergencia.Text = Trim(IIf(IsNull(!vchDomicilioEmergencias), "", !vchDomicilioEmergencias))
63                txtTelefonoEmergencia.Text = Trim(IIf(IsNull(!vchTelefonoEmergencias), "", !vchTelefonoEmergencias))
64                cboParentescoFamiliarEmergencia.ListIndex = flngLocalizaCbo_new(cboParentescoFamiliarEmergencia, Str(IIf(IsNull(!intCveParentescoEmergencias), 0, !intCveParentescoEmergencias)))
                  
65                txtNombreResponsable.Text = Trim(IIf(IsNull(!vchNombreResponsable), "", !vchNombreResponsable))
66                txtDomicilioResponsable.Text = Trim(IIf(IsNull(!vchDomicilioResponsable), "", !vchDomicilioResponsable))
67                txtTelefonoResponsable.Text = Trim(IIf(IsNull(!vchTelefonoResponsable), "", !vchTelefonoResponsable))
68                cboParentescoFamiliarResponsable.ListIndex = flngLocalizaCbo_new(cboParentescoFamiliarResponsable, Str(IIf(IsNull(!intCveParentescoResponsable), 0, !intCveParentescoResponsable)))
69                txtLugarTrabajoResponsable.Text = Trim(IIf(IsNull(!vchLugarTrabajo), "", !vchLugarTrabajo))
                  
70                txtObservaciones.Text = ""
71                If Not IsNull(!TipoCuarto) Then
72                    txtObservaciones.Text = "TIPO DE CUARTO SUGERIDO POR EL PACIENTE: " & !TipoCuarto
73                End If
74                If IsNull(!intcvemedicoCargo) Then
75                    If cboMedicoCargo.ListCount > 0 Then cboMedicoCargo.ListIndex = 0
76                Else
77                    cboMedicoCargo.ListIndex = flngLocalizaCbo_new(cboMedicoCargo, Str(IIf(IsNull(!intcvemedicoCargo), 0, !intcvemedicoCargo)))
78                End If
79            End With
80        End If
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pDatosPreRegistro" & " Linea:" & Erl()))
End Sub

Private Sub txtApellidoMaterno_KeyPress(KeyAscii As Integer)
On Error GoTo NotificaError
    
    KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtApellidoMaterno_KeyPress"))
    Unload Me
End Sub

Private Sub txtApellidoMaterno_LostFocus()
    If txtApellidoMaterno.Text <> "" Then
        vlblnDatosCapturados = True
    End If
End Sub

Private Sub txtApellidoPaterno_GotFocus()
On Error GoTo NotificaError
    
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
    pSelTextBox txtApellidoPaterno

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtApellidoPaterno_GotFocus"))
    Unload Me
End Sub

Private Sub txtApellidoPaterno_KeyDown(KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtApellidoMaterno.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtApellidoPaterno_KeyDown"))
    Unload Me
End Sub

Private Function fNoAdmitePipes(KeyAscii As Integer) As Integer
If KeyAscii = 124 Then
    fNoAdmitePipes = 0
Else
    fNoAdmitePipes = Asc(UCase(Chr(KeyAscii)))
End If
End Function

Private Sub txtApellidoPaterno_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
        
       KeyAscii = fNoAdmitePipes(KeyAscii)
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtApellidoPaterno_KeyPress"))
    Unload Me
End Sub

Private Sub txtApellidoPaterno_LostFocus()
    If txtApellidoPaterno.Text <> "" Then
        vlblnDatosCapturados = True
    End If
End Sub

Private Sub txtAutoriza_GotFocus()
On Error GoTo NotificaError

    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
    pSelTextBox txtAutoriza

    Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtAutoriza_GotFocus"))
    Unload Me
End Sub

Private Sub txtautoriza_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        SendKeys vbTab
    End If
        
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtAutoriza_KeyDown"))
    Unload Me
End Sub

Private Sub txtAutoriza_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtAutoriza_KeyPress"))
    Unload Me
End Sub

Private Sub txtCodigoPostal_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtCodigoPostal

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtCodigoPostal_GotFocus"))
    Unload Me
End Sub

Private Sub txtCodigoPostal_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtTelefono.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtCodigoPostal_KeyDown"))
    Unload Me
End Sub

Private Sub txtCodigoPostal_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
    If Not IsNumeric(Chr(KeyAscii)) And Not KeyAscii = vbKeyBack And Not KeyAscii = vbKeyReturn Then
        KeyAscii = 7
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtCodigoPostal_KeyPress"))
    Unload Me
End Sub

Private Sub txtCodigoPostalForaneo_GotFocus()
On Error GoTo NotificaError
    
    pSelTextBox txtCodigoPostalForaneo
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtCodigoPostalForaneo_GotFocus"))
    Unload Me
End Sub

Private Sub txtCodigoPostalForaneo_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtTelefonoForaneo.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtCodigoPostalForaneo_KeyDown"))
    Unload Me
End Sub

Private Sub txtCodigoPostalForaneo_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
    If Not IsNumeric(Chr(KeyAscii)) And Not KeyAscii = vbKeyBack And Not KeyAscii = vbKeyReturn Then
        KeyAscii = 7
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtCodigoPostalForaneo_KeyPress"))
    Unload Me
End Sub

Private Sub txtColonia_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtColonia

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtColonia_GotFocus"))
    Unload Me
End Sub

Private Sub txtColonia_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtCodigoPostal.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtColonia_KeyDown"))
    Unload Me
End Sub

Private Sub txtColonia_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtColonia_KeyPress"))
    Unload Me
End Sub

Private Sub txtColoniaForanea_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtColoniaForanea

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtColoniaForanea_GotFocus"))
    Unload Me
End Sub

Private Sub txtColoniaForanea_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtCodigoPostalForaneo.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtColoniaForanea_KeyDown"))
    Unload Me
End Sub

Private Sub txtColoniaForanea_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtColoniaForanea_KeyPress"))
    Unload Me
End Sub

Private Sub txtConyuge_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtConyuge

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtConyuge_GotFocus"))
    Unload Me
End Sub

Private Sub txtConyuge_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        SendKeys vbTab
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtPaternoConyuge_KeyDown"))
    Unload Me
End Sub

Private Sub txtCorreoElectronico_KeyPress(KeyAscii As Integer)
On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtCorreoElectronico_KeyPress"))
    Unload Me
End Sub

Private Sub txtCuentaExterno_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
End Sub

Private Sub txtCuentaInterno_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
End Sub

Private Sub txtDiagnosticoEspecifico_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtDiagnosticoEspecifico

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtDiagnosticoEspecifico_GotFocus"))
    Unload Me
End Sub

Private Sub txtDiagnosticoEspecifico_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        If txtMotivoIngreso.Visible Then
            txtMotivoIngreso.SetFocus
        ElseIf chkAsignarCuarto.Enabled Then
            chkAsignarCuarto.SetFocus
        ElseIf cmdSugerirCuarto.Enabled Then
            cmdSugerirCuarto.SetFocus
        Else
            cmdGrabar.SetFocus
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtDiagnosticoEspecifico_KeyDown"))
    Unload Me
End Sub

Private Sub txtDiagnosticoEspecifico_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
    KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtDiagnosticoEspecifico_KeyPress"))
    Unload Me
End Sub

Private Sub txtEdad_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
End Sub

Private Sub txtExpedienteInterno_GotFocus()
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
End Sub

Private Sub txtMaternoConyuge_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtMaternoConyuge

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtMaternoConyuge_GotFocus"))
    Unload Me

End Sub


Private Sub txtMaternoConyuge_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        SendKeys vbTab
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtMaternoConyuge_KeyDown"))
    Unload Me
End Sub

Private Sub txtConyuge_KeyPress(KeyAscii As Integer)
On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

    Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtConyuge_KeyPress"))
    Unload Me
End Sub

Private Sub txtMotivoIngreso_KeyDown(KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        If chkAsignarCuarto.Enabled Then
            chkAsignarCuarto.SetFocus
        ElseIf cmdSugerirCuarto.Enabled Then
            cmdSugerirCuarto.SetFocus
        ElseIf cmdObservaciones.Enabled Then
            cmdObservaciones.SetFocus
        ElseIf cmdGrabar.Enabled = False Then
            cmdEgresar.SetFocus
        Else
            cmdGrabar.SetFocus
        End If
    End If

    Exit Sub

NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtMotivoIngreso_KeyDown"))
    Unload Me
End Sub

Private Sub txtMotivoIngreso_KeyPress(KeyAscii As Integer)
    KeyAscii = fNoAdmitePipes(KeyAscii)
End Sub

Private Sub txtNumeroControl_KeyPress(KeyAscii As Integer)
     KeyAscii = fNoAdmitePipes(KeyAscii)
End Sub

Private Sub txtNumeroExterior_GotFocus()
On Error GoTo NotificaError
    
    pSelTextBox txtNumeroExterior

    Exit Sub
    
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNumeroExterior_GotFocus"))
    Unload Me
End Sub

Private Sub txtNumeroExterior_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtNumeroInterior.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNumeroExterior_KeyDown"))
    Unload Me
End Sub

Private Sub txtNumeroExterior_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNumeroExterior_KeyPress"))
    Unload Me
End Sub

Private Sub txtNumeroInterior_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtNumeroInterior

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNumeroInterior_GotFocus"))
    Unload Me
End Sub

Private Sub txtNumeroInterior_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtColonia.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNumeroInterior_KeyDown"))
    Unload Me
End Sub

Private Sub txtNumeroInterior_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
    KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNumeroInterior_KeyPress"))
    Unload Me
End Sub

Private Sub txtNumeroPoliza_GotFocus()
    On Error GoTo NotificaError
    
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
    pSelTextBox txtNumeroPoliza
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNumPoliza_KeyDown"))
    Unload Me
End Sub

Private Sub txtNumeropoliza_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        SendKeys vbTab
    End If
        
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNumPoliza_KeyDown"))
    Unload Me
End Sub

Private Sub txtNumeroPoliza_KeyPress(KeyAscii As Integer)
    KeyAscii = fNoAdmitePipes(KeyAscii)
End Sub

Private Sub txtObservaciones_KeyPress(KeyAscii As Integer)
    KeyAscii = fNoAdmitePipes(KeyAscii)
End Sub

Private Sub txtPaternoConyuge_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtPaternoConyuge

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtMaternoConyuge_GotFocus"))
    Unload Me
End Sub

Private Sub txtPaternoConyuge_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        SendKeys vbTab
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtPaternoConyuge_KeyDown"))
    Unload Me
End Sub

Private Sub txtPaternoConyuge_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtPaternoConyuge_KeyPress"))
    Unload Me
End Sub
Private Sub txtMaternoConyuge_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtMaternoConyuge_KeyPress"))
    Unload Me
End Sub

Private Sub txtCorreoElectronico_GotFocus()
    On Error GoTo NotificaError
    
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
    pSelTextBox txtCorreoElectronico

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtCorreoElectronico_GotFocus"))
    Unload Me
End Sub

Private Sub txtCorreoElectronico_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        If fblnSolicitarEnvioPromociones And OptEnvioPromo(0).Visible And OptEnvioPromo(0).Enabled Then
            If OptEnvioPromo(0).Value Then
                OptEnvioPromo(0).SetFocus
            Else
                If OptEnvioPromo(1).Value Then
                    OptEnvioPromo(1).SetFocus
                Else
                    OptEnvioPromo(0).SetFocus
                End If
            End If
        Else
            chkForaneo.SetFocus
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtCorreoElectronico_KeyDown"))
    Unload Me
End Sub

Private Sub txtCurp_GotFocus()
    On Error GoTo NotificaError
    
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
    pSelTextBox txtCurp

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtCurp_GotFocus"))
    Unload Me
End Sub

Private Sub txtCurp_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        cboCiudadNacimiento.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtCurp_KeyDown"))
    Unload Me
End Sub

Private Sub txtCurp_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtCurp_KeyPress"))
    Unload Me
End Sub

Private Sub txtCalle_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtCalle

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtCalle_GotFocus"))
    Unload Me
End Sub

Private Sub txtCalle_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtNumeroExterior.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtCalle_KeyDown"))
    Unload Me
End Sub

Private Sub txtCalle_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtCalle_KeyPress"))
    Unload Me
End Sub

Private Sub txtDomicilioEmergencia_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtDomicilioEmergencia

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtDomicilioEmergencia_GotFocus"))
    Unload Me
End Sub

Private Sub txtDomicilioEmergencia_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtTelefonoEmergencia.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtDomicilioEmergencia_KeyDown"))
    Unload Me
End Sub

Private Sub txtDomicilioEmergencia_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtDomicilioEmergencia_KeyPress"))
    Unload Me
End Sub

Private Sub txtDomicilioForaneo_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtDomicilioForaneo

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtDomicilioForaneo_GotFocus"))
    Unload Me
End Sub

Private Sub txtDomicilioForaneo_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtColoniaForanea.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtDomicilioForaneo_KeyDown"))
    Unload Me
End Sub

Private Sub txtDomicilioForaneo_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtDomicilioForaneo_KeyPress"))
    Unload Me
End Sub

Private Sub txtDomicilioResponsable_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtDomicilioResponsable

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtDomicilioResponsable_GotFocus"))
    Unload Me
End Sub

Private Sub txtDomicilioResponsable_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        txtTelefonoResponsable.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtDomicilioResponsable_KeyDown"))
    Unload Me
End Sub

Private Sub txtDomicilioResponsable_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtDomicilioResponsable_KeyPress"))
    Unload Me
End Sub

Private Sub pCargaEgresados()
1         On Error GoTo NotificaError
          
          Dim rsEgresados As New ADODB.Recordset
          
          Dim vllngRenglon As Long
          Dim vllngColumna As Long
          
          Dim vlstrCriterio As String
          Dim vlstrOrden As String
          Dim vlstrCondicion As String
          Dim vlstrNombrePaciente As String
          Dim vlstrIniciales As String
          Dim vlstrFechas As String
          

2         pLimpiaGrid grdEgresados, 13
          
3         If Not fraFecEgr.Visible And Trim(txtIniciales.Text) = "" Then
4           Exit Sub
5         End If
6         grdEgresados.Visible = False
          
7         vlstrCriterio = Trim(Str(IIf(optCriterio(0).Value, 1, IIf(optCriterio(1).Value, 3, IIf(optCriterio(2).Value, 2, IIf(optCriterio(3).Value, 4, 5))))))
8         vgstrParametrosSP = vlstrCriterio & _
                              "|" & Trim(txtIniciales.Text) & _
                              "|" & IIf(fraFecEgr.Visible, 1, 0) & _
                              "|" & IIf(fraFecEgr.Visible, fstrFechaSQL(dtpFecIniEgr), "") & _
                              "|" & IIf(fraFecEgr.Visible, fstrFechaSQL(dtpFecFinEgr), "") & _
                              "|" & vgintNumeroDepartamento
                              
9         Set rsEgresados = frsEjecuta_SP(vgstrParametrosSP, "Sp_ExSelPacientesEgresados")

10        With rsEgresados
             
11            If .RecordCount <> 0 Then
12                Do While Not .EOF
13                    If Trim(grdEgresados.TextMatrix(1, 1)) = "" Then
14                        vllngRenglon = 1
15                    Else
16                        vllngRenglon = grdEgresados.Rows
17                        grdEgresados.Rows = grdEgresados.Rows + 1
18                    End If
                      
19                    grdEgresados.Row = vllngRenglon
20                    grdEgresados.Col = 1
21                    grdEgresados.CellForeColor = vlvarColorEgresados
                      
22                    If optCriterio(0).Value Or optCriterio(1).Value Or optCriterio(2).Value Then
23                        grdEgresados.TextMatrix(vllngRenglon, 1) = !NombrePaciente
24                    End If
25                    If optCriterio(3).Value Then
26                        grdEgresados.TextMatrix(vllngRenglon, 1) = !NumeroPaciente 'Expediente
27                    End If
28                    If optCriterio(4).Value Then
29                        grdEgresados.TextMatrix(vllngRenglon, 1) = !NumeroCuenta  'Cuenta
30                    End If
                      
31                    grdEgresados.Col = 2
32                    grdEgresados.CellForeColor = vlvarColorEgresados
                      
33                    If optCriterio(3).Value Then
34                        grdEgresados.TextMatrix(vllngRenglon, 2) = !NumeroCuenta
35                    Else
36                        grdEgresados.TextMatrix(vllngRenglon, 2) = !NumeroPaciente
37                    End If
                      
38                    grdEgresados.Col = 3
39                    grdEgresados.CellForeColor = vlvarColorEgresados
                      
40                    If optCriterio(4).Value Or optCriterio(3).Value Then
41                        grdEgresados.TextMatrix(vllngRenglon, 3) = !NombrePaciente
42                    Else
43                        grdEgresados.TextMatrix(vllngRenglon, 3) = !NumeroCuenta
44                    End If
                      
45                    grdEgresados.Col = 4
46                    grdEgresados.CellForeColor = vlvarColorEgresados
47                    grdEgresados.TextMatrix(vllngRenglon, 4) = IIf(IsNull(!FechaIngreso), "", Format(!FechaIngreso, "dd/mmm/yyyy"))
48                    grdEgresados.Col = 5
49                    grdEgresados.CellForeColor = vlvarColorEgresados
50                    grdEgresados.TextMatrix(vllngRenglon, 5) = IIf(IsNull(!HoraIngreso), "", !HoraIngreso)
51                    grdEgresados.Col = 6
52                    grdEgresados.CellForeColor = vlvarColorEgresados
53                    grdEgresados.TextMatrix(vllngRenglon, 6) = Format(!FechaEgreso, "dd/mmm/yyyy")
54                    grdEgresados.Col = 7
55                    grdEgresados.CellForeColor = vlvarColorEgresados
56                    grdEgresados.TextMatrix(vllngRenglon, 7) = IIf(IsNull(!HoraEgreso), "", !HoraEgreso)
57                    grdEgresados.Col = 8
58                    grdEgresados.CellForeColor = vlvarColorEgresados
59                    grdEgresados.TextMatrix(vllngRenglon, 8) = IIf(IsNull(!DomicilioParticular), "", !DomicilioParticular)
60                    grdEgresados.Col = 9
61                    grdEgresados.CellForeColor = vlvarColorEgresados
62                    grdEgresados.TextMatrix(vllngRenglon, 9) = IIf(IsNull(!PROCEDENCIA), "", !PROCEDENCIA)
63                    grdEgresados.Col = 10
64                    grdEgresados.CellForeColor = vlvarColorEgresados
65                    grdEgresados.TextMatrix(vllngRenglon, 10) = IIf(IsNull(!Medico), "", !Medico)
66                    grdEgresados.Col = 11
67                    grdEgresados.CellForeColor = vlvarColorEgresados
68                    grdEgresados.TextMatrix(vllngRenglon, 11) = !NumeroPaciente
69                    grdEgresados.Col = 12
70                    grdEgresados.CellForeColor = vlvarColorEgresados
71                    grdEgresados.TextMatrix(vllngRenglon, 12) = !NumeroCuenta
72                    .MoveNext
73                Loop
74            End If
          
75            .Close
76        End With
          
77        pConfiguraGridEgresados
          
78        grdEgresados.Visible = True
79        grdEgresados.Row = 1
80        grdEgresados.Col = 1
              
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pCargaEgresados" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pCargaExternos()
1     On Error GoTo NotificaError
          
          Dim rsExternos As New ADODB.Recordset
          Dim vllngRenglon As Long
          Dim vllngColumna As Long
          Dim vlstrCriterio As String
          Dim vlstrOrden As String
          Dim vlstrCondicion As String
          Dim vlstrNombrePaciente As String
          Dim vlstrIniciales As String
          Dim vlstrCondicionDepartamento As String

2         If cboDepartamentoAtiende.ListIndex = -1 Then
3             cboDepartamentoAtiende.ListIndex = 0
4             Exit Sub
5         End If

6         grdExternos.Visible = False
7         pLimpiaGrid grdExternos, 14
          
8         vlstrCriterio = Trim(Str(IIf(optCriterio2(0).Value, 1, IIf(optCriterio2(1).Value, 2, IIf(optCriterio2(2).Value, 3, IIf(optCriterio2(3).Value, 4, 5))))))
9         If optCriterio2(0).Value Or optCriterio2(1).Value Or optCriterio2(2).Value Then
10            vlstrIniciales = "'" & IIf(Trim(txtInicialesExternos.Text) = "", " ", Trim(txtInicialesExternos.Text)) & "'"
11        Else
12            vlstrIniciales = IIf(Trim(txtInicialesExternos.Text) = "", 0, Trim(txtInicialesExternos.Text))
13        End If
14        vlstrCondicionDepartamento = Trim(Str(cboDepartamentoAtiende.ItemData(cboDepartamentoAtiende.ListIndex)))
          
15        If EntornoSIHO.ConeccionSIHO.State = 0 Then
16            EntornoSIHO.ConeccionSIHO.Open
17        End If
          
18        If Not IsDate(mskFechaInicioAtencion.Text) Then
19            mskFechaInicioAtencion.Mask = ""
20            mskFechaInicioAtencion.Text = fdtmServerFecha
21            mskFechaInicioAtencion.Mask = "##/##/####"
22        End If
          
23        If Not IsDate(mskFechaTerminoAtencion.Text) Then
24            mskFechaTerminoAtencion.Mask = ""
25            mskFechaTerminoAtencion.Text = fdtmServerFecha
26            mskFechaTerminoAtencion.Mask = "##/##/####"
27        End If
          
28        vgstrParametrosSP = vlstrCriterio & "|" & _
                              vlstrIniciales & "|" & _
                              vlstrCondicionDepartamento & "|" & _
                              fstrFechaSQL(mskFechaInicioAtencion.Text, "00:00:00", False) & "|" & _
                              fstrFechaSQL(mskFechaTerminoAtencion.Text, "23:59:59", False) & "|" & _
                              vgintClaveEmpresaContable & "|" & _
                              vgintNumeroDepartamento
          
29        If Chkpacientesactivos.Value = 0 Then
30            Set rsExternos = frsEjecuta_SP(vgstrParametrosSP, "Sp_AdSelExternos")
31        Else
32            Set rsExternos = frsEjecuta_SP(vgstrParametrosSP, "Sp_AdSelExternosActivos")
33        End If
          
34        With rsExternos
35            If .RecordCount <> 0 Then
36                Do While Not .EOF
37                    If Trim(grdExternos.TextMatrix(1, 1)) = "" Then
38                        vllngRenglon = 1
39                    Else
40                        vllngRenglon = grdExternos.Rows
41                        grdExternos.Rows = grdExternos.Rows + 1
42                    End If
                      
43                    grdExternos.Row = vllngRenglon
44                    grdExternos.Col = 1
45                    grdExternos.CellForeColor = vlvarColorExternos
                      
46                    If optCriterio2(0).Value Or optCriterio2(1).Value Or optCriterio2(2).Value Then
47                        grdExternos.TextMatrix(vllngRenglon, 1) = !NombrePaciente
48                    End If
                      
49                    If optCriterio2(3).Value Then
50                        grdExternos.TextMatrix(vllngRenglon, 1) = !Expediente
51                    End If
                      
52                    If optCriterio2(4).Value Then
53                        grdExternos.TextMatrix(vllngRenglon, 1) = !cuenta
54                    End If
                      
55                    grdExternos.Col = 2
56                    grdExternos.CellForeColor = vlvarColorExternos
                      
57                    If optCriterio2(3).Value Then
58                        grdExternos.TextMatrix(vllngRenglon, 2) = !cuenta
59                    Else
60                        grdExternos.TextMatrix(vllngRenglon, 2) = !Expediente
61                    End If
                      
62                    grdExternos.Col = 3
63                    grdExternos.CellForeColor = vlvarColorExternos
                      
64                    If optCriterio2(4).Value Or optCriterio2(3).Value Then
65                        grdExternos.TextMatrix(vllngRenglon, 3) = !NombrePaciente
66                    Else
67                        grdExternos.TextMatrix(vllngRenglon, 3) = !cuenta
68                    End If
                      
69                    grdExternos.Col = 4
70                    grdExternos.CellForeColor = vlvarColorExternos
71                    grdExternos.TextMatrix(vllngRenglon, 4) = Format(!FechaIngreso, "dd/mmm/yyyy")
72                    grdExternos.Col = 5
73                    grdExternos.CellForeColor = vlvarColorExternos
74                    grdExternos.TextMatrix(vllngRenglon, 5) = Format(!HoraIngreso, "hh:mm")
75                    grdExternos.Col = 6
76                    grdExternos.CellForeColor = vlvarColorExternos
77                    If Not IsNull(!Fechahorasalida) Then
78                        grdExternos.TextMatrix(vllngRenglon, 6) = Format(!Fechahorasalida, "dd/mmm/yyyy")
79                    ElseIf Not IsNull(!FechaEgreso) Then
                          grdExternos.TextMatrix(vllngRenglon, 6) = Format(!FechaEgreso, "dd/mmm/yyyy")
                      Else
80                        grdExternos.TextMatrix(vllngRenglon, 6) = ""
81                    End If
82                    grdExternos.Col = 7
83                    grdExternos.CellForeColor = vlvarColorExternos
84                    If Not IsNull(!Fechahorasalida) Then
85                        grdExternos.TextMatrix(vllngRenglon, 7) = Format(!Fechahorasalida, "hh:mm")
86                    ElseIf Not IsNull(!HoraEgreso) Then
                          grdExternos.TextMatrix(vllngRenglon, 7) = Format(!HoraEgreso, "hh:mm")
                      Else
87                        grdExternos.TextMatrix(vllngRenglon, 7) = ""
88                    End If
89                    grdExternos.Col = 8
90                    grdExternos.CellForeColor = vlvarColorExternos
91                    grdExternos.TextMatrix(vllngRenglon, 8) = IIf(IsNull(!Departamento), "", !Departamento)
92                    grdExternos.Col = 9
93                    grdExternos.CellForeColor = vlvarColorExternos
94                    grdExternos.TextMatrix(vllngRenglon, 9) = IIf(IsNull(!PROCEDENCIA), "", !PROCEDENCIA)
95                    grdExternos.Col = 10
96                    grdExternos.CellForeColor = vlvarColorExternos
97                    grdExternos.TextMatrix(vllngRenglon, 10) = IIf(IsNull(!DomicilioParticular), "", !DomicilioParticular)
98                    grdExternos.Col = 11
99                    grdExternos.CellForeColor = vlvarColorExternos
100                   grdExternos.TextMatrix(vllngRenglon, 11) = !Expediente
101                   grdExternos.Col = 12
102                   grdExternos.CellForeColor = vlvarColorExternos
103                   grdExternos.TextMatrix(vllngRenglon, 12) = !cuenta
104                   grdExternos.Col = 13
105                   grdExternos.CellForeColor = vlvarColorExternos
106                   grdExternos.TextMatrix(vllngRenglon, 13) = IIf(IsNull(!DepartamentoActivo), "", !DepartamentoActivo)
                      
107                   .MoveNext
108               Loop
109           End If
          
110           .Close
111       End With
          
112       pConfiguraGridExternos
          
113       grdExternos.Visible = True
114       grdExternos.Row = 1
115       grdExternos.Col = 1

   Exit Sub
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pCargaExternos" & " Linea:" & Erl()))
       Unload Me
End Sub

Private Sub pConfiguraGridExternos()
1     On Error GoTo NotificaError

2         With grdExternos
3             .FixedCols = 1
4             .FixedRows = 1
5             .FormatString = ""
6             If Chkpacientesactivos.Value = 0 Then
7                 .FormatString = IIf(optCriterio2(3).Value, "|Expediente|Cuenta|Paciente|Fecha atención|Hora atención|Fecha egreso|Hora egreso|Departamento|Empresa|Domicilio particular", IIf(optCriterio2(4).Value, "|Cuenta|Expediente|Paciente|Fecha atención|Hora atención|Fecha egreso|Hora egreso|Departamento|Empresa|Domicilio particular", "|Paciente|Expediente|Cuenta|Fecha atención|Hora atención|Fecha egreso|Hora egreso|Departamento|Empresa|Domicilio particular"))
8             Else
9                 .FormatString = IIf(optCriterio2(3).Value, "|Expediente|Cuenta|Paciente|Fecha activación|Hora activación|Fecha egreso|Hora egreso|Departamento|Empresa|Domicilio particular", IIf(optCriterio2(4).Value, "|Cuenta|Expediente|Paciente|Fecha activación|Hora activación|Fecha egreso|Hora egreso|Departamento|Empresa|Domicilio particular", "|Paciente|Expediente|Cuenta|Fecha activación|Hora activación|Fecha egreso|Hora egreso|Departamento|Empresa|Domicilio particular"))
10            End If
              
11            .ColWidth(0) = 150
12            .ColWidth(1) = IIf(optCriterio2(3).Value Or optCriterio2(4).Value, 1500, 4000)
13            .ColWidth(2) = 1250
14            .ColWidth(3) = IIf(optCriterio2(3).Value Or optCriterio2(4).Value, 4000, 1500)
              
15            If Chkpacientesactivos.Value = 0 Then
16                .ColWidth(4) = 1600     'Fecha atención
17                .ColWidth(5) = 1600     'Hora atención
18            Else
19                .ColWidth(4) = 1750     'Fecha activación
20                .ColWidth(5) = 1750     'Hora activación
21            End If
              
22            If Chkpacientesactivos.Value = 0 Then
23                .ColWidth(6) = 1500     'Fecha egreso
24                .ColWidth(7) = 1500     'Hora egreso
25            Else
26                .ColWidth(6) = 0     'Fecha egreso
27                .ColWidth(7) = 0     'Hora egreso
28            End If
29            .ColWidth(8) = 3000     'Departamento
30            .ColWidth(9) = 3000     'Empresa/Tipo de paciente
31            .ColWidth(10) = 3500    'Domicilio particular
32            .ColWidth(11) = 0       'Expediente
33            .ColWidth(12) = 0       'Cuenta
34            .ColWidth(13) = 0       'Departamento en donde está activo
              
35            .ColAlignmentFixed(1) = flexAlignCenterCenter
36            .ColAlignmentFixed(2) = flexAlignCenterCenter
37            .ColAlignmentFixed(3) = flexAlignCenterCenter
38            .ColAlignmentFixed(4) = flexAlignCenterCenter
39            .ColAlignmentFixed(5) = flexAlignCenterCenter
40            .ColAlignmentFixed(6) = flexAlignCenterCenter
41            .ColAlignmentFixed(7) = flexAlignCenterCenter
42            .ColAlignmentFixed(8) = flexAlignCenterCenter
43            .ColAlignmentFixed(9) = flexAlignCenterCenter
44            .ColAlignmentFixed(10) = flexAlignCenterCenter
45        End With
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pConfiguraGridExternos" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pConfiguraGridEgresados()
    On Error GoTo NotificaError

    With grdEgresados
        .FixedCols = 1
        .FixedRows = 1
        .FormatString = IIf(optCriterio(3).Value, "|Expediente|Cuenta|Paciente|Fecha ingreso|Hora ingreso|Fecha egreso|Hora egreso|Domicilio particular|Empresa|Médico", IIf(optCriterio(4).Value, "|Cuenta|Expediente|Paciente|Fecha ingreso|Hora ingreso|Fecha egreso|Hora egreso|Domicilio particular|Empresa|Médico", "|Paciente|Expediente|Cuenta|Fecha ingreso|Hora ingreso|Fecha egreso|Hora egreso|Domicilio particular|Empresa|Médico"))
        .ColWidth(0) = 100
        .ColWidth(1) = IIf(optCriterio(3).Value Or optCriterio(4).Value, 1500, 4000)
        .ColWidth(2) = 1250
        .ColWidth(3) = IIf(optCriterio(3).Value Or optCriterio(4).Value, 4000, 1500)
        .ColWidth(4) = 1500     'Fecha ingreso
        .ColWidth(5) = 1500     'Hora ingreso
        .ColWidth(6) = 1500     'Fecha egreso
        .ColWidth(7) = 1500     'Hora egreso
        .ColWidth(8) = 4000     'Domicilio
        .ColWidth(9) = 3000     'Empresa/Tipo de paciente
        .ColWidth(10) = 3000    'Médico
        .ColWidth(11) = 0       'Expediente
        .ColWidth(12) = 0       'Cuenta
        
        .ColAlignmentFixed(1) = flexAlignCenterCenter
        .ColAlignmentFixed(2) = flexAlignCenterCenter
        .ColAlignmentFixed(3) = flexAlignCenterCenter
        .ColAlignmentFixed(4) = flexAlignCenterCenter
        .ColAlignmentFixed(5) = flexAlignCenterCenter
        .ColAlignmentFixed(6) = flexAlignCenterCenter
        .ColAlignmentFixed(7) = flexAlignCenterCenter
        .ColAlignmentFixed(8) = flexAlignCenterCenter
        .ColAlignmentFixed(9) = flexAlignCenterCenter
        .ColAlignmentFixed(10) = flexAlignCenterCenter
        
    End With
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pConfiguraGridEgresados"))
    Unload Me
End Sub

Private Sub txtIniciales_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtIniciales

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtIniciales_GotFocus"))
    Unload Me
End Sub

Private Sub txtIniciales_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
        
    If KeyCode = vbKeyReturn Or KeyCode = vbKeyDown Then
        pCargaEgresados
        
        If grdEgresados.Enabled Then
          grdEgresados.SetFocus
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtIniciales_KeyDown"))
    Unload Me
End Sub

Private Sub txtIniciales_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
    If KeyAscii = 39 Or KeyAscii = 124 Then KeyAscii = 0
    tmrCargaEgresados.Enabled = False
    
    If optCriterio(3).Value Or optCriterio(4).Value Then
        If Not IsNumeric(Chr(KeyAscii)) And Not KeyAscii = vbKeyBack And Not KeyAscii = vbKeyReturn Then
            KeyAscii = 7
        End If
    Else
        KeyAscii = Asc(UCase(Chr(KeyAscii)))
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtIniciales_KeyPress"))
    Unload Me
End Sub

Private Sub txtIniciales_KeyUp(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError

    If KeyCode = vbKeyDown Then
        grdEgresados.SetFocus
    Else
        tmrCargaEgresados.Enabled = True
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtIniciales_KeyUp"))
    Unload Me
End Sub

Private Sub txtInicialesExternos_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtInicialesExternos

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtInicialesExternos_GotFocus"))
    Unload Me
End Sub

Private Sub txtInicialesExternos_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
        
    If KeyCode = vbKeyReturn Or KeyCode = vbKeyDown Then
        If Trim(txtInicialesExternos.Text) <> "" Then
            If tmrCargaExternos.Enabled Then
                pCargaExternos
            End If
        End If
        grdExternos.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtInicialesExternos_KeyDown"))
    Unload Me
End Sub

Private Sub txtInicialesExternos_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
    If KeyAscii = 39 Or KeyAscii = 124 Then KeyAscii = 0
    tmrCargaExternos.Enabled = False
    
    If optCriterio2(3).Value Or optCriterio2(4).Value Then
        If Not IsNumeric(Chr(KeyAscii)) And Not KeyAscii = vbKeyBack And Not KeyAscii = vbKeyReturn Then
            KeyAscii = 7
        End If
    Else
        KeyAscii = Asc(UCase(Chr(KeyAscii)))
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtInicialesExternos_KeyPress"))
    Unload Me
End Sub

Private Sub txtInicialesExternos_KeyUp(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyDown Then
        grdExternos.SetFocus
    Else
        tmrCargaExternos.Enabled = True
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtInicialesExternos_KeyUp"))
    Unload Me
End Sub

Private Sub txtLugarTrabajoResponsable_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtLugarTrabajoResponsable

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtLugarTrabajoResponsable_GotFocus"))
    Unload Me
End Sub

Private Sub txtLugarTrabajoResponsable_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        If cboMedicoEmergencias.Enabled Then
            cboMedicoEmergencias.SetFocus
        Else
            cboMedicoCargo.SetFocus
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtLugarTrabajoResponsable_KeyDown"))
    Unload Me
End Sub

Private Sub txtLugarTrabajoResponsable_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtLugarTrabajoResponsable_KeyPress"))
    Unload Me
End Sub

Private Sub txtMadre_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtMadre

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtMadre_GotFocus"))
    Unload Me
End Sub

Private Sub txtMadre_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        If fblnCanFocus(mskNacimientoMadre) Then
            mskNacimientoMadre.SetFocus
        Else
            If chkForaneo.Value = 1 Then
                txtDomicilioForaneo.SetFocus
            Else
                SendKeys vbTab
            End If
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtMadre_KeyDown"))
    Unload Me
End Sub

Private Sub txtMadre_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtMadre_KeyPress"))
    Unload Me
End Sub

Private Sub txtNombre_GotFocus()
    On Error GoTo NotificaError
    
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 0
    Else
    
    End If
    pSelTextBox txtNombre

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNombre_GotFocus"))
    Unload Me
End Sub

Private Sub txtNombre_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        mskFechaNacimiento.SetFocus
    End If
                     
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNombre_KeyDown"))
    Unload Me
End Sub

Private Sub pDatosIngresoPrevio(vllngNumeroExpediente As Long)
1     On Error GoTo NotificaError
          
2         vlstrSentencia = "SELECT * FROM AdIngresoPrevio WHERE numCvePaciente = " & Str(vllngNumeroExpediente)
3         Set rs = frsRegresaRs(vlstrSentencia)
4         If rs.RecordCount <> 0 Then
5             With rs
6                 vlblnCambioFechaIngreso = True
7                 vlblnCambioHoraIngreso = True
                  
8                 lstrHoraIngresoPrevio = !dtmfechaingreso
9                 lstrFechaIngresoPrepago = Format(!dtmfechaingreso, "DD/MM/YYYY")
                  
10                mskFechaIngreso.Mask = ""
11                mskFechaIngreso.Text = Format(!dtmfechaingreso, "DD/MM/YYYY")
12                mskFechaIngreso.Mask = "##/##/####"
                  
13                mskHoraIngreso.Mask = ""
14                mskHoraIngreso.Text = IIf(Len(Trim(Str(Hour(!dtmHoraIngreso)))) = 1, "0" + Trim(Str(Hour(!dtmHoraIngreso))), Trim(Str(Hour(!dtmHoraIngreso)))) + ":" + IIf(Len(Trim(Str(Minute(!dtmHoraIngreso)))) = 1, "0" + Trim(Str(Minute(!dtmHoraIngreso))), Trim(Str(Minute(!dtmHoraIngreso))))
15                mskHoraIngreso.Mask = "##:##"
              
16                cboDeptoIngreso.ListIndex = fintLocalizaCbo_new(cboDeptoIngreso, !INTCVEDEPTOINGRESO)
17                cboTipoIngreso.ListIndex = fintLocalizaCritCbo_new(cboTipoIngreso, Trim(vlstrTipoIngresoPrevio))
                  
18                cboTipoPaciente.ListIndex = flngLocalizaCbo_new(cboTipoPaciente, Str(IIf(IsNull(!tnyCveTipoPaciente), 0, !tnyCveTipoPaciente)))
                  
19                If IIf(IsNull(!tnyCveTipoConvenio), 0, !tnyCveTipoConvenio) <> 0 Then
20                    cboTipoConvenio.ListIndex = flngLocalizaCbo_new(cboTipoConvenio, Str(!tnyCveTipoConvenio))
21                End If
22                txtNumeroControl.Text = Trim(IIf(IsNull(!VCHNUMAFILIACION), "", !VCHNUMAFILIACION))
23                If IIf(IsNull(!intcveempresa), 0, !intcveempresa) <> 0 Then
24                    cboEmpresa.ListIndex = flngLocalizaCbo_new(cboEmpresa, Str(!intcveempresa))
25                End If
                  
26                cboEmpresaPaciente.ListIndex = flngLocalizaCbo_new(cboEmpresaPaciente, Str(IIf(IsNull(!INTCVEEMPRESAPACIENTE), 0, !INTCVEEMPRESAPACIENTE)))
                  
27                If Trim(IIf(IsNull(!chrTipoPlan), "", !chrTipoPlan)) = "OTROS" Then
28                    OptPaqueteOtros(0).Value = False
29                    OptPaqueteOtros(1).Value = True
30                Else
31                    OptPaqueteOtros(1).Value = False
32                    OptPaqueteOtros(0).Value = True
33                End If
                  
34                vllngClavePaqueteAnterior = IIf(IsNull(!intCvePlanPaqueteCir), 0, !intCvePlanPaqueteCir)
35                pCargaPaquetosOtros
36                cboPlanPaqueteCirugia.ListIndex = IIf(cboPlanPaqueteCirugia.ListIndex = -1, -1, flngLocalizaCbo_new(cboPlanPaqueteCirugia, Str(IIf(IsNull(!intCvePlanPaqueteCir), 0, !intCvePlanPaqueteCir))))
37                txtAnticipo.Text = FormatCurrency(IIf(IsNull(!mnyAnticipoSug), 0, !mnyAnticipoSug), 2)
                  
38                txtNombreEmergencia.Text = Trim(IIf(IsNull(!VCHNOMBREEMERGENCIA), "", !VCHNOMBREEMERGENCIA))
39                txtDomicilioEmergencia.Text = Trim(IIf(IsNull(!vchDirEmergencia), "", !vchDirEmergencia))
40                txtTelefonoEmergencia.Text = Trim(IIf(IsNull(!VCHTELEMERGENCIA), "", !VCHTELEMERGENCIA))
41                cboParentescoFamiliarEmergencia.ListIndex = flngLocalizaCbo_new(cboParentescoFamiliarEmergencia, Str(IIf(IsNull(!intCveParentescoEmergencia), 0, !intCveParentescoEmergencia)))
                  
42                txtNombreResponsable.Text = Trim(IIf(IsNull(!vchNombreRespon), "", !vchNombreRespon))
43                txtDomicilioResponsable.Text = Trim(IIf(IsNull(!vchDireccionRespon), "", !vchDireccionRespon))
44                txtTelefonoResponsable.Text = Trim(IIf(IsNull(!vchTelefonoRespon), "", !vchTelefonoRespon))
45                cboParentescoFamiliarResponsable.ListIndex = flngLocalizaCbo_new(cboParentescoFamiliarResponsable, Str(IIf(IsNull(!intCveParentescoResponsable), 0, !intCveParentescoResponsable)))
46                txtLugarTrabajoResponsable.Text = Trim(IIf(IsNull(!vchLugarTrabajoRespon), "", !vchLugarTrabajoRespon))
47                txtObservaciones.Text = Trim(IIf(IsNull(!vchObservacion), "", !vchObservacion))
                  
48                cboMedicoCargo.ListIndex = flngLocalizaCbo_new(cboMedicoCargo, Str(IIf(IsNull(!intcvemedicoCargo), 0, !intcvemedicoCargo)))
                  
49                If IIf(IsNull(!intPreDiagnostico), 0, !intPreDiagnostico) <> 0 Then
50                    vllngCveDiagnostico = !intPreDiagnostico
51                    txtDiagnostico.Text = frsRegresaRs("select vchDescripcion from ExDiagnostico where intCveDiagno = " & Str(!intPreDiagnostico)).Fields(0)
52                End If
                  
53                txtDiagnosticoEspecifico.Text = Trim(IIf(IsNull(!VCHDIAGNOSTICOESPECIFICO), "", !VCHDIAGNOSTICOESPECIFICO))


54                txtAutoriza.Text = Trim(IIf(IsNull(!VCHAUTORIZACION), "", !VCHAUTORIZACION))

                  '|  Dado que en la tabla de ingreso previo no tiene la procedencia, deshabilito el combo
55                cboProcedencia.Enabled = False
            If Trim(vgstrNombCortoCH) = Trim("SOM") Then
    
            cboProcedencia.Enabled = True
            End If
                  
56                cboTipoPoliza.ListIndex = flngLocalizaCbo_new(cboTipoPoliza, IIf(IsNull(!INTCVETIPOPOLIZASEGURO), 0, !INTCVETIPOPOLIZASEGURO))
                  
57                txtNumeroPoliza.Text = Trim(IIf(IsNull(!VCHNUMPOLIZA), "", !VCHNUMPOLIZA))
                  
                  'cboSocio.ListIndex = flngLocalizaCbo_new(cboSocio, !intcvesocio)
58                If Not IsNull(!intcvesocio) Then
59                    pCargaDatosSocio !intcvesocio
60                End If
61            End With
62        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pDatosIngresoPrevio" & " Linea:" & Erl()))
        Unload Me
End Sub
Private Sub pDatosIngreso(vllngNumeroCuenta As Long, lstrTipoPaciente As String)
1     On Error GoTo NotificaError

          Dim rsCuarto As New ADODB.Recordset
          Dim rsDiagnosticoPaciente As New ADODB.Recordset
          Dim rsCirugiaPaciente As New ADODB.Recordset 'caso 20329
          Dim SQL As String
          Dim rs2 As New ADODB.Recordset
          Dim rsempresapaciente As ADODB.Recordset
          Dim vlstrSentenciaFirmas As String
          Dim rsfirmas As ADODB.Recordset
          Dim vlstrSentenciaRequisitos As String
          Dim rsrequisitos As ADODB.Recordset
          Dim strTipoIngreso As String
          Dim rsExterno As ADODB.Recordset
          
2         vgstrParametrosSP = Str(vllngNumeroCuenta) & "|" & lstrTipoPaciente
3         Set rs = frsEjecuta_SP(vgstrParametrosSP, "Sp_ExSelPacienteIngreso")
4         If rs.RecordCount <> 0 Then
5             With rs
6                 strTipoIngreso = IIf(!intCveTipoIngreso = 9, "1", CStr(!intCveTipoIngreso))
                  
7                 vllngIngresoConsultado = !INTNUMCUENTA
8                 vlstrTipoPacienteConsultado = lstrTipoPaciente
9                 vlstrTipoIngresoRegistradoPreviamente = ""
                  
10                pLlenaTipoIngreso
                  
11                vlblnCambioFechaIngreso = True
12                vlblnCambioHoraIngreso = True
                  
13                If Trim(!chrEstatus) <> "E" Then
14                    mskFechaIngreso.Mask = ""
15                    mskFechaIngreso.Text = Format(!DTMFECHAHORAINGRESO, "DD/MM/YYYY")
16                    mskFechaIngreso.Mask = "##/##/####"
                      
17                    mskHoraIngreso.Mask = ""
18                    mskHoraIngreso.Text = Format(!DTMFECHAHORAINGRESO, "hh:mm")
19                    mskHoraIngreso.Mask = "##:##"
20                End If
                              
21                If Trim(!chrEstatus) = "P" Then
22                    lblnDePestanaPrepago = True
23                    lstrHoraIngresoPrepago = !DTMFECHAHORAINGRESO
24                    lstrFechaIngresoPrepago = Format(!DTMFECHAHORAINGRESO, "DD/MM/YYYY")
25                End If
                  
                  ' CUANDO ES CONSULTA DE LAS PESTAÑAS TODO LA PARTE
                  ' DEL FRAREFERENTEINGRESO SI SE ACTUALIZA
      '            If IsNull(!intCveDeptoIngreso) Then
      '                cboDeptoIngreso.ListIndex = -1
      '            Else
      '                cboDeptoIngreso.ListIndex = fintLocalizaCbo_new(cboDeptoIngreso, !intCveDeptoIngreso)
      '            End If
                  
26                cboTipoIngreso.ListIndex = flngLocalizaCbo_new(cboTipoIngreso, strTipoIngreso)
27                vlstrTipoIngresoRegistradoPreviamente = cboTipoIngreso.Text
28                pLlenaTipoIngreso
29                cboTipoIngreso.ListIndex = flngLocalizaCbo_new(cboTipoIngreso, strTipoIngreso)
                  
30                If cboTipoIngreso.ListIndex <> -1 Then
31                    If cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveUrgencias Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveExterno Or cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex) = clngCveConsultaExterna Then
32                        cboTipoIngreso.Enabled = False
33                        lblTipoIngreso.Enabled = False
34                    End If
35                End If
                             
36                If IsNull(!INTCVEDEPTOINGRESO) Then
37                    cboDeptoIngreso.ListIndex = -1
38                Else
39                    cboDeptoIngreso.ListIndex = fintLocalizaCbo_new(cboDeptoIngreso, !INTCVEDEPTOINGRESO)
40                End If
                  
41                vlstrTipoIngresoAdmisionConsultada = Trim(cboTipoIngreso.List(cboTipoIngreso.ListIndex))
42                vlstrTipoIngresoAdmision = strTipoIngreso
              
43                If Not IsNull(!intcveprocedencia) Then
44                    If !intcveprocedencia < 1 Then
45                        cboProcedencia.ListIndex = -1
46                    Else
47                        pLlenaProcedencia
48                        cboProcedencia.ListIndex = flngLocalizaCbo_new(cboProcedencia, (!intcveprocedencia))
49                    End If
50                Else
51                    cboProcedencia.ListIndex = -1
52                End If
                  
53                optOrden(0).Value = IIf(!intOrdenInternamiento, True, False)
54                optOrden(1).Value = IIf(!intOrdenInternamiento, True, False) = False
                  
55                pLlenaTipoPaciente ""
56                cboTipoPaciente.ListIndex = flngLocalizaCbo_new(cboTipoPaciente, Str(IIf(IsNull(!intCveTipoPaciente), 0, !intCveTipoPaciente)))
              
57                If vlstrTipoTipoPaciente = "CO" Then
                      'Primero el tipo de convenio y después la empresa
58                    vgstrParametrosSP = CStr(IIf(IsNull(!intcveempresa), 0, !intcveempresa)) & "|-1|-1"
59                    Set rs2 = frsEjecuta_SP(vgstrParametrosSP, "Sp_CcSelEmpresa")
60                    If Not rs2.EOF Then
61                        cboTipoConvenio.ListIndex = flngLocalizaCbo_new(cboTipoConvenio, Str(IIf(IsNull(rs2!tnyCveTipoConvenio), 0, rs2!tnyCveTipoConvenio)))
62                    Else
63                        cboTipoConvenio.ListIndex = flngLocalizaCbo_new(cboTipoConvenio, 0)
64                    End If
65                    rs2.Close
                      
66                    If IIf(IsNull(!intcveempresa), 0, !intcveempresa) <> 0 Then
67                        cboEmpresa.ListIndex = flngLocalizaCbo_new(cboEmpresa, Str(IIf(IsNull(!intcveempresa), 0, !intcveempresa)))
68                    End If
                                      
69                    Cmdrequisitos.Enabled = True
70                End If
              
71                If IIf(IsNull(!INTCVEEMPRESAPACIENTE), 0, !INTCVEEMPRESAPACIENTE) <> 0 Then
72                    cboEmpresaPaciente.ListIndex = flngLocalizaCbo_new(cboEmpresaPaciente, Str(IIf(IsNull(!INTCVEEMPRESAPACIENTE), 0, !INTCVEEMPRESAPACIENTE)))
73                End If
                  
74                If IIf(IsNull(!intNumCuentaMama), 0, !intNumCuentaMama) <> 0 And cboMadre.ListCount <> 0 Then
75                    cboMadre.ListIndex = flngLocalizaCbo_new(cboMadre, Str(IIf(IsNull(!intNumCuentaMama), 0, !intNumCuentaMama)))
76                End If
                      
77                If vlstrTipoTipoPaciente = "EM" Then
78                    If IIf(IsNull(!intCveEmpleadoRelacionado), 0, !intCveEmpleadoRelacionado) <> 0 Then
79                        cboRelacion.ListIndex = flngLocalizaCbo_new(cboRelacion, Str(!intCveEmpleadoRelacionado))
80                    End If
81                ElseIf vlstrTipoTipoPaciente = "ME" Then
82                    If IIf(IsNull(!intCveMedicoRelacionado), 0, !intCveMedicoRelacionado) <> 0 Then
83                        cboRelacion.ListIndex = flngLocalizaCbo_new(cboRelacion, Str(!intCveMedicoRelacionado))
84                    End If
85                End If
              
86                txtAutoriza.Text = Trim(IIf(IsNull(!VCHAUTORIZACION), "", !VCHAUTORIZACION))
87                cboTipoPoliza.ListIndex = fintLocalizaCbo_new(cboTipoPoliza, IIf(IsNull(!intCveTipoPoliza), 0, !intCveTipoPoliza))
88                txtNumeroControl.Text = Trim(IIf(IsNull(!VCHNUMAFILIACION), "", !VCHNUMAFILIACION))
89                txtNumeroPoliza.Text = Trim(IIf(IsNull(!VCHNUMPOLIZA), "", !VCHNUMPOLIZA))
                  



90                Select Case !chrTipoAtencion
                      Case "O"
91                        OptPaqueteOtros(0).Value = False
92                        OptPaqueteOtros(1).Value = True
93                    Case "P"
94                        OptPaqueteOtros(1).Value = False
95                        OptPaqueteOtros(0).Value = True
96                    Case Else
97                        OptPaqueteOtros(0).Value = False
98                        OptPaqueteOtros(1).Value = True
99                End Select
                  
100               If !chrTipoAtencion = "P" Then
101                   vllngClavePaqueteAnterior = IIf(IsNull(!intCvePaquete), 0, !intCvePaquete)
102                   pCargaPaquetosOtros
103                   cboPlanPaqueteCirugia.ListIndex = flngLocalizaCbo_new(cboPlanPaqueteCirugia, Trim(Str(IIf(IsNull(!intCvePaquete), 0, !intCvePaquete))))
104               Else
105                   vllngClavePaqueteAnterior = IIf(IsNull(!intCveConceptoAtencion), 0, !intCveConceptoAtencion)
106                   pCargaPaquetosOtros
107                   cboPlanPaqueteCirugia.ListIndex = flngLocalizaCbo_new(cboPlanPaqueteCirugia, Trim(Str(IIf(IsNull(!intCveConceptoAtencion), 0, !intCveConceptoAtencion))))
108               End If
              
109               txtAnticipo.Text = FormatCurrency(IIf(IsNull(!numAnticipoSugerido), 0, !numAnticipoSugerido), 2)
110               txtObservaciones.Text = Trim(IIf(IsNull(!vchObservacion), "", !vchObservacion))
                  
111               txtNombreEmergencia.Text = Trim(IIf(IsNull(!VCHNOMBREEMERGENCIA), "", !VCHNOMBREEMERGENCIA))
112               txtDomicilioEmergencia.Text = Trim(IIf(IsNull(!vchDomicilioEmergencia), "", !vchDomicilioEmergencia))
113               txtTelefonoEmergencia.Text = Trim(IIf(IsNull(!vchTelefonoEmergencia), "", !vchTelefonoEmergencia))
114               cboParentescoFamiliarEmergencia.ListIndex = flngLocalizaCbo_new(cboParentescoFamiliarEmergencia, Str(IIf(IsNull(!intCveParentescoEmergencia), 0, !intCveParentescoEmergencia)))
115               txtNombreResponsable.Text = Trim(IIf(IsNull(!vchNombreResponsable), "", !vchNombreResponsable))
116               txtDomicilioResponsable.Text = Trim(IIf(IsNull(!vchDomicilioResponsable), "", !vchDomicilioResponsable))
117               txtTelefonoResponsable.Text = Trim(IIf(IsNull(!vchTelefonoResponsable), "", !vchTelefonoResponsable))
118               cboParentescoFamiliarResponsable.ListIndex = flngLocalizaCbo_new(cboParentescoFamiliarResponsable, Str(IIf(IsNull(!intCveParentescoResponsable), 0, !intCveParentescoResponsable)))
119               txtLugarTrabajoResponsable.Text = Trim(IIf(IsNull(!vchLugarTrabajoResponsable), "", !vchLugarTrabajoResponsable))
120               mskNacimientoEmergencia.Mask = ""
121               mskNacimientoEmergencia.Text = IIf(IsNull(!dtmFechaNacimientoEmergencia), "", !dtmFechaNacimientoEmergencia)
122               mskNacimientoEmergencia.Mask = "##/##/####"
123               mskNacimientoResponsable.Mask = ""
124               mskNacimientoResponsable.Text = IIf(IsNull(!dtmFechaNacimientoResponsable), "", !dtmFechaNacimientoResponsable)
125               mskNacimientoResponsable.Mask = "##/##/####"
                  
126               If IIf(IsNull(!intCveMedicoEmergencias), 0, !intCveMedicoEmergencias) <> 0 Then
127                   cboMedicoEmergencias.ListIndex = flngLocalizaCbo_new(cboMedicoEmergencias, Str(IIf(IsNull(!intCveMedicoEmergencias), 0, !intCveMedicoEmergencias)))
128               Else
129                   cboMedicoEmergencias.ListIndex = -1
130               End If
131               cboMedicoCargo.ListIndex = flngLocalizaCbo_new(cboMedicoCargo, Str(IIf(IsNull(!intCveMedicoTratante), 0, !intCveMedicoTratante)))
                  
132               If IIf(IsNull(!intCveDiagnosticoPrevio), 0, !intCveDiagnosticoPrevio) <> 0 Then
133                   vllngCveDiagnostico = !intCveDiagnosticoPrevio
134                   Set rsDiagnosticoPaciente = frsRegresaRs("SELECT vchDescripcion FROM ExDiagnostico WHERE intCveDiagno = " & Str(!intCveDiagnosticoPrevio))
135                   If rsDiagnosticoPaciente.RecordCount <> 0 Then
136                       txtDiagnostico.Text = rsDiagnosticoPaciente.Fields(0)
137                   End If
138                   rsDiagnosticoPaciente.Close
139               End If
                      
140               txtDiagnosticoEspecifico.Text = Trim(IIf(IsNull(!VCHDIAGNOSTICOESPECIFICO), "", !VCHDIAGNOSTICOESPECIFICO))

                '***************caso 20329
                            
                   If IIf(IsNull(!intCveCirugia), 0, !intCveCirugia) <> 0 Then
                      vllngCveCirugia = !intCveCirugia
                      Set rsCirugiaPaciente = frsRegresaRs("SELECT vchDescripcion FROM ExCirugia WHERE intCveCirugia = " & Str(!intCveCirugia))
                      If rsCirugiaPaciente.RecordCount <> 0 Then
                          txtCirugia.Text = rsCirugiaPaciente.Fields(0)
                      End If
                      rsCirugiaPaciente.Close
                    End If

                  cboTecnicaLateralidad.ListIndex = flngLocalizaCbo_new(cboTecnicaLateralidad, Str(IIf(IsNull(!intcvetecnicalateralidad), 0, !intcvetecnicalateralidad))) 'caso 20329
                   '*******************+
                      
141               lblEstadoCuartoActual.Enabled = False
142               If vglngCveEstadoCuartoDisponible <> 0 Then
143                   cboEstadoCuartoActual.ListIndex = flngLocalizaCbo_new(cboEstadoCuartoActual, CStr(vglngCveEstadoCuartoDisponible))
144               Else
145                   cboEstadoCuartoActual.ListIndex = 0
146               End If
147               cboEstadoCuartoActual.Enabled = False

148               If Trim(!chrEstatus) = "A" Or Trim(!chrEstatus) = "P" Then
149                   If !intCveTipoIngreso <> 7 And !intCveTipoIngreso <> 8 And !intCveTipoIngreso <> 10 And !intCveTipoIngreso <> 4 Then
150                       txtCuentaInterno.Text = Trim(!INTNUMCUENTA)
151                       txtCuentaExterno.Enabled = False
152                       txtCuentaExterno.Enabled = False
                          If !intCveTipoIngreso = 3 Then
                            pCargaPaquetosOtros
                            cboPlanPaqueteCirugia.ListIndex = flngLocalizaCbo_new(cboPlanPaqueteCirugia, Trim(Str(IIf(IsNull(vllngClavePaqueteAnterior), 0, vllngClavePaqueteAnterior))))
                          End If
153                   Else
154                       vlstrSentenciaFirmas = "SELECT MAX(EXPACIENTEINGRESO.INTNUMCUENTA) IntNumCuenta FROM EXPACIENTEINGRESO INNER JOIN NoDepartamento nodep ON expacienteingreso.INTCVEDEPARTAMENTO = nodep.SMICVEDEPARTAMENTO AND nodep.TNYCLAVEEMPRESA = " & vgintClaveEmpresaContable & " INNER JOIN SITIPOINGRESO ON EXPACIENTEINGRESO.INTCVETIPOINGRESO = SITIPOINGRESO.INTCVETIPOINGRESO WHERE SITIPOINGRESO.CHRTIPOINGRESO = 'E' and EXPACIENTEINGRESO.INTNUMPACIENTE = " & Val(txtExpedienteInterno.Text) & " and nodep.TNYCLAVEEMPRESA = " & vgintClaveEmpresaContable
155                       Set rsExterno = frsRegresaRs(vlstrSentenciaFirmas, adLockOptimistic, adOpenDynamic)
156                       If rsExterno!INTNUMCUENTA <> "" Then
157                           txtCuentaExterno.Text = Trim(rsExterno!INTNUMCUENTA)
158                       End If
                          'La cuenta de externo que trae ya viene correctamente, el recordset anterior (rsExterno) no es necesario
                          'txtCuentaExterno.Text = Trim(!intNumCuenta)
159                       txtCuentaInterno.Text = IIf(!intCveTipoIngreso = 7 Or !intCveTipoIngreso = 8 Or !intCveTipoIngreso = clngCveConsultaExterna, "", Trim(!INTNUMCUENTA))
160                       txtCuentaInterno.Enabled = True
161                       txtCuentaExterno.Enabled = True
162                       txtCuentaExterno.Enabled = True
163                       chkAsignarCuarto.Value = 0
164                   End If
                      
165                   If Val(txtCuentaInterno.Text) <> 0 And Val(txtCuentaExterno.Text) <> 0 Then
166                       OptEnvioPromo(0).Value = False
167                       OptEnvioPromo(1).Value = False
168                   End If
                 
169                   If Trim(!chrEstatus) = "A" Then
170                       Set rsCuarto = frsEjecuta_SP(IIf(IsNull(!INTCVECUARTO), 0, !INTCVECUARTO), "Sp_AdSelCuartoClave")
171                       If rsCuarto.RecordCount <> 0 Then
172                           cmdSugerirCuarto.Caption = "Cuarto asignado"
                              
173                           grdCuarto.TextMatrix(1, 1) = rsCuarto!NombreTipoCuarto
174                           grdCuarto.TextMatrix(1, 2) = rsCuarto!NombreArea
175                           grdCuarto.TextMatrix(1, 3) = rsCuarto!Cuarto
176                           grdCuarto.TextMatrix(1, 4) = rsCuarto!NumeroCuarto
177                           grdCuarto.TextMatrix(1, 6) = rsCuarto!Sexo
178                           grdCuarto.TextMatrix(1, 8) = rsCuarto!ClaveCuarto
179                       End If
180                       rsCuarto.Close
                          
181                       pHabilitaAsignacionCuarto False
183                   End If
184               End If
                  
185               Cmdrequisitos.Enabled = False
186               If cboEmpresa.ListIndex <> -1 Then
187                   vlstrSentenciaFirmas = "SELECT CCFIRMASEMPRESA.BLBIMAGENFIRMA FROM CCFIRMASEMPRESA  WHERE INTCVEEMPRESA=" & cboEmpresa.ItemData(cboEmpresa.ListIndex)
188                   Set rsfirmas = frsRegresaRs(vlstrSentenciaFirmas, adLockOptimistic, adOpenDynamic)
189                   If rsfirmas.RecordCount > 0 Then
190                       Cmdrequisitos.Enabled = True
191                   End If
192                   rsfirmas.Close
                      
193                   vlstrSentenciaRequisitos = "SELECT ascii(vchrequisitosingreso) Numero, vchrequisitosingreso req FROM CCEMPRESA WHERE INTCVEEMPRESA=" & cboEmpresa.ItemData(cboEmpresa.ListIndex)
194                   Set rsrequisitos = frsRegresaRs(vlstrSentenciaRequisitos, adLockOptimistic, adOpenDynamic)
195                   If rsrequisitos.RecordCount > 0 Then
196                       If rsrequisitos!numero <> 13 And rsrequisitos!req <> "" Then
197                           Cmdrequisitos.Enabled = True
198                       End If
199                   End If
200                   rsrequisitos.Close
201                   lblempresapaciente.Enabled = False
202               End If
                  
                  '-- No se puede modificar el tipo de ingreso a menos que haya sido registro express o ambulatorio --'
                  
                  'Si está actualmente interno no se puede modificar el tipo de paciente, convenio y empresa
                  'ya que si se requiere cambio, debe realizarse una actualización de precios en la cuenta
                  'del pacientes, esto es, un traslado de cargos
203               If Trim(!chrEstatus) = "A" Or Trim(!chrEstatus) = "P" Then
204                   cboTipoPaciente.Enabled = False
205                   lblTipoPaciente.Enabled = False
206                   cboTipoConvenio.Enabled = False
207                   lblTipoConvenio.Enabled = False
208                   cboEmpresa.Enabled = False
209                   lblEmpresa.Enabled = False
210                   cboEmpresa.Width = 5220
211                   Cmdrequisitos.Visible = True
212                   OptPaqueteOtros(0).Visible = True
213                   OptPaqueteOtros(1).Visible = True
214                   cboPlanPaqueteCirugia.Visible = True
                      
215                   If !intCveTipoIngreso <> 9 And !intCveTipoIngreso <> 7 And !intCveTipoIngreso <> 8 And !intCveTipoIngreso <> 10 Then
216                       If fblnRevisaPermisoEgreso(vglngNumeroLogin, 753, "E") Then
217                           cmdEgresar.Enabled = True
218                       Else
219                           cmdEgresar.Enabled = False
220                       End If
221                       cmdCancelarAdmision.Enabled = True
222                   End If
223               End If
                  
224               If !intCveTipoIngreso = 7 Or !intCveTipoIngreso = 8 Or !intCveTipoIngreso = clngCveConsultaExterna Then
225                   vglngCuentaPaciente = Val(txtCuentaExterno.Text)
226                   cmdEgresar.Enabled = False
227                   cmdAbrirCuenta.Enabled = blnHabilitarAbrirCuenta
228                   cmdActivarPaciente.Enabled = blnHabilitarActivar
229                   fraDocumentos.Enabled = blnHabilitarReporte
230                   cmdImprimir.Enabled = blnHabilitarReporte
231               Else
232                   fraDocumentos.Enabled = True
233                   cmdImprimir.Enabled = True
234               End If
                  
                  'Agregado 22/Mayo/2012 para Campo VCHMOTIVOINGRESO
235               txtMotivoIngreso.Text = Trim(IIf(IsNull(!VCHMOTIVOINGRESO), "", !VCHMOTIVOINGRESO))
                  
                  'Agregado Julio/2012 para familiares dependientes'
236               If (vlstrTipoTipoPaciente = "ME" Or vlstrTipoTipoPaciente = "EM") Or Not IsNull(!intCveFamiliar) Then
237                   If Not IsNull(!intCveFamiliar) Then
238                       vllngCveFamiliar = !intCveFamiliar
239                       cboFamiliar.ListIndex = flngLocalizaCbo_new(cboFamiliar, Str(!intCveFamiliar))
240                       If cboFamiliar.ListIndex < 0 Then
241                           cboFamiliar.AddItem txtApellidoPaterno.Text & " " & Trim(txtApellidoMaterno.Text) & " " & txtNombre.Text, 0
242                           cboFamiliar.ItemData(cboFamiliar.NewIndex) = !intCveFamiliar
243                           cboFamiliar.ListIndex = flngLocalizaCbo_new(cboFamiliar, Str(!intCveFamiliar))
244                       End If
245                       lblFamiliar.Enabled = False
246                       cboFamiliar.Enabled = False
247                   End If
                      
                      'Inhabilitar los datos generales del paciente si es familiar de un empleado o médico'
248                   txtApellidoPaterno.Enabled = False
249                   txtApellidoMaterno.Enabled = False
250                   txtNombre.Enabled = False
251                   cboRelacion.Enabled = False
252                   lblRelacion.Enabled = False
253               End If
              
                  'Socios
254               If vlstrTipoTipoPaciente = "PA" Then
255                   If CStr(IIf(IsNull(!intCveTipoPaciente), 0, !intCveTipoPaciente)) = CStr(vgLngTipoPacienteSocio) Then
256                       If Not IsNull(!intcvesocio) Then
257                           pCargaDatosSocio !intcvesocio
258                           vlCveSocio = Val(!intcvesocio)
259                       End If
260                   End If
261               End If
              
                  'Se relaciona la cuenta con el socio configurado
262               If Not IsNull(!intcvesocio) Then
263                   If Val(!intcvesocio) > 0 Then
264                       vllngSocioRelacionado = Val(!intcvesocio)
265                   End If
266               End If
              
267               vlblnDatosCargados = True
268           End With
              
269           If txtCuentaInterno <> "" Then
270               lblCuentaExterno.Enabled = False
271               txtCuentaExterno.Enabled = False
272               cboMedicoEmergencias.Enabled = False
273               lblMedicoEmergencias.Enabled = False
274           End If
              
275           cmdBusquedaPaciente.Enabled = False
              
              
              '|  Se carga la información de los archivos adjuntos

276           Set RSExDocumentoAdjunto = frsRegresaRs("" & _
              "Select '',intCve, " & _
                  "vchDescripcion, " & _
                  "vchRuta, " & _
                  "'CARGADOBD' as estado " & _
              "From ExDocumentoAdjunto " & _
              "where intNumCuenta = " & Str(vllngNumeroCuenta) & _
              " and chrTipoPaciente ='" & lstrTipoPaciente & "'")
                      
277           If RSExDocumentoAdjunto.RecordCount <> 0 Then
278               pLlenaVsfGrid GrdAdjuntos, RSExDocumentoAdjunto, True
                  
                  'cboSocio.ListIndex = -1
                  'cboSocio.Enabled = True
                  'lblSocio.Enabled = True
279           Else
280               GrdAdjuntos.Clear
281               GrdAdjuntos.FormatString = "|Id|Descripción|Archivo|Estado"
282               GrdAdjuntos.Rows = 2
283           End If
284           GrdAdjuntos.FormatString = "|Id|Descripción|Archivo|Estado"
          
285           GrdAdjuntos.ColWidth(0) = 0
286           GrdAdjuntos.ColWidth(1) = 0
287           GrdAdjuntos.ColWidth(2) = 100 '4000
288           GrdAdjuntos.ColWidth(3) = 0
289           GrdAdjuntos.ColWidth(4) = 0
290           TextNombreAdjunto.Text = ""
             ' Str (vllngNumeroCuenta) & "|" & lstrTipoPaciente
              
              
              
              
              
291       End If

   Exit Sub
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pDatosIngreso" & " Linea:" & Erl()))
       Unload Me
End Sub

Private Sub pDatosUltimaCuenta(vllngNumeroCuenta As Long, lstrTipoPaciente As String)
1     On Error GoTo NotificaError

          Dim rsEmpresa As New ADODB.Recordset
          Dim rs2 As New ADODB.Recordset
          Dim strTipoIngreso As String
          
2         vgstrParametrosSP = Str(vllngNumeroCuenta) & "|" & lstrTipoPaciente
3         Set rs = frsEjecuta_SP(vgstrParametrosSP, "Sp_ExSelPacienteIngreso")
4         If rs.RecordCount <> 0 Then
5             With rs
6                 vlstrTipoIngresoRegistradoPreviamente = ""
7                 vlstrTipoIngresoAdmisionConsultada = ""
8                 vlstrTipoIngresoAdmision = ""
                  
9                 strTipoIngreso = IIf((!intCveTipoIngreso = 9 Or !intCveTipoIngreso = 6), "1", CStr(!intCveTipoIngreso))
                  
10                pLlenaTipoIngreso
                  
                  If cgstrModulo = "PV" And vgstrForma = "frmPresupuestos" Then
                      'PREPAGO
                  Else
11                    cboTipoIngreso.ListIndex = fintLocalizaCbo_new(cboTipoIngreso, !intCveTipoIngreso)
                  End If
                                                
12                optOrden(0).Value = IIf(!intOrdenInternamiento, True, False)
13                optOrden(1).Value = IIf(!intOrdenInternamiento, True, False) = False

14                cboTipoPaciente.ListIndex = flngLocalizaCbo_new(cboTipoPaciente, Str(IIf(IsNull(!intCveTipoPaciente), 0, !intCveTipoPaciente)))
                  
15                If vlstrTipoTipoPaciente = "CO" Then
                      'Primero el tipo de convenio y después la empresa
16                    vgstrParametrosSP = CStr(IIf(IsNull(!intcveempresa), 0, !intcveempresa)) & "|-1|-1"
17                    Set rsEmpresa = frsEjecuta_SP(vgstrParametrosSP, "Sp_CcSelEmpresa")
18                    If Not rsEmpresa.EOF Then
19                        cboTipoConvenio.ListIndex = flngLocalizaCbo_new(cboTipoConvenio, Str(IIf(IsNull(rsEmpresa!tnyCveTipoConvenio), 0, rsEmpresa!tnyCveTipoConvenio)))
20                    Else
21                        cboTipoConvenio.ListIndex = flngLocalizaCbo_new(cboTipoConvenio, 0)
22                    End If
23                    rsEmpresa.Close
                      
24                    If IIf(IsNull(!intcveempresa), 0, !intcveempresa) <> 0 Then
25                        cboEmpresa.ListIndex = flngLocalizaCbo_new(cboEmpresa, Str(IIf(IsNull(!intcveempresa), 0, !intcveempresa)))
26                    End If
                      
27                    Cmdrequisitos.Enabled = True
28                End If
                  
29                If IIf(IsNull(!INTCVEEMPRESAPACIENTE), 0, !INTCVEEMPRESAPACIENTE) <> 0 Then
30                    cboEmpresaPaciente.ListIndex = flngLocalizaCbo_new(cboEmpresaPaciente, Str(IIf(IsNull(!INTCVEEMPRESAPACIENTE), 0, !INTCVEEMPRESAPACIENTE)))
31                End If
                  
32                If IIf(IsNull(!intNumCuentaMama), 0, !intNumCuentaMama) <> 0 And cboMadre.ListCount <> 0 Then
33                    cboMadre.ListIndex = flngLocalizaCbo_new(cboMadre, Str(IIf(IsNull(!intNumCuentaMama), 0, !intNumCuentaMama)))
34                End If
                  
35                If vlstrTipoTipoPaciente = "EM" Then
36                    If IsNull(!intCveEmpleadoRelacionado) Then
37                        cboRelacion.ListIndex = -1
38                    Else
39                        cboRelacion.ListIndex = flngLocalizaCbo_new(cboRelacion, Str(!intCveEmpleadoRelacionado))
40                    End If
41                ElseIf vlstrTipoTipoPaciente = "ME" Then
42                    If Not IsNull(!intCveMedicoRelacionado) Then
43                        cboRelacion.ListIndex = flngLocalizaCbo_new(cboRelacion, Str(!intCveMedicoRelacionado))
44                    End If
45                End If
                  
46                If IIf(IsNull(!intCveMedicoEmergencias), 0, !intCveMedicoEmergencias) <> 0 Then
47                    cboMedicoEmergencias.ListIndex = flngLocalizaCbo_new(cboMedicoEmergencias, Str(IIf(IsNull(!intCveMedicoEmergencias), 0, !intCveMedicoEmergencias)))
48                End If

                  'Familiar de empleado/médico
49                If (vlstrTipoTipoPaciente = "EM" Or vlstrTipoTipoPaciente = "ME") And vlblnFamiliar And (vllngCveFamiliar <> 0) Then
50                    cboFamiliar.ListIndex = flngLocalizaCbo_new(cboFamiliar, Str(vllngCveFamiliar))
51                    If cboFamiliar.ListIndex < 0 Then
52                        cboFamiliar.AddItem txtApellidoPaterno.Text & " " & Trim(txtApellidoMaterno.Text) & " " & txtNombre.Text, 0
53                        cboFamiliar.ItemData(cboFamiliar.NewIndex) = rsFamiliar!intCveFamiliar
54                        cboFamiliar.ListIndex = flngLocalizaCbo_new(cboFamiliar, Str(rsFamiliar!intCveFamiliar))
55                    End If
56                    lblFamiliar.Enabled = False
57                    cboFamiliar.Enabled = False
58                End If
                  
                  'Socios
59                If vlstrTipoTipoPaciente = "PA" Then
60                    If CStr(IIf(IsNull(!intCveTipoPaciente), 0, !intCveTipoPaciente)) = CStr(vgLngTipoPacienteSocio) Then
61                        If Not IsNull(!intcvesocio) Then
62                            pCargaDatosSocio !intcvesocio
63                            vlCveSocio = Val(!intcvesocio)
64                        End If
65                    End If
66                End If
                  
67                If Not IsNull(!intcvesocio) Then
68                    vlCveSocio = Val(!intcvesocio)
69                End If
                  
                  '-------------------- (CR) - Datos agregados para caso 6591 --------------------'
                  'Datos referentes al ingreso
'70                txtAutoriza.Text = Trim(IIf(IsNull(!VCHAUTORIZACION), "", !VCHAUTORIZACION)) '19898
70                txtAutoriza.Text = ""
71                cboTipoPoliza.ListIndex = fintLocalizaCbo_new(cboTipoPoliza, IIf(IsNull(!intCveTipoPoliza), 0, !intCveTipoPoliza))
72                txtNumeroControl.Text = Trim(IIf(IsNull(!VCHNUMAFILIACION), "", !VCHNUMAFILIACION))
73                txtNumeroPoliza.Text = Trim(IIf(IsNull(!VCHNUMPOLIZA), "", !VCHNUMPOLIZA))
                  
                  If (cgstrModulo = "PV" And vgstrForma = "frmPresupuestos") Then
                    'PREPAGO
                  Else
                  
74                  Select Case !chrTipoAtencion
                          Case "O"
75                            OptPaqueteOtros(0).Value = False
76                            OptPaqueteOtros(1).Value = True
77                        Case "P"
78                            OptPaqueteOtros(1).Value = False
79                            OptPaqueteOtros(0).Value = True
80                        Case Else
81                            OptPaqueteOtros(0).Value = False
82                          OptPaqueteOtros(1).Value = True
83                  End Select
                  
84                  If !chrTipoAtencion = "P" Then
85                      vllngClavePaqueteAnterior = IIf(IsNull(!intCvePaquete), 0, !intCvePaquete)
86                      pCargaPaquetosOtros
87                      cboPlanPaqueteCirugia.ListIndex = flngLocalizaCbo_new(cboPlanPaqueteCirugia, Trim(Str(IIf(IsNull(!intCvePaquete), 0, !intCvePaquete))))
88                  Else
89                      vllngClavePaqueteAnterior = IIf(IsNull(!intCveConceptoAtencion), 0, !intCveConceptoAtencion)
90                      pCargaPaquetosOtros
91                      cboPlanPaqueteCirugia.ListIndex = flngLocalizaCbo_new(cboPlanPaqueteCirugia, Trim(Str(IIf(IsNull(!intCveConceptoAtencion), 0, !intCveConceptoAtencion))))
92                  End If
                  End If
93                txtAnticipo.Text = FormatCurrency(IIf(IsNull(!numAnticipoSugerido), 0, !numAnticipoSugerido), 2)
                  
                  'Procedencia
94                If Not IsNull(!intcveprocedencia) Then
95                    If !intcveprocedencia < 1 Then
96                        cboProcedencia.ListIndex = -1
97                    Else
98                        pLlenaProcedencia
99                        cboProcedencia.ListIndex = flngLocalizaCbo_new(cboProcedencia, (!intcveprocedencia))
100                   End If
101               Else
102                   cboProcedencia.ListIndex = -1
103               End If
                  
                  'Datos de emergencia
104               txtNombreEmergencia.Text = Trim(IIf(IsNull(!VCHNOMBREEMERGENCIA), "", !VCHNOMBREEMERGENCIA))
105               txtDomicilioEmergencia.Text = Trim(IIf(IsNull(!vchDomicilioEmergencia), "", !vchDomicilioEmergencia))
106               txtTelefonoEmergencia.Text = Trim(IIf(IsNull(!vchTelefonoEmergencia), "", !vchTelefonoEmergencia))
107               cboParentescoFamiliarEmergencia.ListIndex = flngLocalizaCbo_new(cboParentescoFamiliarEmergencia, Str(IIf(IsNull(!intCveParentescoEmergencia), 0, !intCveParentescoEmergencia)))
108               mskNacimientoEmergencia.Mask = ""
109               mskNacimientoEmergencia.Text = IIf(IsNull(!dtmFechaNacimientoEmergencia), "", !dtmFechaNacimientoEmergencia)
110               mskNacimientoEmergencia.Mask = "##/##/####"
                  'Responsable de la cuenta
111               txtNombreResponsable.Text = Trim(IIf(IsNull(!vchNombreResponsable), "", !vchNombreResponsable))
112               txtDomicilioResponsable.Text = Trim(IIf(IsNull(!vchDomicilioResponsable), "", !vchDomicilioResponsable))
113               txtTelefonoResponsable.Text = Trim(IIf(IsNull(!vchTelefonoResponsable), "", !vchTelefonoResponsable))
114               cboParentescoFamiliarResponsable.ListIndex = flngLocalizaCbo_new(cboParentescoFamiliarResponsable, Str(IIf(IsNull(!intCveParentescoResponsable), 0, !intCveParentescoResponsable)))
115               txtLugarTrabajoResponsable.Text = Trim(IIf(IsNull(!vchLugarTrabajoResponsable), "", !vchLugarTrabajoResponsable))
116               mskNacimientoResponsable.Mask = ""
117               mskNacimientoResponsable.Text = IIf(IsNull(!dtmFechaNacimientoResponsable), "", !dtmFechaNacimientoResponsable)
118               mskNacimientoResponsable.Mask = "##/##/####"
                  
119               txtMotivoIngreso.Text = Trim(IIf(IsNull(!VCHMOTIVOINGRESO), "", !VCHMOTIVOINGRESO))
120               txtObservaciones.Text = Trim(IIf(IsNull(!vchObservacion), "", !vchObservacion))
                  '-------------------------------------------------------------------------------'
121           End With
122       End If

   Exit Sub
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pDatosUltimaCuenta" & " Linea:" & Erl()))
       Unload Me
End Sub

Private Sub pCargaDatosSocio(vlCveSocio As String)
1     On Error GoTo NotificaError

          '#####################  Llenado del combo de socios ########################
2         If cboTipoPaciente.ListIndex <> -1 Then
3             If vlUsaSocios = True And vgLngTipoPacienteSocio = Str(cboTipoPaciente.ItemData(cboTipoPaciente.ListIndex)) Then
4                 cboEmpresa.Visible = False
5                 lblEmpresa.Visible = False
6                 Cmdrequisitos.Visible = False
7                 cboEmpresaPaciente.Top = 2320
8                 lblempresapaciente.Top = 2380
9                 cboFamiliar.Visible = False
10                lblFamiliar.Visible = False

11                vlstrSentencia = "Select intCveSocio, " & _
                                   "Trim(vchApellidoPaterno)||' '||Trim(vchApellidoMaterno)||' '||Trim(vchNombre) Nombre " & _
                                   "From SoSocio " & _
                                   "Where intDerechos in (1)"
12                Set rs = frsRegresaRs(vlstrSentencia)
13                If rs.RecordCount <> 0 Then
14                    pLlenarCboRs_new cboSocio, rs, 0, 1
15                    cboSocio.ListIndex = -1
16                    cboSocio.Enabled = True
17                    lblSocio.Enabled = True
18                End If
19                rs.Close

20                cboSocio.Top = 2730
21                lblSocio.Top = 2790
22                cboSocio.Visible = True
23                lblSocio.Visible = True
24            End If
25        Else
              'Si es un particular normal
26            lblempresapaciente.Enabled = True
27            cboEmpresaPaciente.Enabled = True
28        End If
          '####################################################################
          
          'Inhabilitar los datos generales del paciente si es socio, ya que estos solo se podrán modificar desde el catálogo de socios
29        txtApellidoPaterno.Enabled = False
30        txtApellidoMaterno.Enabled = False
31        txtNombre.Enabled = False
32        cboRelacion.Enabled = False
33        lblRelacion.Enabled = False

34        If Not IsNull(vlCveSocio) Then
35            vllngSocioRelacionado = vlCveSocio
36            cboSocio.ListIndex = flngLocalizaCbo_new(cboSocio, Str(vlCveSocio))
37            lblSocio.Enabled = False
38            cboSocio.Enabled = False
39        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pCargaDatosSocio" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pDatosPacientes(vllngNumeroExpediente As Long)
1     On Error GoTo NotificaError

          Dim rsDomicilio As New ADODB.Recordset
          Dim rsTelefono As New ADODB.Recordset
          Dim lstrAlergia As String
          Dim lngOcupacion As Long
          Dim strSQL1 As String
          Dim rsFormaNac As New ADODB.Recordset
          Dim rsEstatusIdioma As New ADODB.Recordset
          Dim rsDomicilioForaneoValido As New ADODB.Recordset
          
2         vlblnConsulta = True
3         Set rsFormaNac = frsEjecuta_SP(Str(vllngNumeroExpediente), "SP_EXSELFORMANACIMIENTO")
4         If (Trim(rsFormaNac!vchFormaNacimiento)) = "ABORTO" Then
5             cboFormaNac.Clear
6             cboFormaNac.AddItem "ABORTO"
7             cboFormaNac.ItemData(0) = 0
8             cboFormaNac.AddItem "CESÁREA"
9             cboFormaNac.ItemData(1) = 1
10            cboFormaNac.AddItem "PARTO"
11            cboFormaNac.ItemData(2) = 2
12        Else
13            cboFormaNac.Clear
14            cboFormaNac.AddItem "CESÁREA"
15            cboFormaNac.ItemData(0) = 0
16            cboFormaNac.AddItem "PARTO"
17            cboFormaNac.ItemData(1) = 1
18        End If
          
          
19        Set rs = frsEjecuta_SP(Str(vllngNumeroExpediente), "SP_EXSELPACIENTE")
20        If rs.RecordCount <> 0 Then
21            With rs
22                txtExpedienteInterno.Text = Str(!intnumpaciente)
23                txtApellidoPaterno.Text = IIf(IsNull(Trim(!vchApellidoPaterno)), "", Trim(!vchApellidoPaterno))
24                txtApellidoMaterno.Text = IIf(IsNull(Trim(!vchApellidoMaterno)), "", Trim(!vchApellidoMaterno))
25                txtNombre.Text = IIf(IsNull(Trim(!vchNombre)), "", Trim(!vchNombre))
                  
26                mskFechaNacimiento.Mask = ""
27                mskFechaNacimiento.Text = IIf(IsNull(!dtmFechaNacimiento), "", !dtmFechaNacimiento)
28                mskFechaNacimiento.Mask = "##/##/####"
29                If Not IsNull(!dtmFechaNacimiento) Then
30                    txtEdad.Text = fstrObtieneEdad(CDate(mskFechaNacimiento.Text), fdtmServerFecha)
31                End If
32                optSexo(0).Value = Trim(IIf(IsNull(!chrSexo), "", !chrSexo)) = "M"
33                optSexo(1).Value = Trim(IIf(IsNull(!chrSexo), "", !chrSexo)) = "F"
34                mskRFC.Mask = ""
35                mskRFC.Text = Trim(IIf(IsNull(!vchRFC), "", !vchRFC))
36                txtCurp.Text = Trim(IIf(IsNull(!vchCURP), "", !vchCURP))
                  
37                If IIf(IsNull(!INTCVECIUDADNACIMIENTO), 0, !INTCVECIUDADNACIMIENTO) = 0 Then
                      'el dato predeterminado
38                    cboCiudadNacimiento.ListIndex = flngLocalizaCbo_new(cboCiudadNacimiento, Str(vgintCveCiudadCH))
39                Else
40                    cboCiudadNacimiento.ListIndex = flngLocalizaCbo_new(cboCiudadNacimiento, Str(!INTCVECIUDADNACIMIENTO))
41                End If
42                If IIf(IsNull(!INTCVENACIONALIDAD), 0, !INTCVENACIONALIDAD) = 0 Then
                      'el dato predeterminado
43                    cboNacionalidad.ListIndex = flngLocalizaCbo_new(cboNacionalidad, Str(vglngCveNacionalidad))
44                Else
45                    cboNacionalidad.ListIndex = flngLocalizaCbo_new(cboNacionalidad, Str(!INTCVENACIONALIDAD))
46                End If
                  
                  'Se cargan parámetros
47                pCargarVarPrmGnrl 'Carga todos parámetros generales
                  
                  'Se verifica que esté activo el adioma
48                strSQL1 = IIf(IsNull(!intCveIdioma), "0", "select bitactivo from gnidiomas where intcveidioma = " & !intCveIdioma)
49                If strSQL1 <> "0" Then 'Si existe el idioma...
50                    Set rsEstatusIdioma = frsRegresaRs(strSQL1)
51                    If cgstrModulo = "AD" Then 'Si se accesa desde AD...
52                        If rsEstatusIdioma!bitactivo = 1 Then 'Si está activo el idioma...
53                            cboIdioma.ListIndex = IIf(cboIdioma.ListCount > 1, flngLocalizaCbo_new(cboIdioma, Str(!intCveIdioma)), 0) 'Seleccionar el idioma
54                        Else
55                            cboIdioma.ListIndex = 0 'Seleccionar <AGREGAR> si el idioma está inactivo
56                        End If
57                    Else
58                        If rsEstatusIdioma!bitactivo = 1 Then 'Si está activo el idioma...
59                            cboIdioma.ListIndex = IIf(cboIdioma.ListCount > 1, flngLocalizaCbo_new(cboIdioma, Str(!intCveIdioma)), 0) 'Seleccionar el idioma
60                            If cboIdioma.ListIndex = -1 Then 'Si el idioma predeterminado tienes estatus desactivado...
61                                If cboIdioma.ListCount > 0 Then 'Si hay idiomas disponibles...
62                                   cboIdioma.ListIndex = 0 'Seleccionar el primer idioma disponible
63                                End If
64                            End If
65                        Else
66                            If cboIdioma.ListCount > 0 Then 'Si hay idiomas disponibles...
67                                cboIdioma.ListIndex = 0 'Seleccionar el primer idioma disponible
68                            End If
69                        End If
70                    End If
71                    rsEstatusIdioma.Close
72                Else
73                    If cboIdioma.ListCount > 0 Then 'Si hay idiomas disponibles...
74                        cboIdioma.ListIndex = 0 'Seleccionar el primer idioma disponible o la opción <AGREGAR>
75                    End If
76                End If
                  
77                If IIf(IsNull(!intCveEstadoCivil), 0, !intCveEstadoCivil) = 0 Then
78                    cboEstadoCivil.ListIndex = 0
79                Else
80                    cboEstadoCivil.ListIndex = flngLocalizaCbo_new(cboEstadoCivil, Str(!intCveEstadoCivil))
81                End If
                  
82                If IIf(IsNull(!intCveReligion), 0, !intCveReligion) = 0 Then
                      'el dato predeterminado
83                    cboReligion.ListIndex = flngLocalizaCbo_new(cboReligion, Str(vglngCveReligionPredeterminada))
84                Else
85                    cboReligion.ListIndex = flngLocalizaCbo_new(cboReligion, Str(!intCveReligion))
86                End If
                  
87                If IIf(IsNull(!intCveOcupacion), 0, !intCveOcupacion) = 0 Then
88                    If Not IsNull(Trim(!vchOcupacion)) And Trim(!vchOcupacion) <> "<AGREGAR>" Then
                         
89                       lngOcupacion = 0
                         'se busca la ocupación
90                       Set rs = frsEjecuta_SP(Trim(!vchOcupacion) & "|-1", "Sp_GnSelOcupacionDescripcion")
91                       If Not rs.EOF Then ' si se encontró la ocupación....
                            
92                          lngOcupacion = rs!intClave
                            
93                          If rs!bitStatus = 0 Then 'ocupación NO activa
94                             cboOcupacion.AddItem UCase(Trim(!vchOcupacion))
95                             cboOcupacion.ItemData(cboOcupacion.NewIndex) = rs!intClave * -1
96                          End If
                            
97                          cboOcupacion.ListIndex = fintLocalizaCbo_new(cboOcupacion, CStr(lngOcupacion * IIf(rs!bitStatus = 0, -1, 1)))
                         
98                       Else ' no se encotró la ocupación(Se agrega la ocupación a la tabla)
                            
99                          lngOcupacion = 1
100                         frsEjecuta_SP Trim(!vchOcupacion) & "|0", "Sp_GnInsOcupacion", True, lngOcupacion
101                         cboOcupacion.AddItem UCase(Trim(!vchOcupacion))
102                         cboOcupacion.ItemData(cboOcupacion.NewIndex) = lngOcupacion * -1
                            
103                         cboOcupacion.ListIndex = fintLocalizaCbo_new(cboOcupacion, CStr(lngOcupacion * -1))
                         
104                      End If 'Not rs.EOF
                                   
105                   Else
                      'No tiene ocupación
106                       cboOcupacion.ListIndex = -1
107                   End If
108               Else
109                   cboOcupacion.ListIndex = flngLocalizaCbo_new(cboOcupacion, Str(!intCveOcupacion))
                      
110                   If cboOcupacion.ListIndex = -1 Then 'no esta en el combo entonces debemos ver si existe la ocupación
                      
                          'si no esta en el combo, buscamos a ver si la ocupación esta inactiva
                          
111                       Set rs = frsEjecuta_SP(!intCveOcupacion & "|0", "Sp_GnSelOcupaciones")
112                       If Not rs.EOF Then ' si se encontró la ocupación INACTIVA....se agrega al combo para que sea mostrada.
113                          cboOcupacion.AddItem UCase(Trim(rs!VCHDESCRIPCION))
114                          cboOcupacion.ItemData(cboOcupacion.NewIndex) = rs!intClave * -1
115                          cboOcupacion.ListIndex = flngLocalizaCbo_new(cboOcupacion, Str(!intCveOcupacion * -1))
116                       End If
                          
117                   End If
118               End If
                          
119               txtCorreoElectronico.Text = Trim(IIf(IsNull(!vchCorreoElectronico), "", !vchCorreoElectronico))
                  
120               vlblnSiEnvioPromo = IIf(IsNull(!BITENVIARPROMOCIONES), False, IIf(!BITENVIARPROMOCIONES = 1, True, False))
121               vlblnNoEnvioPromo = IIf(IsNull(!BITENVIARPROMOCIONES), True, IIf(!BITENVIARPROMOCIONES = 0, True, False))
                  
122               txtAlergia.Text = ""
123               lstAlergias.Clear
124               lstrAlergia = ""
125               If IIf(IsNull(!vchAlergias), "", Trim(!vchAlergias)) <> "" Then
126                   For intcontador = 1 To Len(!vchAlergias)
127                       If (Mid(!vchAlergias, intcontador, 1) <> ",") And (Len(!vchAlergias) >= intcontador) Then
128                           lstrAlergia = lstrAlergia & Mid(!vchAlergias, intcontador, 1)
129                       Else
130                           lstAlergias.AddItem lstrAlergia
131                           lstrAlergia = ""
132                       End If
133                   Next intcontador
134                   If lstrAlergia <> "" Then
135                       lstAlergias.AddItem lstrAlergia
136                       lstrAlergia = ""
137                   End If
138               Else
139                   txtAlergia.Text = "NINGUNA"
140               End If
                  
                  'Domicilio particular
141               Set rsDomicilio = frsEjecuta_SP(vllngNumeroExpediente & "|1", "SP_EXSELDOMICILIOPACIENTE")
142               If rsDomicilio.RecordCount > 0 Then
143                   txtCalle.Text = Trim(IIf(IsNull(rsDomicilio!vchCalle), "", rsDomicilio!vchCalle))
144                   txtNumeroExterior.Text = Trim(IIf(IsNull(rsDomicilio!VCHNUMEROEXTERIOR), "", rsDomicilio!VCHNUMEROEXTERIOR))
145                   txtNumeroInterior.Text = Trim(IIf(IsNull(rsDomicilio!VCHNUMEROINTERIOR), "", rsDomicilio!VCHNUMEROINTERIOR))
146                   txtColonia.Text = Trim(IIf(IsNull(rsDomicilio!VCHCOLONIA), "", rsDomicilio!VCHCOLONIA))
147                   txtCodigoPostal.Text = Trim(IIf(IsNull(rsDomicilio!VCHCODIGOPOSTAL), "", rsDomicilio!VCHCODIGOPOSTAL))
148                   cboCiudad.ListIndex = flngLocalizaCbo_new(cboCiudad, Str(IIf(IsNull(rsDomicilio!INTCVECIUDAD), 0, rsDomicilio!INTCVECIUDAD)))
149               Else
150                   txtCalle.Text = ""
151                   txtNumeroExterior.Text = ""
152                   txtNumeroInterior.Text = ""
153                   txtColonia.Text = ""
154                   txtCodigoPostal.Text = ""
155                   cboCiudad.ListIndex = flngLocalizaCbo_new(cboCiudad, Str(vgintCveCiudadCH))
156               End If
157               rsDomicilio.Close
                  
158               Set rsTelefono = frsEjecuta_SP(vllngNumeroExpediente & "|1", "SP_EXSELTELEFONOPACIENTE")
159               If rsTelefono.RecordCount > 0 Then
160                   txtTelefono.Text = Trim(IIf(IsNull(rsTelefono!vchTelefono), "", rsTelefono!vchTelefono))
161               Else
162                   txtTelefono.Text = ""
163               End If
164               rsTelefono.Close
                  
                  'Forma de nacimiento
                  'cboFormaNac.ListIndex = IIf(Trim(!vchFormaNacimiento) = "ABORTO", 0, (IIf(Trim(!vchFormaNacimiento) = "CESÁREA", 1, IIf(Trim(!vchFormaNacimiento) = "PARTO", 2, -1))))
                              
165                   If (Trim(rsFormaNac!vchFormaNacimiento)) = "ABORTO" Then
166                       cboFormaNac.ListIndex = IIf(Trim(!vchFormaNacimiento) = "ABORTO", 0, (IIf(Trim(!vchFormaNacimiento) = "CESÁREA", 1, IIf(Trim(!vchFormaNacimiento) = "PARTO", 2, -1))))
167                   Else
168                       cboFormaNac.ListIndex = IIf(Trim(!vchFormaNacimiento) = "CESÁREA", 0, (IIf(Trim(!vchFormaNacimiento) = "PARTO", 1, -1)))
169                   End If
                              
                  
                  'Se agregaron condiciones al cargar el domicilio foráneo
170               Set rsDomicilio = frsEjecuta_SP(vllngNumeroExpediente & "|2", "SP_EXSELDOMICILIOPACIENTE")
171               If rsDomicilio.RecordCount > 0 Then
172                   Set rsDomicilioForaneoValido = frsEjecuta_SP(rsDomicilio!intcveDomicilio, "SP_EXSELDOMICILIOFORANEOVALIDO") 'Se valida el domicilio foráneo
173                   If rsDomicilioForaneoValido.RecordCount > 0 Then 'Si no es válido, desactivar el chkForaneo
174                       chkForaneo.Value = 0
175                       txtDomicilioForaneo.Text = ""
176                       txtColoniaForanea.Text = ""
177                       txtCodigoPostalForaneo.Text = ""
178                       txtTelefonoForaneo.Text = ""
179                       cboCiudadForanea.ListIndex = flngLocalizaCbo_new(cboCiudadForanea, 0)
180                   Else
181                       chkForaneo.Value = 1
182                       txtDomicilioForaneo.Text = Trim(IIf(IsNull(rsDomicilio!vchCalle), "", rsDomicilio!vchCalle))
183                       txtColoniaForanea.Text = Trim(IIf(IsNull(rsDomicilio!VCHCOLONIA), "", rsDomicilio!VCHCOLONIA))
184                       txtCodigoPostalForaneo.Text = Trim(IIf(IsNull(rsDomicilio!VCHCODIGOPOSTAL), "", rsDomicilio!VCHCODIGOPOSTAL))
                          
185                       Set rsTelefono = frsEjecuta_SP(vllngNumeroExpediente & "|2", "SP_EXSELTELEFONOPACIENTE")
186                       If rsTelefono.RecordCount > 0 Then
187                           txtTelefonoForaneo.Text = Trim(IIf(IsNull(rsTelefono!vchTelefono), "", rsTelefono!vchTelefono))
188                       Else
189                           txtTelefonoForaneo.Text = ""
190                       End If
191                       rsTelefono.Close
                          
192                       cboCiudadForanea.ListIndex = flngLocalizaCbo_new(cboCiudadForanea, Str(IIf(IsNull(rsDomicilio!INTCVECIUDAD), 0, rsDomicilio!INTCVECIUDAD)))
193                   End If
194                   rsDomicilioForaneoValido.Close
195               Else
196                   chkForaneo.Value = 0
197                   txtDomicilioForaneo.Text = ""
198                   txtColoniaForanea.Text = ""
199                   txtCodigoPostalForaneo.Text = ""
200                   txtTelefonoForaneo.Text = ""
201                   cboCiudadForanea.ListIndex = flngLocalizaCbo_new(cboCiudadForanea, 0)
202               End If
203               rsDomicilio.Close
                  
204               txtPadre.Text = Trim(IIf(IsNull(!vchNombrePadre), "", !vchNombrePadre))
205               mskNacimientoPadre.Mask = ""
206               mskNacimientoPadre.Text = IIf(IsNull(!dtmFechaNacimientoPadre), "", !dtmFechaNacimientoPadre)
207               mskNacimientoPadre.Mask = "##/##/####"
208               txtMadre.Text = Trim(IIf(IsNull(!vchNombreMadre), "", !vchNombreMadre))
209               mskNacimientoMadre.Mask = ""
210               mskNacimientoMadre.Text = IIf(IsNull(!dtmFechaNacimientoMadre), "", !dtmFechaNacimientoMadre)
211               mskNacimientoMadre.Mask = "##/##/####"
212               txtConyuge.Text = Trim(IIf(IsNull(!vchConyugeNombre), "", !vchConyugeNombre))
213               txtPaternoConyuge.Text = Trim(IIf(IsNull(!vchConyugeApellidoPaterno), "", !vchConyugeApellidoPaterno))
214               txtMaternoConyuge.Text = Trim(IIf(IsNull(!vchConyugeApellidoMaterno), "", !vchConyugeApellidoMaterno))
215               mskNacimientoConyuge.Mask = ""
216               mskNacimientoConyuge.Text = IIf(IsNull(!dtmFechaNacimientoConyuge), "", !dtmFechaNacimientoConyuge)
217               mskNacimientoConyuge.Mask = "##/##/####"
                  
218               cboTipoPaciente.ListIndex = flngLocalizaCbo_new(cboTipoPaciente, Str(IIf(IsNull(!intCveTipoPaciente), 0, !intCveTipoPaciente)))
                  
219               If !intPrevio Then
220                   vlblnPacientePrevio = True
221                   pDatosIngresoPrevio vllngNumeroExpediente
222               End If
223           End With
              
224           FraAdjuntos.Enabled = True
225           GrdAdjuntos.Enabled = True
226           cmdAgregaAdjunto.Enabled = True
227           TextNombreAdjunto.Enabled = True
              
              
228       End If

   Exit Sub
NotificaError:
       Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pDatosPacientes" & " Linea:" & Erl()))
       Unload Me
End Sub

Private Function pValidaListaNegra()
    On Error GoTo NotificaError
        Dim lngCveListaNegra As Long
        Dim lngCveTipoIngreso As Long
        Dim vlstrSentencia As String
        Dim rs As ADODB.Recordset
        

    'Verificar si el paciente está en la lista negra (sólo cuando no se ha internado)

        'si es interno y no tienen cuenta
        
        pAsignaValoresVariables

        lLngCveListaNegraFamiliar = -1
        If cboTipoIngreso.ListIndex > -1 Then
            lngCveTipoIngreso = cboTipoIngreso.ItemData(cboTipoIngreso.ListIndex)
        End If
        lblnCoincideListaNegraFam = False

            If fblnEstaEnListaNegra2(Val(txtExpedienteInterno.Text), llngCveTipoPacienteLN, IIf(llngCveEmpresaLN <> -1, llngCveEmpresaLN, llngCveRelacionLN), lngCveListaNegra) Then
                pValidaListaNegra = True
                Exit Function
            End If
            If lngCveListaNegra = -1 Or lngCveListaNegra = 0 Then
                'Si no está en la lista negra, se valida si esta como familiar
                If Not fblnContinuarListaNegraFamiliar(Trim(txtApellidoPaterno.Text), Trim(txtApellidoMaterno.Text)) Then
                    pValidaListaNegra = True
                    Exit Function
                End If
            End If
        pValidaListaNegra = False
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtApellidoMaterno_KeyDown"))
    Unload Me

End Function

Public Function fblnEstaEnListaNegra2(lngCvePaciente As Long, lngCveTipoPaciente As Long, lngRelacion As Long, ByRef lngCLN As Long) As Boolean
    On Error GoTo NotificaError
    Dim lngCveListaNegra As Long
    
    lngCveListaNegra = 1
    frsEjecuta_SP lngCvePaciente & "|" & lngCveTipoPaciente & "|" & lngRelacion, "sp_ADVerificaListaNegra", True, lngCveListaNegra
    If lngCveListaNegra > 0 Then
        lngCLN = lngCveListaNegra
           frmListaNegra.pConfiguraConsultaInicial
        If frmListaNegra.fblnAutorizacion(lngCveListaNegra) Then
            fblnEstaEnListaNegra2 = False
        Else
            fblnEstaEnListaNegra2 = True
        End If
        Unload frmListaNegra
    Else
        fblnEstaEnListaNegra2 = False
    End If
    
    Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fblnEstaEnListaNegra2"))
End Function

Private Function fblnDatosCompletosNombre() As Boolean
    On Error GoTo NotificaError
    
    fblnDatosCompletosNombre = True
    
    If Trim(txtApellidoPaterno.Text) = "" Then
        fblnDatosCompletosNombre = False
        '¡No ha ingresado datos!
        MsgBox SIHOMsg(2), vbOKOnly + vbInformation, "Mensaje"
        txtApellidoPaterno.SetFocus
    End If
    If fblnDatosCompletosNombre And Trim(txtApellidoMaterno.Text) = "" Then
        fblnDatosCompletosNombre = False
        '¡No ha ingresado datos!
        MsgBox SIHOMsg(2), vbOKOnly + vbInformation, "Mensaje"
        txtApellidoMaterno.SetFocus
    End If

Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fblnDatosCompletosNombre"))
    Unload Me
End Function

Private Sub TxtNombre_KeyPress(KeyAscii As Integer)
On Error GoTo NotificaError
    
    KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":TxtNombre_KeyPress"))
    Unload Me
End Sub

Private Sub txtNombre_LostFocus()
    If txtNombre.Text <> "" Then
        vlblnDatosCapturados = True
    End If
End Sub

Private Sub TxtNombreEmergencia_GotFocus()
On Error GoTo NotificaError
    
    pSelTextBox txtNombreEmergencia

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNombreEmergencia_GotFocus"))
    Unload Me
End Sub

Private Sub txtNombreEmergencia_KeyDown(KeyCode As Integer, Shift As Integer)
On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        cboParentescoFamiliarEmergencia.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNombreEmergencia_KeyDown"))
    Unload Me
End Sub

Private Sub TxtNombreEmergencia_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNombreEmergencia_KeyPress"))
    Unload Me
End Sub

Private Sub txtNombreResponsable_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtNombreResponsable

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNombreResponsable_GotFocus"))
    Unload Me
End Sub

Private Sub txtNombreResponsable_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        cboParentescoFamiliarResponsable.SetFocus
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNombreResponsable_KeyDown"))
    Unload Me
End Sub

Private Sub txtNombreResponsable_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNombreResponsable_KeyPress"))
    Unload Me
End Sub

Private Sub txtNumeroControl_GotFocus()
    On Error GoTo NotificaError
    
    If FlatScrollBar1.Enabled Then
        FlatScrollBar1.Value = 125
    Else
    
    End If
    pSelTextBox txtNumeroControl
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNumeroControl_GotFocus"))
    Unload Me
End Sub

Private Sub txtNumeroControl_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
        
    If KeyCode = vbKeyReturn Then
        SendKeys vbTab
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtNumeroControl_KeyDown"))
    Unload Me
End Sub

Private Sub txtObservaciones_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        If cmdGrabar.Enabled = False Then
            cmdEgresar.SetFocus
        Else
            cmdGrabar.SetFocus
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtObservaciones_KeyDown"))
    Unload Me
End Sub

Private Sub txtPadre_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtPadre

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtPadre_GotFocus"))
    Unload Me
End Sub

Private Sub txtPadre_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        If fblnCanFocus(mskNacimientoPadre) Then
            mskNacimientoPadre.SetFocus
        Else
            txtMadre.SetFocus
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtPadre_KeyDown"))
    Unload Me
End Sub

Private Sub txtPadre_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     KeyAscii = fNoAdmitePipes(KeyAscii)

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtPadre_KeyPress"))
    Unload Me
End Sub

Private Sub txtTelefono_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtTelefono

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtTelefono_GotFocus"))
    Unload Me
End Sub

Private Sub txtTelefono_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        cboCiudad.SetFocus
    End If
            
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtTelefono_KeyDown"))
    Unload Me
End Sub

Private Sub txtTelefono_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
    If Not IsNumeric(Chr(KeyAscii)) And Not KeyAscii = vbKeyBack And Not KeyAscii = vbKeyReturn And Not KeyAscii = 47 And Not KeyAscii = 45 And Not KeyAscii = vbKeySpace Then
        KeyAscii = 7
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtTelefono_KeyPress"))
    Unload Me
End Sub

Private Sub txtTelefonoEmergencia_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtTelefonoEmergencia

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtTelefonoEmergencia_GotFocus"))
    Unload Me
End Sub

Private Sub txtTelefonoEmergencia_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        If fblnCanFocus(mskNacimientoEmergencia) Then
            mskNacimientoEmergencia.SetFocus
        Else
            cmdCambiarFamiliarResponsable.SetFocus
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtTelefonoEmergencia_KeyDown"))
    Unload Me
End Sub

Private Sub txtTelefonoEmergencia_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
    If Not IsNumeric(Chr(KeyAscii)) And Not KeyAscii = vbKeyBack And Not KeyAscii = vbKeyReturn And Not KeyAscii = 47 And Not KeyAscii = 45 And Not KeyAscii = vbKeySpace Then
        KeyAscii = 7
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtTelefonoEmergencia_KeyPress"))
    Unload Me
End Sub

Private Sub txtTelefonoForaneo_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtTelefonoForaneo

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtTelefonoForaneo_GotFocus"))
    Unload Me
End Sub

Private Sub txtTelefonoForaneo_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        cboCiudadForanea.SetFocus
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtTelefonoForaneo_KeyDown"))
    Unload Me
End Sub

Private Sub txtTelefonoForaneo_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
   If Not IsNumeric(Chr(KeyAscii)) And Not KeyAscii = vbKeyBack And Not KeyAscii = vbKeyReturn And Not KeyAscii = 47 And Not KeyAscii = 45 And Not KeyAscii = vbKeySpace Then
        KeyAscii = 7
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtTelefonoForaneo_KeyPress"))
    Unload Me
End Sub

Private Sub txtTelefonoResponsable_GotFocus()
    On Error GoTo NotificaError
    
    pSelTextBox txtTelefonoResponsable

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtTelefonoResponsable_GotFocus"))
    Unload Me
End Sub

Private Sub txtTelefonoResponsable_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    
    If KeyCode = vbKeyReturn Then
        If fblnCanFocus(mskNacimientoResponsable) Then
            mskNacimientoResponsable.SetFocus
        Else
            txtLugarTrabajoResponsable.SetFocus
        End If
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtTelefonoResponsable_KeyDown"))
    Unload Me
End Sub

Private Sub txtTelefonoResponsable_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError
    
     If Not IsNumeric(Chr(KeyAscii)) And Not KeyAscii = vbKeyBack And Not KeyAscii = vbKeyReturn And Not KeyAscii = 47 And Not KeyAscii = 45 And Not KeyAscii = vbKeySpace Then
        KeyAscii = 7
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtTelefonoResponsable_KeyPress"))
    Unload Me
End Sub

Public Function fblnRevisaPermisoEgreso(vllngxNumeroLogin As Long, vllngxNumeroOpcion As Long, vlstrxTipoPermiso As String) As Boolean
'-------------------------------------------------------------------------------
' Validar si un login tiene permiso x a una opcion x o permiso de control total
'-------------------------------------------------------------------------------
    On Error GoTo NotificaError
    
    Dim rspermisodelusuario As New ADODB.Recordset
    Dim vlstrsql As String
    
    If UCase(vgstrNombreUsuario) <> "ADMINISTRADOR" Then
        vlstrsql = "select chrPermiso from Permiso where intNumeroLogin=" + Str(vllngxNumeroLogin) + " and intNumeroOpcion=" + Str(vllngxNumeroOpcion)
        Set rspermisodelusuario = frsRegresaRs(vlstrsql)
        If rspermisodelusuario.RecordCount <> 0 Then
            If rspermisodelusuario!chrpermiso = vlstrxTipoPermiso Or rspermisodelusuario!chrpermiso = "C" Then
                fblnRevisaPermisoEgreso = True
            Else
                fblnRevisaPermisoEgreso = False
            End If
        Else
            fblnRevisaPermisoEgreso = False
        End If
    Else
        fblnRevisaPermisoEgreso = True
    End If
    
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fblnRevisaPermisoEgreso"))

End Function

Private Function fblnTrasladoAutomaticoCargos() As Boolean
    Dim rs As ADODB.Recordset
    
    Set rs = frsSelParametros("SI", vgintClaveEmpresaContable, "BITTRASLADOAUTOMATICODECARGOS")
    If Not rs.EOF Then
        fblnTrasladoAutomaticoCargos = IIf(IsNull(rs("Valor")), False, rs("Valor"))
    Else
        fblnTrasladoAutomaticoCargos = False
    End If
    rs.Close

End Function

Private Function fblnTrasladoAutomaticoExpediente() As Boolean
    Dim rs As ADODB.Recordset

    Set rs = frsSelParametros("SI", vgintClaveEmpresaContable, "BITTRASLADOAUTOMATICOEXPEDIENTE")
    If Not rs.EOF Then
        fblnTrasladoAutomaticoExpediente = IIf(IsNull(rs("Valor")), False, rs("Valor"))
    Else
        fblnTrasladoAutomaticoExpediente = False
    End If
    rs.Close

End Function

Private Function fstrEstadoPais(ByVal lngCveCiudad As Long, ByVal intTipo As Integer) As String
    Dim rs As ADODB.Recordset
    Dim strSQL As String
    
    strSQL = "select estado.VCHDESCRIPCION Estado, pais.VCHDESCRIPCION Pais from ciudad left join estado on ciudad.INTCVEESTADO = estado.INTCVEESTADO left join pais on estado.INTCVEPAIS = pais.INTCVEPAIS where ciudad.INTCVECIUDAD = " & lngCveCiudad
    Set rs = frsRegresaRs(strSQL, adLockReadOnly, adOpenForwardOnly)
    If Not rs.EOF Then
        Select Case intTipo
            Case 1 ' Estado
                fstrEstadoPais = IIf(IsNull(rs!Estado), "", rs!Estado)
            Case 2 ' Pais
                fstrEstadoPais = IIf(IsNull(rs!Pais), "", rs!Pais)
        End Select
    Else
        fstrEstadoPais = ""
    End If
    
End Function

Private Sub pLlenaColIngresos()
Dim intItem As Integer

    Set colIngresos = New Collection
    
    colIngresos.Add 0, "K_1"
    colIngresos.Add 0, "K_2"
    colIngresos.Add 0, "K_3"
    colIngresos.Add 0, "K_4"
    colIngresos.Add 0, "K_5"
    colIngresos.Add 0, "K_6"
    colIngresos.Add 0, "K_7"
    colIngresos.Add 0, "K_8"
    colIngresos.Add 0, "K_9"
    colIngresos.Add 0, "K_10"
    colIngresos.Add 0, "K_11"
    colIngresos.Add 0, "K_12"
    colIngresos.Add 0, "K_13"
    colIngresos.Add 0, "K_0" 'previo
    
    Set rs = frsRegresaRs("Select * From ADTiposIngreso Where bitPreguntarDepto <> 0")
    Do Until rs.EOF
        colIngresos.Remove "K_" & rs!intIdTipoIngreso
        colIngresos.Add 1, "K_" & rs!intIdTipoIngreso
        rs.MoveNext
    Loop
    rs.Close
    
End Sub

Private Function fintCveDeptoAdmision() As Integer
    Dim rsAux As New ADODB.Recordset
    Dim llngCveDepto As Long
    
    If llngCveSucursal <> -1 Then
        llngCveDepto = 1
        Set rsAux = frsEjecuta_SP("'A'|" & llngCveSucursal, "FN_ADSelDeptoSucursal", True, llngCveDepto)
    End If
    
    If llngCveDepto = 0 Then
        Set rs = frsSelParametros("AD", vgintClaveEmpresaContable, "INTCVEDEPARTAMENTOADMISION")
        If rs.RecordCount = 0 Then
            fintCveDeptoAdmision = 0
        Else
            fintCveDeptoAdmision = CInt(IIf(IsNull(rs("Valor")), 0, rs("Valor")))
        End If
        rs.Close
    Else
        fintCveDeptoAdmision = llngCveDepto
    End If
    
End Function

Private Sub pImprimeServicioUrgencias(vlstrDestino As String)
On Error GoTo NotificaError
Dim vlstrSentencia As String
Dim vllngCuentaMayor As Long
Dim vlrsResultado As New ADODB.Recordset
Dim alstrParametros() As String
Dim rptReporte As CRAXDRT.Report
    
    pInstanciaReporte rptReporte, "rptserviciourgencias.rpt"
    vlstrSentencia = "Select IsNull(Max(intNumCuenta), 0) From RegistroExterno Where intNumPaciente = " & Trim(txtExpedienteInterno.Text)
    vllngCuentaMayor = frsRegresaRs(vlstrSentencia).Fields(0)
    
    If vllngCuentaMayor <> 0 Then
        rptReporte.DiscardSavedData
        Set vlrsResultado = frsEjecuta_SP(Trim(vgstrNombreHospitalCH) & "|" & _
                                          Trim(vgstrDireccionCH) & "|" & _
                                          CDbl(vllngCuentaMayor) & "|" & _
                                          txtEdad.Text, "sp_ExRptServicioUrgencias")
        If vlrsResultado.RecordCount > 0 Then
            pImprimeReporte rptReporte, vlrsResultado, vlstrDestino, "Reporte de pacientes externos"
        Else
            MsgBox SIHOMsg(13), vbInformation + vbOKOnly, "Mensaje"
        End If
    Else
        'El paciente no tiene una cuenta abierta.
        MsgBox SIHOMsg(554), vbOKOnly + vbInformation, "Mensaje"
    End If

Exit Sub
NotificaError:
     Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pImprimeServicioUrgencias"))
End Sub

Private Sub pInsertaDomicilios(lngNumPaciente As Long)
1         On Error GoTo NotificaError

          Dim intcontador As Integer 'Contador
          Dim lngCveDomicilio As Long 'Consecutivo en domicilios
          Dim lngCveCiudadPart As Long 'Clave de la ciudad particular
          Dim lngCveCiudadFor As Long 'Clave de la ciudad foránea
          Dim rsDomicilios As New ADODB.Recordset 'Domicilios del paciente

2         lngCveCiudadPart = 0
3         If cboCiudad.ListIndex <> -1 Then
4             lngCveCiudadPart = cboCiudad.ItemData(cboCiudad.ListIndex)
5         End If
          
6         lngCveCiudadFor = 0
7         If chkForaneo.Value = 1 And cboCiudadForanea.ListIndex <> -1 Then
8             lngCveCiudadFor = cboCiudadForanea.ItemData(cboCiudadForanea.ListIndex)
9         End If

10        For intcontador = 1 To 2 '1 = local, 2 = foráneo
          
11            If (intcontador = 1) Or (intcontador = 2 And chkForaneo.Value = 1) Then
              
12                vgstrParametrosSP = Str(lngNumPaciente) & "|" & Str(intcontador)
                  
13                Set rsDomicilios = frsEjecuta_SP(vgstrParametrosSP, "SP_EXSELDOMICILIOPACIENTE")
                  
14                vgstrParametrosSP = _
                  Str(intcontador) _
                  & "|" & Str(IIf(intcontador = 1, lngCveCiudadPart, lngCveCiudadFor)) _
                  & "|" & IIf(intcontador = 1, Trim(txtCalle.Text), Trim(txtDomicilioForaneo.Text)) _
                  & "|" & IIf(intcontador = 1, Trim(txtNumeroExterior.Text), "") _
                  & "|" & IIf(intcontador = 1, Trim(txtNumeroInterior.Text), "") _
                  & "|" & IIf(intcontador = 1, Trim(txtColonia.Text), Trim(txtColoniaForanea.Text)) _
                  & "|" & IIf(intcontador = 1, Trim(txtCodigoPostal.Text), Trim(txtCodigoPostalForaneo.Text))
                  
15                If rsDomicilios.RecordCount = 0 Then
                      'Alta del domicilio:
16                    vgstrParametrosSP = vgstrParametrosSP & "|0"
17                Else
                      'Modificación:
18                    vgstrParametrosSP = vgstrParametrosSP & "|" & Str(rsDomicilios!intcveDomicilio)
19                End If
                  
20                lngCveDomicilio = 1
21                frsEjecuta_SP vgstrParametrosSP, "SP_GNINSDOMICILIO", True, lngCveDomicilio
                      
22                If rsDomicilios.RecordCount = 0 Then
                      'Dar de alta el domicilio relacionándolo con el paciente:
23                    vgstrParametrosSP = Str(lngNumPaciente) & "|" & Str(lngCveDomicilio)
24                    frsEjecuta_SP vgstrParametrosSP, "SP_EXINSPACIENTEDOMICILIO"
25                End If
              
26            End If
              
27        Next intcontador

      'Se valida el chkForaneo, por si se desactiva, limpiar los datos del domicilio foráneo
28    If chkForaneo.Value = 0 Then
29        vgstrParametrosSP = Str(lngNumPaciente) & "|2" 'Se le manda el tipo de domicilio foráneo
30        Set rsDomicilios = frsEjecuta_SP(vgstrParametrosSP, "SP_EXSELDOMICILIOPACIENTE")
31        If rsDomicilios.RecordCount = 1 Then 'Modificar el domicilio foráneo
32            vgstrParametrosSP = _
                  Str("2") _
                  & "|" & Str(lngCveCiudadFor) _
                  & "|" & IIf(intcontador = 1, Trim(txtCalle.Text), Trim(txtDomicilioForaneo.Text)) _
                  & "|" & IIf(intcontador = 1, Trim(txtNumeroExterior.Text), "") _
                  & "|" & IIf(intcontador = 1, Trim(txtNumeroInterior.Text), "") _
                  & "|" & IIf(intcontador = 1, Trim(txtColonia.Text), Trim(txtColoniaForanea.Text)) _
                  & "|" & IIf(intcontador = 1, Trim(txtCodigoPostal.Text), Trim(txtCodigoPostalForaneo.Text))
33            vgstrParametrosSP = vgstrParametrosSP & "|" & Str(rsDomicilios!intcveDomicilio)
              
34            lngCveDomicilio = 1
35            frsEjecuta_SP vgstrParametrosSP, "SP_GNINSDOMICILIO", True, lngCveDomicilio
36        End If
37    End If


    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pInsertaDomicilios" & " Linea:" & Erl()))
        Unload Me
End Sub
                
Private Sub pInsertaTelefonos(lngNumPaciente As Long)
1         On Error GoTo NotificaError
      '    Dim intContador As Integer 'Contador
          Dim lngCveTelefono As Long 'Consecutivo de los teléfonos
          Dim rsTelefonos As New ADODB.Recordset 'Teléfonos del paciente
          'Tipos de teléfono: 1 = local, 2 = foráneo
          
      ' Se eliminó el ciclo para ver si se corrije el problema de los duplicados de teléfonos.
      '    For intContador = 1 To 2
          
          
                                                                                     '*********** LOCAL ***********
      '        intContador = 1 'Local
2             vgstrParametrosSP = Str(lngNumPaciente) & "|" & "1"
              
3             Set rsTelefonos = frsEjecuta_SP(vgstrParametrosSP, "SP_EXSELTELEFONOPAC")
              
4             vgstrParametrosSP = "1|" & " " _
              & "|" & Trim(txtTelefono.Text)
              
5             If rsTelefonos.RecordCount = 0 Then
                  'Alta del teléfono:
6                 vgstrParametrosSP = vgstrParametrosSP & "|0"
7             Else
                  'Modificación:
8                 vgstrParametrosSP = vgstrParametrosSP & "|" & Str(rsTelefonos!intCveTelefono)
9             End If
              
10            lngCveTelefono = 1
11            frsEjecuta_SP vgstrParametrosSP, "SP_GNINSTELEFONO", True, lngCveTelefono
                  
12            If rsTelefonos.RecordCount = 0 Then
                  'Dar de alta el teléfono relacionándolo con el paciente:
13                vgstrParametrosSP = Str(lngNumPaciente) & "|" & Str(lngCveTelefono)
14                frsEjecuta_SP vgstrParametrosSP, "SP_EXINSPACIENTETELEFONO"
15            End If
              
              
                                                                                   '*********** FORÁNEO ***********
      '        intContador = 2 'Local
16            vgstrParametrosSP = Str(lngNumPaciente) & "|" & "2"
              
17            Set rsTelefonos = frsEjecuta_SP(vgstrParametrosSP, "SP_EXSELTELEFONOPAC")
              
18            vgstrParametrosSP = "2|" & " " _
              & "|" & Trim(txtTelefonoForaneo.Text)
              
19            If rsTelefonos.RecordCount = 0 Then
                  'Alta del teléfono:
20                vgstrParametrosSP = vgstrParametrosSP & "|0"
21            Else
                  'Modificación:
22                vgstrParametrosSP = vgstrParametrosSP & "|" & Str(rsTelefonos!intCveTelefono)
23            End If
              
24            lngCveTelefono = 1
25            frsEjecuta_SP vgstrParametrosSP, "SP_GNINSTELEFONO", True, lngCveTelefono
                  
26            If rsTelefonos.RecordCount = 0 Then
                  'Dar de alta el teléfono relacionándolo con el paciente:
27                vgstrParametrosSP = Str(lngNumPaciente) & "|" & Str(lngCveTelefono)
28                frsEjecuta_SP vgstrParametrosSP, "SP_EXINSPACIENTETELEFONO"
29            End If
              
      '    Next intContador

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pInsertaTelefonos" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pHabilitaFrames(vlblnHabilita As Boolean)
    On Error GoTo NotificaError

    fraGeneralesPaciente.Enabled = vlblnHabilita
    fraDomicilio.Enabled = vlblnHabilita
    fraReferenteIngreso.Enabled = vlblnHabilita
    fraEmergencia.Enabled = vlblnHabilita
    fraResponsable.Enabled = vlblnHabilita
    fraMedicos.Enabled = vlblnHabilita
    fraDiagnostico.Enabled = vlblnHabilita
    fraAsignacionCuarto.Enabled = vlblnHabilita
    cmdObservaciones.Enabled = vlblnHabilita
    txtObservaciones.Enabled = vlblnHabilita
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pHabilitaFrames"))
    Unload Me
End Sub

Private Sub pLimpiaAsignacion()

1     On Error GoTo NotificaError

      Dim strParametrosSP As String
      Dim rs As ADODB.Recordset
      Dim intClaveCuarto As Integer


2         strParametrosSP = IIf(txtCuentaInterno.Text <> "", txtCuentaInterno.Text, txtCuentaExterno.Text) _
          & "|" & IIf(txtCuentaInterno.Text <> "", "I", "E")
          
3         Set rs = frsEjecuta_SP(strParametrosSP, "Sp_ExSelPacienteIngreso")
          
4         If rs.RecordCount > 0 Then
          
5             intClaveCuarto = IIf(IsNull(rs!INTCVECUARTO), 0, rs!INTCVECUARTO)
              
              
6         End If
          
7         rs.Close
          
8         If intClaveCuarto = 0 Then
9                 pHabilitaAsignacionCuarto True
10                With grdCuarto
11                    .Clear
12                    .ClearStructure
13                    .Rows = 2
14                    .Cols = 2
15                    .FixedCols = 1
16                    .FixedRows = 1
17                End With
18                pConfiguraGridCuarto
19        End If
          
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLimpiaAsignacion" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pCargaFamiliar(vlstrExpediente As String, Optional vlstrCuenta As String = "")
1     On Error GoTo NotificaError

          'Agregado Agosto/2012 para familiares dependientes'
2         If (vlstrTipoTipoPaciente = "EM" Or vlstrTipoTipoPaciente = "ME") And vlblnFamiliar Then
3             If rsFamiliar.State <> adStateClosed Then rsFamiliar.Close
              
4             vlstrSentencia = "SELECT * FROM EXPACIENTEINGRESO "
5             If Trim(vlstrExpediente) <> "" And Int(vlstrExpediente) <> 0 Then
6                 vlstrSentencia = vlstrSentencia & "WHERE INTNUMPACIENTE = " & vlstrExpediente
7                 If Trim(vlstrCuenta) <> "" And Int(vlstrCuenta) <> 0 Then
8                     vlstrSentencia = vlstrSentencia & " AND INTNUMCUENTA = " & vlstrCuenta
9                 End If
10            ElseIf Trim(vlstrCuenta) <> "" And Int(vlstrCuenta) <> 0 Then
11                vlstrSentencia = vlstrSentencia & " WHERE INTNUMCUENTA = " & vlstrCuenta
12            End If
              
13            Set rsFamiliar = frsRegresaRs(vlstrSentencia)
14            If rsFamiliar.RecordCount <> 0 Then
15                If Not IsNull(rsFamiliar!intCveFamiliar) Then
16                    vllngCveFamiliar = rsFamiliar!intCveFamiliar
17                    cboFamiliar.ListIndex = flngLocalizaCbo_new(cboFamiliar, Str(rsFamiliar!intCveFamiliar))
18                    If cboFamiliar.ListIndex < 0 Then
19                        cboFamiliar.AddItem txtApellidoPaterno.Text & " " & Trim(txtApellidoMaterno.Text) & " " & txtNombre.Text, 0
20                        cboFamiliar.ItemData(cboFamiliar.NewIndex) = rsFamiliar!intCveFamiliar
21                        cboFamiliar.ListIndex = flngLocalizaCbo_new(cboFamiliar, Str(rsFamiliar!intCveFamiliar))
22                    End If
23                    lblFamiliar.Enabled = False
24                    cboFamiliar.Enabled = False
                  
                      'Inhabilitar los datos generales del paciente si es familiar de un empleado o médico'
25                    txtApellidoPaterno.Enabled = False
26                    txtApellidoMaterno.Enabled = False
27                    txtNombre.Enabled = False
28                    cboRelacion.Enabled = False
29                    lblRelacion.Enabled = False
30                End If
31            End If
32        End If
    
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLimpiaAsignacion" & " Linea:" & Erl()))
        Unload Me
End Sub

'-- Agregado para el manejo de familiares de empleados y médicos --'
Private Sub pLimpiaFamiliar()
On Error GoTo NotificaError

    cboFamiliar.Clear
    cboFamiliar.ListIndex = -1
    cboFamiliar.Visible = False
    lblFamiliar.Visible = False
    cboFamiliar.Enabled = False
    lblFamiliar.Enabled = False

    cboEmpresa.Visible = True
    lblEmpresa.Visible = True
    Cmdrequisitos.Visible = True
    cboEmpresaPaciente.Top = 2730
    lblempresapaciente.Top = 2790
    cboRelacion.Top = 3130
    lblRelacion.Top = 3190
    
    txtApellidoPaterno.Enabled = True
    txtApellidoMaterno.Enabled = True
    txtNombre.Enabled = True
    
    vllngCveFamiliar = 0
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLimpiaFamiliar"))
    Unload Me
End Sub
'-- Agregado para el manejo de socios --'
Private Sub pLimpiaSocios()
On Error GoTo NotificaError

    cboSocio.Clear
    cboSocio.ListIndex = -1
    cboSocio.Visible = False
    lblSocio.Visible = False
    cboSocio.Enabled = False
    lblSocio.Enabled = False

    cboEmpresa.Visible = True
    lblEmpresa.Visible = True
    Cmdrequisitos.Visible = True
    cboEmpresaPaciente.Top = 2730
    lblempresapaciente.Top = 2790
    cboRelacion.Top = 3130
    lblRelacion.Top = 3190
    
    txtApellidoPaterno.Enabled = True
    txtApellidoMaterno.Enabled = True
    txtNombre.Enabled = True
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pLimpiaSocios"))
    Unload Me
End Sub

Private Sub pCargaPaquetosOtros()
1         On Error GoTo NotificaError
          Dim vlintNumCaso As Integer
          Dim vlintOrigenPaquete As Integer
          Dim rs As New ADODB.Recordset
          
2         cboPlanPaqueteCirugia.Clear
3         cboPlanPaqueteCirugia.ListIndex = -1
4         cboPlanPaqueteCirugia.Enabled = False
          
5         vlstrTipoAnticipoSeleccionado = IIf(OptPaqueteOtros(0).Value, "PAQUETE", "OTROS")
          vlintOrigenPaquete = 0
          If cgstrModulo = "PV" And vgstrForma = "frmPresupuestos" Then vlintOrigenPaquete = 1      'El paquete se creó en la pantalla de presupuestos
          
          If Val(txtCuentaInterno.Text) > 0 Then  ' vlstrIngresoSeleccionado = vlstrTipoIngresoPrepago
            vlstrSentencia = "Select pvpaquetepaciente.*, pvpaquete.smiConceptoFactura, pvpaquete.chrTratamiento " & _
                             "From pvpaquetepaciente inner join pvpresupuesto on pvpresupuesto.intnumpaquete = pvpaquetepaciente.intnumpaquete " & _
                                                    "inner join pvpaquete on pvpaquetepaciente.intnumpaquete = pvpaquete.intnumpaquete " & _
                             "Where pvpresupuesto.chrestado = 'A' and pvpaquetepaciente.intmovpaciente = " & txtCuentaInterno.Text
            Set rs = frsRegresaRs(vlstrSentencia, adOpenDynamic, adLockOptimistic)
            If rs.RecordCount > 0 Then vlintOrigenPaquete = 1       'El paquete se creó en la pantalla de presupuestos de paciente de PREPAGO
          End If
          
6         If OptPaqueteOtros(0).Value Then
7             vlstrSentencia = "SELECT DISTINCT PVPAQUETE.INTNUMPAQUETE " & _
                                      ",LTRIM(RTRIM(PVPAQUETE.CHRDESCRIPCION)) DESCRIPCION " & _
                                      ",PVPAQUETE.MNYANTICIPOSUGERIDO " & _
                                      ",PVPAQUETE.CHRTRATAMIENTO " & _
                               "From PVPAQUETE " & _
                                      "INNER JOIN PVPAQUETEDEPARTAMENTO ON PVPAQUETEDEPARTAMENTO.INTNUMPAQUETE = PVPAQUETE.INTNUMPAQUETE " & _
                                      "OR PVPAQUETE.INTNUMPAQUETE = " & Str(vllngClavePaqueteAnterior) & " " & _
                               "Where (PVPAQUETE.BITACTIVO = 1 OR PVPAQUETE.INTNUMPAQUETE = " & Str(vllngClavePaqueteAnterior) & ") " & _
                                      "AND PVPAQUETEDEPARTAMENTO.SMICVEDEPARTAMENTO = " & vgintNumeroDepartamento & " " & _
                                      "AND PVPAQUETE.INTORIGEN = " & vlintOrigenPaquete & " " & _
                               "GROUP BY PVPAQUETE.INTNUMPAQUETE " & _
                                      ",LTRIM(RTRIM(PVPAQUETE.CHRDESCRIPCION)) " & _
                                      ",PVPAQUETE.MNYANTICIPOSUGERIDO " & _
                                      ",PVPAQUETE.CHRTRATAMIENTO " & _
                               "ORDER BY DESCRIPCION"
8             vlintNumCaso = 0
9         Else
10            vlstrSentencia = "select intConsecutivo, ltrim(rtrim(chrDescripcion)) Descripcion, mnyAnticipoSugerido, chrTratamiento from AdConceptoAnticipo where bitActivo = 1 order by chrDescripcion"
11            vlintNumCaso = 1
12        End If
          
13        Set rsPlanPaqueteCirugia = frsRegresaRs(vlstrSentencia)
14        If rsPlanPaqueteCirugia.RecordCount <> 0 Then
15            pLlenarCboRs_new cboPlanPaqueteCirugia, rsPlanPaqueteCirugia, 0, 1, vlintNumCaso
16            cboPlanPaqueteCirugia.ListIndex = 0
17            If vlintOrigenPaquete = 0 Then
                cboPlanPaqueteCirugia.Enabled = True
              Else
                OptPaqueteOtros(1).Enabled = False
                OptPaqueteOtros(0).Value = True
              End If
18        End If
          
    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pCargaPaquetosOtros" & " Linea:" & Erl()))
        Unload Me
End Sub

Private Sub pcambiarT2()
    Me.Height = 10440
    Picture1.Height = 8775
    FlatScrollBar1.Enabled = True
    FlatScrollBar1.Height = 8640
    fraGrabar.Top = 9090
    lblLicencias.Top = 9000
    Lbllicenciasexternos.Top = 9000
    
    
    
    grdCuarto.Height = 1275
    fraDocumentos.Height = 4200
    FraAdjuntos.Top = 7260
    txtObservaciones.Top = 8400
    txtObservaciones.Height = 620
    fraAsignacionCuarto.Height = 2505
    cboEstadoCuartoActual.Top = 2040
    lblEstadoCuartoActual.Top = 2100
    lstDocumentos.Height = 2880
    fraSeleccion.Top = 3180
    chkVistaPreliminar.Top = 3300
    cmdImprimir.Top = 3600
    cmdObservaciones.Top = 8100
    cmdObservaciones.Height = 250
    cboEstadoCuartoActual.Top = 2040
    
    
    
    grdInternoAmbulatorio.Height = 9300
    
    grdPrepagos.Height = 9300
    
    grdIngresosPrevios.Height = 9300
    
    grdEgresados.Height = 7320
    FraCancelar.Top = 9000
    
    grdExternos.Height = 6620
    
    
    cmdActivaExterno.Top = 9250
    
End Sub

Private Sub FlatScrollBar1_Change()
    If FlatScrollBar1.Enabled Then
        fraGeneralesPaciente.Top = 90 - (FlatScrollBar1.Value * 10)
        fraDomicilio.Top = 3270 - (FlatScrollBar1.Value * 10)
        fraReferenteIngreso.Top = 6440 - (FlatScrollBar1.Value * 10)
    Else
    
    End If
        
End Sub

Public Sub pconfiguraCombos()

    cboTipoConvenio.Clear
    cboTipoConvenio.ListIndex = -1
    cboTipoConvenio.Enabled = False
    lblTipoConvenio.Enabled = False
    
    cboEmpresaPaciente.Clear
    cboEmpresaPaciente.ListIndex = -1
    cboEmpresaPaciente.Enabled = False
    lblempresapaciente.Enabled = False
    
    cboEmpresa.Clear
    cboEmpresa.ListIndex = -1
    cboEmpresa.Enabled = False
    lblEmpresa.Enabled = False
    Cmdrequisitos.Enabled = False
        
    txtAutoriza.Text = ""
    txtNumeroPoliza.Text = ""
    cboTipoPoliza.ListIndex = -1
    lblAutoriza.Enabled = False
    txtAutoriza.Enabled = False
    lblTipoPoliza.Enabled = False
    cboTipoPoliza.Enabled = False
    txtNumeroPoliza.Enabled = False
    
    cboRelacion.ToolTipText = "Relación"
    
End Sub

Private Sub pAlertaLimiteCredito()
1     On Error GoTo NotificaError

          Dim rsTemp As New ADODB.Recordset
          Dim rsTempPorcentaje As New ADODB.Recordset
          Dim rsCorreo As New ADODB.Recordset
          Dim vlintNumCliente As Long
          Dim ldblResultado As Double
          Dim vlstrCorreoDestino As String
          Dim clsEmail As clsCDOmail
          Dim vlPassDecoded As String
          Dim rsGenerarLog As New ADODB.Recordset
          Dim vlstrsql As String
          
2         vlintNumCliente = 0
3         Set rsTemp = frsRegresaRs("select intnumcliente from cccliente where chrtipocliente = 'CO' and intnumreferencia = " & cboEmpresa.ItemData(cboEmpresa.ListIndex), adLockOptimistic, adOpenDynamic)
4         vlintNumCliente = IIf(rsTemp.RecordCount = 0, 0, rsTemp!intNumCliente)
              
5         If vlintNumCliente <> 0 Then
6             ldblResultado = -1
              
7             Set rsTempPorcentaje = frsRegresaRs("select FN_CCSELALERTALIMITECREDITO(" & vlintNumCliente & ") valor from dual", adLockOptimistic, adOpenDynamic)
8             ldblResultado = IIf(rsTempPorcentaje.RecordCount = 0, 0, rsTempPorcentaje!valor)
              
9             If ldblResultado <> -1 Then
10                Call MsgBox("La empresa " & Trim(cboEmpresa.Text) & " tiene el " & ldblResultado & "% de crédito disponible, favor de avisar al departamento de cuentas por cobrar.", vbExclamation, "Mensaje")
                  
11                vlstrCorreoDestino = ""
12                vlstrCorreoDestino = frsRegresaRs(" Select VCHCORREOADVERTENCIA from CcParametro ").Fields(0)
                  
13                If vlstrCorreoDestino <> "" Then
14                    Set rsCorreo = frsEjecuta_SP(CStr(vgintClaveEmpresaContable) & "|5", "Sp_CnSelCnCorreo")
15                    Set clsEmail = New clsCDOmail
                      
                      'Se decodifica la contraseña
16                    vlPassDecoded = Trim(rsCorreo!vchPassword)
                      
                      'Se reemplazan los caracteres especiales ("U"<-"?"   "l"<-"ñ"   "="<-"Ñ"   "=="<-"Ñ?")
17                    vlPassDecoded = Replace(vlPassDecoded, "Ñ?", "==")
18                    vlPassDecoded = Replace(vlPassDecoded, "Ñ", "=")
19                    vlPassDecoded = Replace(vlPassDecoded, "ñ", "l")
20                    vlPassDecoded = Replace(vlPassDecoded, "?", "U")
                      
21                    vlPassDecoded = Decode(vlPassDecoded) 'Se decodifica la contraseña a partir de vlPassDecoded (1a vez)
22                    vlPassDecoded = Decode(vlPassDecoded) 'Se decodifica la contraseña a partir de vlPassDecoded (2a vez)
23                    vlPassDecoded = Decode(vlPassDecoded) 'Se decodifica la contraseña a partir de vlPassDecoded (3a vez)
                                      
24                    With clsEmail
                          'Datos para enviar
25                        .Servidor = Trim(rsCorreo!VCHSERVIDORSMTP)
26                        .Puerto = Val(rsCorreo!intPuerto)
27                        .UseAuntentificacion = True
28                        .SSL = IIf(rsCorreo!BITSSL = 1, True, False)
29                        .Usuario = Trim(rsCorreo!vchCorreo)
30                        .Password = vlPassDecoded
31                        .Asunto = Trim(rsCorreo!vchasunto)
32                        .AdjuntoPDF = ""
33                        .AdjuntoXML = ""
34                        .AdjuntoZIP = ""
35                        .De = Trim(rsCorreo!vchNombre) & " <" & Trim(rsCorreo!vchCorreo) & ">"
36                        .Para = vlstrCorreoDestino
37                        .CC = ""
38                        .Mensaje = Trim(rsCorreo!vchmensaje) & Chr(13) & Chr(13) & "La empresa " & Trim(cboEmpresa.Text) & " tiene el " & ldblResultado & "% de crédito disponible."
                          'Enviar el correo
                          
39                        vgblnAutomatico = True
                          
40                        If .fblnEnviarCorreo = True Then
                              'Si se envía correctamente, grabar en el log de correos (SILOGCORREOS)
41                            vlstrsql = "INSERT INTO SiLogCorreos (VCHEMISOR, VCHRECEPTOR, VCHCC, VCHASUNTO, VCHPDF, VCHXML, VCHMENSAJE, INTIDEMPLEADO, DTMFECHAHORA ) " & _
                                         " VALUES ('" & Trim(.Usuario) & "', '" & Trim(.Para) & "', '" & Trim(.CC) & "', '" & Trim(.Asunto) & "', '" & Trim("") & "', '" & Trim("") & "', '" & .Mensaje & "', '" & 0 & "', GetDate())"
42                            EntornoSIHO.ConeccionSIHO.Execute vlstrsql
43                        End If
44                    End With
45                    Set clsEmail = Nothing 'Se libera el objeto para el envío del correo
46                End If
47            End If
48        End If

    Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pAlertaLimiteCredito" & " Linea:" & Erl()))
End Sub


Private Sub pValidarCredencializacion(lngIndexMed As Long, blnACargo As Boolean)
On Error GoTo NotificaError

    'Para la credencialización del médico
    Dim rsCredencializa As ADODB.Recordset
    Dim rsValorCreden As ADODB.Recordset
    Dim rsDiasCreden As ADODB.Recordset
    Dim vlstrSentencia As String
    Dim vlfechaServer As String
    Dim vlIntDias As Long
    Dim vlIntCveMedico As Long
    
    If lngIndexMed >= 0 Then
        
        If blnACargo Then
            vlIntCveMedico = CInt(cboMedicoCargo.ItemData(lngIndexMed))
        Else
            vlIntCveMedico = CInt(cboMedicoEmergencias.ItemData(lngIndexMed))
        End If
        
        '=================================================
        ' Validaciones de la credencialización del médico
        '=================================================
        'Se obtienen los días configurados para el privilegio único
        vlstrSentencia = "SELECT VCHVALOR FROM SIPARAMETRO WHERE  VCHNOMBRE = 'INTDIASPRIVILEGIOUNICO' AND CHRMODULO = 'AD'"
        Set rsDiasCreden = frsRegresaRs(vlstrSentencia)
        If rsDiasCreden.RecordCount > 0 Then
            vlIntDias = CInt(rsDiasCreden!VCHVALOR)
        Else
            vlIntDias = 0
        End If
        rsDiasCreden.Close
        
        'Se obtiene el parámetro para validar o no la credencialización del médico
        vlstrSentencia = "SELECT VCHVALOR FROM SIPARAMETRO WHERE  VCHNOMBRE = 'BITSOLOMEDICOCREDENCIALIZADOS' AND CHRMODULO = 'AD'"
        Set rsValorCreden = frsRegresaRs(vlstrSentencia)
        If rsValorCreden.RecordCount > 0 Then
            'Si esta activo se validará el médico
            If Trim(rsValorCreden!VCHVALOR) = "1" Then
                'Como el médico esta inactivo en el hospital tiene su clave negativa
                'vlIntCveMedico = CInt(cboMedicoCargo.ItemData(cboMedicoCargo.ListIndex))
                If vlIntCveMedico < 0 Then
                    vlIntCveMedico = vlIntCveMedico * -1
                End If
                
                vlfechaServer = fdtmServerFecha
                
                vlstrSentencia = "SELECT (SELECT SUM(INTPORCENTAJE) FROM HOMEDICOARCHIVOSDOC WHERE INTCVEMEDICO = med.INTCVEMEDICO) porcentaje," & _
                                    "med.DTMFECHAPRIVILEGIO fechaPrivilegio, med.INTEMITIRBLOQUEO bloqueo, med.VCHOBSERVABLOQUEO mensajeBloqueo, " & _
                                    " case when med.DTMFECHAPRIVILEGIO IS not null then " & _
                                        "((TO_DATE(to_char(med.DTMFECHAPRIVILEGIO,'DD/MM/YYYY'),'DD/MM/YYYY') +" & vlIntDias & " ) - TO_DATE('" & vlfechaServer & "','DD/MM/YYYY')) " & _
                                    " Else 0 END diaspriv " & _
                                "FROM HOMEDICO med WHERE med.INTCVEMEDICO = " & vlIntCveMedico
                Set rsCredencializa = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
                                    
                If rsCredencializa.RecordCount > 0 Then
                    
                    If rsCredencializa!bloqueo = 1 Then
                        If IsNull(rsCredencializa!mensajeBloqueo) Then
                            'El médico seleccionado cuenta con un bloqueo, no es posible asignarlo.
                            MsgBox "El médico seleccionado cuenta con un bloqueo, no es posible asignarlo.", vbInformation + vbOKOnly, "Mensaje"
                            If blnACargo Then
                                cboMedicoCargo.SetFocus
                            Else
                                cboMedicoEmergencias.SetFocus
                            End If
                        Else
                            'Se mostrará lo configurado en el campo de observaciones de bloqueo del médico
                            MsgBox Trim(rsCredencializa!mensajeBloqueo), vbInformation + vbOKOnly, "Mensaje"
                            If blnACargo Then
                                cboMedicoCargo.SetFocus
                            Else
                                cboMedicoEmergencias.SetFocus
                            End If
                        End If
                        
                    Else
                        If IsNull(rsCredencializa!porcentaje) And IsNull(rsCredencializa!fechaPrivilegio) Then
                            'El médico no está credencializado
                            MsgBox "El médico no está credencializado", vbInformation + vbOKOnly, "Mensaje"
                            
                        Else
                            'No esta credencializado pero tiene fecha de privilegio
                            If IsNull(rsCredencializa!porcentaje) And IsNull(rsCredencializa!fechaPrivilegio) = False Then
                                'Se valida que tenga activos dias de privilegio
                                If rsCredencializa!diaspriv >= 0 Then
                                   If rsCredencializa!diaspriv <= vlIntDias Then
                                       'Aqui esta dentro del rango de días, debería dejar seleccionar al médico
                                   Else
                                       'El privilegio único del médico ha vencido
                                       MsgBox "El privilegio único del médico ha vencido", vbInformation + vbOKOnly, "Mensaje"
                                       If blnACargo Then
                                            cboMedicoCargo.SetFocus
                                        Else
                                            cboMedicoEmergencias.SetFocus
                                        End If
                                   End If
                                Else
                                   'El privilegio único del médico ha vencido
                                   MsgBox "El privilegio único del médico ha vencido", vbInformation + vbOKOnly, "Mensaje"
                                   If blnACargo Then
                                        cboMedicoCargo.SetFocus
                                    Else
                                        cboMedicoEmergencias.SetFocus
                                    End If
                                End If
                                
                            Else
                            
                                If rsCredencializa!porcentaje < 100 Then
                                     If IsNull(rsCredencializa!fechaPrivilegio) Then
                                         'El médico no está credencializado
                                         MsgBox "El médico no está credencializado", vbInformation + vbOKOnly, "Mensaje"
                                        If blnACargo Then
                                            cboMedicoCargo.SetFocus
                                        Else
                                            cboMedicoEmergencias.SetFocus
                                        End If
                                     Else
                                         If rsCredencializa!diaspriv >= 0 Then
                                            If rsCredencializa!diaspriv <= vlIntDias Then
                                                'Aqui esta dentro del rango de días, debería dejar seleccionar al médico
                                            Else
                                                'El privilegio único del médico ha vencido
                                                MsgBox "El privilegio único del médico ha vencido", vbInformation + vbOKOnly, "Mensaje"
                                                If blnACargo Then
                                                    cboMedicoCargo.SetFocus
                                                Else
                                                    cboMedicoEmergencias.SetFocus
                                                End If
                                            End If
                                         Else
                                            'El privilegio único del médico ha vencido
                                            MsgBox "El privilegio único del médico ha vencido", vbInformation + vbOKOnly, "Mensaje"
                                            If blnACargo Then
                                                cboMedicoCargo.SetFocus
                                            Else
                                                cboMedicoEmergencias.SetFocus
                                            End If
                                         End If
                                     End If
                                Else
                                    'El médico ya cuenta con el 100% de sus documentos,debería dejar seleccionar al médico
                                End If
                            End If 'IF No esta credencializado pero tiene fecha de privilegio
                        End If
                    End If
                    
                End If 'If rsCredencializa.RecordCount > 0
                
                rsCredencializa.Close
                
            End If 'If Trim(rsCredencializa!VCHVALOR) = "1"
            
        End If 'if del parametro rsValorCreden.RecordCount > 0
        rsValorCreden.Close
        'cboMedicoCargo.ListIndex = -1
        
    End If 'cboMedicoCargo.ListIndex >= 0
    
    
    
    
Exit Sub
NotificaError:
        Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":validarCredencializacion" & " Linea:" & Erl()))
End Sub



