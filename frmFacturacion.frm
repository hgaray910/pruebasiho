VERSION 5.00
Object = "{C0A63B80-4B21-11D3-BD95-D426EF2C7949}#1.0#0"; "Vsflex7L.ocx"
Object = "{C932BA88-4374-101B-A56C-00AA003668DC}#1.1#0"; "MSMASK32.OCX"
Object = "{0ECD9B60-23AA-11D0-B351-00A0C9055D8E}#6.0#0"; "MSHFLXGD.OCX"
Object = "{831FDD16-0C5C-11D2-A9FC-0000F8754DA1}#2.2#0"; "MSCOMCTL.OCX"
Object = "{BDC217C8-ED16-11CD-956C-0000C04E4C0A}#1.1#0"; "TABCTL32.OCX"
Begin VB.Form frmFacturacion 
   BorderStyle     =   3  'Fixed Dialog
   Caption         =   "Facturación"
   ClientHeight    =   10380
   ClientLeft      =   5310
   ClientTop       =   1650
   ClientWidth     =   11910
   ForeColor       =   &H00000000&
   Icon            =   "frmFacturacion.frx":0000
   KeyPreview      =   -1  'True
   LinkTopic       =   "Form2"
   LockControls    =   -1  'True
   MaxButton       =   0   'False
   MinButton       =   0   'False
   Moveable        =   0   'False
   ScaleHeight     =   10380
   ScaleWidth      =   11910
   ShowInTaskbar   =   0   'False
   StartUpPosition =   2  'CenterScreen
   Begin VB.Frame freDatosPaciente 
      Height          =   1215
      Left            =   90
      TabIndex        =   179
      Top             =   390
      Width           =   11760
      Begin VB.Frame Frame16 
         BorderStyle     =   0  'None
         Height          =   255
         Left            =   120
         TabIndex        =   182
         Top             =   160
         Width           =   2055
         Begin VB.OptionButton optGrupoCuenta 
            Caption         =   "Cuenta"
            Height          =   255
            Index           =   1
            Left            =   960
            TabIndex        =   184
            Top             =   30
            Width           =   855
         End
         Begin VB.OptionButton optGrupoCuenta 
            Caption         =   "Grupo"
            Height          =   255
            Index           =   0
            Left            =   0
            TabIndex        =   183
            Top             =   30
            Width           =   855
         End
      End
      Begin VB.TextBox txtMovimientoPaciente 
         Alignment       =   1  'Right Justify
         CausesValidation=   0   'False
         Height          =   285
         IMEMode         =   3  'DISABLE
         Left            =   800
         MaxLength       =   10
         TabIndex        =   0
         Top             =   840
         Width           =   1230
      End
      Begin VB.OptionButton OptTipoPaciente 
         Caption         =   "Externo"
         Height          =   255
         Index           =   1
         Left            =   1080
         TabIndex        =   181
         Top             =   530
         Width           =   855
      End
      Begin VB.OptionButton OptTipoPaciente 
         Caption         =   "Interno"
         Height          =   255
         Index           =   0
         Left            =   120
         TabIndex        =   180
         Top             =   530
         Width           =   810
      End
      Begin VB.Label Label57 
         Caption         =   "Tipo de paciente /empresa"
         Height          =   495
         Index           =   0
         Left            =   2205
         TabIndex        =   358
         Top             =   600
         Width           =   1215
      End
      Begin VB.Label Label57 
         Alignment       =   2  'Center
         AutoSize        =   -1  'True
         Caption         =   "Nombre"
         Height          =   195
         Index           =   5
         Left            =   2210
         TabIndex        =   304
         Top             =   220
         Width           =   585
      End
      Begin VB.Label lblFolioFactura 
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   285
         Left            =   9240
         TabIndex        =   198
         ToolTipText     =   "Folio siguiente"
         Top             =   230
         Width           =   2410
      End
      Begin VB.Label lblEstadoPaciente 
         Alignment       =   2  'Center
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         Height          =   285
         Left            =   9240
         TabIndex        =   189
         Top             =   540
         Width           =   2410
      End
      Begin VB.Label lblTipoCambio 
         Alignment       =   2  'Center
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         Caption         =   "Dólar: "
         BeginProperty Font 
            Name            =   "Arial"
            Size            =   8.25
            Charset         =   0
            Weight          =   400
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H00FF0000&
         Height          =   285
         Left            =   9240
         TabIndex        =   188
         Top             =   840
         Width           =   2410
      End
      Begin VB.Label lblEmpresa 
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         Height          =   585
         Left            =   3510
         TabIndex        =   187
         Top             =   540
         Width           =   5655
      End
      Begin VB.Label lblPaciente 
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         Height          =   285
         Left            =   3510
         TabIndex        =   186
         Top             =   230
         Width           =   5655
      End
      Begin VB.Label lblCuenta 
         AutoSize        =   -1  'True
         Caption         =   "Número"
         Height          =   195
         Index           =   0
         Left            =   120
         TabIndex        =   185
         ToolTipText     =   "Número de cuenta"
         Top             =   915
         Width           =   555
      End
   End
   Begin VB.Frame freListaUrgencias 
      BorderStyle     =   0  'None
      Height          =   1290
      Left            =   3810
      TabIndex        =   4
      Top             =   10840
      Visible         =   0   'False
      Width           =   1950
      Begin VB.Frame Frame20 
         Height          =   1395
         Left            =   -15
         TabIndex        =   5
         Top             =   -105
         Width           =   1965
         Begin VB.ListBox lstUrgencias 
            Height          =   840
            Left            =   120
            TabIndex        =   7
            Top             =   465
            Width           =   1740
         End
         Begin VB.CommandButton Command1 
            Caption         =   "X"
            Enabled         =   0   'False
            Height          =   210
            Left            =   1695
            TabIndex        =   6
            Top             =   165
            Width           =   240
         End
         Begin VB.Label Label78 
            BackStyle       =   0  'Transparent
            Caption         =   "Incrementos dispon..."
            ForeColor       =   &H80000009&
            Height          =   210
            Left            =   90
            TabIndex        =   8
            Top             =   150
            Width           =   1590
         End
         Begin VB.Shape Shape2 
            BorderColor     =   &H80000004&
            FillColor       =   &H80000002&
            FillStyle       =   0  'Solid
            Height          =   270
            Left            =   30
            Top             =   120
            Width           =   1920
         End
      End
   End
   Begin VB.Frame freTrabajando 
      Height          =   900
      Left            =   3000
      TabIndex        =   9
      Top             =   10820
      Visible         =   0   'False
      Width           =   6000
      Begin VB.Label lblTextoTrabajando 
         Caption         =   "Consultando facturas, por favor espere..."
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   13.5
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   350
         Left            =   120
         TabIndex        =   10
         Top             =   310
         Width           =   5750
      End
   End
   Begin VB.Frame freBarra 
      Height          =   810
      Left            =   2115
      TabIndex        =   1
      Top             =   10800
      Visible         =   0   'False
      Width           =   7680
      Begin MSComctlLib.ProgressBar pgbBarra 
         Height          =   255
         Left            =   45
         TabIndex        =   2
         Top             =   480
         Width           =   7575
         _ExtentX        =   13361
         _ExtentY        =   450
         _Version        =   393216
         Appearance      =   1
      End
      Begin VB.Label lblTextoBarra 
         BackColor       =   &H80000002&
         Caption         =   "Consultando cargos del paciente, por favor espere..."
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000005&
         Height          =   255
         Left            =   90
         TabIndex        =   3
         Top             =   180
         Width           =   7410
      End
      Begin VB.Shape Shape1 
         BackColor       =   &H80000002&
         BackStyle       =   1  'Opaque
         BorderStyle     =   0  'Transparent
         Height          =   345
         Left            =   30
         Top             =   120
         Width           =   7620
      End
   End
   Begin VB.Frame freBarraCFD 
      Height          =   1125
      Left            =   1080
      TabIndex        =   295
      Top             =   10800
      Visible         =   0   'False
      Width           =   9720
      Begin MSComctlLib.ProgressBar pgbBarraCFD 
         Height          =   495
         Left            =   45
         TabIndex        =   296
         Top             =   600
         Width           =   9640
         _ExtentX        =   17013
         _ExtentY        =   873
         _Version        =   393216
         Appearance      =   1
      End
      Begin VB.Label lblTextoBarraCFD 
         BackColor       =   &H80000002&
         Caption         =   "Generando el Comprobante Fiscal Digital, por favor espere..."
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   12
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H80000005&
         Height          =   375
         Left            =   90
         TabIndex        =   297
         Top             =   180
         Width           =   9450
      End
      Begin VB.Shape Shape3 
         BackColor       =   &H80000002&
         BackStyle       =   1  'Opaque
         BorderStyle     =   0  'Transparent
         Height          =   465
         Index           =   0
         Left            =   0
         Top             =   120
         Width           =   9660
      End
   End
   Begin TabDlg.SSTab sstFacturacion 
      Height          =   10500
      Left            =   0
      TabIndex        =   11
      Top             =   0
      Width           =   12045
      _ExtentX        =   21246
      _ExtentY        =   18521
      _Version        =   393216
      Style           =   1
      Tabs            =   6
      Tab             =   1
      TabsPerRow      =   6
      TabHeight       =   520
      ShowFocusRect   =   0   'False
      TabCaption(0)   =   "Datos generales"
      TabPicture(0)   =   "frmFacturacion.frx":000C
      Tab(0).ControlEnabled=   0   'False
      Tab(0).Control(0)=   "cmdBuscar"
      Tab(0).Control(1)=   "freTipoFactura"
      Tab(0).Control(2)=   "Frame3"
      Tab(0).Control(3)=   "freDatosFiscales"
      Tab(0).Control(4)=   "frmTipoAgrupa"
      Tab(0).Control(5)=   "lblMensajeReqAut(36)"
      Tab(0).ControlCount=   6
      TabCaption(1)   =   "Cargos"
      TabPicture(1)   =   "frmFacturacion.frx":0028
      Tab(1).ControlEnabled=   -1  'True
      Tab(1).Control(0)=   "SSTEstadoCuenta"
      Tab(1).Control(0).Enabled=   0   'False
      Tab(1).Control(1)=   "FreTotales"
      Tab(1).Control(1).Enabled=   0   'False
      Tab(1).ControlCount=   2
      TabCaption(2)   =   "Control aseguradora"
      TabPicture(2)   =   "frmFacturacion.frx":0044
      Tab(2).ControlEnabled=   0   'False
      Tab(2).Control(0)=   "cmdGrabarControl"
      Tab(2).Control(1)=   "freControlAseguradora"
      Tab(2).Control(2)=   "Frame1"
      Tab(2).Control(3)=   "Frame7"
      Tab(2).Control(4)=   "fraConceptosAseguradora"
      Tab(2).Control(5)=   "Frame2"
      Tab(2).Control(6)=   "cmdBorraControl"
      Tab(2).Control(7)=   "cmdConfiguracion"
      Tab(2).ControlCount=   8
      TabCaption(3)   =   "Factura paciente"
      TabPicture(3)   =   "frmFacturacion.frx":0060
      Tab(3).ControlEnabled=   0   'False
      Tab(3).Control(0)=   "TxtObservacionesP"
      Tab(3).Control(1)=   "freConsultaGeneraFacturas(0)"
      Tab(3).Control(2)=   "freFacturaPaciente"
      Tab(3).Control(3)=   "freSeleccionaCliente"
      Tab(3).Control(4)=   "Frame13"
      Tab(3).Control(5)=   "Frame11"
      Tab(3).Control(6)=   "lblCuenta(1)"
      Tab(3).ControlCount=   7
      TabCaption(4)   =   "Factura empresa"
      TabPicture(4)   =   "frmFacturacion.frx":007C
      Tab(4).ControlEnabled=   0   'False
      Tab(4).Control(0)=   "lblCancelada(1)"
      Tab(4).Control(1)=   "lblCancelada(2)"
      Tab(4).Control(2)=   "lblCuenta(2)"
      Tab(4).Control(3)=   "freConsultaGeneraFacturas(1)"
      Tab(4).Control(4)=   "freFechaFactura(1)"
      Tab(4).Control(5)=   "freFacturaEmpresa"
      Tab(4).Control(6)=   "chkOtrosDatosFiscales"
      Tab(4).Control(7)=   "Frame14"
      Tab(4).Control(8)=   "TxtObservacionesE"
      Tab(4).Control(9)=   "freFechaFactura(2)"
      Tab(4).ControlCount=   10
      TabCaption(5)   =   "Consulta de facturas"
      TabPicture(5)   =   "frmFacturacion.frx":0098
      Tab(5).ControlEnabled=   0   'False
      Tab(5).Control(0)=   "cmdConfirmartimbre"
      Tab(5).Control(1)=   "cmdCancelaFacturasSAT"
      Tab(5).Control(2)=   "PB"
      Tab(5).Control(3)=   "freBusqueda"
      Tab(5).Control(4)=   "Label57(7)"
      Tab(5).Control(5)=   "Label57(6)"
      Tab(5).Control(6)=   "Label57(15)"
      Tab(5).Control(7)=   "Label57(12)"
      Tab(5).Control(8)=   "Label57(10)"
      Tab(5).Control(9)=   "Label57(14)"
      Tab(5).Control(10)=   "Label57(13)"
      Tab(5).Control(11)=   "Label57(9)"
      Tab(5).Control(12)=   "Label57(11)"
      Tab(5).Control(13)=   "Label57(8)"
      Tab(5).ControlCount=   14
      Begin VB.Frame freFechaFactura 
         Height          =   1365
         Index           =   2
         Left            =   -70680
         TabIndex        =   377
         Top             =   7480
         Visible         =   0   'False
         Width           =   2850
      End
      Begin VB.CommandButton cmdConfirmartimbre 
         Caption         =   "Confirmar timbre fiscal"
         Height          =   615
         Left            =   -71210
         Picture         =   "frmFacturacion.frx":00B4
         TabIndex        =   370
         ToolTipText     =   "Confirmar timbre fiscal"
         Top             =   9160
         UseMaskColor    =   -1  'True
         Width           =   2415
      End
      Begin VB.CommandButton cmdCancelaFacturasSAT 
         Caption         =   "Validar comprobantes pendientes de cancelación"
         Height          =   615
         Left            =   -68800
         Style           =   1  'Graphical
         TabIndex        =   369
         ToolTipText     =   "Cancelar factura(s) ante el SAT"
         Top             =   9160
         UseMaskColor    =   -1  'True
         Width           =   2415
      End
      Begin VB.PictureBox PB 
         Height          =   135
         Left            =   -66720
         ScaleHeight     =   75
         ScaleWidth      =   315
         TabIndex        =   368
         Top             =   9600
         Visible         =   0   'False
         Width           =   375
      End
      Begin VB.TextBox TxtObservacionesE 
         Height          =   1035
         Left            =   -74910
         MaxLength       =   200
         MultiLine       =   -1  'True
         TabIndex        =   122
         ToolTipText     =   "Observaciones para imprimir en el PDF de la factura"
         Top             =   5280
         Width           =   11750
      End
      Begin VB.TextBox TxtObservacionesP 
         Height          =   1035
         Left            =   -74910
         MaxLength       =   200
         MultiLine       =   -1  'True
         TabIndex        =   39
         ToolTipText     =   "Observaciones para imprimir en el PDF de la factura"
         Top             =   5280
         Width           =   8240
      End
      Begin VB.CommandButton cmdBuscar 
         Height          =   480
         Left            =   -69290
         Picture         =   "frmFacturacion.frx":05A6
         Style           =   1  'Graphical
         TabIndex        =   364
         ToolTipText     =   "Búsqueda de facturas"
         Top             =   9480
         UseMaskColor    =   -1  'True
         Width           =   495
      End
      Begin VB.Frame freConsultaGeneraFacturas 
         Height          =   2720
         Index           =   0
         Left            =   -66615
         TabIndex        =   40
         Top             =   1630
         Width           =   3465
         Begin VB.CommandButton cmdPostergar 
            Caption         =   "Postergar cuenta"
            Enabled         =   0   'False
            Height          =   375
            Left            =   75
            TabIndex        =   45
            Top             =   1820
            Width           =   1560
         End
         Begin VB.CheckBox chkFacturaSustitutaFP 
            Caption         =   "Excluir datos del paciente"
            Height          =   255
            Index           =   1
            Left            =   960
            TabIndex        =   42
            ToolTipText     =   "Se omitirá la información del paciente en la representación impresa del comprobante."
            Top             =   1490
            Width           =   2300
         End
         Begin VB.TextBox txtImpresionesFP 
            Alignment       =   1  'Right Justify
            Height          =   315
            Index           =   0
            Left            =   2855
            MaxLength       =   2
            TabIndex        =   43
            ToolTipText     =   "Número de impresiones de la factura"
            Top             =   1740
            Width           =   520
         End
         Begin VB.CommandButton cmdPrefacturaPaciente 
            Height          =   495
            Left            =   1860
            MaskColor       =   &H00FFFFFF&
            Picture         =   "frmFacturacion.frx":0718
            Style           =   1  'Graphical
            TabIndex        =   47
            ToolTipText     =   "Generar prefactura del paciente"
            Top             =   2105
            UseMaskColor    =   -1  'True
            Width           =   495
         End
         Begin VB.ListBox lstFacturaASustituirFP 
            Height          =   450
            ItemData        =   "frmFacturacion.frx":0B1B
            Left            =   1680
            List            =   "frmFacturacion.frx":0B1D
            TabIndex        =   354
            ToolTipText     =   "Facturas a las cuales sustituye"
            Top             =   210
            Width           =   1695
         End
         Begin VB.CheckBox chkFacturaSustitutaFP 
            Caption         =   "Factura sustituta"
            Height          =   255
            Index           =   0
            Left            =   75
            TabIndex        =   331
            ToolTipText     =   "Indica que la factura que se generará es sustituta de otra previamente cancelada"
            Top             =   240
            Width           =   1515
         End
         Begin VB.Frame freFechaFactura 
            Caption         =   "Fecha de facturación"
            Height          =   690
            Index           =   0
            Left            =   158
            TabIndex        =   337
            Top             =   3680
            Visible         =   0   'False
            Width           =   3105
            Begin VB.Label lblFechaFactura 
               Alignment       =   2  'Center
               BorderStyle     =   1  'Fixed Single
               ForeColor       =   &H00FF0000&
               Height          =   300
               Index           =   0
               Left            =   60
               TabIndex        =   338
               Top             =   285
               Width           =   2925
            End
         End
         Begin VB.ComboBox cboUsoCFDI 
            Height          =   315
            Index           =   0
            Left            =   75
            Style           =   2  'Dropdown List
            TabIndex        =   332
            ToolTipText     =   "Uso del CFDI"
            Top             =   840
            Width           =   3320
         End
         Begin VB.CommandButton cmdLiquidaCuenta 
            Height          =   495
            Left            =   2880
            MaskColor       =   &H00FFFFFF&
            Picture         =   "frmFacturacion.frx":0B1F
            Style           =   1  'Graphical
            TabIndex        =   49
            ToolTipText     =   "Liquidación de la cuenta por pagos (recibos)"
            Top             =   2105
            UseMaskColor    =   -1  'True
            Width           =   495
         End
         Begin VB.OptionButton optDolares 
            Caption         =   "Dólares"
            Height          =   270
            Index           =   0
            Left            =   75
            TabIndex        =   44
            Top             =   1490
            Width           =   870
         End
         Begin VB.OptionButton optPesos 
            Caption         =   "Pesos"
            Height          =   270
            Index           =   0
            Left            =   75
            TabIndex        =   52
            Top             =   1230
            Value           =   -1  'True
            Width           =   870
         End
         Begin VB.CommandButton cmdSiguienteFactura 
            Height          =   480
            Index           =   0
            Left            =   1780
            MaskColor       =   &H00FFFFFF&
            Picture         =   "frmFacturacion.frx":0E9F
            Style           =   1  'Graphical
            TabIndex        =   51
            ToolTipText     =   "Siguiente registro"
            Top             =   4420
            UseMaskColor    =   -1  'True
            Width           =   690
         End
         Begin VB.CommandButton cmdAnteriorFactura 
            Height          =   480
            Index           =   0
            Left            =   1040
            MaskColor       =   &H00FFFFFF&
            Picture         =   "frmFacturacion.frx":1011
            Style           =   1  'Graphical
            TabIndex        =   50
            ToolTipText     =   "Anterior registro"
            Top             =   4420
            UseMaskColor    =   -1  'True
            Width           =   690
         End
         Begin VB.CommandButton cmdGrabarFacturaPaciente 
            Height          =   495
            Left            =   2370
            MaskColor       =   &H00FFFFFF&
            Picture         =   "frmFacturacion.frx":1183
            Style           =   1  'Graphical
            TabIndex        =   48
            ToolTipText     =   "Guardar el registro"
            Top             =   2105
            Width           =   495
         End
         Begin VB.CheckBox chkConsultaGeneraFacturas 
            Caption         =   "Consultar facturas"
            Height          =   375
            Index           =   0
            Left            =   75
            Style           =   1  'Graphical
            TabIndex        =   46
            Top             =   2220
            Width           =   1560
         End
         Begin VB.CheckBox chkFacturaBase 
            Caption         =   "Incluir factura base"
            Height          =   270
            Left            =   960
            TabIndex        =   41
            Top             =   1230
            Value           =   1  'Checked
            Width           =   1645
         End
         Begin VB.Label Label60 
            Caption         =   "Impresiones"
            Height          =   255
            Index           =   8
            Left            =   1860
            TabIndex        =   359
            Top             =   1770
            Width           =   855
         End
         Begin VB.Label lblCancelada 
            Alignment       =   2  'Center
            BorderStyle     =   1  'Fixed Single
            Caption         =   "Cancelada"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H000000FF&
            Height          =   270
            Index           =   0
            Left            =   675
            TabIndex        =   336
            Top             =   3320
            Visible         =   0   'False
            Width           =   2085
         End
         Begin VB.Label Label60 
            Caption         =   "Uso del CFDI"
            Height          =   255
            Index           =   7
            Left            =   75
            TabIndex        =   330
            Top             =   600
            Width           =   3255
         End
         Begin VB.Label txtFacturasEncontradas 
            Alignment       =   2  'Center
            BorderStyle     =   1  'Fixed Single
            ForeColor       =   &H00FF0000&
            Height          =   495
            Index           =   0
            Left            =   165
            TabIndex        =   53
            Top             =   2720
            Width           =   3090
         End
      End
      Begin VB.Frame Frame14 
         Enabled         =   0   'False
         Height          =   3550
         Left            =   -67605
         TabIndex        =   311
         Top             =   6370
         Width           =   4440
         Begin VB.TextBox txtRetenionServ 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   360
            Left            =   2400
            TabIndex        =   356
            ToolTipText     =   "Total de descuentos"
            Top             =   2760
            Width           =   1890
         End
         Begin VB.TextBox txtFEDedyCoa 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   360
            Left            =   2400
            TabIndex        =   319
            ToolTipText     =   "Total de descuentos"
            Top             =   2040
            Width           =   1890
         End
         Begin VB.TextBox txtFEPagos 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   360
            Left            =   2400
            TabIndex        =   318
            ToolTipText     =   "Total de descuentos"
            Top             =   2400
            Width           =   1890
         End
         Begin VB.TextBox txtFETotalPagar 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   360
            Left            =   2400
            TabIndex        =   317
            ToolTipText     =   "Total del presupuesto"
            Top             =   3120
            Width           =   1890
         End
         Begin VB.TextBox txtFETotalFactura 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   360
            Left            =   2400
            TabIndex        =   316
            ToolTipText     =   "Total del presupuesto"
            Top             =   1680
            Width           =   1890
         End
         Begin VB.TextBox txtFESubtotal 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   360
            Left            =   2400
            TabIndex        =   315
            ToolTipText     =   "Subtotal del presupuesto"
            Top             =   960
            Width           =   1890
         End
         Begin VB.TextBox txtFEDescuentos 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   360
            Left            =   2400
            TabIndex        =   314
            ToolTipText     =   "Total de descuentos"
            Top             =   240
            Width           =   1890
         End
         Begin VB.TextBox txtFEIVA 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   360
            Left            =   2400
            TabIndex        =   313
            ToolTipText     =   "Iva del presupuesto"
            Top             =   1320
            Width           =   1890
         End
         Begin VB.TextBox txtFEDescuentoEspecial 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   360
            Left            =   2400
            TabIndex        =   312
            ToolTipText     =   "Total de descuentos"
            Top             =   600
            Width           =   1890
         End
         Begin VB.Label Label51 
            Caption         =   "Retención servicios"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Index           =   9
            Left            =   90
            TabIndex        =   357
            Top             =   2783
            Width           =   2215
         End
         Begin VB.Label Label51 
            Caption         =   "Total a pagar"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Index           =   5
            Left            =   90
            TabIndex        =   327
            Top             =   3136
            Width           =   1935
         End
         Begin VB.Label Label51 
            Caption         =   "Conceptos seguro"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Index           =   6
            Left            =   90
            TabIndex        =   326
            Top             =   2070
            Width           =   2085
         End
         Begin VB.Label Label51 
            Caption         =   "Pagos"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Index           =   7
            Left            =   90
            TabIndex        =   325
            Top             =   2430
            Width           =   915
         End
         Begin VB.Label Label51 
            Caption         =   "Descuento"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Index           =   0
            Left            =   90
            TabIndex        =   324
            Top             =   270
            Width           =   1335
         End
         Begin VB.Label Label51 
            Caption         =   "Subtotal"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Index           =   1
            Left            =   90
            TabIndex        =   323
            Top             =   990
            Width           =   1335
         End
         Begin VB.Label Label51 
            Caption         =   "IVA"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Index           =   2
            Left            =   120
            TabIndex        =   322
            Top             =   1350
            Width           =   1335
         End
         Begin VB.Label Label51 
            Caption         =   "Total factura"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Index           =   3
            Left            =   90
            TabIndex        =   321
            Top             =   1710
            Width           =   1335
         End
         Begin VB.Label Label51 
            Caption         =   "Descuento especial"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Index           =   4
            Left            =   90
            TabIndex        =   320
            Top             =   630
            Width           =   2295
         End
      End
      Begin VB.CommandButton cmdConfiguracion 
         Height          =   465
         Left            =   -69015
         Picture         =   "frmFacturacion.frx":14C5
         Style           =   1  'Graphical
         TabIndex        =   299
         ToolTipText     =   "Configuración de parámetros de la cuenta"
         Top             =   9335
         UseMaskColor    =   -1  'True
         Width           =   495
      End
      Begin VB.CommandButton cmdBorraControl 
         Height          =   465
         Left            =   -69525
         MaskColor       =   &H00FFFFFF&
         Picture         =   "frmFacturacion.frx":1BC7
         Style           =   1  'Graphical
         TabIndex        =   298
         ToolTipText     =   "Borrar el control de aseguradora"
         Top             =   9335
         UseMaskColor    =   -1  'True
         Width           =   495
      End
      Begin VB.Frame freTipoFactura 
         Caption         =   "Tipo de facturación"
         Enabled         =   0   'False
         Height          =   1545
         Left            =   -65445
         TabIndex        =   244
         Top             =   5720
         Width           =   2295
         Begin VB.OptionButton optTipoFacturacion 
            Caption         =   "Consolidada      (recibo al paciente)"
            Height          =   540
            Index           =   0
            Left            =   105
            TabIndex        =   246
            Top             =   240
            Width           =   1800
         End
         Begin VB.OptionButton optTipoFacturacion 
            Caption         =   "Separada                  (con factura al paciente)"
            Height          =   680
            Index           =   1
            Left            =   120
            TabIndex        =   245
            Top             =   720
            Value           =   -1  'True
            Width           =   2025
         End
      End
      Begin VB.Frame Frame2 
         Caption         =   "Importes no facturados"
         Height          =   3200
         Left            =   -66565
         TabIndex        =   222
         Top             =   3085
         Width           =   3400
         Begin VB.TextBox txtCoaseguroMNoFacturado 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   1800
            Locked          =   -1  'True
            TabIndex        =   260
            ToolTipText     =   "Coaseguro adicional no facturado"
            Top             =   2455
            Width           =   1485
         End
         Begin VB.TextBox txtCargosHospitalNoFacturados 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   1800
            Locked          =   -1  'True
            MaxLength       =   14
            TabIndex        =   230
            ToolTipText     =   "Cargos de l hospital no facturados"
            Top             =   250
            Width           =   1485
         End
         Begin VB.TextBox txtCargosExcluidosNoFacturados 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   1800
            Locked          =   -1  'True
            TabIndex        =   229
            ToolTipText     =   "Cargos excluídos no facturados"
            Top             =   565
            Width           =   1485
         End
         Begin VB.TextBox txtExcedenteNoFacturado 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   1800
            Locked          =   -1  'True
            TabIndex        =   228
            ToolTipText     =   "Excedente no facturado"
            Top             =   880
            Width           =   1485
         End
         Begin VB.TextBox txtDeducibleNoFacturado 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   1800
            Locked          =   -1  'True
            TabIndex        =   227
            ToolTipText     =   "Deducible no facturado"
            Top             =   1195
            Width           =   1485
         End
         Begin VB.TextBox txtCoaseguroNoFacturado 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   1800
            Locked          =   -1  'True
            TabIndex        =   226
            ToolTipText     =   "Coaseguro no facturado"
            Top             =   1510
            Width           =   1485
         End
         Begin VB.TextBox txtCoaseguroANoFacturado 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   1800
            Locked          =   -1  'True
            TabIndex        =   225
            ToolTipText     =   "Coaseguro médico no facturado"
            Top             =   1825
            Width           =   1485
         End
         Begin VB.TextBox txtCopagoNoFacturado 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   1800
            Locked          =   -1  'True
            TabIndex        =   224
            ToolTipText     =   "Copagono facturado"
            Top             =   2140
            Width           =   1485
         End
         Begin VB.TextBox txtTotalNoFacturado 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   330
            Left            =   1800
            Locked          =   -1  'True
            TabIndex        =   223
            ToolTipText     =   "Importe total no facturado"
            Top             =   2770
            Width           =   1485
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Copago"
            Height          =   195
            Index           =   12
            Left            =   90
            TabIndex        =   268
            Top             =   2190
            Width           =   555
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Coaseguro adicional"
            Height          =   195
            Index           =   11
            Left            =   90
            TabIndex        =   267
            Top             =   1875
            Width           =   1440
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Coaseguro médico"
            Height          =   195
            Index           =   10
            Left            =   90
            TabIndex        =   266
            Top             =   2505
            Width           =   1320
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Coaseguro"
            Height          =   195
            Index           =   9
            Left            =   90
            TabIndex        =   265
            Top             =   1560
            Width           =   765
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Deducible"
            Height          =   195
            Index           =   8
            Left            =   90
            TabIndex        =   264
            Top             =   1245
            Width           =   720
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Excedente"
            Height          =   195
            Index           =   7
            Left            =   90
            TabIndex        =   263
            Top             =   930
            Width           =   765
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Cargos excluidos"
            Height          =   195
            Index           =   6
            Left            =   90
            TabIndex        =   262
            Top             =   615
            Width           =   1200
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Cargos de hospital"
            Height          =   195
            Index           =   5
            Left            =   90
            TabIndex        =   261
            Top             =   300
            Width           =   1305
         End
         Begin VB.Label Label19 
            Caption         =   "Total no facturado"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   220
            Left            =   90
            TabIndex        =   231
            Top             =   2820
            Width           =   1600
         End
      End
      Begin VB.Frame fraConceptosAseguradora 
         Height          =   6060
         Left            =   -74910
         TabIndex        =   105
         Top             =   3085
         Width           =   8250
         Begin VB.Frame fraTipoCoaseguroMedico 
            Height          =   300
            Left            =   3000
            TabIndex        =   281
            Top             =   4850
            Width           =   1995
            Begin VB.OptionButton optTipoCoaseguroMedico 
               Caption         =   "Porcentaje"
               Height          =   255
               Index           =   1
               Left            =   945
               TabIndex        =   283
               Top             =   105
               Width           =   1065
            End
            Begin VB.OptionButton optTipoCoaseguroMedico 
               Caption         =   "Cantidad"
               Height          =   255
               Index           =   0
               Left            =   0
               TabIndex        =   282
               Top             =   105
               Value           =   -1  'True
               Width           =   945
            End
         End
         Begin VB.TextBox txtCantidadMaximaCO 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   1700
            MaxLength       =   14
            TabIndex        =   259
            Top             =   3565
            Width           =   1100
         End
         Begin VB.TextBox txtTotalCoaseguroMedico 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Left            =   6660
            Locked          =   -1  'True
            MaxLength       =   12
            TabIndex        =   258
            ToolTipText     =   "Importe del coaseguro médico"
            Top             =   4925
            Width           =   1485
         End
         Begin VB.TextBox txtPorcentajeCoaseguroMed 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   5200
            MaxLength       =   6
            TabIndex        =   251
            ToolTipText     =   "Porcentaje de coaseguro médico"
            Top             =   4925
            Width           =   630
         End
         Begin VB.TextBox txtHonorariosAFacturar 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   1700
            MaxLength       =   14
            TabIndex        =   250
            ToolTipText     =   "Cantidad de honorarios médicos para el coaseguro médico"
            Top             =   5265
            Width           =   1100
         End
         Begin VB.CheckBox chkFacturaCoaseguroMedico 
            Caption         =   "Coaseguro médico"
            Height          =   255
            Left            =   90
            TabIndex        =   249
            ToolTipText     =   "Indica si se factura el coaseguro médico"
            Top             =   4948
            Width           =   1695
         End
         Begin VB.TextBox txtCoaseguroMedico 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   6660
            MaxLength       =   14
            TabIndex        =   248
            ToolTipText     =   "Importe a facturar de coaseguro médico"
            Top             =   5265
            Width           =   1485
         End
         Begin VB.TextBox txtHonorarios 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   6660
            MaxLength       =   14
            TabIndex        =   68
            Top             =   165
            Width           =   1485
         End
         Begin VB.TextBox txtPorcentajeCopago 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   5200
            MaxLength       =   6
            TabIndex        =   94
            ToolTipText     =   "Copago"
            Top             =   4585
            Width           =   630
         End
         Begin VB.TextBox txtCopago 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Left            =   6660
            MaxLength       =   14
            TabIndex        =   95
            ToolTipText     =   "Importe del copago"
            Top             =   4585
            Width           =   1485
         End
         Begin VB.CheckBox chkFacturaCopago 
            Caption         =   "Copago"
            Height          =   210
            Left            =   90
            TabIndex        =   91
            ToolTipText     =   "Indica si se factura el coaseguro adicional"
            Top             =   4630
            Width           =   855
         End
         Begin VB.TextBox txtExcedenteSumaAsegurada 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   6660
            Locked          =   -1  'True
            MaxLength       =   14
            TabIndex        =   74
            ToolTipText     =   "Excedente en suma asegurada"
            Top             =   2205
            Width           =   1485
         End
         Begin VB.TextBox txtSumaAsegurada 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   6660
            MaxLength       =   14
            TabIndex        =   73
            ToolTipText     =   "Suma asegurada"
            Top             =   1865
            Width           =   1485
         End
         Begin VB.CheckBox chkFacturaCoaseguroAdicional 
            Caption         =   "Coaseguro adicional"
            Height          =   315
            Left            =   90
            TabIndex        =   85
            ToolTipText     =   "Indica si se factura el coaseguro adicional"
            Top             =   3898
            Width           =   1845
         End
         Begin VB.TextBox txtPorcentajeCoaseguroAdicional 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   5200
            MaxLength       =   6
            TabIndex        =   88
            ToolTipText     =   "Porcentaje de coaseguro adicional"
            Top             =   3905
            Width           =   630
         End
         Begin VB.Frame fraTipoCoaseguroAdicional 
            Height          =   300
            Left            =   3000
            TabIndex        =   102
            Top             =   3850
            Width           =   1995
            Begin VB.OptionButton optTipoCoaseguroAdicional 
               Caption         =   "Porcentaje"
               Height          =   195
               Index           =   1
               Left            =   945
               TabIndex        =   87
               Top             =   105
               Width           =   1065
            End
            Begin VB.OptionButton optTipoCoaseguroAdicional 
               Caption         =   "Cantidad"
               Height          =   195
               Index           =   0
               Left            =   0
               TabIndex        =   86
               Top             =   105
               Value           =   -1  'True
               Width           =   975
            End
         End
         Begin VB.Frame fraTipoCopago 
            Height          =   300
            Left            =   3000
            TabIndex        =   214
            Top             =   4530
            Width           =   1995
            Begin VB.OptionButton optTipoCopago 
               Caption         =   "Porcentaje"
               Height          =   195
               Index           =   1
               Left            =   945
               TabIndex        =   93
               Top             =   105
               Width           =   1065
            End
            Begin VB.OptionButton optTipoCopago 
               Caption         =   "Cantidad"
               Height          =   195
               Index           =   0
               Left            =   0
               TabIndex        =   92
               Top             =   105
               Value           =   -1  'True
               Width           =   930
            End
         End
         Begin VB.TextBox txtPorcentajeCoaseguro 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   5200
            MaxLength       =   6
            TabIndex        =   83
            ToolTipText     =   "Porcentaje de coaseguro"
            Top             =   3225
            Width           =   630
         End
         Begin VB.Frame fraTipoCoaseguro 
            Height          =   300
            Left            =   3000
            TabIndex        =   213
            Top             =   3170
            Width           =   1995
            Begin VB.OptionButton optTipoCoaseguro 
               Caption         =   "Cantidad"
               Height          =   195
               Index           =   0
               Left            =   0
               TabIndex        =   81
               ToolTipText     =   "Coaseguro en cantidad"
               Top             =   105
               Value           =   -1  'True
               Width           =   930
            End
            Begin VB.OptionButton optTipoCoaseguro 
               Caption         =   "Porcentaje"
               Height          =   195
               Index           =   1
               Left            =   945
               TabIndex        =   82
               ToolTipText     =   "Coaseguro en porcentaje"
               Top             =   105
               Width           =   1080
            End
         End
         Begin VB.TextBox txtTotalSinCoaseguroAdicional 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   6660
            Locked          =   -1  'True
            MaxLength       =   14
            TabIndex        =   90
            ToolTipText     =   "Total sin coaseguro adicional"
            Top             =   4245
            Width           =   1485
         End
         Begin VB.TextBox txtCoaseguroAdicional 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Left            =   6660
            MaxLength       =   14
            TabIndex        =   89
            ToolTipText     =   "Importe del coaseguro adicional"
            Top             =   3905
            Width           =   1485
         End
         Begin VB.TextBox txtPorcentajeDeducible 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   5200
            MaxLength       =   6
            TabIndex        =   78
            ToolTipText     =   "Porcentaje de deducible"
            Top             =   2545
            Width           =   630
         End
         Begin VB.Frame fraTipoDeducible 
            Height          =   300
            Left            =   3000
            TabIndex        =   211
            Top             =   2490
            Width           =   1995
            Begin VB.OptionButton optTipoDeducible 
               Caption         =   "Cantidad"
               Height          =   195
               Index           =   0
               Left            =   0
               TabIndex        =   76
               ToolTipText     =   "Deducible en cantidad"
               Top             =   105
               Value           =   -1  'True
               Width           =   945
            End
            Begin VB.OptionButton optTipoDeducible 
               Caption         =   "Porcentaje"
               Height          =   195
               Index           =   1
               Left            =   945
               TabIndex        =   77
               ToolTipText     =   "Deducible en porcentaje"
               Top             =   105
               Width           =   1065
            End
         End
         Begin VB.CheckBox chkFacturaCoaseguro 
            Caption         =   "Coaseguro"
            Height          =   210
            Left            =   90
            TabIndex        =   80
            ToolTipText     =   "Indica si se factura el coaseguro"
            Top             =   3270
            Width           =   1200
         End
         Begin VB.CheckBox chkFacturaDeducible 
            Caption         =   "Deducible"
            Height          =   210
            Left            =   90
            TabIndex        =   75
            ToolTipText     =   "Indica si se factura el deducible"
            Top             =   2590
            Width           =   1080
         End
         Begin VB.TextBox txtTotalDedCoaCop 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   360
            Left            =   6660
            Locked          =   -1  'True
            MaxLength       =   14
            TabIndex        =   96
            ToolTipText     =   "Suma de excedente, deducible, coaseguro, coaseguro adicional, copago y coaseguro médico"
            Top             =   5605
            Width           =   1485
         End
         Begin VB.TextBox txtTotalSinCoaseguro 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   6660
            Locked          =   -1  'True
            MaxLength       =   14
            TabIndex        =   107
            ToolTipText     =   "Total sin coaseguro"
            Top             =   3565
            Width           =   1485
         End
         Begin VB.TextBox txtDeducible 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Left            =   6660
            MaxLength       =   14
            TabIndex        =   79
            ToolTipText     =   "Importe del deducible"
            Top             =   2545
            Width           =   1485
         End
         Begin VB.TextBox txtTotalSinExcluidos 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   6660
            Locked          =   -1  'True
            MaxLength       =   14
            TabIndex        =   72
            ToolTipText     =   "Total sin cargos excluidos"
            Top             =   1525
            Width           =   1485
         End
         Begin VB.TextBox txtCoaseguro 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Left            =   6660
            MaxLength       =   14
            TabIndex        =   84
            ToolTipText     =   "Importe del coaseguro"
            Top             =   3225
            Width           =   1485
         End
         Begin VB.TextBox txtTotalSinDeducible 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   6660
            Locked          =   -1  'True
            MaxLength       =   14
            TabIndex        =   106
            ToolTipText     =   "Total sin deducible"
            Top             =   2885
            Width           =   1485
         End
         Begin VB.TextBox txtTotalCargos 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   6660
            Locked          =   -1  'True
            MaxLength       =   14
            TabIndex        =   70
            ToolTipText     =   "Total de cargos"
            Top             =   845
            Width           =   1485
         End
         Begin VB.TextBox txtCargosHospital 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   6660
            Locked          =   -1  'True
            MaxLength       =   14
            TabIndex        =   69
            ToolTipText     =   "Total de cargos de la cuenta"
            Top             =   505
            Width           =   1485
         End
         Begin VB.TextBox txtCargosExcluidos 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   6660
            Locked          =   -1  'True
            MaxLength       =   14
            TabIndex        =   71
            ToolTipText     =   "Cargos excluidos"
            Top             =   1185
            Width           =   1485
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Coaseguro médico a cobrar"
            Height          =   195
            Index           =   27
            Left            =   4435
            TabIndex        =   286
            Top             =   5318
            Width           =   1950
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Honorarios médicos"
            Height          =   195
            Index           =   17
            Left            =   90
            TabIndex        =   285
            Top             =   5318
            Width           =   1395
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Cantidad máxima"
            Height          =   195
            Index           =   16
            Left            =   90
            TabIndex        =   284
            Top             =   3618
            Width           =   1200
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Excedente en suma asegurada"
            Height          =   195
            Index           =   26
            Left            =   90
            TabIndex        =   280
            Top             =   2255
            Width           =   2205
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Suma asegurada"
            Height          =   195
            Index           =   25
            Left            =   90
            TabIndex        =   279
            Top             =   1915
            Width           =   1200
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Total sin excluidos"
            Height          =   195
            Index           =   24
            Left            =   90
            TabIndex        =   278
            Top             =   1575
            Width           =   1305
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "- Cargos excluidos"
            Height          =   195
            Index           =   23
            Left            =   90
            TabIndex        =   277
            Top             =   1230
            Width           =   1290
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Total de cargos"
            Height          =   195
            Index           =   22
            Left            =   90
            TabIndex        =   276
            Top             =   895
            Width           =   1110
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "+ Cargos de hospital"
            Height          =   195
            Index           =   21
            Left            =   90
            TabIndex        =   275
            Top             =   555
            Width           =   1440
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Honorarios"
            Height          =   195
            Index           =   20
            Left            =   90
            TabIndex        =   274
            Top             =   215
            Width           =   765
         End
         Begin VB.Label Label22 
            AutoSize        =   -1  'True
            Caption         =   "Total sin coaseguro adicional"
            Height          =   195
            Index           =   2
            Left            =   4315
            TabIndex        =   257
            Top             =   4298
            Width           =   2070
         End
         Begin VB.Label Label22 
            AutoSize        =   -1  'True
            Caption         =   "Total sin coaseguro"
            Height          =   195
            Index           =   1
            Left            =   4990
            TabIndex        =   256
            Top             =   3618
            Width           =   1395
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "%"
            Height          =   195
            Index           =   4
            Left            =   5900
            TabIndex        =   255
            Top             =   4638
            Width           =   120
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "%"
            Height          =   195
            Index           =   3
            Left            =   5900
            TabIndex        =   254
            Top             =   3958
            Width           =   120
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "%"
            Height          =   195
            Index           =   2
            Left            =   5900
            TabIndex        =   253
            Top             =   3278
            Width           =   120
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "%"
            Height          =   195
            Index           =   1
            Left            =   5900
            TabIndex        =   252
            Top             =   4978
            Width           =   120
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "%"
            Height          =   195
            Index           =   0
            Left            =   5900
            TabIndex        =   212
            Top             =   2598
            Width           =   120
         End
         Begin VB.Label Label17 
            AutoSize        =   -1  'True
            Caption         =   "Total conceptos de seguro"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   240
            Index           =   3
            Left            =   90
            TabIndex        =   208
            Top             =   5680
            Width           =   2805
         End
         Begin VB.Label Label22 
            AutoSize        =   -1  'True
            Caption         =   "Total sin deducible"
            Height          =   195
            Index           =   0
            Left            =   5050
            TabIndex        =   108
            Top             =   2938
            Width           =   1335
         End
      End
      Begin VB.Frame Frame7 
         Caption         =   "Cargos excluídos"
         Height          =   1630
         Left            =   -66565
         TabIndex        =   103
         Top             =   6400
         Width           =   3400
         Begin VB.TextBox txtExcluidosIVA 
            Alignment       =   1  'Right Justify
            Height          =   285
            Left            =   1800
            Locked          =   -1  'True
            MaxLength       =   14
            TabIndex        =   99
            Top             =   880
            Width           =   1485
         End
         Begin VB.TextBox txtExcluidosTotal 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   330
            Left            =   1800
            Locked          =   -1  'True
            MaxLength       =   14
            TabIndex        =   100
            Top             =   1195
            Width           =   1485
         End
         Begin VB.TextBox txtExcluidosDescuentos 
            Alignment       =   1  'Right Justify
            Height          =   285
            Left            =   1800
            Locked          =   -1  'True
            MaxLength       =   14
            TabIndex        =   98
            Top             =   250
            Width           =   1485
         End
         Begin VB.TextBox txtExcluidosHospital 
            Alignment       =   1  'Right Justify
            Height          =   285
            Left            =   1800
            Locked          =   -1  'True
            MaxLength       =   14
            TabIndex        =   97
            Top             =   565
            Width           =   1485
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "IVA"
            Height          =   195
            Index           =   15
            Left            =   90
            TabIndex        =   271
            Top             =   930
            Width           =   255
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Importe"
            Height          =   195
            Index           =   14
            Left            =   90
            TabIndex        =   270
            Top             =   615
            Width           =   525
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Descuentos"
            Height          =   195
            Index           =   13
            Left            =   90
            TabIndex        =   269
            Top             =   300
            Width           =   855
         End
         Begin VB.Label Label17 
            AutoSize        =   -1  'True
            Caption         =   "Total excluidos"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   195
            Index           =   2
            Left            =   90
            TabIndex        =   104
            Top             =   1245
            Width           =   1305
         End
      End
      Begin VB.Frame Frame1 
         Height          =   1000
         Left            =   -66565
         TabIndex        =   209
         Top             =   8150
         Width           =   3400
         Begin VB.TextBox txtExcluidosPagos 
            Alignment       =   1  'Right Justify
            Height          =   300
            Left            =   1800
            Locked          =   -1  'True
            MaxLength       =   14
            TabIndex        =   220
            Top             =   250
            Width           =   1485
         End
         Begin VB.TextBox txtTotalPagarControl 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   330
            Left            =   1800
            Locked          =   -1  'True
            MaxLength       =   14
            TabIndex        =   101
            Top             =   565
            Width           =   1485
         End
         Begin VB.Label Label17 
            Caption         =   "Pagos"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Index           =   0
            Left            =   90
            TabIndex        =   221
            Top             =   300
            Width           =   735
         End
         Begin VB.Label Label17 
            AutoSize        =   -1  'True
            Caption         =   "Total pagar"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   240
            Index           =   1
            Left            =   90
            TabIndex        =   210
            Top             =   615
            Width           =   1230
         End
      End
      Begin VB.CheckBox chkOtrosDatosFiscales 
         Caption         =   "Solicitar otros datos fiscales"
         Height          =   195
         Left            =   -74820
         TabIndex        =   207
         Top             =   6480
         Width           =   2265
      End
      Begin VB.Frame Frame3 
         Height          =   3990
         Left            =   -74910
         TabIndex        =   140
         Top             =   1655
         Width           =   11760
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Teléfono"
            Height          =   195
            Index           =   35
            Left            =   8895
            TabIndex        =   294
            Top             =   1200
            Width           =   630
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Código postal"
            Height          =   195
            Index           =   34
            Left            =   8895
            TabIndex        =   293
            Top             =   800
            Width           =   960
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Diagnóstico inicial"
            Height          =   195
            Index           =   33
            Left            =   105
            TabIndex        =   292
            Top             =   2400
            Width           =   1275
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Médico tratante"
            Height          =   195
            Index           =   32
            Left            =   105
            TabIndex        =   291
            Top             =   2000
            Width           =   1110
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Colonia"
            Height          =   195
            Index           =   31
            Left            =   105
            TabIndex        =   290
            Top             =   1600
            Width           =   525
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Número exterior"
            Height          =   195
            Index           =   30
            Left            =   105
            TabIndex        =   289
            Top             =   1200
            Width           =   1110
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Calle"
            Height          =   195
            Index           =   29
            Left            =   105
            TabIndex        =   288
            Top             =   800
            Width           =   345
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Cuarto"
            ForeColor       =   &H00000000&
            Height          =   195
            Index           =   28
            Left            =   105
            TabIndex        =   287
            Top             =   400
            Width           =   465
         End
         Begin VB.Label lblNumInterior 
            BackColor       =   &H80000005&
            BorderStyle     =   1  'Fixed Single
            Height          =   315
            Left            =   7070
            TabIndex        =   240
            Top             =   1150
            Width           =   1680
         End
         Begin VB.Label lblNumExterior 
            BackColor       =   &H80000005&
            BorderStyle     =   1  'Fixed Single
            Height          =   315
            Left            =   1545
            TabIndex        =   239
            Top             =   1150
            Width           =   1680
         End
         Begin VB.Label lblPorcentajeDeducible 
            Caption         =   "Número interior"
            Height          =   255
            Index           =   37
            Left            =   5610
            TabIndex        =   238
            Top             =   1200
            Width           =   1455
         End
         Begin VB.Label lblCodigoPostal 
            BackColor       =   &H80000005&
            BorderStyle     =   1  'Fixed Single
            Height          =   315
            Left            =   9990
            TabIndex        =   202
            Top             =   750
            Width           =   1650
         End
         Begin VB.Label lblDiagnostico 
            BackColor       =   &H80000005&
            BorderStyle     =   1  'Fixed Single
            Height          =   1305
            Left            =   1545
            TabIndex        =   206
            Top             =   2355
            Width           =   10095
         End
         Begin VB.Label lblMedico 
            BackColor       =   &H80000005&
            BorderStyle     =   1  'Fixed Single
            Height          =   315
            Left            =   1545
            TabIndex        =   205
            Top             =   1950
            Width           =   7200
         End
         Begin VB.Label lblCuarto 
            BackColor       =   &H80000005&
            BorderStyle     =   1  'Fixed Single
            Height          =   315
            Left            =   1545
            TabIndex        =   199
            Top             =   350
            Width           =   1680
         End
         Begin VB.Label lblFechaIngreso 
            Alignment       =   2  'Center
            BackColor       =   &H80000005&
            BorderStyle     =   1  'Fixed Single
            Height          =   315
            Left            =   7070
            TabIndex        =   200
            Top             =   350
            Width           =   1680
         End
         Begin VB.Label lblTelefono 
            BackColor       =   &H80000005&
            BorderStyle     =   1  'Fixed Single
            Height          =   315
            Left            =   9990
            TabIndex        =   204
            Top             =   1150
            Width           =   1650
         End
         Begin VB.Label lblColonia 
            BackColor       =   &H80000005&
            BorderStyle     =   1  'Fixed Single
            Height          =   315
            Left            =   1545
            TabIndex        =   203
            Top             =   1550
            Width           =   7200
         End
         Begin VB.Label lblDireccion 
            BackColor       =   &H80000005&
            BorderStyle     =   1  'Fixed Single
            Height          =   315
            Left            =   1545
            TabIndex        =   201
            Top             =   750
            Width           =   7200
         End
         Begin VB.Label lblPorcentajeDeducible 
            Caption         =   "Fecha de ingreso"
            Height          =   255
            Index           =   36
            Left            =   5610
            TabIndex        =   141
            Top             =   400
            Width           =   1245
         End
      End
      Begin VB.Frame freDatosFiscales 
         Caption         =   "Datos fiscales de la cuenta particular"
         Enabled         =   0   'False
         Height          =   3525
         Left            =   -74910
         TabIndex        =   124
         Top             =   5720
         Width           =   9390
         Begin VB.CheckBox chkRazonSocial 
            Caption         =   "Usar razón social"
            Enabled         =   0   'False
            Height          =   255
            Left            =   6200
            TabIndex        =   379
            ToolTipText     =   "Usar razón social"
            Top             =   360
            Width           =   1935
         End
         Begin VB.ComboBox cboRegimenFiscal 
            Height          =   315
            ItemData        =   "frmFacturacion.frx":1D69
            Left            =   1560
            List            =   "frmFacturacion.frx":1D6B
            Sorted          =   -1  'True
            Style           =   2  'Dropdown List
            TabIndex        =   128
            ToolTipText     =   "Régimen fiscal"
            Top             =   720
            Width           =   7600
         End
         Begin VB.CheckBox chkRFCgenerico 
            Caption         =   "RFC genérico"
            Height          =   255
            Left            =   3360
            TabIndex        =   126
            ToolTipText     =   "Capturar RFC genérico"
            Top             =   360
            Width           =   1455
         End
         Begin VB.TextBox txtDireccionFactura 
            Height          =   315
            Index           =   1
            Left            =   1560
            MaxLength       =   100
            TabIndex        =   137
            ToolTipText     =   "Correo electrónico"
            Top             =   3120
            Width           =   6585
         End
         Begin VB.CheckBox chkExtranjero 
            Caption         =   "Extranjero"
            Height          =   255
            Left            =   4920
            TabIndex        =   127
            Top             =   360
            Width           =   1215
         End
         Begin VB.TextBox txtFacturaNumInterior 
            Height          =   315
            Left            =   6585
            MaxLength       =   20
            TabIndex        =   132
            Top             =   1905
            Width           =   1545
         End
         Begin VB.TextBox txtFacturaNumExterior 
            Height          =   315
            Left            =   1560
            MaxLength       =   20
            TabIndex        =   131
            Top             =   1905
            Width           =   1545
         End
         Begin VB.TextBox txtCPFactura 
            Height          =   315
            Left            =   6585
            MaxLength       =   5
            TabIndex        =   134
            Top             =   2310
            Width           =   1545
         End
         Begin VB.TextBox txtColoniaFactura 
            Height          =   315
            Left            =   1560
            MaxLength       =   100
            TabIndex        =   133
            Top             =   2310
            Width           =   3825
         End
         Begin VB.CommandButton cmdBuscarFiscales 
            Height          =   495
            Left            =   8775
            Picture         =   "frmFacturacion.frx":1D6D
            Style           =   1  'Graphical
            TabIndex        =   139
            ToolTipText     =   "Búsqueda de datos fiscales"
            Top             =   2940
            UseMaskColor    =   -1  'True
            Width           =   495
         End
         Begin VB.ComboBox cboCiudad 
            Height          =   315
            Left            =   1560
            Sorted          =   -1  'True
            Style           =   2  'Dropdown List
            TabIndex        =   135
            ToolTipText     =   "Seleccione la ciudad"
            Top             =   2715
            Width           =   3825
         End
         Begin VB.TextBox txtRFCFactura 
            Height          =   315
            Left            =   1560
            MaxLength       =   13
            TabIndex        =   125
            Top             =   345
            Width           =   1545
         End
         Begin VB.TextBox txtTelefonoFactura 
            Height          =   315
            Left            =   6585
            MaxLength       =   20
            TabIndex        =   136
            Top             =   2715
            Width           =   1545
         End
         Begin VB.TextBox txtDireccionFactura 
            Height          =   315
            Index           =   0
            Left            =   1560
            MaxLength       =   250
            TabIndex        =   130
            Top             =   1515
            Width           =   7600
         End
         Begin VB.TextBox txtNombreFactura 
            Height          =   315
            Left            =   1560
            MaxLength       =   300
            TabIndex        =   129
            Top             =   1110
            Width           =   7600
         End
         Begin VB.CommandButton cmdActualizaFiscales 
            Height          =   495
            Left            =   8200
            MaskColor       =   &H00FFFFFF&
            Picture         =   "frmFacturacion.frx":1EDF
            Style           =   1  'Graphical
            TabIndex        =   138
            ToolTipText     =   "Guardar la información"
            Top             =   2940
            Width           =   495
         End
         Begin VSFlex7LCtl.VSFlexGrid VSFlexGrid3 
            Height          =   3075
            Left            =   105
            TabIndex        =   233
            Top             =   330
            Width           =   1380
            _cx             =   2434
            _cy             =   5424
            _ConvInfo       =   1
            Appearance      =   0
            BorderStyle     =   0
            Enabled         =   -1  'True
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            MousePointer    =   0
            BackColor       =   -2147483633
            ForeColor       =   -2147483640
            BackColorFixed  =   -2147483633
            ForeColorFixed  =   -2147483630
            BackColorSel    =   -2147483633
            ForeColorSel    =   -2147483630
            BackColorBkg    =   -2147483633
            BackColorAlternate=   -2147483633
            GridColor       =   -2147483633
            GridColorFixed  =   0
            TreeColor       =   -2147483632
            FloodColor      =   192
            SheetBorder     =   0
            FocusRect       =   0
            HighLight       =   1
            AllowSelection  =   0   'False
            AllowBigSelection=   -1  'True
            AllowUserResizing=   0
            SelectionMode   =   1
            GridLines       =   1
            GridLinesFixed  =   2
            GridLineWidth   =   1
            Rows            =   8
            Cols            =   1
            FixedRows       =   0
            FixedCols       =   0
            RowHeightMin    =   383
            RowHeightMax    =   383
            ColWidthMin     =   0
            ColWidthMax     =   0
            ExtendLastCol   =   -1  'True
            FormatString    =   $"frmFacturacion.frx":2221
            ScrollTrack     =   -1  'True
            ScrollBars      =   0
            ScrollTips      =   0   'False
            MergeCells      =   1
            MergeCompare    =   0
            AutoResize      =   0   'False
            AutoSizeMode    =   0
            AutoSearch      =   0
            AutoSearchDelay =   0
            MultiTotals     =   -1  'True
            SubtotalPosition=   1
            OutlineBar      =   0
            OutlineCol      =   0
            Ellipsis        =   0
            ExplorerBar     =   5
            PicturesOver    =   0   'False
            FillStyle       =   1
            RightToLeft     =   0   'False
            PictureType     =   0
            TabBehavior     =   0
            OwnerDraw       =   0
            Editable        =   0
            ShowComboButton =   -1  'True
            WordWrap        =   0   'False
            TextStyle       =   0
            TextStyleFixed  =   0
            OleDragMode     =   0
            OleDropMode     =   0
            ComboSearch     =   0
            AutoSizeMouse   =   0   'False
            FrozenRows      =   0
            FrozenCols      =   0
            AllowUserFreezing=   0
            BackColorFrozen =   -2147483633
            ForeColorFrozen =   0
            WallPaperAlignment=   9
         End
         Begin VSFlex7LCtl.VSFlexGrid vsfDatosFiscales1 
            Height          =   1065
            Left            =   5400
            TabIndex        =   232
            Top             =   1920
            Width           =   1170
            _cx             =   2064
            _cy             =   1879
            _ConvInfo       =   1
            Appearance      =   0
            BorderStyle     =   0
            Enabled         =   -1  'True
            BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   400
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            MousePointer    =   0
            BackColor       =   -2147483633
            ForeColor       =   -2147483640
            BackColorFixed  =   -2147483633
            ForeColorFixed  =   -2147483630
            BackColorSel    =   -2147483633
            ForeColorSel    =   -2147483630
            BackColorBkg    =   -2147483633
            BackColorAlternate=   -2147483633
            GridColor       =   -2147483633
            GridColorFixed  =   0
            TreeColor       =   -2147483632
            FloodColor      =   192
            SheetBorder     =   0
            FocusRect       =   0
            HighLight       =   1
            AllowSelection  =   0   'False
            AllowBigSelection=   -1  'True
            AllowUserResizing=   0
            SelectionMode   =   1
            GridLines       =   1
            GridLinesFixed  =   2
            GridLineWidth   =   1
            Rows            =   3
            Cols            =   1
            FixedRows       =   0
            FixedCols       =   0
            RowHeightMin    =   370
            RowHeightMax    =   370
            ColWidthMin     =   0
            ColWidthMax     =   0
            ExtendLastCol   =   -1  'True
            FormatString    =   $"frmFacturacion.frx":22AB
            ScrollTrack     =   -1  'True
            ScrollBars      =   0
            ScrollTips      =   0   'False
            MergeCells      =   1
            MergeCompare    =   0
            AutoResize      =   0   'False
            AutoSizeMode    =   0
            AutoSearch      =   0
            AutoSearchDelay =   0
            MultiTotals     =   -1  'True
            SubtotalPosition=   1
            OutlineBar      =   0
            OutlineCol      =   0
            Ellipsis        =   0
            ExplorerBar     =   5
            PicturesOver    =   0   'False
            FillStyle       =   1
            RightToLeft     =   0   'False
            PictureType     =   0
            TabBehavior     =   0
            OwnerDraw       =   0
            Editable        =   0
            ShowComboButton =   -1  'True
            WordWrap        =   0   'False
            TextStyle       =   0
            TextStyleFixed  =   0
            OleDragMode     =   0
            OleDropMode     =   0
            ComboSearch     =   0
            AutoSizeMouse   =   0   'False
            FrozenRows      =   0
            FrozenCols      =   0
            AllowUserFreezing=   0
            BackColorFrozen =   -2147483633
            ForeColorFrozen =   0
            WallPaperAlignment=   9
         End
      End
      Begin VB.Frame frmTipoAgrupa 
         Caption         =   "Tipo de agrupación"
         Enabled         =   0   'False
         Height          =   1845
         Left            =   -65445
         TabIndex        =   123
         Top             =   7380
         Visible         =   0   'False
         Width           =   2295
         Begin VB.OptionButton optTipoAgrupacion 
            Caption         =   "Desglosada por cargo/mixta"
            Height          =   375
            Index           =   2
            Left            =   120
            TabIndex        =   243
            Top             =   1320
            Width           =   2055
         End
         Begin VB.OptionButton optTipoAgrupacion 
            Caption         =   "Agrupado por cargo"
            Height          =   375
            Index           =   1
            Left            =   120
            TabIndex        =   242
            Top             =   840
            Width           =   2055
         End
         Begin VB.OptionButton optTipoAgrupacion 
            Caption         =   "Agrupado por concepto de facturación"
            Height          =   375
            Index           =   0
            Left            =   120
            TabIndex        =   241
            Top             =   360
            Width           =   2055
         End
      End
      Begin VB.Frame freFacturaEmpresa 
         Caption         =   "Conceptos de facturación"
         Enabled         =   0   'False
         Height          =   3225
         Left            =   -74910
         TabIndex        =   120
         Top             =   1640
         Width           =   11750
         Begin MSHierarchicalFlexGridLib.MSHFlexGrid grdFacturaEmpresa 
            Height          =   2800
            Left            =   200
            TabIndex        =   121
            Top             =   250
            Width           =   11350
            _ExtentX        =   20029
            _ExtentY        =   4948
            _Version        =   393216
            Cols            =   4
            GridColor       =   12632256
            FormatString    =   "|Concepto|Cargo|Abono"
            _NumberOfBands  =   1
            _Band(0).Cols   =   4
         End
      End
      Begin VB.Frame FreTotales 
         Enabled         =   0   'False
         Height          =   2150
         Left            =   8300
         TabIndex        =   109
         Top             =   7590
         Visible         =   0   'False
         Width           =   3495
         Begin VB.TextBox txtTotal 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   285
            Left            =   1545
            TabIndex        =   115
            ToolTipText     =   "Total del presupuesto"
            Top             =   1770
            Width           =   1890
         End
         Begin VB.TextBox txtIva 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   285
            Left            =   1545
            TabIndex        =   114
            ToolTipText     =   "Iva del presupuesto"
            Top             =   840
            Width           =   1890
         End
         Begin VB.TextBox txtDescuentos 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   285
            Left            =   1545
            TabIndex        =   113
            ToolTipText     =   "Total de descuentos"
            Top             =   210
            Width           =   1890
         End
         Begin VB.TextBox txtSubtotal 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   285
            Left            =   1545
            TabIndex        =   112
            ToolTipText     =   "Subtotal del presupuesto"
            Top             =   525
            Width           =   1890
         End
         Begin VB.TextBox txtPagos 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   285
            Left            =   1545
            TabIndex        =   111
            ToolTipText     =   "Total de descuentos"
            Top             =   1455
            Width           =   1890
         End
         Begin VB.TextBox txtTotalFactura 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   285
            Left            =   1545
            TabIndex        =   110
            ToolTipText     =   "Total del presupuesto"
            Top             =   1155
            Width           =   1890
         End
         Begin VB.Label Label10 
            Caption         =   "Descuentos"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   270
            Index           =   2
            Left            =   90
            TabIndex        =   328
            Top             =   217
            Width           =   1410
         End
         Begin VB.Label Label10 
            AutoSize        =   -1  'True
            Caption         =   "Total factura"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   240
            Index           =   1
            Left            =   90
            TabIndex        =   309
            Top             =   1155
            Width           =   1320
         End
         Begin VB.Label Label11 
            Caption         =   "Total a pagar"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   315
            Left            =   90
            TabIndex        =   119
            Top             =   1770
            Width           =   1545
         End
         Begin VB.Label Label10 
            Caption         =   "IVA"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   270
            Index           =   0
            Left            =   90
            TabIndex        =   118
            Top             =   840
            Width           =   810
         End
         Begin VB.Label Label13 
            Caption         =   "Subtotal"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Left            =   90
            TabIndex        =   117
            Top             =   540
            Width           =   1335
         End
         Begin VB.Label lblPagos 
            Caption         =   "Pagos"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Left            =   90
            TabIndex        =   116
            Top             =   1440
            Width           =   915
         End
      End
      Begin VB.Frame freControlAseguradora 
         Height          =   1600
         Left            =   -74910
         TabIndex        =   65
         Top             =   1485
         Width           =   11760
         Begin VB.ComboBox cboCartaAutorizacion 
            Height          =   315
            Left            =   1755
            Sorted          =   -1  'True
            Style           =   2  'Dropdown List
            TabIndex        =   378
            ToolTipText     =   "Carta de autorización"
            Top             =   165
            Width           =   4150
         End
         Begin VB.TextBox txtObservaciones 
            Height          =   660
            Left            =   7480
            MaxLength       =   1000
            MultiLine       =   -1  'True
            TabIndex        =   234
            ToolTipText     =   "Observaciones relacionadas"
            Top             =   855
            Width           =   4200
         End
         Begin VB.CheckBox chkNumeroPoliza 
            Caption         =   "Número de póliza"
            Height          =   195
            Left            =   90
            TabIndex        =   217
            Top             =   905
            Width           =   1650
         End
         Begin VB.CheckBox chkNumeroControl 
            Caption         =   "Número de control"
            Height          =   195
            Left            =   90
            TabIndex        =   218
            Top             =   1250
            Width           =   1620
         End
         Begin VB.ComboBox cboTipoPoliza 
            Height          =   315
            Left            =   7480
            Style           =   2  'Dropdown List
            TabIndex        =   67
            ToolTipText     =   "Seleccione el tipo de póliza"
            Top             =   510
            Width           =   4200
         End
         Begin VB.CheckBox chkTipoPoliza 
            Caption         =   "Tipo de póliza"
            Height          =   195
            Left            =   6150
            TabIndex        =   216
            Top             =   560
            Width           =   1290
         End
         Begin VB.CheckBox chkAutoriza 
            Caption         =   "Autoriza"
            Height          =   195
            Left            =   90
            TabIndex        =   215
            Top             =   560
            Width           =   885
         End
         Begin VB.ComboBox cboParentesco 
            Height          =   315
            Left            =   7480
            Style           =   2  'Dropdown List
            TabIndex        =   66
            ToolTipText     =   "Parentesco del paciente con el asegurado"
            Top             =   165
            Width           =   4200
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Parentesco"
            Height          =   195
            Index           =   19
            Left            =   6150
            TabIndex        =   273
            Top             =   220
            Width           =   810
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Observaciones"
            Height          =   195
            Index           =   18
            Left            =   6240
            TabIndex        =   272
            Top             =   905
            Width           =   1065
         End
         Begin VB.Label lblPorcentajeDeducible 
            AutoSize        =   -1  'True
            Caption         =   "Nombre del asegurado"
            Height          =   195
            Index           =   38
            Left            =   90
            TabIndex        =   219
            Top             =   220
            Width           =   1605
         End
      End
      Begin VB.Frame freFacturaPaciente 
         Caption         =   "Conceptos de facturación"
         Enabled         =   0   'False
         Height          =   3300
         Left            =   -74910
         TabIndex        =   37
         Top             =   1640
         Width           =   8250
         Begin MSHierarchicalFlexGridLib.MSHFlexGrid grdFacturaPaciente 
            Height          =   2900
            Left            =   105
            TabIndex        =   38
            Top             =   240
            Width           =   8025
            _ExtentX        =   14155
            _ExtentY        =   5106
            _Version        =   393216
            Cols            =   4
            GridColor       =   12632256
            FormatString    =   "|Concepto|Cargo|Abono"
            _NumberOfBands  =   1
            _Band(0).Cols   =   4
         End
      End
      Begin VB.Frame freFechaFactura 
         Caption         =   "Fecha de facturación"
         Height          =   1005
         Index           =   1
         Left            =   -70680
         TabIndex        =   35
         Top             =   6480
         Visible         =   0   'False
         Width           =   2850
         Begin VB.Label lblFechaFactura 
            Alignment       =   2  'Center
            BorderStyle     =   1  'Fixed Single
            ForeColor       =   &H00FF0000&
            Height          =   300
            Index           =   1
            Left            =   75
            TabIndex        =   36
            Top             =   285
            Width           =   2700
         End
      End
      Begin VB.Frame freConsultaGeneraFacturas 
         Height          =   2625
         Index           =   1
         Left            =   -74910
         TabIndex        =   25
         Top             =   6720
         Width           =   3945
         Begin VB.CommandButton cmdAddenda 
            DisabledPicture =   "frmFacturacion.frx":22FF
            Height          =   495
            Left            =   1080
            MaskColor       =   &H00FFFFFF&
            Picture         =   "frmFacturacion.frx":2B11
            Style           =   1  'Graphical
            TabIndex        =   376
            ToolTipText     =   "Modifica los datos de la addenda de la aseguradora"
            Top             =   1720
            Width           =   495
         End
         Begin VB.TextBox txtImpresionesFP 
            Alignment       =   1  'Right Justify
            Height          =   315
            Index           =   1
            Left            =   2280
            MaxLength       =   2
            TabIndex        =   29
            ToolTipText     =   "Número de impresiones de la factura"
            Top             =   1365
            Width           =   520
         End
         Begin VB.CommandButton cmdPrefacturaEmpresa 
            Height          =   495
            Left            =   1570
            MaskColor       =   &H00FFFFFF&
            Picture         =   "frmFacturacion.frx":3323
            Style           =   1  'Graphical
            TabIndex        =   30
            ToolTipText     =   "Generar prefactura de la empresa"
            Top             =   1720
            UseMaskColor    =   -1  'True
            Width           =   495
         End
         Begin VB.ListBox lstFacturaASustituirFE 
            Height          =   450
            ItemData        =   "frmFacturacion.frx":3726
            Left            =   1650
            List            =   "frmFacturacion.frx":3728
            TabIndex        =   355
            ToolTipText     =   "Facturas a las cuales sustituye"
            Top             =   240
            Width           =   2175
         End
         Begin VB.CheckBox chkFacturaSustitutaFE 
            Caption         =   "Factura sustituta"
            Height          =   255
            Left            =   90
            TabIndex        =   334
            ToolTipText     =   "Indica que la factura que se generará es sustituta de otra previamente cancelada"
            Top             =   240
            Width           =   1515
         End
         Begin VB.ComboBox cboUsoCFDI 
            Height          =   315
            Index           =   1
            Left            =   90
            Style           =   2  'Dropdown List
            TabIndex        =   335
            ToolTipText     =   "Uso del CFDI"
            Top             =   810
            Width           =   3770
         End
         Begin VB.OptionButton optDolares 
            Caption         =   "Dólares"
            Height          =   195
            Index           =   1
            Left            =   1920
            TabIndex        =   33
            Top             =   2280
            Width           =   870
         End
         Begin VB.OptionButton optPesos 
            Caption         =   "Pesos"
            Height          =   195
            Index           =   1
            Left            =   960
            TabIndex        =   32
            Top             =   2280
            Value           =   -1  'True
            Width           =   870
         End
         Begin VB.CommandButton cmdGrabarFacturaEmpresa 
            Height          =   495
            Left            =   2050
            MaskColor       =   &H00FFFFFF&
            Picture         =   "frmFacturacion.frx":372A
            Style           =   1  'Graphical
            TabIndex        =   31
            ToolTipText     =   "Guardar el registro"
            Top             =   1720
            Width           =   495
         End
         Begin VB.CheckBox chkConsultaGeneraFacturas 
            Caption         =   "Consultar facturas"
            Height          =   495
            Index           =   1
            Left            =   90
            Style           =   1  'Graphical
            TabIndex        =   28
            Top             =   1200
            Width           =   1125
         End
         Begin VB.CommandButton cmdAnteriorFactura 
            Height          =   495
            Index           =   1
            Left            =   1420
            MaskColor       =   &H00FFFFFF&
            Picture         =   "frmFacturacion.frx":3A6C
            Style           =   1  'Graphical
            TabIndex        =   27
            ToolTipText     =   "Anterior registro"
            Top             =   3075
            UseMaskColor    =   -1  'True
            Width           =   495
         End
         Begin VB.CommandButton cmdSiguienteFactura 
            Height          =   495
            Index           =   1
            Left            =   1920
            MaskColor       =   &H00FFFFFF&
            Picture         =   "frmFacturacion.frx":3BDE
            Style           =   1  'Graphical
            TabIndex        =   26
            ToolTipText     =   "Siguiente registro"
            Top             =   3075
            UseMaskColor    =   -1  'True
            Width           =   495
         End
         Begin VB.Label Label60 
            Caption         =   "Impresiones"
            Height          =   255
            Index           =   9
            Left            =   1320
            TabIndex        =   360
            Top             =   1395
            Width           =   855
         End
         Begin VB.Label Label51 
            Caption         =   "Uso del CFDI"
            Height          =   255
            Index           =   8
            Left            =   90
            TabIndex        =   333
            Top             =   570
            Width           =   2175
         End
         Begin VB.Label txtFacturasEncontradas 
            Alignment       =   2  'Center
            BorderStyle     =   1  'Fixed Single
            ForeColor       =   &H00FF0000&
            Height          =   495
            Index           =   1
            Left            =   90
            TabIndex        =   34
            Top             =   2520
            Width           =   3765
         End
      End
      Begin VB.Frame freBusqueda 
         Caption         =   "Consulta de facturas"
         Enabled         =   0   'False
         Height          =   8435
         Left            =   -74910
         TabIndex        =   12
         Top             =   420
         Width           =   11760
         Begin VB.OptionButton optMostrarSolo 
            Caption         =   "Mostrar sólo pendientes de timbre fiscal"
            Height          =   255
            Index           =   1
            Left            =   6960
            TabIndex        =   341
            Top             =   390
            Width           =   4335
         End
         Begin VB.OptionButton optMostrarSolo 
            Caption         =   "Mostrar sólo pendientes de cancelar ante el SAT"
            Height          =   255
            Index           =   2
            Left            =   6960
            TabIndex        =   342
            Top             =   630
            Width           =   4335
         End
         Begin VB.OptionButton optMostrarSolo 
            Caption         =   "Mostrar sólo pendientes de autorización de cancelación"
            Height          =   255
            Index           =   3
            Left            =   6960
            TabIndex        =   343
            Top             =   870
            Width           =   4335
         End
         Begin VB.OptionButton optMostrarSolo 
            Caption         =   "Mostrar sólo cancelación rechazada"
            Height          =   255
            Index           =   4
            Left            =   6960
            TabIndex        =   344
            Top             =   1110
            Width           =   4335
         End
         Begin VB.OptionButton optMostrarSolo 
            Caption         =   "Mostrar todo"
            Height          =   255
            Index           =   0
            Left            =   6960
            TabIndex        =   340
            Top             =   150
            Value           =   -1  'True
            Width           =   4335
         End
         Begin VB.Frame fraRangoFechas 
            Caption         =   "Rango de fechas"
            Height          =   1085
            Left            =   3720
            TabIndex        =   23
            Top             =   270
            Width           =   3045
            Begin VB.TextBox TxtFolio 
               Height          =   315
               Left            =   120
               MaxLength       =   12
               TabIndex        =   339
               ToolTipText     =   "Folio de la factura"
               Top             =   465
               Width           =   2805
            End
            Begin MSMask.MaskEdBox mskFechaFinal 
               BeginProperty DataFormat 
                  Type            =   1
                  Format          =   "dd/MM/yyyy"
                  HaveTrueFalseNull=   0
                  FirstDayOfWeek  =   0
                  FirstWeekOfYear =   0
                  LCID            =   3082
                  SubFormatType   =   3
               EndProperty
               Height          =   315
               Left            =   1695
               TabIndex        =   20
               ToolTipText     =   "Fecha final de la búsqueda"
               Top             =   460
               Width           =   1215
               _ExtentX        =   2143
               _ExtentY        =   556
               _Version        =   393216
               MaxLength       =   10
               Format          =   "dd/mmm/yyyy"
               Mask            =   "##/##/####"
               PromptChar      =   " "
            End
            Begin MSMask.MaskEdBox mskFechaInicial 
               BeginProperty DataFormat 
                  Type            =   1
                  Format          =   "dd/MM/yyyy"
                  HaveTrueFalseNull=   0
                  FirstDayOfWeek  =   0
                  FirstWeekOfYear =   0
                  LCID            =   3082
                  SubFormatType   =   3
               EndProperty
               Height          =   315
               Left            =   120
               TabIndex        =   19
               ToolTipText     =   "Fecha inicial de la búsqueda"
               Top             =   460
               Width           =   1215
               _ExtentX        =   2143
               _ExtentY        =   556
               _Version        =   393216
               MaxLength       =   10
               Format          =   "dd/mmm/yyyy "
               Mask            =   "##/##/####"
               PromptChar      =   " "
            End
            Begin VB.Label Label72 
               AutoSize        =   -1  'True
               Caption         =   "-"
               BeginProperty Font 
                  Name            =   "MS Sans Serif"
                  Size            =   13.5
                  Charset         =   0
                  Weight          =   400
                  Underline       =   0   'False
                  Italic          =   0   'False
                  Strikethrough   =   0   'False
               EndProperty
               Height          =   360
               Left            =   1470
               TabIndex        =   24
               Top             =   430
               Width           =   90
            End
         End
         Begin VB.Frame Frame21 
            Caption         =   "Búsqueda por"
            Height          =   1085
            Left            =   1650
            TabIndex        =   22
            Top             =   270
            Width           =   1965
            Begin VB.OptionButton optTipoBusqueda 
               Caption         =   "&Folio de la factura"
               Height          =   225
               Index           =   2
               Left            =   90
               TabIndex        =   345
               Top             =   780
               Width           =   1770
            End
            Begin VB.OptionButton optTipoBusqueda 
               Caption         =   "&Rango de fechas"
               Height          =   225
               Index           =   0
               Left            =   90
               TabIndex        =   17
               Top             =   300
               Width           =   1530
            End
            Begin VB.OptionButton optTipoBusqueda 
               Caption         =   "Nombre del &paciente"
               Height          =   225
               Index           =   1
               Left            =   90
               TabIndex        =   18
               Top             =   540
               Width           =   1770
            End
         End
         Begin VB.Frame fraTipoPaciente 
            Caption         =   "Tipo de paciente"
            Height          =   1085
            Left            =   60
            TabIndex        =   13
            Top             =   270
            Width           =   1500
            Begin VB.OptionButton optTipoPacienteBusqueda 
               Caption         =   "&Interno"
               Height          =   195
               Index           =   0
               Left            =   120
               TabIndex        =   15
               Top             =   540
               Width           =   960
            End
            Begin VB.OptionButton optTipoPacienteBusqueda 
               Caption         =   "&Externo"
               Height          =   195
               Index           =   1
               Left            =   120
               TabIndex        =   16
               Top             =   780
               Width           =   960
            End
            Begin VB.OptionButton optTipoPacienteBusqueda 
               Caption         =   "&Todos"
               Height          =   195
               Index           =   2
               Left            =   120
               TabIndex        =   14
               Top             =   300
               Width           =   960
            End
         End
         Begin MSHierarchicalFlexGridLib.MSHFlexGrid grdBuscaFacturas 
            Height          =   6905
            Left            =   60
            TabIndex        =   21
            Top             =   1410
            Width           =   11625
            _ExtentX        =   20505
            _ExtentY        =   12171
            _Version        =   393216
            BackColor       =   16777215
            GridColor       =   12632256
            _NumberOfBands  =   1
            _Band(0).Cols   =   2
         End
      End
      Begin TabDlg.SSTab SSTEstadoCuenta 
         Height          =   8550
         Left            =   0
         TabIndex        =   142
         Top             =   1590
         Width           =   11850
         _ExtentX        =   20902
         _ExtentY        =   15081
         _Version        =   393216
         TabOrientation  =   1
         Style           =   1
         Tabs            =   2
         Tab             =   1
         TabHeight       =   529
         TabCaption(0)   =   "Ver cargos"
         TabPicture(0)   =   "frmFacturacion.frx":3D50
         Tab(0).ControlEnabled=   0   'False
         Tab(0).Control(0)=   "txtInfoHonorario"
         Tab(0).Control(1)=   "Frame5"
         Tab(0).Control(2)=   "Frame9"
         Tab(0).Control(3)=   "Frame10"
         Tab(0).Control(4)=   "txtDescuento"
         Tab(0).Control(5)=   "cboPaquetes"
         Tab(0).Control(6)=   "txtCantidadPaquete"
         Tab(0).Control(7)=   "grdCargos"
         Tab(0).Control(8)=   "Label57(16)"
         Tab(0).Control(9)=   "Shape3(4)"
         Tab(0).Control(10)=   "Label57(17)"
         Tab(0).Control(11)=   "lblMensaje"
         Tab(0).Control(12)=   "Label57(2)"
         Tab(0).Control(13)=   "Shape3(3)"
         Tab(0).Control(14)=   "Label57(4)"
         Tab(0).Control(15)=   "Label57(3)"
         Tab(0).Control(16)=   "Label57(1)"
         Tab(0).Control(17)=   "Shape3(1)"
         Tab(0).Control(18)=   "Shape3(2)"
         Tab(0).ControlCount=   19
         TabCaption(1)   =   "Ver pagos y devoluciones"
         TabPicture(1)   =   "frmFacturacion.frx":3D6C
         Tab(1).ControlEnabled=   -1  'True
         Tab(1).Control(0)=   "grdPagos"
         Tab(1).Control(0).Enabled=   0   'False
         Tab(1).Control(1)=   "Frame18"
         Tab(1).Control(1).Enabled=   0   'False
         Tab(1).Control(2)=   "chkIncluyePagosFacturados"
         Tab(1).Control(2).Enabled=   0   'False
         Tab(1).ControlCount=   3
         Begin VB.TextBox txtInfoHonorario 
            Appearance      =   0  'Flat
            BackColor       =   &H8000000F&
            BorderStyle     =   0  'None
            ForeColor       =   &H000040C0&
            Height          =   255
            Left            =   -74930
            MultiLine       =   -1  'True
            TabIndex        =   329
            Top             =   5780
            Width           =   8055
         End
         Begin VB.CheckBox chkIncluyePagosFacturados 
            Caption         =   "Incluir facturados"
            Height          =   450
            Left            =   1920
            TabIndex        =   247
            Top             =   5550
            Width           =   1680
         End
         Begin VB.Frame Frame5 
            Caption         =   "Mostrar cargos"
            Height          =   2150
            Left            =   -71550
            TabIndex        =   155
            Top             =   6000
            Width           =   2400
            Begin VB.CheckBox chkIncluyeCargosFacturados 
               Caption         =   "Incluir facturados"
               Height          =   270
               Left            =   120
               TabIndex        =   159
               ToolTipText     =   "Muestra en la consulta los cargos facturados"
               Top             =   1425
               Width           =   1530
            End
            Begin VB.OptionButton optMuestraCargos 
               Caption         =   "Excluidos"
               Height          =   195
               Index           =   2
               Left            =   120
               TabIndex        =   157
               ToolTipText     =   "Muestra sólo cargos excluidos"
               Top             =   660
               Width           =   2160
            End
            Begin VB.OptionButton optMuestraCargos 
               Caption         =   "Sin excluir"
               Height          =   195
               Index           =   1
               Left            =   120
               TabIndex        =   158
               ToolTipText     =   "Muestra sólo cargos sin excluir"
               Top             =   1005
               Width           =   2160
            End
            Begin VB.OptionButton optMuestraCargos 
               Caption         =   "Todos"
               Height          =   195
               Index           =   0
               Left            =   120
               TabIndex        =   156
               ToolTipText     =   "Muestra todos los cargos"
               Top             =   315
               Value           =   -1  'True
               Width           =   2160
            End
         End
         Begin VB.Frame Frame9 
            Caption         =   "(*) Para facturar"
            Height          =   2150
            Left            =   -74900
            TabIndex        =   150
            Top             =   6000
            Width           =   3300
            Begin VB.CommandButton cmdRefrescar 
               Height          =   495
               Left            =   2095
               MaskColor       =   &H00FFFFFF&
               Picture         =   "frmFacturacion.frx":3D88
               Style           =   1  'Graphical
               TabIndex        =   374
               ToolTipText     =   "Actualizar cargos"
               Top             =   1550
               UseMaskColor    =   -1  'True
               Width           =   495
            End
            Begin VB.CommandButton cmdSelQuita 
               Caption         =   "Seleccionar cargos con IVA del paciente"
               Height          =   315
               Index           =   2
               Left            =   70
               TabIndex        =   154
               ToolTipText     =   "Seleccionar cargos con IVA del paciente"
               Top             =   1215
               Width           =   3100
            End
            Begin VB.CommandButton cmdActualizarCargos 
               Enabled         =   0   'False
               Height          =   495
               Left            =   1045
               Picture         =   "frmFacturacion.frx":440A
               Style           =   1  'Graphical
               TabIndex        =   375
               Top             =   1550
               Width           =   495
            End
            Begin VB.CommandButton cmdImprimirEstado 
               Height          =   495
               Left            =   1560
               Picture         =   "frmFacturacion.frx":474C
               Style           =   1  'Graphical
               TabIndex        =   373
               ToolTipText     =   "Imprimir el estado de cuenta"
               Top             =   1550
               UseMaskColor    =   -1  'True
               Width           =   495
            End
            Begin VB.CommandButton cmdSepararCargosFarmacia 
               Enabled         =   0   'False
               Height          =   495
               Left            =   520
               MaskColor       =   &H00FF00FF&
               Picture         =   "frmFacturacion.frx":4E4E
               Style           =   1  'Graphical
               TabIndex        =   372
               ToolTipText     =   "Separar los cargos que se surtieron con artículos del almacén consignación."
               Top             =   1550
               UseMaskColor    =   -1  'True
               Width           =   495
            End
            Begin VB.CommandButton cmdSelQuita 
               Caption         =   "Seleccionar todo"
               Height          =   315
               Index           =   0
               Left            =   70
               TabIndex        =   151
               Top             =   225
               Width           =   3100
            End
            Begin VB.CommandButton cmdSelQuita 
               Caption         =   "Quitar a todos"
               Height          =   315
               Index           =   1
               Left            =   70
               TabIndex        =   152
               Top             =   555
               Width           =   3100
            End
            Begin VB.CommandButton cmdSelecciona 
               Caption         =   "Seleccionar"
               Height          =   315
               Left            =   70
               TabIndex        =   153
               Top             =   885
               Width           =   3100
            End
         End
         Begin VB.Frame Frame10 
            Caption         =   "Orden"
            Height          =   2150
            Left            =   -69100
            TabIndex        =   160
            Top             =   6000
            Width           =   2070
            Begin VB.OptionButton optOrdenCargos 
               Caption         =   "Descripción del cargo"
               Height          =   345
               Index           =   6
               Left            =   120
               TabIndex        =   164
               ToolTipText     =   "Mostrar cargos ordenados por descripción del cargo"
               Top             =   1350
               Width           =   1905
            End
            Begin VB.OptionButton optOrdenCargos 
               Caption         =   "Departamento"
               Height          =   465
               Index           =   2
               Left            =   120
               TabIndex        =   163
               ToolTipText     =   "Mostrar cargos ordenados por departamento"
               Top             =   900
               Width           =   1425
            End
            Begin VB.OptionButton optOrdenCargos 
               Caption         =   "Concepto facturación"
               Height          =   345
               Index           =   1
               Left            =   120
               TabIndex        =   162
               ToolTipText     =   "Mostrar cargos ordenados por concepto de facturación"
               Top             =   600
               Width           =   1860
            End
            Begin VB.OptionButton optOrdenCargos 
               Caption         =   "Fecha"
               Height          =   270
               Index           =   0
               Left            =   120
               TabIndex        =   161
               ToolTipText     =   "Mostrar cargos ordenados por fecha"
               Top             =   285
               Value           =   -1  'True
               Width           =   1260
            End
         End
         Begin VB.Frame Frame18 
            Caption         =   "Orden"
            Height          =   1770
            Left            =   120
            TabIndex        =   146
            Top             =   5550
            Width           =   1650
            Begin VB.OptionButton optOrdenCargos 
               Caption         =   "Fecha"
               Height          =   270
               Index           =   3
               Left            =   105
               TabIndex        =   149
               ToolTipText     =   "Mostrar cargos ordenados por fecha"
               Top             =   405
               Value           =   -1  'True
               Width           =   1260
            End
            Begin VB.OptionButton optOrdenCargos 
               Caption         =   "Concepto"
               Height          =   345
               Index           =   4
               Left            =   105
               TabIndex        =   148
               ToolTipText     =   "Mostrar cargos ordenados por conepto de facturación"
               Top             =   750
               Width           =   1185
            End
            Begin VB.OptionButton optOrdenCargos 
               Caption         =   "Cantidad"
               Height          =   345
               Index           =   5
               Left            =   105
               TabIndex        =   147
               ToolTipText     =   "Mostrar cargos ordenados por departamento"
               Top             =   1140
               Width           =   1425
            End
         End
         Begin VB.TextBox txtDescuento 
            Alignment       =   1  'Right Justify
            BorderStyle     =   0  'None
            ForeColor       =   &H00FF0000&
            Height          =   300
            Left            =   -74865
            MaxLength       =   15
            TabIndex        =   145
            Top             =   900
            Visible         =   0   'False
            Width           =   1365
         End
         Begin VB.ComboBox cboPaquetes 
            Height          =   315
            ItemData        =   "frmFacturacion.frx":5550
            Left            =   -67155
            List            =   "frmFacturacion.frx":5552
            Style           =   2  'Dropdown List
            TabIndex        =   144
            Top             =   450
            Visible         =   0   'False
            Width           =   2795
         End
         Begin VB.TextBox txtCantidadPaquete 
            Alignment       =   1  'Right Justify
            BorderStyle     =   0  'None
            ForeColor       =   &H00FF0000&
            Height          =   300
            Left            =   -74820
            MaxLength       =   9
            TabIndex        =   143
            Top             =   1290
            Visible         =   0   'False
            Width           =   1365
         End
         Begin MSHierarchicalFlexGridLib.MSHFlexGrid grdCargos 
            Height          =   5340
            Left            =   -74970
            TabIndex        =   165
            Top             =   75
            Width           =   11760
            _ExtentX        =   20743
            _ExtentY        =   9419
            _Version        =   393216
            Cols            =   45
            GridColor       =   12632256
            _NumberOfBands  =   1
            _Band(0).Cols   =   45
         End
         Begin MSHierarchicalFlexGridLib.MSHFlexGrid grdPagos 
            Height          =   5350
            Left            =   30
            TabIndex        =   166
            Top             =   90
            Width           =   11760
            _ExtentX        =   20743
            _ExtentY        =   9446
            _Version        =   393216
            Cols            =   7
            GridColor       =   12632256
            FormatString    =   "|Concepto del pago|Fecha|Recivo|Cantidad|Moneda|Factura"
            _NumberOfBands  =   1
            _Band(0).Cols   =   7
         End
         Begin VB.Label Label57 
            Alignment       =   2  'Center
            AutoSize        =   -1  'True
            Caption         =   "A"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H00000080&
            Height          =   195
            Index           =   16
            Left            =   -70600
            TabIndex        =   362
            Top             =   5520
            Width           =   165
         End
         Begin VB.Shape Shape3 
            BackColor       =   &H00FFFFFF&
            FillColor       =   &H00FFFFFF&
            FillStyle       =   0  'Solid
            Height          =   225
            Index           =   4
            Left            =   -70660
            Top             =   5505
            Width           =   255
         End
         Begin VB.Label Label57 
            Alignment       =   2  'Center
            AutoSize        =   -1  'True
            Caption         =   "Cargos surtidos de consignación"
            Height          =   195
            Index           =   17
            Left            =   -70365
            TabIndex        =   361
            Top             =   5520
            Width           =   2325
         End
         Begin VB.Label lblMensaje 
            Caption         =   "Presione <F10> para asignar este descuento a toda la cuenta"
            Height          =   210
            Left            =   -67680
            TabIndex        =   167
            Top             =   5520
            Visible         =   0   'False
            Width           =   4440
         End
         Begin VB.Label Label57 
            Alignment       =   2  'Center
            AutoSize        =   -1  'True
            Caption         =   "Precio modificado"
            Height          =   195
            Index           =   2
            Left            =   -73605
            TabIndex        =   301
            Top             =   5520
            Width           =   1275
         End
         Begin VB.Shape Shape3 
            BackColor       =   &H00FFFFFF&
            FillColor       =   &H00C0E0FF&
            FillStyle       =   0  'Solid
            Height          =   225
            Index           =   3
            Left            =   -72285
            Top             =   5505
            Width           =   255
         End
         Begin VB.Label Label57 
            Alignment       =   2  'Center
            AutoSize        =   -1  'True
            Caption         =   "A"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            ForeColor       =   &H00FF0000&
            Height          =   195
            Index           =   4
            Left            =   -74835
            TabIndex        =   303
            Top             =   5520
            Width           =   165
         End
         Begin VB.Label Label57 
            Alignment       =   2  'Center
            AutoSize        =   -1  'True
            Caption         =   "Fecha modificada"
            Height          =   195
            Index           =   3
            Left            =   -71985
            TabIndex        =   302
            Top             =   5520
            Width           =   1275
         End
         Begin VB.Label Label57 
            Alignment       =   2  'Center
            AutoSize        =   -1  'True
            Caption         =   "Excluido"
            Height          =   195
            Index           =   1
            Left            =   -74580
            TabIndex        =   300
            Top             =   5520
            Width           =   615
         End
         Begin VB.Shape Shape3 
            BackColor       =   &H00FFFFFF&
            FillColor       =   &H00FFFFFF&
            FillStyle       =   0  'Solid
            Height          =   225
            Index           =   1
            Left            =   -74880
            Top             =   5505
            Width           =   255
         End
         Begin VB.Shape Shape3 
            BackColor       =   &H00C0E0FF&
            BackStyle       =   1  'Opaque
            FillColor       =   &H00C0FFFF&
            FillStyle       =   0  'Solid
            Height          =   225
            Index           =   2
            Left            =   -73920
            Top             =   5505
            Width           =   255
         End
      End
      Begin VB.CommandButton cmdGrabarControl 
         Height          =   465
         Left            =   -70035
         MaskColor       =   &H00FFFFFF&
         Picture         =   "frmFacturacion.frx":5554
         Style           =   1  'Graphical
         TabIndex        =   235
         ToolTipText     =   "Guardar el control de aseguradora"
         Top             =   9335
         Width           =   495
      End
      Begin VB.Frame freSeleccionaCliente 
         Caption         =   "Seleccionar cliente para facturar"
         Height          =   2170
         Left            =   -66615
         TabIndex        =   168
         Top             =   4400
         Width           =   3465
         Begin VB.ListBox lstFPBuscaCliente 
            Height          =   1035
            Left            =   75
            TabIndex        =   176
            Top             =   1100
            Width           =   3300
         End
         Begin VB.TextBox txtFPBuscaCliente 
            Enabled         =   0   'False
            Height          =   315
            Left            =   75
            TabIndex        =   175
            Top             =   750
            Width           =   3300
         End
         Begin VB.OptionButton optTipoCliente 
            Caption         =   "Mismo"
            Height          =   195
            Index           =   0
            Left            =   100
            TabIndex        =   174
            Top             =   250
            Value           =   -1  'True
            Width           =   1000
         End
         Begin VB.OptionButton optTipoCliente 
            Caption         =   "Convenio"
            Height          =   195
            Index           =   1
            Left            =   100
            TabIndex        =   173
            Top             =   510
            Width           =   1000
         End
         Begin VB.OptionButton optTipoCliente 
            Caption         =   "Externo"
            Height          =   195
            Index           =   5
            Left            =   2480
            TabIndex        =   172
            Top             =   510
            Width           =   890
         End
         Begin VB.OptionButton optTipoCliente 
            Caption         =   "Interno"
            Height          =   195
            Index           =   4
            Left            =   2480
            TabIndex        =   171
            Top             =   250
            Width           =   890
         End
         Begin VB.OptionButton optTipoCliente 
            Caption         =   "Médico"
            Height          =   195
            Index           =   3
            Left            =   1270
            TabIndex        =   170
            Top             =   510
            Width           =   1040
         End
         Begin VB.OptionButton optTipoCliente 
            Caption         =   "Empleado"
            Height          =   195
            Index           =   2
            Left            =   1270
            TabIndex        =   169
            Top             =   250
            Width           =   1040
         End
      End
      Begin VB.Frame Frame13 
         Caption         =   "Facturación parcial"
         Height          =   3225
         Left            =   -74910
         TabIndex        =   191
         Top             =   6550
         Width           =   8250
         Begin VB.CommandButton cmdEliminaDonativo 
            Height          =   495
            Left            =   660
            Picture         =   "frmFacturacion.frx":5896
            Style           =   1  'Graphical
            TabIndex        =   366
            ToolTipText     =   "Elimina factura parcial (-)"
            Top             =   480
            UseMaskColor    =   -1  'True
            Width           =   495
         End
         Begin VB.CommandButton cmdAgregaDonativo 
            Height          =   495
            Left            =   160
            MaskColor       =   &H00FFFFFF&
            Picture         =   "frmFacturacion.frx":5D88
            Style           =   1  'Graphical
            TabIndex        =   365
            ToolTipText     =   "Agrega factura parcial (+)"
            Top             =   480
            UseMaskColor    =   -1  'True
            Width           =   495
         End
         Begin VB.Frame fraParametrosFP 
            Caption         =   "Concepto"
            Height          =   705
            Left            =   1230
            TabIndex        =   192
            Top             =   330
            Visible         =   0   'False
            Width           =   6915
            Begin VB.ComboBox cboCFParaFacturaParcial 
               Height          =   315
               Left            =   90
               Sorted          =   -1  'True
               Style           =   2  'Dropdown List
               TabIndex        =   194
               Top             =   210
               Width           =   4900
            End
            Begin VB.TextBox txtCantidadFP 
               Alignment       =   1  'Right Justify
               CausesValidation=   0   'False
               Height          =   315
               Left            =   5730
               TabIndex        =   193
               Text            =   "0.00"
               Top             =   210
               Width           =   1080
            End
            Begin VB.Label Label28 
               AutoSize        =   -1  'True
               Caption         =   "Cantidad"
               Height          =   195
               Left            =   5055
               TabIndex        =   195
               Top             =   270
               Width           =   630
            End
         End
         Begin MSHierarchicalFlexGridLib.MSHFlexGrid MSFGFacturasParciales 
            Height          =   1920
            Left            =   120
            TabIndex        =   196
            Top             =   1140
            Width           =   8025
            _ExtentX        =   14155
            _ExtentY        =   3387
            _Version        =   393216
            ForeColor       =   0
            Cols            =   11
            FixedCols       =   3
            GridColor       =   12632256
            FormatString    =   "||Facturado a|Cantidad|Iva|Total||||Dlls|"
            _NumberOfBands  =   1
            _Band(0).Cols   =   11
            _Band(0).TextStyleBand=   0
            _Band(0).TextStyleHeader=   0
         End
         Begin VB.Label lblMsgConcFact 
            Alignment       =   2  'Center
            Caption         =   "Para poder realizar una factura parcial es necesario que configure el parámetro concepto de facturación para facturas parciales."
            ForeColor       =   &H00000080&
            Height          =   495
            Left            =   2640
            TabIndex        =   197
            Top             =   195
            Visible         =   0   'False
            Width           =   5055
         End
      End
      Begin VB.Frame Frame11 
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   9.75
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         Height          =   3250
         Left            =   -66615
         TabIndex        =   54
         Top             =   6520
         Width           =   3465
         Begin VB.CommandButton cmdDescuentoPuntos 
            Caption         =   "Aplicar puntos de cliente leal"
            Height          =   350
            Left            =   90
            TabIndex        =   363
            ToolTipText     =   "Aplicación/Desaplicación de puntos de cliente leal"
            Top             =   2880
            Width           =   2600
         End
         Begin VB.TextBox txtFPNotasCredito 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Left            =   1850
            Locked          =   -1  'True
            TabIndex        =   236
            ToolTipText     =   "Total notas de crédito"
            Top             =   2090
            Width           =   1500
         End
         Begin VB.CommandButton cmdDevolucionesDinero 
            Height          =   350
            Left            =   3000
            Picture         =   "frmFacturacion.frx":627A
            Style           =   1  'Graphical
            TabIndex        =   190
            ToolTipText     =   "Devoluciones de dinero"
            Top             =   2830
            Width           =   350
         End
         Begin VB.TextBox txtFPTotalFactura 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Left            =   1850
            Locked          =   -1  'True
            TabIndex        =   60
            ToolTipText     =   "Total del presupuesto"
            Top             =   1350
            Width           =   1500
         End
         Begin VB.TextBox txtFPPagos 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Left            =   1850
            Locked          =   -1  'True
            TabIndex        =   59
            ToolTipText     =   "Total de descuentos"
            Top             =   1720
            Width           =   1500
         End
         Begin VB.TextBox txtFPSubtotal 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Left            =   1850
            Locked          =   -1  'True
            TabIndex        =   58
            ToolTipText     =   "Subtotal del presupuesto"
            Top             =   610
            Width           =   1500
         End
         Begin VB.TextBox txtFPDescuentos 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Left            =   1850
            Locked          =   -1  'True
            TabIndex        =   57
            ToolTipText     =   "Total de descuentos"
            Top             =   240
            Width           =   1500
         End
         Begin VB.TextBox txtFPIVA 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Left            =   1850
            Locked          =   -1  'True
            TabIndex        =   56
            ToolTipText     =   "Iva del presupuesto"
            Top             =   980
            Width           =   1500
         End
         Begin VB.TextBox txtFPTotalPagar 
            Alignment       =   1  'Right Justify
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   8.25
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   300
            Left            =   1850
            Locked          =   -1  'True
            TabIndex        =   55
            ToolTipText     =   "Total del presupuesto"
            Top             =   2460
            Width           =   1500
         End
         Begin VB.Label Label60 
            AutoSize        =   -1  'True
            Caption         =   "Descuentos"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   240
            Index           =   2
            Left            =   90
            TabIndex        =   307
            Top             =   270
            Width           =   1245
         End
         Begin VB.Label Label60 
            AutoSize        =   -1  'True
            Caption         =   "Subtotal"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   240
            Index           =   1
            Left            =   90
            TabIndex        =   306
            Top             =   640
            Width           =   870
         End
         Begin VB.Label Label60 
            Caption         =   "Notas de crédito"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   255
            Index           =   6
            Left            =   90
            TabIndex        =   237
            Top             =   2113
            Width           =   1755
         End
         Begin VB.Label Label60 
            Caption         =   "Total factura"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   250
            Index           =   3
            Left            =   90
            TabIndex        =   64
            Top             =   1375
            Width           =   1545
         End
         Begin VB.Label Label60 
            Caption         =   "Pagos"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   250
            Index           =   5
            Left            =   90
            TabIndex        =   63
            Top             =   1745
            Width           =   915
         End
         Begin VB.Label Label60 
            Caption         =   "IVA"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   250
            Index           =   0
            Left            =   90
            TabIndex        =   62
            Top             =   1005
            Width           =   765
         End
         Begin VB.Label Label60 
            Caption         =   "Total a pagar"
            BeginProperty Font 
               Name            =   "MS Sans Serif"
               Size            =   9.75
               Charset         =   0
               Weight          =   700
               Underline       =   0   'False
               Italic          =   0   'False
               Strikethrough   =   0   'False
            EndProperty
            Height          =   250
            Index           =   4
            Left            =   90
            TabIndex        =   61
            Top             =   2485
            Width           =   1545
         End
      End
      Begin VB.Label lblCuenta 
         AutoSize        =   -1  'True
         Caption         =   "Observaciones "
         Height          =   195
         Index           =   2
         Left            =   -74880
         TabIndex        =   371
         ToolTipText     =   "Número de cuenta"
         Top             =   4995
         Width           =   1110
      End
      Begin VB.Label lblCuenta 
         AutoSize        =   -1  'True
         Caption         =   "Observaciones "
         Height          =   195
         Index           =   1
         Left            =   -74880
         TabIndex        =   367
         ToolTipText     =   "Número de cuenta"
         Top             =   4995
         Width           =   1110
      End
      Begin VB.Label Label57 
         AutoSize        =   -1  'True
         Caption         =   "Canceladas"
         ForeColor       =   &H00000000&
         Height          =   195
         Index           =   7
         Left            =   -74520
         TabIndex        =   353
         Top             =   8925
         Width           =   855
      End
      Begin VB.Label Label57 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         AutoSize        =   -1  'True
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         Caption         =   " A "
         ForeColor       =   &H000000FF&
         Height          =   225
         Index           =   6
         Left            =   -74880
         TabIndex        =   352
         Top             =   8910
         Width           =   255
      End
      Begin VB.Label Label57 
         AutoSize        =   -1  'True
         Caption         =   "Cancelación rechazada"
         ForeColor       =   &H00000000&
         Height          =   195
         Index           =   15
         Left            =   -74520
         TabIndex        =   351
         Top             =   9705
         Width           =   1680
      End
      Begin VB.Label Label57 
         AutoSize        =   -1  'True
         Caption         =   "Pendientes de autorización de cancelación"
         ForeColor       =   &H00000000&
         Height          =   195
         Index           =   12
         Left            =   -74520
         TabIndex        =   350
         Top             =   9445
         Width           =   3060
      End
      Begin VB.Label Label57 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         AutoSize        =   -1  'True
         BackColor       =   &H0080FFFF&
         BorderStyle     =   1  'Fixed Single
         Caption         =   " A "
         ForeColor       =   &H80000008&
         Height          =   225
         Index           =   10
         Left            =   -66120
         TabIndex        =   349
         Top             =   8910
         Width           =   255
      End
      Begin VB.Label Label57 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         AutoSize        =   -1  'True
         BackColor       =   &H00C0E0FF&
         BorderStyle     =   1  'Fixed Single
         Caption         =   " A "
         ForeColor       =   &H000000FF&
         Height          =   225
         Index           =   14
         Left            =   -74880
         TabIndex        =   348
         Top             =   9173
         Width           =   255
      End
      Begin VB.Label Label57 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         AutoSize        =   -1  'True
         BackColor       =   &H000080FF&
         BorderStyle     =   1  'Fixed Single
         Caption         =   " A "
         ForeColor       =   &H00FFFFFF&
         Height          =   225
         Index           =   13
         Left            =   -74880
         TabIndex        =   347
         Top             =   9436
         Width           =   255
      End
      Begin VB.Label Label57 
         Alignment       =   2  'Center
         Appearance      =   0  'Flat
         AutoSize        =   -1  'True
         BackColor       =   &H000000FF&
         BorderStyle     =   1  'Fixed Single
         Caption         =   " A "
         ForeColor       =   &H00FFFFFF&
         Height          =   225
         Index           =   9
         Left            =   -74880
         TabIndex        =   346
         Top             =   9700
         Width           =   255
      End
      Begin VB.Label Label57 
         Alignment       =   2  'Center
         AutoSize        =   -1  'True
         Caption         =   " Facturas pendientes de timbre fiscal"
         ForeColor       =   &H00000000&
         Height          =   195
         Index           =   11
         Left            =   -65820
         TabIndex        =   310
         Top             =   8925
         Width           =   2595
      End
      Begin VB.Label lblMensajeReqAut 
         ForeColor       =   &H000000FF&
         Height          =   435
         Index           =   36
         Left            =   -74880
         TabIndex        =   308
         Top             =   9300
         Visible         =   0   'False
         Width           =   5085
      End
      Begin VB.Label Label57 
         AutoSize        =   -1  'True
         Caption         =   "Pendientes de cancelar ante el SAT"
         ForeColor       =   &H00000000&
         Height          =   195
         Index           =   8
         Left            =   -74520
         TabIndex        =   305
         Top             =   9185
         Width           =   2595
      End
      Begin VB.Label lblCancelada 
         Alignment       =   2  'Center
         BackColor       =   &H80000005&
         BorderStyle     =   1  'Fixed Single
         Caption         =   "El total de la factura es mayor a la suma asegurada"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   9.75
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H000000FF&
         Height          =   900
         Index           =   2
         Left            =   -70680
         TabIndex        =   178
         Top             =   8940
         Visible         =   0   'False
         Width           =   2850
      End
      Begin VB.Label lblCancelada 
         Alignment       =   2  'Center
         BorderStyle     =   1  'Fixed Single
         Caption         =   "Cancelada"
         BeginProperty Font 
            Name            =   "MS Sans Serif"
            Size            =   8.25
            Charset         =   0
            Weight          =   700
            Underline       =   0   'False
            Italic          =   0   'False
            Strikethrough   =   0   'False
         EndProperty
         ForeColor       =   &H000000FF&
         Height          =   270
         Index           =   1
         Left            =   -70600
         TabIndex        =   177
         Top             =   7080
         Visible         =   0   'False
         Width           =   2700
      End
   End
End
Attribute VB_Name = "frmFacturacion"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'-------------------------------------------------------------------------------------
'| Nombre del Proyecto      : Caja
'| Nombre del Formulario    : frmFacturacion
'-------------------------------------------------------------------------------------
'| Análisis y Diseño        : Rodolfo Ramos G.
'| Autor                    : Rodolfo Ramos G.
'| Fecha de Creación        : 22/Mar/2001
'| Modificó                 : Nombre(s)
'-------------------------------------------------------------------------------------
Option Explicit

Const cintTipoDocumento = 8                     'Nota de crédito
Const clbytColumnaExclusion As Byte = 21
Const clbytColumnaUrgente As Byte = 23
Const cintColCuenta = 42                        'Cuenta a la que pertenece el cargo, esto es de utilidad para cuando se usan grupos de cuentas
'Columnas del grid de cargos sin formato moneda
Const cintColPrecioCargo = 43
Const cintColIVACargo = 44
Const cintColDescuentoCargo = 45
Const cintColPrecioPaquete = 46
Const cintColIVAPaquete = 47
Const cintColPrecioCantidad = 48
Const cintColTotalCargo = 49
Const cintColDescuentopaquete = 50
Const cintColCantidadPaquete = 51               'Para la cantidad del paquete asignado
Const cintColMarcadoParaFacturar = 52           'Para los cargos que se seleccionaron para facturar al paciente CS
Const cintColConceptoHospital = 56
Const cintColCantidadPago = 13

Const cintColConceptoExento = 59
Const cintColExcluirDescuento = 62              'Indica si el artículo se excluye del cálculo del descuento especial, 1 = si se excluye, 0 = no se excluye.
Const cintColNombreCarta = 65                   '18084
Const cintColCveCarta = 66

'Número de opción para marcar o desmarcar datos de seguro:
Const clngNumOpcionDatosSeguroCaja = 58
Const clngNumOpcionDatosSeguroCredito = 67

'Número de opción para hacer descuentos en la cuenta:
Const clngNumOpcionDesctoCaja = 1917
Const clngNumOpcionDesctoCredito = 607

'La clave de la empresa y es publica para que la vea tambíen la pantalla de comparación de cuentas con el paquete
Public vgintEmpresa As Integer
Public vlstrDatosPaciente As String
Public vllngNumeroOpcion As Long

Private lblnCambiaNombreCargos As Boolean 'Sirva para saber si se va a cambiar el nombre de los cargos. Ej. Como sucede con PCE
Private vgblnCuentaBloqueada As Boolean
Private vgrptReporte As CRAXDRT.Report
Private vgrptReporteHonorario As CRAXDRT.Report

Private Type typFacturas
    lngidfactura As Long
    strTipoFactura As String 'I = interno, E = externos, G = grupos
    intEdoTimbre As Integer '0 = timbre OK, 1 = pendiente de timbre por error no controlado, 2 = no se timbro, error controlado
    strRFCTemp As String 'este RFC es para el envio del CFDi por correo(abusado compa)
    strFolioFactura As String 'Folio de la factura
    blnTimbrar As Boolean 'se debe de timbrar o no se debe de timbrar
End Type

Private Type typCuentaPaquete
    lngCuenta As Long
    lngPaquete As Long
End Type
Dim vlaryCuentaPaquete() As typCuentaPaquete
Dim arrCuentaPaquetes() As typCuentaPaquete

Private Type typPaquetesPaciente
    lngPaquete As Long
    intCantidad As Integer
End Type
Dim aryPaquetesPaciente() As typPaquetesPaciente

Private Type typCargosSeleccionados
    lngCargo As Long
End Type
Dim aryCargosSeleccionados() As typCargosSeleccionados

' Arreglo del las urgencias
Dim aUrgencias() As typUrgencias

' Arreglo para información de grabado de los ingresos en la poliza (y su tipo de dato)
Private Type typCargosPoliza
    lngCuentaIngreso As Long
    lngCuentaDescuento As Long
    dblCantidadIngreso As Double
    dblIVADescuento As Double
    dblCantidadDescuento As Double
    lngConceptoFacturacion As Long
    lngDepartamento As Long
    blnConceptoNormal As Boolean 'indica si el tipo de concepto es NORMAL(se usa para prorratear el descuento especial)
    blnAjustadoParaCuadre As Boolean
End Type
Dim aCPCargosPoliza() As typCargosPoliza

'Tipo de dato y colección para identificar que paquetes tiene cada cuenta,
'y asi poder totalizar los paquetes cuando se trata de un grupo
Private Type typPaquetesEnCuenta
    lngCuenta As Long
    lngPaquete As Long
End Type
Dim audtPaquetesEnCuenta() As typPaquetesEnCuenta ' "udt" User defined type

Private Type typNotasCredito
    lngCveConcepto As Long
    dblSubTotal As Double
    dblIVA As Double
    lngCuentaDescuento As Long
    lngCuentaIngreso As Long
End Type
Dim aNotasCredito() As typNotasCredito

Dim alstrParametrosSalida() As String
Dim agstrEstadoComponentes() As String
Dim alngFacturasParciales() As Long             'Para guardar los consecutivos de las facturas parciales que se descontarán en la factura de la empresa
Dim alngNotasPaciente() As Long
Dim vlaryResultados() As String
Dim aFormasPago() As FormasPago

Dim rsInformacionFaltantePCE As New ADODB.Recordset
Dim rsConsultaFacturas As New ADODB.Recordset
Dim rsConceptosSeguro As New ADODB.Recordset    'Contiene las claves y descripciones de los conceptos de seguro
Dim rsControlSeguro As New ADODB.Recordset      'Control de seguro del paciente
Dim rsFechaIngreso As New ADODB.Recordset       'RS para obtener la fecha de ingreso que tendrá la factura
Dim rsImpresoras As New ADODB.Recordset
Dim rsTemp As New ADODB.Recordset

Dim blnCargosSinFacturarPaciente As Boolean     'Para saber si hay cargos que no se han tomado en cuenta para facturar al paciente de convenio, cuando los cálculos se hacen en base a los cargos
Dim vlblnVerificarRequisiciones As Boolean      'Para verificar o no las requisiones pendientes de surtir en la cuenta del paciente
Dim vlblnDesactivarExterno As Boolean           'Para desactivar o no a los externos a los que se les facture y cierre su cuenta
Dim lblnDatosSeguroModificados As Boolean       'Para saber cuando se modificaron y no se guardaron los datos de seguro (Autoriza, Tipo póliza, Número de póliza, Número de control)
Dim blnCargosNoSeleccionados As Boolean
Dim blnCalcularEnBaseACargos As Boolean
Public blnCalcularEnBaseACargosTemp As Boolean  '(Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim lblnTienePermisoLiquidar As Boolean
Dim vgBlnCambioDatosFiscales As Boolean         'Fueron modificados los datos fiscales del paciente
Dim vlblncontrolaseguradora As Boolean
Dim blnExcedenteHonorarios As Boolean
Dim vlblnEjecutoActivate As Boolean
Dim blnCargosSinFacturar As Boolean             'Para saber si hay cargos que no se seleccionaron para facturar
Dim vgblnEditaDescuento As Boolean
Dim blnErrorManejoFolio As Boolean              'Para los folios de las notas de crédito
Dim vgblnCancelacionFP As Boolean               'Para saber si se va a salir de toda la operación o solo de la operación de las facturas parciales
Dim lblnModificaSeguro As Boolean               'Para saber si se habilita el marcado o desmarcado de los datos de seguro (Autoriza, Tipo póliza, Número de póliza, Número de control)
Dim lblnPermisoEstado As Boolean                'Indica si el usuario tiene permisos para extraer el estado de cuenta
Dim vgblnPrimeraVez As Boolean                  'Sirve para saber si se va a validar el click del option button Consolidada o no
Dim lblnHacerChange As Boolean                  'Para saber si se debe ejecutar el txtSumaAsegurada_Change
Dim vlblnFacturado As Boolean
Dim blnParciales As Boolean                     'Para saber si hay facturas parciales de conceptos de seguro pendientes de descontar a la empresa
Dim vgblnPesos As Boolean

'Clave de los conceptos
Dim blnConceptoCoaseguroAdicional As Boolean
Dim blnConceptoCoaseguroMedico As Boolean
Dim blnConceptoExcedenteDeIVA As Boolean
Dim blnConceptoDeducible As Boolean
Dim blnConceptoCoaseguro As Boolean
Dim blnConceptoCopago As Boolean

Dim lblnCoaseguroAdicionalFacturado As Boolean
Dim lblnCoaseguroMedicoFacturado As Boolean
Dim lblnExcedenteFacturado As Boolean
Dim lblnDeducibleFacturado As Boolean
Dim lblnCoaseguroFacturado As Boolean
Dim lblnCopagoFacturado As Boolean

Dim strImpresoraNotas As String
Dim strImpresoraFacturas As String

'Variables para los datos de la factura del PACIENTE
Dim vgstrFacturaRFC As String
Dim vgstrFacturaNombre As String
Dim vgstrFacturaDireccion As String             'Se tratará como el campo nuevo "Calle" debido al desglose por la facturación electrónica.
Dim vgstrFacturaTelefono As String
Dim vgstrFacturaColonia As String
Dim vglngFacturaCiudad As Long
Dim vgstrFacturaCodigoPostal As String
Dim vgstrFacturaNumExterior As String
Dim vgstrFacturaNumInterior As String
Dim vgstrEstadoManto As String
Dim lstrDatosFiscalesCorreo As String
Dim vgblnBloqueoPostergacionDefinitivo As Boolean

'Cargos excluídos
Dim ldblImporteExcluidoNoFact As Double         'Para el importe de los cargos excluídos no facturados
Dim ldblDescuentoExcluidoNoFact As Double       'Para el descuento de los cargos excluídos no facturados
Dim ldblIVAExcluidoNoFact As Double             'Para el IVA de los cargos excluidos no facturados

'Subtotales y totales
Dim vgdblTotalPagarPesosPaciente As Double      'Variable para saber el total de la factura (de paciente o de Empresa) en Pesos aún y cuando sea la factura en dolares
Dim vldblsubtotalNogravado As Double
Dim vldblsubtotalExento As Double
Dim vldblsubtotalgravado As Double
Dim vldblsubtotalgravadoSinRound As Double
Dim ldblSTConvenioNoFact As Double              'Subtotal no facturado de la cuenta de convenio
Dim dblSTCargosConvenio As Double               'Subtotal de los cargos (no excluídos) de toda la cuenta (facturados y no facturados)
Dim dblSubtotalGravadoP As Double               'Subtotal gravado en pesos
Dim ldblSTSelConvenio As Double                 'Subtotal de los cargos seleccionados de la cuenta de convenio
Dim dblTotalFacturaP As Double
Dim dblDescuentoCargosConvenio As Double        'Descuento de los cargos (no excluídos) de toda la cuenta (facturados y no facturados)
Dim ldblTSelConvenio As Double                  'Total de los cargos seleccionados de la cuenta de convenio
Dim ldblTotalCargosConvenioSinExcluidos As Double   'Total de los cargos del convenio(no excluidos), puede incluir descuento según el valor de vlintbitCalculaConcSegconDescuento, puede incluir IVA según el valor de vlintbitCalculaConceptoSeguroconIVA
Dim dblTotalFactura As Double
Dim dblTotalFacturaPesos As Double
Dim dblImporteFacturaExcluidosDE As Double

'Descuentos
Dim ldblDescuentosFactura As Double
Dim vldbldescuentogravado As Double
Dim vldbldescuentoexento As Double
Dim vldbldescuentototal As Double
Dim ldblDescuentos As Double
Dim ldblDescuentosExentos As Double
Dim ldblDesctoExcedente As Double               'Descuento sobre excedente en suma asegurada
Dim ldblDesctoDeducible As Double               'Descuento sobre deducible
Dim ldblDesctoCoaseguro As Double               'Descuento sobre coaseguro
Dim ldblDesctoCoaseguroMedico As Double         'Descuento sobre coaseguro médico
Dim ldblDesctoCoaseguroAdicional As Double      'Descuento sobre coaseguro adicional
Dim ldblDesctoCopago As Double                  'Descuento sobre copago
Dim dblDescuentoEspecial As Double              'Descuento especial(pueden ser dlls o pesos)
Dim dblDescuentoEspecialPorcentaje As Double
Dim vldbldescuentototalP As Double
Dim dblDescuentoFacturaExcluidoDE As Double

'IVA's
Dim ldblIVACargosConvenioNoFact As Double       'IVA de los cargos que cubre la aseguradora (no facturados)
Dim ldblIVAExcluidoSeleccionado As Double       'Para el IVA de los cargos excluídos seleccionados para facturar
Dim dblIVACoaseguroAdicional As Double
Dim ldblIVACargosSelConvenio As Double          'Esta variable es para los cargos seleccionados que cubre el convenio (cargos no facturados)
Dim dblIVACoaseguroMedico As Double
Dim dblIVACargosConvenio As Double              'IVA de los cargos del convenio (facturados y no facturados)
Dim dblExcedenteDeIVA As Double                 'IVA que se cobró de más al paciente
Dim dblIVAExcedente As Double
Dim dblIVADeducible As Double
Dim dblIVACoaseguro As Double
Dim dblIVAPolizaPCE As Double                   'IVA para la póliza de facturas de la empresa configurada como PCE
Dim dblIVAPaciente As Double
Dim dblIVACopago As Double
Dim dblIVAEXE As Double
Dim dblIVADEE As Double
Dim dblIVACOE As Double
Dim dblIVACME As Double
Dim dblIVACAE As Double
Dim dblIVACPE As Double
Dim dblIVAEX As Double
Dim dblIVADE As Double
Dim dblIVACO As Double
Dim dblIVACM As Double
Dim dblIVACA As Double
Dim dblIVACP As Double
Dim dblIVAP As Double                           'IVA de la factura en pesos
Dim ldblIVACargosSelConvenioExDE As Double      'IVA de los cargos seleccionados que cubre el convenio (cargos no facturados) Excluidos del descuento especial
Dim ldblIVACargosSelConvenioNoExDE As Double    ''IVA de los cargos seleccionados que cubre el convenio (cargos no facturados) NO Excluidos del descuento especial

'Importes gravados
Dim ldblImporteNoGravaSelConvenio As Double     'Importe no gravado de los cargos seleccionados para facturar
Dim ldblCoaseguroAdicionalGrava As Double       'Importe del coaseguro adicional que causa IVA
Dim ldblImporteGravaSelConvenio As Double       'Importe que grava de los cargos seleccionados para facturar de la cuenta de convenio
Dim ldblCoaseguroMedicoGrava As Double          'Importe del coaseguro médico que causa IVA
Dim dblImporteGravaConvenio As Double           'Importe gravado de la cuenta del convenio (facturado y no facturado)
Dim ldblExcedenteGrava As Double                'Importe del excedente en suma asegurada que causa IVA
Dim ldblDeducibleGrava As Double                'Importe del deducible que causa IVA
Dim ldblCoaseguroGrava As Double                'Importe del coaseguro que causa IVA
Dim ldblCopagoGrava As Double                   'Importe del copago que causa IVA

Dim ldblImporteNoGravaSelConvenioExDE As Double 'Importe no gravado de los cargos seleccionados para facturar Excluidos del descuento especial
Dim ldblImporteGravaSelConvenioExDE             'Importe que grava de los cargos seleccionados para facturar de la cuenta de convenio Excluidos del descuento especial
Dim ldblImporteNoGravaSelConvenioNoExDE As Double 'Importe no gravado de los cargos seleccionados para facturar No Excluidos del descuento especial
Dim ldblImporteExentoSelConvenio As Double      'Importe exento de los cargos seleccionados para facturar
Dim ldblImporteNoGravaSelConvenioNoExDE_AntesDE As Double   'Importe no gravado de los cargos seleccionados para facturar No Excluidos antes del descuento especial


'Honorarios
Dim dblCantidadFactorExHonorarios As Double
Dim ldblHonorariosFacturadosPac As Double       'Para el importe de los honorarios que ya se tomaron en cuanta para calcular los importes de conceptos de seguro en facturas anteriores de pacientes
Dim ldblHonorariosFacturadosEmp As Double       'Para el importe de los honorarios que ya se tomaron en cuanta para calcular los importes de conceptos de seguro en facturas anteriores de empresas
Dim dblCantidadMaximaHonorarios As Double       'Para la cantidad máxima de honorarios médicos
Dim ldblHonorariosAFacturar As Double           'Para el importe de honorarios médicos que se tomaron en cuanta para calcular los importes de los conceptos de seguro, cuando se calculan en base a los cargos seleccionados
Dim dblExcedenteHonorarios As Double
Dim dblFactorHonorarios As Double
Dim dblHonorarios As Double
Dim dblExcedenteH As Double
Dim dblDeducibleH As Double
Dim dblCoaseguroH As Double
Dim dblCoaseguroMH As Double
Dim dblCoaseguroAH As Double
Dim dblCopagoH As Double

'Cantidades facturadas
Dim dblCoaseguroAFacturadoEmpresa As Double
Dim dblCoaseguroMFacturadoEmpresa As Double
Dim dblExcedenteFacturadoEmpresa As Double
Dim dblDeducibleFacturadoEmpresa As Double
Dim dblCoaseguroFacturadoEmpresa As Double
Dim dblCargosFacturadosPaciente As Double       'Importes de los cargos seleccionados para calcular los conceptos de seguro al paciente, cuando se factura en base a cargos
Dim dblCopagoFacturadoEmpresa As Double
Dim dblCoaseguroMFacturado As Double
Dim dblCoaseguroAFacturado As Double
Dim dblExcedenteFacturado  As Double
Dim dblDeducibleFacturado As Double
Dim dblCoaseguroFacturado As Double
Dim dblCopagoFacturado As Double

'Porcentajes
Dim dblPorcentajeCoaseguroMedico As Double
Dim dblPorcentajeEXNota As Double               'porcentaje o cantidad que se descontará en notas de crédito al Excedente
Dim dblPorcentajeDENota As Double               'porcentaje o cantidad que se descontará en notas de crédito al Deducible
Dim dblPorcentajeCONota As Double               'porcentaje o cantidad que se descontará en notas de crédito al Coaseguro
Dim dblPorcentajeCMNota As Double               'porcentaje o cantidad que se descontará en notas de crédito al Coaseguro médico
Dim dblPorcentajeCANota As Double               'porcentaje o cantidad que se descontará en notas de crédito al Coaseguro Adicional
Dim dblPorcentajeCPNota As Double               'porcentaje o cantidad que se descontará en notas de crédito al Copago
Dim dblPorcentajeEXNotaTemp As Double           'Descuento (porcentaje o cantidad) en notas de crédito al Excedente (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim dblPorcentajeDENotaTemp As Double           'Descuento (porcentaje o cantidad) en notas de crédito al Deducible (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim dblPorcentajeCONotaTemp As Double           'Descuento (porcentaje o cantidad) en notas de crédito al Coaseguro (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim dblPorcentajeCMNotaTemp As Double           'Descuento (porcentaje o cantidad) en notas de crédito al Coaseguro médico (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim dblPorcentajeCANotaTemp As Double           'Descuento (porcentaje o cantidad) en notas de crédito al Coaseguro Adicional (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim dblPorcentajeCPNotaTemp As Double           'Descuento (porcentaje o cantidad) en notas de crédito al Copago (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim strTipoDesctoNotaExcedente As String        'Tipo de descuento en notas de crédito para excedente P = porcentaje, C =  cantidad
Dim strTipoDesctoNotaDeducible As String        'Tipo de descuento en notas de crédito para deducible P = porcentaje, C =  cantidad
Dim strTipoDesctoNotaCoaseguro As String        'Tipo de descuento en notas de crédito para coaseguro P = porcentaje, C =  cantidad
Dim strTipoDesctoNotaCoaMedico As String        'Tipo de descuento en notas de crédito para coaseguro medico P = porcentaje, C =  cantidad
Dim strTipoDesctoNotaCoaAdicional As String     'Tipo de descuento en notas de crédito para coaseguro adicional P = porcentaje, C =  cantidad
Dim strTipoDesctoNotaCopago As String           'Tipo de descuento en notas de crédito para copago P = porcentaje, C =  cantidad
Dim strTipoDesctoNotaExcedenteTemp As String        'Tipo de descuento en notas de crédito para excedente P = porcentaje, C =  cantidad
Dim strTipoDesctoNotaDeducibleTemp As String        'Tipo de descuento en notas de crédito para deducible P = porcentaje, C =  cantidad
Dim strTipoDesctoNotaCoaseguroTemp As String        'Tipo de descuento en notas de crédito para coaseguro P = porcentaje, C =  cantidad
Dim strTipoDesctoNotaCoaMedicoTemp As String        'Tipo de descuento en notas de crédito para coaseguro medico P = porcentaje, C =  cantidad
Dim strTipoDesctoNotaCoaAdicionalTemp As String     'Tipo de descuento en notas de crédito para coaseguro adicional P = porcentaje, C =  cantidad
Dim strTipoDesctoNotaCopagoTemp As String           'Tipo de descuento en notas de crédito para copago P = porcentaje, C =  cantidad

'Notas de crédito
Dim lngCuentaPuenteNotasCredito As Long
Dim dblNotasCreditoPaciente As Double           'Para las notas de crédito que se generaron al paciente entes de facturar
Dim dblIVANotasCreditoCS As Double              'Para el IVA de las notas de crédito que se generarán al paciente por conceptos de seguro
Dim dblNotasCreditoCS As Double                 'Para el subtotal de las notas de crédito que se generarán al paciente por conceptos de seguro
Dim intFolioUnico As Long
Dim intSerieUnica As Integer
Dim dblTotalNotaCS As Double                    'Para el total de las notas de crédito

'Límites
Dim dblLimiteNotaEX As Double                   'Para la cantidad límite de descuento para la nota de crédito por Excedente
Dim dblLimiteNotaDE As Double                   'Para la cantidad límite de descuento para la nota de crédito por Deducible
Dim dblLimiteNotaCO As Double                   'Para la cantidad límite de descuento para la nota de crédito por Coaseguro
Dim dblLimiteNotaCM As Double                   'Para la cantidad límite de descuento para la nota de crédito por Coaseguro médico
Dim dblLimiteNotaCA As Double                   'Para la cantidad límite de descuento para la nota de crédito por Coaseguro Adicional
Dim dblLimiteNotaCP As Double                   'Para la cantidad límite de descuento para la nota de crédito por Copago
Dim dblLimiteNotaEXTemp As Double            'Para la cantidad límite de descuento para la nota de crédito por Excedente (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim dblLimiteNotaDETemp As Double            'Para la cantidad límite de descuento para la nota de crédito por Deducible (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim dblLimiteNotaCOTemp As Double            'Para la cantidad límite de descuento para la nota de crédito por Coaseguro (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim dblLimiteNotaCMTemp As Double            'Para la cantidad límite de descuento para la nota de crédito por Coaseguro médico (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim dblLimiteNotaCATemp As Double            'Para la cantidad límite de descuento para la nota de crédito por Coaseguro Adicional (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim dblLimiteNotaCPTemp As Double            'Para la cantidad límite de descuento para la nota de crédito por Copago (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)

Dim dblCantidadMaximaCO As Double
Dim dblExcedenteCS As Double

Dim lngCuentaExcedenteHonorarios As Long
Dim lngCuentaGastosNoDeducibles As Long          'Cuenta para la diferencia del IVA fatura/póliza para PCE
Dim lngNumeroTipoFormatoNotas As Long
Dim lngConsecutivoFactura As Long
Dim llngNumOpcionDescto As Long                 'Número de opción para asignar descuentos en la cuenta, según el modulo
Dim llngCveEmpresaPCE As Long                   'Tiene la clave de la empresa que es Pensiones Civiles del Estado
Dim vllngFormatoaUsar As Long                   'Para saber que formato se va a utilizar
Dim lngCveFormato As Long                       'Para saber el formato que se va a utilizar (relacionado con pvDocumentoDepartamento.intNumFormato)
Dim vgintCveExtra As Long

'Variables para la facturación parcial
Dim vgcolFacturasParciales As Collection
Dim vglngCtaIVAEfectivoFactParc As Long
Dim vglngCtaIVACreditoFactParc As Long
Dim vglngCtaDescuentoFactParc As Long
Dim vglngCtaingresoFactParc As Long

'Claves
Dim lngClaveExIVA As Long
Dim lngClaveEX As Long
Dim lngClaveDE As Long
Dim lngClaveCO As Long
Dim lngClaveCM As Long
Dim lngClaveCA As Long
Dim lngClaveCP As Long

Dim intTipoEmisionComprobante As Integer        'Variable que compara el tipo de formato y folio a utilizar (0 = Error de formato y folios incompatibles, 1 = Físicos, 2 = Digitales)
Dim vgintColumnaFechaHoraCargo As Integer       'Para saber cual es la Columna de la fecha del cargo
Dim lintConceptoLiquidacion As Integer
Dim vgintColumnaDescuento As Integer            'Para saber cual es la Columna de los descuentos
Dim intCantidadIncluida As Long
Dim vgintTipoPaciente As Integer
Dim intMensajeControl As Integer                'Para el número del mensaje que debe mostrarse al validar el controly el parámetro para calcular el importe de los conceptos de seguro en base a los cargos
Dim intCantidadExtra As Integer
Dim intIVATasaHospi As Integer                  '1:Indica que el IVA de los conceptos de seguro que desglosan IVA se desglosa en base a la tasa del hospital, 0:El IVA se prorratea
Dim intIVATasaHospiTemp As Integer           '1:Indica que el IVA de los conceptos de seguro que desglosan IVA se desglosa en base a la tasa del hospital, 0:El IVA se prorratea (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim intCoaseguroPorFactura As Integer        'Indica si se el coaseguro se configurará en cantidad y no será prorrateado, además de que se pueda capturar para cada factura';
Dim intCoaseguroPorFacturaTemp As Integer        'Indica si se el coaseguro se configurará en cantidad y no será prorrateado, además de que se pueda capturar para cada factura';

Dim gintAseguradora As Integer                  'Indica si la empresa del paciente es aseguradora
Dim vgBitExtranjero As Integer
Dim lintContador As Integer
Dim gintConvenio As Integer                     'Indica si es convenio

Dim lintDesglosaIVACoaseguroAdicional As Integer    'Indica si se desglosa IVA para el coaseguro adicional
Dim lintDesglosaIVACoaseguroMedico As Integer       'Indica si se desglosa IVA para el coaseguro médico
Dim lintDesglosaIVAExcedente As Integer             'Indica si se desglosa IVA para el excedente
Dim lintDesglosaIVADeducible As Integer             'Indica si se desglosa IVA para el deducible
Dim lintDesglosaIVACoaseguro As Integer             'Indica si se desglosa IVA para el coaseguro
Dim lintDesglosaIVACopago As Integer                'Indica si se desglosa IVA para el copago
Dim lintDesglosaIVACoaseguroAdicionalTemp As Integer 'Indica si se desglosa IVA para el coaseguro adicional (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim lintDesglosaIVACoaseguroMedicoTemp As Integer    'Indica si se desglosa IVA para el coaseguro médico (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim lintDesglosaIVAExcedenteTemp As Integer          'Indica si se desglosa IVA para el excedente (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim lintDesglosaIVADeducibleTemp As Integer          'Indica si se desglosa IVA para el deducible (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim lintDesglosaIVACoaseguroTemp As Integer          'Indica si se desglosa IVA para el coaseguro (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim lintDesglosaIVACopagoTemp As Integer             'Indica si se desglosa IVA para el copago (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)

Dim lintDesglosaCoaseguroAdicionalTemp As Integer    'Indica si el Coaseguro adicional se desglosa (gravado y no gravado) en la impresión de factura, 1 = se desglosa, 0 = no se desglosa (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim lintDesglosaCoaseguroMedicoTemp As Integer       'Indica si el Coaseguro medico se desglosa (gravado y no gravado) en la impresión de factura, 1 = se desglosa, 0 = no se desglosa (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim lintDesglosaExcedenteTemp As Integer             'Indica si el Excedente se desglosa (gravado y no gravado) en la impresión de factura, 1 = se desglosa, 0 = no se desglosa (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim lintDesglosaDeducibleTemp As Integer             'Indica si el Deducible se desglosa (gravado y no gravado) en la impresión de factura, 1 = se desglosa, 0 = no se desglosa (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim lintDesglosaCoaseguroTemp As Integer             'Indica si el Coaseguro se desglosa (gravado y no gravado) en la impresión de factura, 1 = se desglosa, 0 = no se desglosa (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)
Dim lintDesglosaCopagoTemp As Integer                'Indica si el Copago se desglosa (gravado y no gravado) en la impresión de factura, 1 = se desglosa, 0 = no se desglosa (Variable temporal para cargar lo guardado en la configuracion de parametros de la cuenta)

'Descuento de conceptos de seguro en factura de la aseguradora
Dim vlchrIncluirConceptosSeguro As String
Dim vlchrIncluirConceptosSeguroTemp As String

Dim vlintDesgloseConceptosVICFDI As Integer
Dim vlintDesgloseConceptosVICFDITemp As Integer


Dim intDesglosaIVAPaciente As Integer

Dim rsExcedentes As New ADODB.Recordset
Dim blnExisteExcedente As Boolean

Dim dtmfecha As Date
Dim intTipoCFDFactura As Integer                'Variable que regresa el tipo de CFD de la factura(0 = CFD, 1 = CFDi, 2 = Físico, 3 = Error)
Dim intTipoCFDNota As Integer                   'Variable que regresa el tipo de CFD de la nota (0 = CFD, 1 = CFDi, 2 = Físico, 3 = Error)
Dim vllngEmpresaManejaCargos As Long

Dim blnCambiosEnParametrosCuenta As Boolean     'Variable para saber si hay cambios en la configuracion de parametros de la cuenta

Dim blnHabilitadosConceptos As Boolean          'Variable para guardar el estado de la configuración de los conceptos de seguro, para saber si ya se facturó alguno

Dim vllngCuentaBusqueda  As Long

Public vgLngTipoPacienteSocio As Long           'Variable que contiene el tipo de paciente de socios, relacionado con el tipo de paciente.
Public vlUsaSocios As Boolean                   'Variable que indica si el manejo de socios está habilitado en el sistema
Public vgSocio As Boolean                       'Variable que indica si el paciente a facturar es un Socio
Public vglngCveAddenda As Long                  'Variable que indica la clave de addenda de la empresa aseguradora
Public vglngPaqueteAddenda As Long              'Variable que indica la clave del paquete que activa una addenda
Public vgblnPaqueteAddenda As Boolean           'Variable que indica si la cuenta usa una addenda activada por paquetes
Public vgblnEncontroPaqueteAddenda As Boolean   'Variable que indica si encotnró al menos un paquete necesario para la addenda
Dim vgblnCambioPoliza As Boolean
Dim vlPolizaInicial As Integer

Dim dblTipoCambioCompra As Double   'Tipo cuando se hizo una transferencia a un banco con moneda dlls
Dim vllngIdKardex As Long           'Id. del registro insertado en el kardex del banco cuando se paga por transferencia

Public vglngCveInterfazWS As Long                  'Variable que indica la clave de la interfaz según la empresa convenio
Public vgstrProveedorAXA As String            'Variable que indica la clave del proveedor para AXA
Public vgstrContratoAXA As String            'Variable que indica la clave del contrato para AXA, configurado en el catálogo de equivalencias
Public vglngFolioTransAXA As Long           'Variable que almacena el consecutivo de la transacción con la que se realizó el ingreso por WS de AXA
Public vgstrNumControlXML As String
Public vgstrICDXML As String
Public vgstrNumAutorizacionGralXML As String
Public vgstrNumAutorizacionEspecialXML As String
Public vglngFolioIngresoLogAXA As Long
Public vglngFolioFacturaLogAXA As Long
Public vgstrFolioReceta As String
Public vgstrEquipo As String
Public vgstrIP As String
Public vglngNumPacienteXML As Long
Public vglngCveTipoIngresoXML As Long
Public strRequestXML As String
Public strResponseXML As String
Dim vllngSeleccionadas As Long
Dim vllngSeleccPendienteTimbre As Long

Dim vlblnNoMostrarBarra As Boolean
Dim vlblnValidaCargo As String
Dim rsEsPagoporCancelacion As New ADODB.Recordset
Dim vlintBitSaldarCuentas As Long               'Variable que indica el valor del bit pvConceptoFacturacion.BitSaldarCuentas, que nos dice si la cuenta del ingreso se salda con la del descuento
Dim vlblnCuentaIngresoSaldada As Boolean        'Variable que indica si la cuenta del ingreso fue saldada con la cuenta del descuento
Dim vldblComisionIvaBancaria As Double

Dim vlstrRFCEmpresa As String

Dim vlblnFaltaCtaCosto As Boolean
Dim vlbNombre As Boolean

'Dim vlintbitConcepSeguroSinDescuentoIVA As Integer  'Variable que indica el valor del bitConcepSeguroSinDescuentoIVA que nos dice si el cálculo en porcentaje de los conceptos de seguros es sobre el total de la cuenta antes de descuentos e IVA
Dim ldblSTConvenioNoFactSinDesc As Double           'Subtotal no facturado de la cuenta de convenio antes de descuentos e IVA

Dim vlblnCargosMenoresaConcepSegurosNOGravados As Boolean   'Para saber si los cargos a facturar son menores a los conceptos de seguro a descontar (NO gravados)
Dim vlblnCargosMenoresaConcepSegurosGravados As Boolean     'Para saber si los cargos a facturar son menores a los conceptos de seguro a descontar (   gravados)
Dim ldblTotalCargosHospital As Double
Dim ldblTotalCargosCuenta As Double
Dim ldblTotalCargosExcluidos As Double
Dim ldblTotalCargosSINExcluidos As Double
Dim vllngPersonaGraba As Long
Dim vllngPersonaGrabaDescuento As Long

Dim ldblTmpDescuentoAFactPaciente As Double 'descuento para el calculo del factor de IVA, se llena en la vuelta del grid de la empresa, pero se usa en la vuelta del grid del paciente

Dim vlintbitCalculaConcSegconDescuento As Integer  'Indica si el cálculo en porcentaje de los conceptos de seguros es sobre el total de la cuenta considerando los descuentos (1 = Si incluye descuento, 0 = No incluye descuento)
Dim vlintbitCalculaConceptoSeguroconIVA As Integer 'Indica si el cálculo en porcentaje de los conceptos de seguros es sobre el total de la cuenta considerando el IVA (1 = Si incluye IVA, 0 = No incluye IVA)
Dim dblCoaseguroMedicoCargos As Double
Dim lblnCanceloFacturaPaciente As Boolean          ' Para pacientes de aseguradora, indica si se canceló la factura del paciente pero la factura de la empresa no se canceló, de ser asi no se puede modificar el control de aseguradora
Dim vlstrCveUsoCFDI As String
Dim vldblImporteRetencionServ As Double             'importe retencion acumulado
Dim vldblRetencionServicios As Double
Dim dblSubtotalGravadoPSinFormat As Double
Dim vldblsubtotalgravadoSinFormat As Double

Dim vl_regimencliente As Integer

Dim vlintContArr As Integer                   'Contador para el arreglo de los honorarios
Private Type DatosHonorario
    vllngNumCargo As Long                   'Número de cargo
    vllngNumCuenta As Long                 'Número de la cuenta o grupo
    vlstrCuenta As String                        'Cuenta contable
    vlIntCveMedico As Integer                'Clave del médico
    vlintCvePorcentajeISR As String      'Clave porcentaje de ISR para el honorario facturado
    vllngCtaAcredMedico As Long         'cuenta acreedora del médico
    vlintRTP As Integer                 'Indica si se le retiene RTP
End Type
Dim aDatoCostoISR() As DatosHonorario

Dim vlblnAplicoFacturaAsistenciaSocial As Boolean

Private Type ParFarmaciaCompartida
    blnActivo   As Boolean              'Este parámetro establecerá si se encuentra activa la funcionalidad de contar con una farmacia compartida (1 = Activada, 0 = Desactivada)
    lngClaveEmpresaHospital As Long     'En este parámetro se configurará la empresa contable del hospital.
    lngClaveEmpresaFarmacia As Long     'En este parámetro se configurará la empresa contable de la farmacia.
    lngNumCliente   As Long                 'Cliente registrado en la empresa contable FARMACIA con la información de la empresa contable HOSPITAL.
    lngCveDepartamentoFarmacia  As Long     'Departamento en el que se contabilizarán los ingresos de los medicamentos que sean regresados por HOSPITAL para que los facture la empresa contable FARMACIA
    lngCveDepartamentoConsignacion  As Long 'Departamento de HOSPITAL que manejará los medicamentos en consignación de FARMACIA
End Type
Dim aFarmaciaCompartida() As ParFarmaciaCompartida


Dim vllngValidaCargos As Long
Dim X As Long
Dim vlintMensaje As Long
Dim vlblnError As Boolean
Dim vlblnTermina As Boolean
Dim vllngnoerror As Integer
Dim vlstrx As String
Dim vllngNumeroPaciente As Long
Dim rsReqFarmaciaCompartida As New ADODB.Recordset
Dim llngResultado As Long
Dim rsIvRequisicionConsigna As ADODB.Recordset
Dim rs As New ADODB.Recordset
Dim vldblCantidadSeparar As Double
Dim intlocaterow As Integer

Dim arrintCveProveedorSub() As Long
Dim arrintCveProveedorAlm() As Long
'Dim vllngUltimaColOrdenada As Long
Dim vllngUltimaDevolucion As Long
Dim arrintCveProveedor() As Long

Private Type RegistroPoliza
    llngNumeroCuenta As Long
    ldblCantidadMovimiento As Double
    lintTipoMovimiento As Integer
End Type
Dim apoliza() As RegistroPoliza
Dim aPolizaOrden() As RegistroPoliza
Dim lintCiclos As Integer

' Variable de almacenamiento del RFC cuando se revierte el genérico
Dim vlstrRFCprovisional As String

Dim vlblnAplicaDescuentoEspecial As Boolean
Dim vlblnConsiderarExcluidosDescEsp As Boolean
Dim dblPorcentajeDescEspecial As Double
Dim ldblImporteGravaSelConvenioNoExDE As Double
Dim dblIVACargosSelDespuesDescEsp As Double

Dim blnLicenciaLealtadCliente As Boolean    'Para saber si se tiene licencia para generar la lealtad del cliente y el médico
Dim vlstrMensajePuntos As String
Dim vldblMontoDisponiblePuntos As Double
Dim vllngPersonaGrabaPuntos As Long
Dim dblDescuentoAplicadoPuntos As Double
Dim vldblPuntosDisponibles As Double
Dim vldblPuntosAplicados As Double

Dim vlstrDFRFC As String
Dim vlintRegimenFiscal As Integer
Dim rsPostergado As ADODB.Recordset
Dim vlblnAnticipoPendiente As Boolean

'18084
Private WithEvents txtNombreAsegurado As TextBox
Attribute txtNombreAsegurado.VB_VarHelpID = -1
Private WithEvents txtPersonaAutoriza As TextBox
Attribute txtPersonaAutoriza.VB_VarHelpID = -1
Private WithEvents txtNumeroPoliza As TextBox
Attribute txtNumeroPoliza.VB_VarHelpID = -1
Private WithEvents txtNumeroControl As TextBox
Attribute txtNumeroControl.VB_VarHelpID = -1
Private WithEvents lblcarta As Label
Attribute lblcarta.VB_VarHelpID = -1
Private WithEvents lblNombreCarta As Label     'Para mostrar en la pestaña de cargos el nombre de la carta que está seleccionada en la pestaña de control de seguros
Attribute lblNombreCarta.VB_VarHelpID = -1
Private vlblnValidaCartaAutorizacion            'Para saber si es necesario validar la carta de autorizacion
Dim vlstrsql As String
Dim clStrSeleccionComboPaquetes                 'Para indicar si se selecciona paquete o carta de autorización (valores P,C)
Private claveCarta As Long
Dim lngCartaDefault As Long
Dim vlblnCargaDatos As Boolean
Public claveCartaEdoCta As Long
Dim blnDeducibleSinIVA As Boolean
Dim lngIDnotaGlobal As Long

'tipos de cambio para anticipos by hector
Dim lngMontoCambioPago As Long


Dim lngTipoCambioAnticipo As Long 'tipo cambio
Private Function fblnConceptoSeguroFacturado() As Boolean
On Error GoTo NotificaError
    Dim rsConceptoFacturado As New ADODB.Recordset
    Dim vlstrsql As String
    Dim Mensaje As String
    
    fblnConceptoSeguroFacturado = False
    
    If vlblnValidaCargo = False Then Exit Function
    If gintAseguradora = 0 Then Exit Function
    
    vlblnValidaCargo = False
    
    'Verifica si existe factura del paciente que incluya conceptos de seguro y que los conceptos se calculen por porcentaje
    'para no permitir excluir cargos y se afecte el calculo ya facturado de los conceptos de seguro
    
    vlstrsql = " Select count(distinct pvfactura.chrfoliofactura) facturas " & _
                  "From pvfactura " & _
                        "inner join pvdetallefactura on trim(pvfactura.chrfoliofactura) = trim(pvdetallefactura.chrfoliofactura) " & _
                        "inner join pvconceptofacturacion on pvconceptofacturacion.smicveconcepto = pvdetallefactura.smicveconcepto " & _
                        "inner join pvcontrolaseguradora on pvcontrolaseguradora.intmovpaciente = pvfactura.intmovpaciente " & _
                 "Where pvfactura.INTMOVPACIENTE = " & txtMovimientoPaciente.Text & _
                   "and pvfactura.chrtipofactura = 'P' " & _
                   "and pvfactura.chrestatus <> 'C' " & _
                   "and pvdetallefactura.chrtipo = 'OC' " & _
                   "and pvconceptofacturacion.inttipo = 1 " & _
                   "and (nvl(pvcontrolaseguradora.numporcentajecoaseguro, 0) > 0 " & _
                            "or nvl(pvcontrolaseguradora.numporcentajecoaseguroadiciona, 0) > 0 " & _
                            "or nvl(pvcontrolaseguradora.numporcentajecoaseguromedico, 0) > 0 " & _
                            "or nvl(pvcontrolaseguradora.numporcentajecopago, 0) > 0 " & _
                            "or nvl(pvcontrolaseguradora.numporcentajededucible, 0) > 0) " & _
                   "and pvcontrolaseguradora.bitcalcularenbaseacargos = 0 " & _
                   "and pvcontrolaseguradora.intCveCarta = " & str(claveCarta)
                
    Set rsConceptoFacturado = frsRegresaRs(vlstrsql)
    If rsConceptoFacturado.RecordCount > 0 Then
        If rsConceptoFacturado!FACTURAS = 0 Then
            fblnConceptoSeguroFacturado = False
        Else
            fblnConceptoSeguroFacturado = True
            'Este cargo ya se había tomando en cuenta para el cálculo de los conceptos de seguro en una factura previa, el excluirlo, puede ocasionar en determinado momento un importe negativo en los conceptos de seguro.
            MsgBox "Este cargo ya se había tomado en cuenta para el cálculo de los conceptos de seguro en una factura previa, el excluirlo, puede ocasionar en determinado momento un importe negativo en los conceptos de seguro.", vbInformation, "Mensaje"
            'MsgBox "No se puede excluir, el cargo ya ha sido incluido en el cálculo de conceptos de seguro al paciente en otra factura.", vbExclamation, "Mensaje"
        End If
    End If
    rsConceptoFacturado.Close
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":fblnConceptoSeguroFacturado"))
End Function

Private Function fdblValorPuntoLealtad() As Double

    Dim ObjRS As New ADODB.Recordset
    Dim objSTR As String
    
    fdblValorPuntoLealtad = 0
    
    objSTR = "select nvl(vchvalor, 0) valor from siparametro where vchnombre = 'MNYVALORPUNTOLEALTAD' "
    'and INTCVEEMPRESACONTABLE = " & vgintClaveEmpresaContable
    Set ObjRS = frsRegresaRs(objSTR, adLockOptimistic)
    
    If ObjRS.RecordCount > 0 Then
        fdblValorPuntoLealtad = ObjRS!Valor
    End If

End Function

Private Sub pAplicaDescuentoConceptoSeguro(lngCveConcepto As Long, dblDescuentoAplicadoPuntos As Double)
    Dim rs As New ADODB.Recordset
    Dim lstrSentencia As String
    
'    lstrSentencia = "select * from PvDescuento " & _
'                    " Where intcveafectada = " & txtMovimientoPaciente.Text & " and chrtipodescuento = 'P' and smicveconcepto = " & lngCveConcepto & _
'                    "   and de.chrtipocargo = 'CF' and tnyclaveempresa = " & vgintClaveEmpresaContable
'    Set rs = frsRegresaRs(lstrSentencia, adLockOptimistic, adOpenDynamic)
'    If rs.RecordCount > 0 Then
'        If rs!intTipoDescuento = 0 Then
'            If vldblFacturaDeducible >= vldblMontoDisponiblePuntos Then
'                dblDescuentoAplicadoPuntos = vldblMontoDisponiblePuntos
'            ElseIf vldblFacturaDeducible < vldblMontoDisponiblePuntos Then
'                dblDescuentoAplicadoPuntos = vldblFacturaDeducible
'            End If
'
'        End If
'    End If
    lstrSentencia = "Insert into PVDESCUENTO (CHRTIPODESCUENTO, INTCVEAFECTADA, CHRTIPOPACIENTE, SMICVECONCEPTO, " & _
                    "INTCVECARGO, CHRTIPOCARGO, MNYDESCUENTO, INTTIPODESCUENTO, TNYCLAVEEMPRESA, MNYDESCUENTOPUNTOS) " & _
                    "Values ('P', " & txtMovimientoPaciente.Text & ", '" & IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")) & "', " & lngCveConcepto & ", " & _
                    "0, 'CF', " & dblDescuentoAplicadoPuntos & ", 0, " & vgintClaveEmpresaContable & ", " & dblDescuentoAplicadoPuntos & ")"
    pEjecutaSentencia lstrSentencia
    
End Sub

Private Sub pEtiquetaVar(strUso As String, strMensaje As String)

    'Etiqueta reutilizada por la limitante de crear mas etiquetas
    Label57(11).Caption = ""
    Label57(11).Visible = False

    If strUso = "Consulta" Then
        Label57(11).Caption = " Facturas pendientes de timbre fiscal"
        Label57(11).Left = 9180
        Label57(11).Top = 8925
        Label57(11).Width = 2595
        Label57(11).ForeColor = &H0&
        Label57(11).FontBold = False
        Label57(11).Alignment = 0
        Label57(11).Visible = True
    ElseIf strUso = "Generales" Or strUso = "Factura" Then
        If Val(txtMovimientoPaciente.Text) <> 0 And strMensaje <> "" Then
            Label57(11).Caption = strMensaje
            Label57(11).Left = 6700
            Label57(11).Top = 9800
            Label57(11).Width = 5150
            Label57(11).ForeColor = &HFF0000
            Label57(11).FontBold = True
            Label57(11).Alignment = 1
            Label57(11).Visible = True
        End If
    End If
End Sub


Private Sub cmdAplicarDescuentoPuntos_Click()
On Error GoTo NotificaError
    Dim llngRow As Long
    Dim llngPersonaGraba As Long
    Dim lstrSentencia As String
    Dim rsTabulador As New ADODB.Recordset
    Dim dblDescuentoPuntos As Double
    Dim vldblSubtotal As Double
    Dim vllngContador As Long
    Dim vldblDescuentoPuntos As Double
    Dim vldblDescuentoCargo As Double
    Dim vldblImporteFactura As Double
    
    ' -- 16801 --
    llngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
    If llngPersonaGraba = 0 Then Exit Sub
    
    vllngPersonaGrabaPuntos = llngPersonaGraba
    
    '------------------------------------
    ' Descuento por aplicación de puntos
    '------------------------------------
    
    ' Guarda el descuento original de cada cargo antes de aplicar el descuento por puntos
    EntornoSIHO.ConeccionSIHO.BeginTrans
    For vllngContador = 1 To grdCargos.Rows - 1
        If grdCargos.TextMatrix(vllngContador, 0) = "*" Then
            lstrSentencia = "Update PvCargo Wet mnyDescuentoOriginal = " & Val(Format(grdCargos.TextMatrix(vllngContador, 6), "")) & _
                            " Where intnumcargo = " & Trim(str(grdCargos.RowData(vllngContador)))
            pEjecutaSentencia (lstrSentencia)
        End If
    Next vllngContador
    EntornoSIHO.ConeccionSIHO.CommitTrans
    
    
    ' Aplica porcentaje de descuentos por puntos
    vldblImporteFactura = CDbl(txtFPSubtotal.Text) + CDbl(txtFPDescuentos.Text)
    vldblDescuentoPuntos = vldblMontoDisponiblePuntos / vldblImporteFactura * 100

    'Barrita de progreso
    pgbBarra.Value = 1
    freBarra.Top = 1500
    lblTextoBarra.Caption = "Actualizando descuentos por otorgamiento de puntos, por favor espere..."
    freBarra.Visible = True
    freBarra.Refresh

    If vgSocio = True Then 'Si es socio, se aplica el descuento únicamente a los cargos excluidos
        For vllngContador = 1 To grdCargos.Rows - 1
            If grdCargos.TextMatrix(vllngContador, 18) = "X" Then
                If grdCargos.TextMatrix(vllngContador, 0) = "*" Then
                    vldblDescuentoCargo = CDbl(grdCargos.TextMatrix(vllngContador, cintColDescuentoCargo)) / CDbl(grdCargos.TextMatrix(vllngContador, cintColPrecioCantidad)) * 100
                    pActualizaDescuentos (vldblDescuentoCargo + vldblDescuentoPuntos), vllngContador, 2
                    Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGrabaPuntos, "DESCUENTOS EN PANTALLA DE FACTURACIÓN A CLIENTE LEAL", "Cta. " & txtMovimientoPaciente.Text & " Cargo " & grdCargos.RowData(vllngContador) & " Descto. " & Format(Val(vldblDescuentoPuntos), "#,###.##00")) ''F10
                End If
            End If
        Next
    Else
        For vllngContador = 1 To grdCargos.Rows - 1
            pgbBarra.Value = (vllngContador / (grdCargos.Rows - 1)) * 100
            If grdCargos.TextMatrix(vllngContador, 0) = "*" Then
                vldblDescuentoCargo = CDbl(grdCargos.TextMatrix(vllngContador, cintColDescuentoCargo)) / CDbl(grdCargos.TextMatrix(vllngContador, cintColPrecioCantidad)) * 100
                pActualizaDescuentos (vldblDescuentoCargo + vldblDescuentoPuntos), vllngContador
                Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGrabaPuntos, "DESCUENTOS EN PANTALLA DE FACTURACIÓN A CLIENTE LEAL", "Cta. " & txtMovimientoPaciente.Text & " Cargo " & grdCargos.RowData(vllngContador) & " Descto. " & Format(Val(vldblDescuentoPuntos), "#,###.##00")) ''F10
            End If
        Next
    End If
    
    ' Guarda el descuento otorgado por la aplicación de puntos de cada cargo
    EntornoSIHO.ConeccionSIHO.BeginTrans
    For vllngContador = 1 To grdCargos.Rows - 1
        If grdCargos.TextMatrix(vllngContador, 0) = "*" Then
            lstrSentencia = "Update PvCargo Set mnydescuentoPuntos = (mnydescuento - mnydescuentooriginal)" & _
                            " Where intnumcargo = " & Trim(str(grdCargos.RowData(vllngContador)))
            pEjecutaSentencia (lstrSentencia)
        End If
    Next vllngContador
    EntornoSIHO.ConeccionSIHO.CommitTrans
    
    pLlenaCargos True
    pTotales
    sstFacturacion_Click (3)
    freBarra.Visible = False
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdAplicarDescuentoPuntos_Click"))
End Sub

Private Sub pControlPuntos(lngConsecutivoFactura As Long, strFolioDocumento As String, vldtmFechaHoy As Date, vldtmHoraHoy As Date)
    If blnLicenciaLealtadCliente Then
        If dblDescuentoAplicadoPuntos > 0 Then
            pAplicarPuntos lngConsecutivoFactura, strFolioDocumento, vldtmFechaHoy, vldtmHoraHoy
        End If
        pAcumularPuntos lngConsecutivoFactura, strFolioDocumento, vldtmFechaHoy, vldtmHoraHoy
    End If
End Sub

Private Sub pDesAplicarDescuentoPuntos()
On Error GoTo NotificaError
    Dim llngRow As Long
    Dim llngPersonaGraba As Long
    Dim lstrSentencia As String
    Dim rsTabulador As New ADODB.Recordset
    Dim dblDescuentoPuntos As Double
    Dim vldblSubtotal As Double
    Dim vllngContador As Long
    Dim vldblDescuentoPuntos As Double
    Dim vldblDescuentoCargo As Double
    Dim vldblImporteFactura As Double
    
    ' -- 16801 --
    llngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
    If llngPersonaGraba = 0 Then Exit Sub
    
    vllngPersonaGrabaPuntos = llngPersonaGraba
    
    '---------------------------------------------
    ' Eliminar descuento por aplicación de puntos
    '---------------------------------------------
    

    EntornoSIHO.ConeccionSIHO.BeginTrans
    If gintAseguradora = 1 Then
        ' Elimina el descuento de cada concepto de factura de tipo aseguradora
        For vllngContador = 1 To grdFacturaPaciente.Rows - 1
            If grdFacturaPaciente.TextMatrix(vllngContador, 6) = "OC" Then
                If grdFacturaPaciente.TextMatrix(vllngContador, 7) = "EX" Or _
                    grdFacturaPaciente.TextMatrix(vllngContador, 7) = "DE" Or _
                    grdFacturaPaciente.TextMatrix(vllngContador, 7) = "CO" Or _
                    grdFacturaPaciente.TextMatrix(vllngContador, 7) = "CM" Or _
                    grdFacturaPaciente.TextMatrix(vllngContador, 7) = "CA" Or _
                    grdFacturaPaciente.TextMatrix(vllngContador, 7) = "CP" Then
                                
                    lstrSentencia = "Delete from PvDescuento " & _
                                    " Where intcveafectada = " & txtMovimientoPaciente.Text & " and chrtipodescuento = 'P' and smicveconcepto = " & grdFacturaPaciente.RowData(vllngContador) & _
                                    "   and chrtipocargo = 'CF' and tnyclaveempresa = " & vgintClaveEmpresaContable & " and inttipodescuento = 0 and mnyDescuentoPuntos > 0 "
                    
                    pEjecutaSentencia (lstrSentencia)
                End If
            End If
        Next
    
        ' Guarda el descuento original de cada cargo excluido antes de aplicar el descuento por puntos
        For vllngContador = 1 To grdCargos.Rows - 1
            If grdCargos.TextMatrix(vllngContador, 0) = "*" And grdCargos.TextMatrix(vllngContador, clbytColumnaExclusion) = "X" Then
                lstrSentencia = "Update PvCargo Set mnyDescuentoPuntos = 0, mnyDescuento = mnyDescuentoOriginal" & _
                                " Where intnumcargo = " & Trim(str(grdCargos.RowData(vllngContador)))
                pEjecutaSentencia (lstrSentencia)
                lstrSentencia = "Update PvCargo Set mnyDescuentoOriginal = 0" & _
                                " Where intnumcargo = " & Trim(str(grdCargos.RowData(vllngContador)))
                pEjecutaSentencia (lstrSentencia)
            End If
        Next
    Else
        ' Guarda el descuento original de cada cargo antes de aplicar el descuento por puntos
        For vllngContador = 1 To grdCargos.Rows - 1
            If grdCargos.TextMatrix(vllngContador, 0) = "*" Then
                lstrSentencia = "Update PvCargo Set mnyDescuentoPuntos = 0, mnyDescuento = mnyDescuentoOriginal" & _
                                " Where intnumcargo = " & Trim(str(grdCargos.RowData(vllngContador)))
                pEjecutaSentencia (lstrSentencia)
                lstrSentencia = "Update PvCargo Set mnyDescuentoOriginal = 0" & _
                                " Where intnumcargo = " & Trim(str(grdCargos.RowData(vllngContador)))
                pEjecutaSentencia (lstrSentencia)
            End If
        Next
    End If
    EntornoSIHO.ConeccionSIHO.CommitTrans
    
    pLlenaCargos True
    pTotales
       
    ' Aplica porcentaje de descuentos originales

    pgbBarra.Value = 1
    freBarra.Top = 1500
    lblTextoBarra.Caption = "Actualizando descuentos, por favor espere..."
    freBarra.Visible = True
    freBarra.Refresh

    If vgSocio = True Then 'Si es socio, se aplica el descuento únicamente a los cargos excluidos
        For vllngContador = 1 To grdCargos.Rows - 1
            If grdCargos.TextMatrix(vllngContador, 18) = "X" Then
                If grdCargos.TextMatrix(vllngContador, 0) = "*" Then
                    vldblDescuentoCargo = CDbl(grdCargos.TextMatrix(vllngContador, cintColDescuentoCargo)) / CDbl(grdCargos.TextMatrix(vllngContador, cintColPrecioCantidad)) * 100
                    pActualizaDescuentos (vldblDescuentoCargo), vllngContador, 2
                    Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGrabaPuntos, "DESCUENTOS EN PANTALLA DE FACTURACIÓN A CLIENTE LEAL (Desaplicar descuento puntos)", "Cta. " & txtMovimientoPaciente.Text & " Cargo " & grdCargos.RowData(vllngContador) & " Descto. " & Format(Val(vldblDescuentoPuntos), "#,###.##00")) ''F10
                End If
            End If
        Next
    Else
        For vllngContador = 1 To grdCargos.Rows - 1
            pgbBarra.Value = (vllngContador / (grdCargos.Rows - 1)) * 100
            If grdCargos.TextMatrix(vllngContador, 0) = "*" And (gintAseguradora = 0 Or (gintAseguradora = 1 And grdCargos.TextMatrix(vllngContador, clbytColumnaExclusion) = "X")) Then
                vldblDescuentoCargo = CDbl(grdCargos.TextMatrix(vllngContador, cintColDescuentoCargo)) / CDbl(grdCargos.TextMatrix(vllngContador, cintColPrecioCantidad)) * 100
                pActualizaDescuentos (vldblDescuentoCargo), vllngContador
                Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGrabaPuntos, "DESCUENTOS EN PANTALLA DE FACTURACIÓN A CLIENTE LEAL (Desaplicar descuento puntos)", "Cta. " & txtMovimientoPaciente.Text & " Cargo " & grdCargos.RowData(vllngContador) & " Descto. " & Format(Val(vldblDescuentoPuntos), "#,###.##00")) ''F10
            End If
        Next
    End If
        
    pLlenaCargos True
    pTotales
    sstFacturacion_Click (3)
    freBarra.Visible = False
               
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pDesAplicarDescuentoPuntos"))
End Sub

Private Sub pAplicarPuntos(lngConsecutivoFactura As Long, strFolioDocumento As String, vldtmFechaHoy As Date, vldtmHoraHoy As Date)
On Error GoTo NotificaError
    
    Dim vlstrSentencia As String
    Dim rsRango As New ADODB.Recordset
    Dim rsPuntosUtilizados As New ADODB.Recordset
    Dim rs As New ADODB.Recordset
    Dim rsIngreso As New ADODB.Recordset
    Dim vldblPuntosPaciente As Double
    Dim vldblPuntosMedLab As Double
    Dim vldblPuntosMedImagen As Double
    Dim vldblPuntosMedCargo As Double
    Dim vldblSaldoPuntos As Double
    Dim vldblValorPuntoLealtad As Double
    
    vldblPuntosPaciente = 0
    vldblPuntosMedLab = 0
    vldblPuntosMedImagen = 0
    vldblPuntosMedCargo = 0
    vldblSaldoPuntos = 0
    vldblValorPuntoLealtad = 0
    
    '-- 16801 --
    vlstrSentencia = "SELECT * FROM PvPuntosUtilizadosPaciente"
    Set rsPuntosUtilizados = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
       
    rsPuntosUtilizados.AddNew
    rsPuntosUtilizados!intIdFactura = lngConsecutivoFactura
    rsPuntosUtilizados!chrfoliofactura = Trim(strFolioDocumento)
    rsPuntosUtilizados!intNumCuenta = CLng(txtMovimientoPaciente.Text)
    rsPuntosUtilizados!intnumpaciente = vllngNumeroPaciente
    rsPuntosUtilizados!mnyDescuentoAplicado = vldblPuntosAplicados  'dblDescuentoAplicadoPuntos
    
    vldblSaldoPuntos = Round(vldblPuntosAplicados / fdblValorPuntoLealtad)
    
    'Consulta datos del ingreso del paciente
    vlstrSentencia = "select pi.intNumPaciente, pi.intcvetipoingreso, pi.intcvetipopaciente, nvl(pi.intcvemedicorelacionado, 0) intcvemedicorelacionado, tp.bitfamiliar, tp.chrtipo from ExPacienteIngreso pi inner join AdTipoPaciente tp on pi.intcvetipopaciente = tp.tnycvetipopaciente where pi.intNumCuenta = " & CLng(txtMovimientoPaciente.Text)
    Set rsIngreso = frsRegresaRs(vlstrSentencia, adOpenDynamic, adLockOptimistic)
    If rsIngreso.RecordCount > 0 Then
        'Si el paciente es médico o familiar de médico
        If (rsIngreso!bitFamiliar = 1 And rsIngreso!chrTipo = "ME") Or rsIngreso!chrTipo = "ME" Then
            
            'Consulta puntos paciente
            vlstrSentencia = "select nvl(sum(puntosPaciente), 0) puntosPaciente from ( " & _
                                "select nvl(sum(case when vp.intcveventa is null then 0 else pp.intPuntosPaciente end + " & _
                                               "case when fa.intconsecutivo is null then 0 else pp.intPuntosPaciente end), 0) puntosPaciente from pvPuntosObtenidosPaciente pp " & _
                                            "left join PvFactura fa on pp.intIdFactura = fa.intconsecutivo and fa.chrestatus <> 'C' " & _
                                            "left join PvVentaPublico vp ON pp.intidfactura = vp.intCveVenta AND vp.chrTipoRecivo = 'T' AND vp.bitCancelado = 0 " & _
                                "where pp.intNumPaciente = " & rsIngreso!intnumpaciente & " " & _
                                " union all " & _
                                "select nvl(sum(case when vp.intcveventa is null then 0 else pp.intPuntosPaciente end + " & _
                                               "case when fa.intconsecutivo is null then 0 else pp.intPuntosPaciente end), 0) puntosPaciente from pvPuntosUtilizadosPaciente pp " & _
                                            "left join PvFactura fa on pp.intIdFactura = fa.intconsecutivo and fa.chrestatus <> 'C' " & _
                                            "left join PvVentaPublico vp ON pp.intidfactura = vp.intCveVenta AND vp.chrTipoRecivo = 'T' AND vp.bitCancelado = 0 " & _
                                "Where pp.intNumPaciente = " & rsIngreso!intnumpaciente & ")"
            Set rs = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
            If rs.RecordCount > 0 Then vldblPuntosPaciente = rs!puntosPaciente
            rs.Close
            
            'Consulta puntos médico relacionado laboratorio
            vlstrSentencia = "select nvl(sum(puntosMedLab), 0) puntosMedLab from ( " & _
                                "select nvl(sum(case when vp.intcveventa is null then 0 else pp.intpuntosmedicolab end + " & _
                                               "case when fa.intconsecutivo is null then 0 else pp.intpuntosmedicolab end), 0) puntosMedLab from pvPuntosObtenidosPaciente pp " & _
                                            "left join PvFactura fa on pp.intIdFactura = fa.intconsecutivo and fa.chrestatus <> 'C' " & _
                                            "left join PvVentaPublico vp ON pp.intidfactura = vp.intCveVenta AND vp.chrTipoRecivo = 'T' AND vp.bitCancelado = 0 " & _
                                "Where pp.intcvemedicolab = " & rsIngreso!intCveMedicoRelacionado & _
                                " union all " & _
                                "select nvl(sum(case when vp.intcveventa is null then 0 else pp.intpuntosmedicolab end + " & _
                                               "case when fa.intconsecutivo is null then 0 else pp.intpuntosmedicolab end), 0) puntosMedLab from pvPuntosUtilizadosPaciente pp " & _
                                            "left join PvFactura fa on pp.intIdFactura = fa.intconsecutivo and fa.chrestatus <> 'C' " & _
                                            "left join PvVentaPublico vp ON pp.intidfactura = vp.intCveVenta AND vp.chrTipoRecivo = 'T' AND vp.bitCancelado = 0 " & _
                                "Where pp.intcvemedicolab = " & rsIngreso!intCveMedicoRelacionado & ")"
            Set rs = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
            If rs.RecordCount > 0 Then vldblPuntosMedLab = rs!puntosMedLab
            rs.Close
        
            'Consulta puntos médico relacionado imagenología
            vlstrSentencia = "select nvl(sum(puntosmedimagen), 0) puntosmedimagen from ( " & _
                                "select nvl(sum(case when vp.intcveventa is null then 0 else pp.intpuntosmedicoImagen end + " & _
                                               "case when fa.intconsecutivo is null then 0 else pp.intpuntosmedicoImagen end), 0) puntosMedImagen from pvPuntosObtenidosPaciente pp " & _
                                            "left join PvFactura fa on pp.intIdFactura = fa.intconsecutivo and fa.chrestatus <> 'C' " & _
                                            "left join PvVentaPublico vp ON pp.intidfactura = vp.intCveVenta AND vp.chrTipoRecivo = 'T' AND vp.bitCancelado = 0 " & _
                                "Where pp.intcvemedicoImagen = " & rsIngreso!intCveMedicoRelacionado & _
                                " union all " & _
                                "select nvl(sum(case when vp.intcveventa is null then 0 else pp.intpuntosmedicoImagen end + " & _
                                               "case when fa.intconsecutivo is null then 0 else pp.intpuntosmedicoImagen end), 0) puntosMedImagen from pvPuntosUtilizadosPaciente pp " & _
                                            "left join PvFactura fa on pp.intIdFactura = fa.intconsecutivo and fa.chrestatus <> 'C' " & _
                                            "left join PvVentaPublico vp ON pp.intidfactura = vp.intCveVenta AND vp.chrTipoRecivo = 'T' AND vp.bitCancelado = 0 " & _
                                "Where pp.intcvemedicoImagen = " & rsIngreso!intCveMedicoRelacionado & ")"
            Set rs = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
            If rs.RecordCount > 0 Then vldblPuntosMedImagen = rs!puntosMedImagen
            rs.Close
            
            'Consulta puntos médico a cargo relacionado
            vlstrSentencia = "select nvl(sum(puntosMedCargo), 0) puntosMedCargo from ( " & _
                                "select nvl(sum(case when vp.intcveventa is null then 0 else pp.intpuntosmedicoCargo end + " & _
                                               "case when fa.intconsecutivo is null then 0 else pp.intpuntosmedicoCargo end), 0) puntosMedCargo from pvPuntosObtenidosPaciente pp " & _
                                            "left join PvFactura fa on pp.intIdFactura = fa.intconsecutivo and fa.chrestatus <> 'C' " & _
                                            "left join PvVentaPublico vp ON pp.intidfactura = vp.intCveVenta AND vp.chrTipoRecivo = 'T' AND vp.bitCancelado = 0 " & _
                                "Where pp.intcvemedicoCargo = " & rsIngreso!intCveMedicoRelacionado & _
                                " union all " & _
                                "select nvl(sum(case when vp.intcveventa is null then 0 else pp.intpuntosmedicoCargo end + " & _
                                               "case when fa.intconsecutivo is null then 0 else pp.intpuntosmedicoCargo end), 0) puntosMedCargo from pvPuntosUtilizadosPaciente pp " & _
                                            "left join PvFactura fa on pp.intIdFactura = fa.intconsecutivo and fa.chrestatus <> 'C' " & _
                                            "left join PvVentaPublico vp ON pp.intidfactura = vp.intCveVenta AND vp.chrTipoRecivo = 'T' AND vp.bitCancelado = 0 " & _
                                "Where pp.intcvemedicoCargo = " & rsIngreso!intCveMedicoRelacionado & ")"
            Set rs = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
            If rs.RecordCount > 0 Then vldblPuntosMedCargo = rs!puntosMedCargo
            rs.Close
            
            'vldblSaldoPuntos = vldblPuntosDisponibles
            If vldblPuntosPaciente > 0 Then
                vldblSaldoPuntos = vldblSaldoPuntos - vldblPuntosPaciente
                rsPuntosUtilizados!intpuntospaciente = vldblPuntosPaciente
            Else
                rsPuntosUtilizados!intpuntospaciente = 0
            End If
            If vldblSaldoPuntos > 0 Then
                If vldblPuntosMedLab > 0 Then
                    If vldblSaldoPuntos >= vldblPuntosMedLab Then
                        vldblSaldoPuntos = vldblSaldoPuntos - vldblPuntosMedLab
                        rsPuntosUtilizados!intpuntosMedicoLab = vldblPuntosMedLab
                    ElseIf vldblSaldoPuntos < vldblPuntosMedLab Then
                        rsPuntosUtilizados!intpuntosMedicoLab = vldblSaldoPuntos
                        vldblSaldoPuntos = 0
                    End If
                    rsPuntosUtilizados!intcvemedicolab = rsIngreso!intCveMedicoRelacionado
                End If
            End If
            If vldblSaldoPuntos > 0 Then
                If vldblPuntosMedImagen > 0 Then
                    If vldblSaldoPuntos >= vldblPuntosMedImagen Then
                        vldblSaldoPuntos = vldblSaldoPuntos - vldblPuntosMedImagen
                        rsPuntosUtilizados!intpuntosMedicoImagen = vldblPuntosMedImagen
                    ElseIf vldblSaldoPuntos < vldblPuntosMedImagen Then
                        rsPuntosUtilizados!intpuntosMedicoImagen = vldblSaldoPuntos
                        vldblSaldoPuntos = 0
                    End If
                    rsPuntosUtilizados!intcvemedicoImagen = rsIngreso!intCveMedicoRelacionado
                End If
            End If
            If vldblSaldoPuntos > 0 Then
                If vldblPuntosMedCargo > 0 Then
                    If vldblSaldoPuntos >= vldblPuntosMedCargo Then
                        vldblSaldoPuntos = vldblSaldoPuntos - vldblPuntosMedCargo
                        rsPuntosUtilizados!intpuntosMedicoCargo = vldblPuntosMedCargo
                    ElseIf vldblSaldoPuntos < vldblPuntosMedCargo Then
                        rsPuntosUtilizados!intpuntosMedicoCargo = vldblSaldoPuntos
                        vldblSaldoPuntos = 0
                    End If
                    rsPuntosUtilizados!intcvemedicoCargo = rsIngreso!intCveMedicoRelacionado
                End If
            End If
        Else
            rsPuntosUtilizados!intpuntospaciente = vldblSaldoPuntos
        End If
        
        rsPuntosUtilizados!dtmFechahora = vldtmFechaHoy + vldtmHoraHoy
        rsPuntosUtilizados.Update
        rsPuntosUtilizados.Close
        rsIngreso.Close
        Call pGuardarLogTransaccion(Me.Name, EnmCambiar, vllngPersonaGrabaPuntos, "APLICACIÓN DE PUNTOS DE LEALTAD", strFolioDocumento)
    End If
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":pAplicarPuntos"))
    
End Sub

Private Sub pAplicarDescuentoPuntos()
On Error GoTo NotificaError
    Dim llngRow As Long
    Dim llngPersonaGraba As Long
    Dim lstrSentencia As String
    Dim rsTabulador As New ADODB.Recordset
    Dim dblDescuentoPuntos As Double
    Dim vldblSubtotal As Double
    Dim vllngContador As Long
    Dim vldblDescuentoPuntos As Double
    Dim vldblDescuentoCargo As Double
    Dim vldblImporteFactura As Double
    Dim vldblFacturaExcedente As Double
    Dim vldblFacturaDeducible As Double
    Dim vldblFacturaCoaseguro As Double
    Dim vldblFacturaCoaseguroMedico As Double
    Dim vldblFacturaCoaseguroAdicional As Double
    Dim vldblFacturaCopago As Double
    Dim vldblImporteConceptosSeguro As Double
    Dim vldblSubtotalConcepto As Double
    Dim vldblSaldoDisponiblePuntos As Double
    Dim vldblMontoAplicablePuntos As Double
    Dim vldblImporteCargosExcluidos As Double
    Dim vldblSubtotalCargo As Double
    Dim vldblImporteCargo As Double
    Dim dblDescuentoAplicadoPuntosLocal As Double
    
    ' -- 16801 --
    llngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
    If llngPersonaGraba = 0 Then Exit Sub
    
    vllngPersonaGrabaPuntos = llngPersonaGraba
    
    '------------------------------------
    ' Descuento por aplicación de puntos
    '------------------------------------

    ' Aplica porcentaje de descuentos por puntos
    dblDescuentoAplicadoPuntos = 0
    If Val(Format(txtFPSubtotal.Text, "")) >= vldblMontoDisponiblePuntos Then
        dblDescuentoAplicadoPuntos = vldblMontoDisponiblePuntos
    ElseIf Val(Format(txtFPSubtotal.Text, "")) < vldblMontoDisponiblePuntos Then
        dblDescuentoAplicadoPuntos = Val(Format(txtFPSubtotal.Text, ""))
    End If
    vldblImporteFactura = CDbl(txtFPSubtotal.Text) + CDbl(txtFPDescuentos.Text)

    vldblDescuentoPuntos = dblDescuentoAplicadoPuntos / vldblImporteFactura * 100
    dblDescuentoAplicadoPuntosLocal = dblDescuentoAplicadoPuntos
    
    'Barrita de progreso
    pgbBarra.Value = 1
    freBarra.Top = 1500
    lblTextoBarra.Caption = "Actualizando descuentos por otorgamiento de puntos, por favor espere..."
    freBarra.Visible = True
    freBarra.Refresh

    If vgSocio = True Then 'Si es socio, se aplica el descuento únicamente a los cargos excluidos
        For vllngContador = 1 To grdCargos.Rows - 1
            If grdCargos.TextMatrix(vllngContador, 18) = "X" Then
                If grdCargos.TextMatrix(vllngContador, 0) = "*" Then
                    vldblDescuentoCargo = CDbl(grdCargos.TextMatrix(vllngContador, cintColDescuentoCargo)) / CDbl(grdCargos.TextMatrix(vllngContador, cintColPrecioCantidad)) * 100
                    pActualizaDescuentos (vldblDescuentoCargo + vldblDescuentoPuntos), vllngContador, 2
                    Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGrabaPuntos, "DESCUENTOS EN PANTALLA DE FACTURACIÓN A CLIENTE LEAL", "Cta. " & txtMovimientoPaciente.Text & " Cargo " & grdCargos.RowData(vllngContador) & " Descto. " & Format(Val(vldblDescuentoPuntos), "#,###.##00")) ''F10
                End If
            End If
        Next
    Else
        If gintAseguradora = 1 Then
            'Aplica descuento en conceptos de aseguradora
            vldblPuntosAplicados = 0
            EntornoSIHO.ConeccionSIHO.BeginTrans
            For vllngContador = 1 To grdFacturaPaciente.Rows - 1
                If vldblPuntosAplicados < dblDescuentoAplicadoPuntos Then
                    If grdFacturaPaciente.TextMatrix(vllngContador, 6) = "OC" Then
                        If grdFacturaPaciente.TextMatrix(vllngContador, 7) = "EX" Or _
                            grdFacturaPaciente.TextMatrix(vllngContador, 7) = "DE" Or _
                            grdFacturaPaciente.TextMatrix(vllngContador, 7) = "CO" Or _
                            grdFacturaPaciente.TextMatrix(vllngContador, 7) = "CM" Or _
                            grdFacturaPaciente.TextMatrix(vllngContador, 7) = "CA" Or _
                            grdFacturaPaciente.TextMatrix(vllngContador, 7) = "CP" Then
                            
                            vldblSubtotalConcepto = Val(Format(grdFacturaPaciente.TextMatrix(vllngContador, 2), "")) - Val(Format(grdFacturaPaciente.TextMatrix(vllngContador, 5), ""))
                            If vldblSubtotalConcepto >= dblDescuentoAplicadoPuntosLocal Then
                                vldblMontoAplicablePuntos = dblDescuentoAplicadoPuntosLocal
                            ElseIf vldblSubtotalConcepto < dblDescuentoAplicadoPuntosLocal Then
                                vldblMontoAplicablePuntos = vldblSubtotalConcepto
                            End If
                            pAplicaDescuentoConceptoSeguro grdFacturaPaciente.RowData(vllngContador), vldblMontoAplicablePuntos
                            vldblPuntosAplicados = vldblPuntosAplicados + vldblMontoAplicablePuntos
                            dblDescuentoAplicadoPuntosLocal = dblDescuentoAplicadoPuntosLocal - vldblMontoAplicablePuntos
                        End If
                    End If
                End If
            Next
            EntornoSIHO.ConeccionSIHO.CommitTrans
            
            'Aplica descuento en cargos excluidos
            vldblImporteCargosExcluidos = 0
            If dblDescuentoAplicadoPuntosLocal > 0 Then
                vldblImporteCargosExcluidos = 0
                For vllngContador = 1 To grdCargos.Rows - 1
                    pgbBarra.Value = (vllngContador / (grdCargos.Rows - 1)) * 100
                    If grdCargos.TextMatrix(vllngContador, 0) = "*" And grdCargos.TextMatrix(vllngContador, clbytColumnaExclusion) = "X" Then
                        vldblImporteCargosExcluidos = vldblImporteCargosExcluidos + (Val(Format(grdCargos.TextMatrix(vllngContador, cintColPrecioCantidad), "")) - Val(Format(grdCargos.TextMatrix(vllngContador, cintColDescuentoCargo), "")))
                    End If
                Next
            End If
            
            If vldblImporteCargosExcluidos > 0 Then
                EntornoSIHO.ConeccionSIHO.BeginTrans
                For vllngContador = 1 To grdCargos.Rows - 1
                    If grdCargos.TextMatrix(vllngContador, 0) = "*" And grdCargos.TextMatrix(vllngContador, clbytColumnaExclusion) = "X" Then
                        lstrSentencia = "Update PvCargo Set mnyDescuentoOriginal = " & Val(Format(grdCargos.TextMatrix(vllngContador, 6), "")) & _
                                        " Where intnumcargo = " & Trim(str(grdCargos.RowData(vllngContador)))
                        pEjecutaSentencia (lstrSentencia)
                    End If
                Next vllngContador
                EntornoSIHO.ConeccionSIHO.CommitTrans
                
                'Aplica descuento en cargos
                For vllngContador = 1 To grdCargos.Rows - 1
                    If vldblPuntosAplicados < dblDescuentoAplicadoPuntos Then
                        pgbBarra.Value = (vllngContador / (grdCargos.Rows - 1)) * 100
                        If grdCargos.TextMatrix(vllngContador, 0) = "*" And grdCargos.TextMatrix(vllngContador, clbytColumnaExclusion) = "X" Then
                            vldblDescuentoCargo = CDbl(grdCargos.TextMatrix(vllngContador, cintColDescuentoCargo)) / CDbl(grdCargos.TextMatrix(vllngContador, cintColPrecioCantidad)) * 100
                            vldblImporteCargo = CDbl(grdCargos.TextMatrix(vllngContador, cintColPrecioCantidad))
                            vldblSubtotalCargo = CDbl(grdCargos.TextMatrix(vllngContador, cintColPrecioCantidad)) - CDbl(grdCargos.TextMatrix(vllngContador, cintColDescuentoCargo))
                            If vldblSubtotalCargo >= dblDescuentoAplicadoPuntosLocal Then
                                vldblMontoAplicablePuntos = dblDescuentoAplicadoPuntosLocal
                            ElseIf vldblSubtotalCargo < dblDescuentoAplicadoPuntosLocal Then
                                vldblMontoAplicablePuntos = vldblSubtotalCargo
                            End If
                            vldblDescuentoPuntos = vldblMontoAplicablePuntos / vldblImporteCargo * 100
                            pActualizaDescuentos (vldblDescuentoCargo + vldblDescuentoPuntos), vllngContador
                            Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGrabaPuntos, "DESCUENTOS EN PANTALLA DE FACTURACIÓN A CLIENTE LEAL", "Cta. " & txtMovimientoPaciente.Text & " Cargo " & grdCargos.RowData(vllngContador) & " Descto. " & Format(Val(vldblDescuentoPuntos), "#,###.##00")) ''F10
                            vldblPuntosAplicados = vldblPuntosAplicados + vldblMontoAplicablePuntos
                            dblDescuentoAplicadoPuntosLocal = dblDescuentoAplicadoPuntosLocal - vldblMontoAplicablePuntos
                        End If
                    End If
                Next
                
                ' Guarda el descuento otorgado por la aplicación de puntos de cada cargo
                EntornoSIHO.ConeccionSIHO.BeginTrans
                For vllngContador = 1 To grdCargos.Rows - 1
                    If grdCargos.TextMatrix(vllngContador, 0) = "*" And grdCargos.TextMatrix(vllngContador, clbytColumnaExclusion) = "X" Then
                        lstrSentencia = "Update PvCargo Set mnydescuentoPuntos = (mnydescuento - mnydescuentooriginal)" & _
                                        " Where intnumcargo = " & Trim(str(grdCargos.RowData(vllngContador)))
                        pEjecutaSentencia (lstrSentencia)
                    End If
                Next vllngContador
                EntornoSIHO.ConeccionSIHO.CommitTrans
            End If
        Else
            ' Guarda el descuento original de cada cargo antes de aplicar el descuento por puntos
            EntornoSIHO.ConeccionSIHO.BeginTrans
            For vllngContador = 1 To grdCargos.Rows - 1
                If grdCargos.TextMatrix(vllngContador, 0) = "*" Then
                    lstrSentencia = "Update PvCargo Set mnyDescuentoOriginal = " & Val(Format(grdCargos.TextMatrix(vllngContador, 6), "")) & _
                                    " Where intnumcargo = " & Trim(str(grdCargos.RowData(vllngContador)))
                    pEjecutaSentencia (lstrSentencia)
                End If
            Next vllngContador
            EntornoSIHO.ConeccionSIHO.CommitTrans
                    
            'Aplica descuento en cargos
            vldblPuntosAplicados = 0
            For vllngContador = 1 To grdCargos.Rows - 1
                If vldblPuntosAplicados < dblDescuentoAplicadoPuntos Then
                    pgbBarra.Value = (vllngContador / (grdCargos.Rows - 1)) * 100
                    If grdCargos.TextMatrix(vllngContador, 0) = "*" Then
                        vldblDescuentoCargo = CDbl(grdCargos.TextMatrix(vllngContador, cintColDescuentoCargo)) / CDbl(grdCargos.TextMatrix(vllngContador, cintColPrecioCantidad)) * 100
                        vldblImporteCargo = CDbl(grdCargos.TextMatrix(vllngContador, cintColPrecioCantidad))
                        vldblSubtotalCargo = CDbl(grdCargos.TextMatrix(vllngContador, cintColPrecioCantidad)) - CDbl(grdCargos.TextMatrix(vllngContador, cintColDescuentoCargo))
                        If vldblSubtotalCargo >= dblDescuentoAplicadoPuntosLocal Then
                            vldblMontoAplicablePuntos = dblDescuentoAplicadoPuntosLocal
                        ElseIf vldblSubtotalCargo < dblDescuentoAplicadoPuntosLocal Then
                            vldblMontoAplicablePuntos = vldblSubtotalCargo
                        End If
                        vldblDescuentoPuntos = vldblMontoAplicablePuntos / vldblImporteCargo * 100
                        pActualizaDescuentos (vldblDescuentoCargo + vldblDescuentoPuntos), vllngContador
                        Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGrabaPuntos, "DESCUENTOS EN PANTALLA DE FACTURACIÓN A CLIENTE LEAL", "Cta. " & txtMovimientoPaciente.Text & " Cargo " & grdCargos.RowData(vllngContador) & " Descto. " & Format(Val(vldblDescuentoPuntos), "#,###.##00")) ''F10
                        vldblPuntosAplicados = vldblPuntosAplicados + vldblMontoAplicablePuntos
                        dblDescuentoAplicadoPuntosLocal = dblDescuentoAplicadoPuntosLocal - vldblMontoAplicablePuntos
                    End If
                End If
            Next
            
            ' Guarda el descuento otorgado por la aplicación de puntos de cada cargo
            EntornoSIHO.ConeccionSIHO.BeginTrans
            For vllngContador = 1 To grdCargos.Rows - 1
                If grdCargos.TextMatrix(vllngContador, 0) = "*" Then
                    lstrSentencia = "Update PvCargo Set mnydescuentoPuntos = (mnydescuento - mnydescuentooriginal)" & _
                                    " Where intnumcargo = " & Trim(str(grdCargos.RowData(vllngContador)))
                    pEjecutaSentencia (lstrSentencia)
                End If
            Next vllngContador
            EntornoSIHO.ConeccionSIHO.CommitTrans
            
        End If
    End If
        
    pLlenaCargos True
    pTotales
    sstFacturacion_Click (3)
    freBarra.Visible = False
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pAplicarDescuentoPuntos"))
End Sub

Private Sub pHabilitaExcluidoDescEspecial(blnHabilita As Boolean)
     'Label57(18).Visible = blnHabilita
     'Shape3(5).Visible = blnHabilita
     'Label57(19).Visible = blnHabilita
End Sub

Private Sub pCalculaTotalPagar(vldblTipoCambio As Double, vldblSubtotal As Double)
        If optTipoFacturacion(0).Value Then
            'Factura Consolidada
            'Considerar en que moneda esta la factura del paciente al pasar los pagos a la factura de la empresa
            If optPesos(1).Value Then 'Factura de empresa en pesos
                txtFEPagos.Text = IIf(optPesos(0).Value, txtFPPagos.Text, Format((CDbl(txtFPPagos.Text) * fdblTipoCambio(fdtmServerFecha, "V")), "$ ###,###,###,###.00"))
            Else
                'Factura de empresa en dólares
                txtFEPagos.Text = IIf(optPesos(0).Value, Format((CDbl(txtFPPagos.Text) * vldblTipoCambio), "$ ###,###,###,###.00"), txtFPPagos.Text)
            End If
            txtFETotalPagar.Text = Format(Val(Format(txtFETotalFactura.Text, "")) - Val(Format(txtFEDedyCoa.Text, "")) - Val(Format(txtFEPagos.Text, "")) - Val(Format(txtRetenionServ.Text, "")), "$ ###,###,###,###.00")
        Else
            'Factura separada
            txtFEPagos.Text = Format(0, "$ ###,###,###,###.00")
            If intIVATasaHospi = 1 And dblExcedenteDeIVA > 0 Then
                txtFETotalPagar.Text = Format(Val(Format(txtFETotalFactura.Text, "")) - Val(Format(txtFEDedyCoa.Text, "")) - Val(Format(txtRetenionServ.Text, "")), "$ ###,###,###,###.00")
            Else
''                txtFETotalPagar.Text = Format(vldblSubtotal - Val(Format(txtFEDedyCoa.Text, "")) + (ldblIVACargosSelConvenio - dblIVAPaciente), "$ ###,###,###,###.00")
                'txtFETotalPagar = Format(Format(Format(dblSubTotalP, "###############.00") / vldblTipoCambio, "###############.00") - Val(Format(txtFEDedyCoa.Text, "")) + Val(Format(txtFEIVA.Text, "")), "$ ###,###,###,###.00")
                txtFETotalPagar = Format(vldblSubtotal - Val(Format(txtFEDedyCoa.Text, "")) + Val(Format(txtFEIVA.Text, "")) - Val(Format(txtRetenionServ.Text, "")), "$ ###,###,###,###.00")
            End If
        End If

End Sub



Private Function fblnCuentasValidas(ObjRS As Recordset) As Boolean
    Dim lstrCuentaFaltante As String
    
    If IsNull(ObjRS!numCuentaProveedConsiga) Or IsNull(ObjRS!numCuentaOrdenAlmacen) Or IsNull(ObjRS!numCuentaOrdenProveedor) Then
        lstrCuentaFaltante = ""
        If IsNull(ObjRS!numCuentaProveedConsiga) Then lstrCuentaFaltante = lstrCuentaFaltante & Chr(13) & "Cuenta puente del proveedor de consignación"
        If IsNull(ObjRS!numCuentaOrdenAlmacen) Then lstrCuentaFaltante = lstrCuentaFaltante & Chr(13) & "Cuenta de orden del almacén de consignación"
        If IsNull(ObjRS!numCuentaOrdenProveedor) Then lstrCuentaFaltante = lstrCuentaFaltante & Chr(13) & "Cuenta de orden del proveedor de consignación"
        
        'El proveedor no tiene cuenta contable activa.
        MsgBox SIHOMsg(443) & Chr(13) & lstrCuentaFaltante, vbOKOnly + vbInformation, "Mensaje"
        fblnCuentasValidas = False
        Exit Function
    Else
        lstrCuentaFaltante = ""
        If Not fblnCuentaAfectable(fstrCuentaContable(ObjRS!numCuentaProveedConsiga), vgintClaveEmpresaContable) Then lstrCuentaFaltante = lstrCuentaFaltante & Chr(13) & "Cuenta puente del proveedor de consignación"
        If Not fblnCuentaAfectable(fstrCuentaContable(ObjRS!numCuentaOrdenAlmacen), vgintClaveEmpresaContable) Then lstrCuentaFaltante = lstrCuentaFaltante & Chr(13) & "Cuenta de orden del almacén de consignación"
        If Not fblnCuentaAfectable(fstrCuentaContable(ObjRS!numCuentaOrdenProveedor), vgintClaveEmpresaContable) Then lstrCuentaFaltante = lstrCuentaFaltante & Chr(13) & "Cuenta de orden del proveedor de consignación"
        If lstrCuentaFaltante = "" Then
            fblnCuentasValidas = True
        Else
            'la cuenta seleccionada no acepta movimientos
            MsgBox SIHOMsg(375) & Chr(13) & "Proveedor: " & ObjRS!VCHNOMBRECOMERCIAL & lstrCuentaFaltante, vbExclamation, "Mensaje"
            fblnCuentasValidas = False
            Exit Function
        End If
    End If

End Function

Private Function fblnCuentaCompartidaValida() As Boolean
    Dim rsAdRelacionCuentas As New ADODB.Recordset
    Dim rsCuentaAdmision As New ADODB.Recordset
    Dim rsCuentaFarmacia As New ADODB.Recordset
    
    fblnCuentaCompartidaValida = True
    ' -- Verifica si la cuenta de paciente se trata de una cuenta compartida
    If optGrupoCuenta(1).Value Then
        ' -- Caso 16652
        ' -- Parámetro activo
        ' -- Empresa login = empresa configurada para farmacia compartida
        ' -- Paciente PARTICULAR
        If cmdSepararCargosFarmacia.Visible And cmdSepararCargosFarmacia.Enabled Then
            If MsgBox("Existen cargos de medicamentos pendientes de separar." & Chr(13) & "¿Está seguro que desea incluir los medicamentos en una sola factura?", vbYesNo + vbQuestion + vbDefaultButton2, "Mensaje") = vbNo Then
                fblnCuentaCompartidaValida = False
                Exit Function
            End If
        End If
        
        ' Verificar si la cuenta a facturar es de la empresa de farmacia
        If aFarmaciaCompartida(0).blnActivo And aFarmaciaCompartida(0).lngClaveEmpresaFarmacia = vgintClaveEmpresaContable Then
            vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & str(vgintClaveEmpresaContable)
            Set rsCuentaFarmacia = frsEjecuta_SP(vgstrParametrosSP, "SP_PVSELEXTERNOFACTURA")
        
            If (rsCuentaFarmacia!bitUtilizaConvenio = 0 And rsCuentaFarmacia!tipo = "PARTICULAR") Then
                'Consulta la cuenta del paciente que fue creada de forma automática en admision de la empresa a la que pertenece la farmacia compartida
                vlstrx = "SELECT intNumCuentaAdmision FROM adRelacionCuentasFarmacia WHERE intNumcuentafarmacia = " & Val(txtMovimientoPaciente.Text)
                Set rsAdRelacionCuentas = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
                If rsAdRelacionCuentas.RecordCount > 0 Then
                    vlstrx = "SELECT expacienteingreso.intcuentafacturada, expacienteingreso.intcuentacerrada " & _
                             "FROM expacienteingreso INNER JOIN NODEPARTAMENTO ON expacienteingreso.intcvedepartamento = NODEPARTAMENTO.SMICVEDEPARTAMENTO " & _
                             "WHERE expacienteingreso.intNumCuenta = " & rsAdRelacionCuentas!intNumCuentaAdmision & _
                             "AND NODEPARTAMENTO.TNYCLAVEEMPRESA = " & aFarmaciaCompartida(0).lngClaveEmpresaHospital
                    Set rsCuentaAdmision = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
                    
                    If rsCuentaAdmision!INTCUENTACERRADA = 0 Or rsCuentaAdmision!INTCUENTACERRADA = False Then
                        If MsgBox("La cuenta del paciente se encuentra relacionada con la cuenta " & rsAdRelacionCuentas!intNumCuentaAdmision & " y esta no ha sido cerrada aún." & Chr(13) & "¿Está seguro que desea continuar?", vbYesNo + vbQuestion + vbDefaultButton2, "Mensaje") = vbNo Then
                            fblnCuentaCompartidaValida = False
                        Else
                            fblnCuentaCompartidaValida = True
                        End If
                    End If
                End If
            End If
        End If
        
    End If
    
End Function


Private Function fdblCostoPromedio(vlintDepto As Integer, vlstrCveArticulo As String) As Double
    On Error GoTo NotificaError
    Dim rs As New ADODB.Recordset
    
    fdblCostoPromedio = 0
    
    vlstrx = "Select mnyCostoPromedio From IvUbicacion Where smiCveDepartamento = " & str(vlintDepto) & " and chrCveArticulo = '" & Trim(vlstrCveArticulo) & "' "
    Set rs = frsRegresaRs(vlstrx, adLockOptimistic, adOpenForwardOnly)
    
    'Si está ubicado
    If rs.RecordCount > 0 Then
      If rs!mnycostopromedio > 0 Then fdblCostoPromedio = Round(rs!mnycostopromedio, 4)
    End If
    
    'Si no está ubicado, se toma el costo de la última entrada
    If fdblCostoPromedio = 0 Then
        vlstrx = "Select mnyCostoUltEntrada From IvArticuloEmpresas where chrCveArticulo = '" & Trim(vlstrCveArticulo) & "' And tnyclaveempresa = " & vgintClaveEmpresaContable
        Set rs = frsRegresaRs(vlstrx, adLockOptimistic, adOpenForwardOnly)
        
        If rs.RecordCount > 0 Then
            If rs!mnyCostoUltEntrada > 0 Then fdblCostoPromedio = Round(rs!mnyCostoUltEntrada, 4)
        End If
    End If
    
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fdblCostoPromedio"))
    Unload Me
End Function

Private Function flngRegistrarCargoDirecto() As Long
On Error GoTo NotificaError

    Dim vllngResultado As Long
    Dim rsAdRelacionCuentas As New ADODB.Recordset
    Dim rsCargo As New ADODB.Recordset
    Dim rsCargoNuevo As New ADODB.Recordset
    Dim rsArticulo As New ADODB.Recordset
    Dim vllngConsecutivoCargo As Long
    Dim vllngConsecutivoKardex As Long
    Dim vldblCantidadCargo As Double
    Dim vldblIVA As Double
    Dim vldblDescuento As Double
    Dim vldblIVAxArticulo As Double
    Dim vldblDescuentoxArticulo As Double
    Dim lintUnidad As Integer
    Dim vldblCantidadUM As Double
    Dim vldblCantidadUV As Double
        
    'EntornoSIHO.ConeccionSIHO.BeginTrans
    
    'Consulta la cuenta del paciente que fue creada de forma automática en admision de la empresa a la que pertenece la farmacia compartida
    vlstrx = "SELECT intNumCuentaFarmacia FROM adRelacionCuentasFarmacia WHERE intNumCuentaAdmision = " & Val(txtMovimientoPaciente.Text)
    Set rsAdRelacionCuentas = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
    If rsAdRelacionCuentas.RecordCount = 0 Then
        vlblnTermina = True
        MsgBox "No se ha encontrado la cuenta del paciente que corresponde a la farmacia compartida"
    End If
    
    vldblCantidadSeparar = 0
    X = 1
    Do While X <= grdCargos.Rows - 1 And Not vlblnError And Not vlblnTermina
        If grdCargos.TextMatrix(X, 60) <> "" Then
            vllngnoerror = flngBloqueaArticulo2(grdCargos.TextMatrix(X, 61), vgintNumeroDepartamento, cgstrModulo, Me.Name)
            If vllngnoerror <> 2 Then
                vlblnTermina = True
            ElseIf vllngnoerror = 2 Then

                vlstrx = "SELECT ivrequisicionmaestro.*, ivrequisiciondetalle.intcantidadsolicitada FROM IvRequisicionMaestro " & _
                         "INNER JOIN IvRequisicionDetalle ON ivrequisicionmaestro.numnumrequisicion = IvRequisicionDetalle.numnumrequisicion " & _
                         "WHERE numReqSolicitaConsignacion = " & CDbl(grdCargos.TextMatrix(X, 12)) & _
                         " AND IvRequisicionDetalle.chrcvearticulo = '" & grdCargos.TextMatrix(X, 61) & "'"
                Set rsIvRequisicionConsigna = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
    
                If (Val(grdCargos.TextMatrix(X, 30)) > 0 And Val(grdCargos.TextMatrix(X, 54)) > 0) Then
                    vldblCantidadSeparar = CDbl(grdCargos.TextMatrix(X, 54))
                Else
                    vldblCantidadSeparar = CDbl(rsIvRequisicionConsigna!IntCantidadSolicitada)
                End If

                vlstrx = "SELECT ISNULL(smicveconceptfact,0) smicveconceptfact FROM IVARTICULO WHERE intidarticulo = " & Trim(grdCargos.TextMatrix(X, 17))
                Set rsArticulo = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
                If rsArticulo.RecordCount > 0 Then
                    If rsArticulo!smiCveConceptFact = 0 Then
                        MsgBox "El artículo " & grdCargos.TextMatrix(X, 2) & " no tiene concepto de facturación.", vbOKOnly + vbExclamation, "Mensaje"
                        vlblnTermina = True
                        GoTo Siguiente
                    End If
                End If
                
                vlstrx = "SELECT * FROM PvCargo WHERE intNumCargo = " & grdCargos.RowData(X)
                Set rsCargo = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
                If rsCargo.RecordCount <> 0 Then

                    Set rsCargoNuevo = frsRegresaRs("select * from pvCargo where intnumCargo = -1", adLockOptimistic, adOpenDynamic)
                    rsCargoNuevo.AddNew
                    rsCargoNuevo!chrTipoDocumento = "D"
                    rsCargoNuevo!intFolioDocumento = 0
                    rsCargoNuevo!INTMOVPACIENTE = rsAdRelacionCuentas!intNumCuentaFarmacia
                    rsCargoNuevo!CHRTIPOPACIENTE = "E"
                    rsCargoNuevo!CHRCVECARGO = rsCargo!CHRCVECARGO
                    rsCargoNuevo!smicveconcepto = rsArticulo!smiCveConceptFact
                    rsCargoNuevo!chrTipoCargo = rsCargo!chrTipoCargo
                    rsCargoNuevo!dtmFechahora = fdtmServerFechaHora
                    rsCargoNuevo!intEmpleado = vllngPersonaGraba
                    rsCargoNuevo!SMIDEPARTAMENTO = aFarmaciaCompartida(0).lngCveDepartamentoFarmacia
                    rsCargoNuevo!bitExcluido = rsCargo!bitExcluido
                    rsCargoNuevo!bitHojaConsumo = rsCargo!bitHojaConsumo
                    rsCargoNuevo!intNumCirugia = rsCargo!intNumCirugia
                    rsCargoNuevo!intNumCargoPaquete = 0         'rsCargo!intNumCargoPaquete
                    rsCargoNuevo!intDescuentaInventario = rsCargo!intDescuentaInventario
                    rsCargoNuevo!mnyIncrementoHorario = rsCargo!mnyIncrementoHorario
                    rsCargoNuevo!bitPrecioManual = rsCargo!bitPrecioManual
                    rsCargoNuevo!intnumpaquete = 0  'rsCargo!intnumpaquete
                    rsCargoNuevo!intCveGrupo = rsCargo!intCveGrupo
                    rsCargoNuevo!chrFolioFacturaPaciente = rsCargo!chrFolioFacturaPaciente
                    rsCargoNuevo!intpaquetesPaciente = 0        'rsCargo!intpaquetesPaciente
                    rsCargoNuevo!mnycosto = rsCargo!mnycosto
                    rsCargoNuevo!chrMedicoEnfermera = rsCargo!chrMedicoEnfermera
                    rsCargoNuevo!bitFechaManual = rsCargo!bitFechaManual
                    rsCargoNuevo!mnyIeps = rsCargo!mnyIeps
                    vldblCantidadCargo = rsCargo!MNYCantidad
                    vldblIVA = rsCargo!MNYIVA
                    vldblDescuento = rsCargo!MNYDESCUENTO
                    vldblIVAxArticulo = vldblIVA / vldblCantidadCargo
                    vldblDescuentoxArticulo = vldblDescuento / vldblCantidadCargo
                    
                    rsCargoNuevo!mnyPrecio = rsCargo!mnyPrecio + vldblIVAxArticulo
                    rsCargoNuevo!MNYCantidad = vldblCantidadSeparar
                                        
                    rsCargoNuevo!MNYIVA = 0
                    rsCargoNuevo!MNYDESCUENTO = Format(vldblDescuentoxArticulo * vldblCantidadSeparar, "##########.00")

                    rsCargoNuevo.Update
                    vllngConsecutivoCargo = flngObtieneIdentity("SEC_PVCARGO", rsCargoNuevo!IntNumCargo)
                End If
                
                '-- Disminuir existencias de almacen FARMACIA, registro en kardex --'
                lintUnidad = 1 'Unidad alterna
                vgstrParametrosSP = CStr(aFarmaciaCompartida(0).lngCveDepartamentoFarmacia) & _
                                    "|" & Trim(grdCargos.TextMatrix(X, 61)) & _
                                    "|" & CStr(vldblCantidadSeparar) & _
                                    "|" & lintUnidad
                vllngResultado = 1
                frsEjecuta_SP vgstrParametrosSP, "sp_IvDescuentaUbicacion", True, vllngResultado
                If vllngResultado = 1 Then
                    vldblCantidadUM = 0
                    vldblCantidadUV = vldblCantidadSeparar
                   
                    pMovimientoKardex "SCD", _
                    vllngConsecutivoCargo, _
                    Trim(grdCargos.TextMatrix(X, 61)), _
                    CLng(vldblCantidadUM), _
                    CLng(vldblCantidadUV), _
                    CInt(aFarmaciaCompartida(0).lngCveDepartamentoFarmacia)
                    
                    vllngConsecutivoKardex = flngObtieneIdentity("SEC_IvKardexInventario", 0)
                    pEjecutaSentencia "update pvCargo set INTNUMKARDEX = " & vllngConsecutivoKardex & " where IntNumCargo = " & str(vllngConsecutivoCargo)
                Else
                    vlblnTermina = True
                    MsgBox "No se puede registrar la salida del artículo " & Chr(13) & grdCargos.TextMatrix(X, 61) & Chr(13) & " el departamento " & rsReqFarmaciaCompartida!nombreDepartamento & " no tiene existencia, consulte de nuevo.", vbOKOnly + vbExclamation, "Mensaje"
                End If
                vllngnoerror = flngLiberaArticulo(grdCargos.TextMatrix(X, 61), vgintNumeroDepartamento)
                If vllngnoerror <> 2 Then vlblnTermina = True
                            
                Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGraba, "CARGO DIRECTO", CStr(grdCargos.RowData(X)))
            End If
        End If
        
Siguiente:
        X = X + 1
    Loop
    
    If Not vlblnTermina Then
        'EntornoSIHO.ConeccionSIHO.CommitTrans
        flngRegistrarCargoDirecto = 0
    Else
        vllngnoerror = flngLiberaArticulo(grdCargos.TextMatrix(X, 61), vgintNumeroDepartamento)
        EntornoSIHO.ConeccionSIHO.RollbackTrans
        flngRegistrarCargoDirecto = -1
    End If
    
    
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":flngRegistrarCargoDirecto"))
    Unload Me
End Function

Private Function flngRegistrarOtraES() As Long
On Error GoTo NotificaError
    Dim rsIvOtrasEntSalMaestro As New ADODB.Recordset
    Dim rsIvOtrasEntSalDetalle As New ADODB.Recordset
    Dim rsTipoES As New ADODB.Recordset
    Dim vlintTipoEntrada As Integer
    Dim vlintTipoSalida As Integer
    Dim vllngnumentsal As Long
    Dim vlblnTermina As Boolean
    Dim vldblCostoPromedio As Double
    Dim lintUnidad As Integer
    Dim vllngResultado As Long
    Dim vldblCantidadUM As Double
    Dim vldblCantidadUV As Double
    Dim vldblCostoUltEntrada As Double
    Dim vldblPrecioMaximoPublico As Double
    Dim lstrConfiActivo As String  'para identificar la configuracion de la cuenta de activos
    Dim rsAux As New ADODB.Recordset
    Dim ldblTipoCambioDia As Double
    Dim ldblCantidad As Double
    Dim llngNumPoliza As Long
    Dim lintConsecutivo As Long
    Dim rsIvReposicionSaldo As New ADODB.Recordset
    
    'Recordset tabla a IvOtrasEntSalMaestro
    vlstrx = "select NUMNUMENTRADASALIDA, SMICVETIPOENTSAL, INTCVEEMPLEADO, SMICVEDEPARTAMENTO, DTMFECHAENTSAL, DTMHORAENTSAL, VCHOBSERVACIONES from IvOtrasEntSalMaestro where NUMNUMENTRADASALIDA = -1"
    Set rsIvOtrasEntSalMaestro = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
    
    ' Recordset tabla a IvOtrasEntSalDetalle
    vlstrx = "select NUMNUMENTRADASALIDA, CHRCVEARTICULO, RELCANTIDAD, INTCVEUNIDADVTA, MNYCOSTO, MNYCOSTOPROMEDIO, CHRUNIDADCONTROL, MNYPRECIOMAXIMOPUBLICO from IvOtrasEntSalDetalle where NUMNUMENTRADASALIDA = -1"
    Set rsIvOtrasEntSalDetalle = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
    
    ' Recordset tabla a IvOtrasEntSalDetalle
    vlstrx = "select * from IvReposicionSaldo where NUMNUMENTRADASALIDA = -1"
    Set rsIvReposicionSaldo = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
    
    'EntornoSIHO.ConeccionSIHO.BeginTrans
    
    vldblCantidadSeparar = 0
    vlblnTermina = False
    vlblnError = False
    vlintMensaje = 0
    X = 1
    
    pCargaParametroAlmacen
    lstrConfiActivo = gstrConfiguracionActivo
    If lstrConfiActivo = "" Then
        'Existen datos incorrectos. Por favor verifique.  -***cambiar****
        MsgBox SIHOMsg(539) & " No existen parámetros de póliza para cuenta de activo.", vbExclamation, "Error"
        vlblnTermina = True
    End If
    
    ldblTipoCambioDia = fdblTipoCambio(fdtmServerFecha, "O")
    ReDim aPolizaOrden(0)
    
    vlstrx = "SELECT ivtipootrasentsal.smiCveTipoEntSal Clave, " & _
             "ivtipootrasentsal.vchDescripcion Descripcion, ivtipootrasentsal.chrNaturaleza " & _
             "FROM ivtipootrasentsal WHERE ivtipootrasentsal.bitconsignacion = 1"
    Set rsTipoES = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)

    While Not rsTipoES.EOF
        Select Case rsTipoES!chrNaturaleza
            Case "E"
                vlintTipoEntrada = rsTipoES!clave
            Case "S"
                vlintTipoSalida = rsTipoES!clave
        End Select
        rsTipoES.MoveNext
    Wend
    
    '-- 16652
    '--------------------------------------
    '-- OTRA SALIDA del almacén consignación
    '--------------------------------------
    'Grabar maestro
    With rsIvOtrasEntSalMaestro
        .AddNew
        !SMICVETIPOENTSAL = vlintTipoSalida
        !smicvedepartamento = aFarmaciaCompartida(0).lngCveDepartamentoConsignacion
        !DTMFECHAENTSAL = fdtmServerFecha
        !DTMHORAENTSAL = fdtmServerHora
        !vchObservaciones = Trim("Salida de almacén consignación por separación de cargos")
        !intCveEmpleado = vllngPersonaGraba
        .Update
    End With
    
    vllngnumentsal = flngObtieneIdentity("SEC_IVOtrasEntSalMaestro", vllngnumentsal)
    
    Do While X <= grdCargos.Rows - 1 And Not vlblnError And Not vlblnTermina
        If grdCargos.TextMatrix(X, 60) <> "" Then
            vllngnoerror = flngBloqueaArticulo2(grdCargos.TextMatrix(X, 61), vgintNumeroDepartamento, cgstrModulo, Me.Name)
            If vllngnoerror <> 2 Then
                vlblnTermina = True
            ElseIf vllngnoerror = 2 Then
                vgstrParametrosSP = vgintClaveEmpresaContable & "|" & grdCargos.TextMatrix(X, 12) & "|" & aFarmaciaCompartida(0).lngCveDepartamentoConsignacion & "|" & Trim(grdCargos.TextMatrix(X, 17)) & "|" & grdCargos.RowData(X)
                Set rsReqFarmaciaCompartida = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelReqFarmaciaCompartida")
            
                vlstrx = "SELECT ivrequisicionmaestro.*, ivrequisiciondetalle.intcantidadsolicitada FROM IvRequisicionMaestro " & _
                         "INNER JOIN IvRequisicionDetalle ON ivrequisicionmaestro.numnumrequisicion = IvRequisicionDetalle.numnumrequisicion " & _
                         "WHERE numReqSolicitaConsignacion = " & CDbl(grdCargos.TextMatrix(X, 12)) & _
                         " AND IvRequisicionDetalle.chrcvearticulo = '" & grdCargos.TextMatrix(X, 61) & "'"
                Set rsIvRequisicionConsigna = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
                
                If (Val(grdCargos.TextMatrix(X, 30)) > 0 And Val(grdCargos.TextMatrix(X, 54)) > 0) Then
                    vldblCantidadSeparar = CDbl(grdCargos.TextMatrix(X, 54))
                Else
                    vldblCantidadSeparar = CDbl(rsIvRequisicionConsigna!IntCantidadSolicitada)
                End If
                
                vldblCostoPromedio = Round(fdblCostoPromedio(rsReqFarmaciaCompartida!smicvedepartamento, grdCargos.TextMatrix(X, 61)), 4)
                
                'Grabar detalle
                With rsIvOtrasEntSalDetalle
                    .AddNew
                    !NUMNUMENTRADASALIDA = CDbl(vllngnumentsal)
                    !chrcvearticulo = grdCargos.TextMatrix(X, 61)
                    !relCantidad = vldblCantidadSeparar
                    !intCveUnidadVta = rsReqFarmaciaCompartida!ClaveTipoUnidad
                    !mnycosto = vldblCostoPromedio
                    !mnycostopromedio = vldblCostoPromedio
                    !CHRUNIDADCONTROL = rsReqFarmaciaCompartida!CHRUNIDADCONTROL
                    !mnyPrecioMaximoPublico = 0
                    .Update
                End With
                
                lintUnidad = IIf(Trim(rsReqFarmaciaCompartida!CHRUNIDADCONTROL) = "A", 1, 0)
                vgstrParametrosSP = CStr(rsReqFarmaciaCompartida!smicvedepartamento) & _
                                    "|" & Trim(grdCargos.TextMatrix(X, 61)) & _
                                    "|" & CStr(vldblCantidadSeparar) & _
                                    "|" & lintUnidad
                vllngResultado = 1
                frsEjecuta_SP vgstrParametrosSP, "sp_IvDescuentaUbicacion", True, vllngResultado
                If vllngResultado = 1 Then
                    vldblCantidadUM = 0
                    vldblCantidadUV = vldblCantidadSeparar
                   
                    pMovimientoKardex "SOS", _
                    vllngnumentsal, _
                    Trim(grdCargos.TextMatrix(X, 61)), _
                    CLng(vldblCantidadUM), _
                    CLng(vldblCantidadUV), _
                    rsIvRequisicionConsigna!smiCveDeptoAlmacen
                Else
                    vlblnTermina = True
                    MsgBox "No se puede registrar la salida del artículo " & Chr(13) & grdCargos.TextMatrix(X, 61) & Chr(13) & " el departamento " & rsReqFarmaciaCompartida!nombreDepartamento & " no tiene existencia, consulte de nuevo.", vbOKOnly + vbExclamation, "Mensaje"
                End If
                vllngnoerror = flngLiberaArticulo(grdCargos.TextMatrix(X, 61), vgintNumeroDepartamento)
                If vllngnoerror <> 2 Then vlblnTermina = True
                
                If Not vlblnTermina Then
                    If fblnCuentasValidas(rsReqFarmaciaCompartida) Then
                        vgstrParametrosSP = rsReqFarmaciaCompartida!INTCVEPROVEEDOR & "|C|" & Trim(grdCargos.TextMatrix(X, 61))
                        Set rsAux = frsEjecuta_SP(vgstrParametrosSP, "Sp_Coselartproveedor")
                        If rsAux.RecordCount > 0 Then
                            'unidad alterna
                            ldblCantidad = rsAux!mnyCostoVigente _
                                          * vldblCantidadSeparar _
                                          * IIf(rsAux!vchMoneda = "PESOS", 1, ldblTipoCambioDia)
                        
                            'Cargo cuenta orden proveedor consigna
                            pLlenapoliza rsReqFarmaciaCompartida!numCuentaOrdenProveedor, Format(ldblCantidad, "############.0000"), 1, aPolizaOrden()
                            'Abono cuenta orden almacen consigna
                            pLlenapoliza rsReqFarmaciaCompartida!numCuentaOrdenAlmacen, Format(ldblCantidad, "############.0000"), 0, aPolizaOrden()
                            
                        Else
                            'el artículo no está asignado a la lista de precios del proveedor
                            MsgBox SIHOMsg(971) & Chr(13) & grdCargos.TextMatrix(X, 2) & Chr(13) & rsReqFarmaciaCompartida!nombreDepartamento, vbExclamation, "Mensaje"
                            vlblnTermina = True
                        End If
                    Else
                        vlblnTermina = True
                    End If
                Else
                    vlblnTermina = True
                End If
                
                Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGraba, "OTRA SALIDA CONSIGNACIÓN", CStr(vllngnumentsal))
            End If
        End If
        
Siguiente:
        X = X + 1
    Loop

    '---Movimiento contable (póliza de orden)---
    If Not vlblnTermina Then
        llngResultado = 1
        vgstrParametrosSP = vgintClaveEmpresaContable & "|" & "Grabando poliza"
        frsEjecuta_SP vgstrParametrosSP, "sp_CnUpdEstatusCierre", True, llngResultado
        If llngResultado = 1 Then
            If fblnPeriodoCerrado(vgintClaveEmpresaContable, Year(fdtmServerFecha), Month(fdtmServerFecha)) Then
                'El periodo contable esta cerrado
                MsgBox SIHOMsg(209), vbExclamation + vbOKOnly, "Mensaje"
                vlblnTermina = True
            Else
                'Poliza: CARGO Cuenta orden proveedor consigna   ABONO Cuenta orden Almacen consigna
                vgstrParametrosSP = vgintClaveEmpresaContable _
                                    & "|" & Year(fdtmServerFecha) _
                                    & "|" & Month(fdtmServerFecha) _
                                    & "|" & Format(fdtmServerFecha, "DD/MM/YYYY") _
                                    & "|" & flngFolioPoliza(vgintClaveEmpresaContable, "O", Year(fdtmServerFecha), Month(fdtmServerFecha), False) _
                                    & "|" & "O" _
                                    & "|" & "OTRA SALIDA DE CONSIGNACIÓN " & vllngnumentsal _
                                    & "|" & aFarmaciaCompartida(0).lngCveDepartamentoConsignacion _
                                    & "|" & vllngPersonaGraba _
                                    & "|S/N|0"
                llngNumPoliza = 1
                frsEjecuta_SP vgstrParametrosSP, "SP_IVINSCNPOLIZA", True, llngNumPoliza
                For lintCiclos = 0 To UBound(aPolizaOrden(), 1)
                    lintConsecutivo = flngInsertarPolizaDetalle(llngNumPoliza, aPolizaOrden(lintCiclos).llngNumeroCuenta, aPolizaOrden(lintCiclos).ldblCantidadMovimiento, aPolizaOrden(lintCiclos).lintTipoMovimiento)
                Next lintCiclos
                
                pEjecutaSentencia "update CnEstatusCierre set vchEstatus='Libre' where tnyClaveEmpresa=" & str(vgintClaveEmpresaContable)
            End If
        Else
            'No se puede realizar la operación, inténtelo en unos minutos.
            MsgBox SIHOMsg(720), vbExclamation + vbOKOnly, "Mensaje"
            vlblnTermina = True
        End If
    End If

    If vlblnTermina = False Then
        '--------------------------------------
        '-- OTRA ENTRADA al almacén farmacia
        '--------------------------------------
        'Grabar maestro
        X = 1
        With rsIvOtrasEntSalMaestro
            .AddNew
            !SMICVETIPOENTSAL = vlintTipoEntrada
            !smicvedepartamento = aFarmaciaCompartida(0).lngCveDepartamentoFarmacia
            !DTMFECHAENTSAL = fdtmServerFecha
            !DTMHORAENTSAL = fdtmServerHora
            !vchObservaciones = Trim("Entrada a almacén por separación de cargos")
            !intCveEmpleado = vllngPersonaGraba
            .Update
        End With
        
        vllngnumentsal = flngObtieneIdentity("SEC_IVOtrasEntSalMaestro", vllngnumentsal)
    End If
    
    Do While X <= grdCargos.Rows - 1 And Not vlblnError And Not vlblnTermina
        If grdCargos.TextMatrix(X, 60) <> "" Then
            vllngnoerror = flngBloqueaArticulo2(grdCargos.TextMatrix(X, 61), vgintNumeroDepartamento, cgstrModulo, Me.Name)
            If vllngnoerror <> 2 Then
                vlblnTermina = True
            ElseIf vllngnoerror = 2 Then
                vgstrParametrosSP = vgintClaveEmpresaContable & "|" & grdCargos.TextMatrix(X, 12) & "|" & aFarmaciaCompartida(0).lngCveDepartamentoConsignacion & "|" & Trim(grdCargos.TextMatrix(X, 17)) & "|" & grdCargos.RowData(X)
                Set rsReqFarmaciaCompartida = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelReqFarmaciaCompartida")
            
                vlstrx = "SELECT ivrequisicionmaestro.*, ivrequisiciondetalle.intcantidadsolicitada FROM IvRequisicionMaestro " & _
                         "INNER JOIN IvRequisicionDetalle ON ivrequisicionmaestro.numnumrequisicion = IvRequisicionDetalle.numnumrequisicion " & _
                         "WHERE numReqSolicitaConsignacion = " & CDbl(grdCargos.TextMatrix(X, 12)) & _
                         " AND IvRequisicionDetalle.chrcvearticulo = '" & grdCargos.TextMatrix(X, 61) & "'"
                Set rsIvRequisicionConsigna = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
                                               
                If (Val(grdCargos.TextMatrix(X, 30)) > 0 And Val(grdCargos.TextMatrix(X, 54)) > 0) Then
                    vldblCantidadSeparar = CDbl(grdCargos.TextMatrix(X, 54))
                Else
                    vldblCantidadSeparar = CDbl(rsIvRequisicionConsigna!IntCantidadSolicitada)
                End If
                                                            
                vlstrx = "select intContenido, intIdArticulo, IvArticuloEmpresas.mnyCostoUltEntrada, IvArticuloEmpresas.mnyPrecioMaximoPublico, chrCostoGasto " & _
                                 "  from IvArticulo inner join IvArticuloEmpresas On IVARTICULO.chrcvearticulo = IVARTICULOEMPRESAS.chrcvearticulo And IVARTICULOEMPRESAS.tnyclaveempresa = " & vgintClaveEmpresaContable & _
                                 " where IvArticulo.chrCveArticulo='" & Trim(grdCargos.TextMatrix(X, 61)) & "' "
                Set rs = frsRegresaRs(vlstrx)
                If rs.RecordCount Then
                    vldblCostoUltEntrada = FormatCurrency(rs!mnyCostoUltEntrada, 4)
                    vldblPrecioMaximoPublico = FormatCurrency(rs!mnyPrecioMaximoPublico, 2)
                End If
                                
                vldblCostoPromedio = Round(fdblCostoPromedio(CInt(aFarmaciaCompartida(0).lngCveDepartamentoFarmacia), grdCargos.TextMatrix(X, 61)), 4)
                
                'Grabar detalle
                With rsIvOtrasEntSalDetalle
                    .AddNew
                    !NUMNUMENTRADASALIDA = CDbl(vllngnumentsal)
                    !chrcvearticulo = grdCargos.TextMatrix(X, 61)
                    !relCantidad = vldblCantidadSeparar
                    !intCveUnidadVta = rsReqFarmaciaCompartida!ClaveTipoUnidad
                    !mnycosto = vldblCostoUltEntrada
                    !mnycostopromedio = vldblCostoPromedio
                    !CHRUNIDADCONTROL = rsReqFarmaciaCompartida!CHRUNIDADCONTROL
                    !mnyPrecioMaximoPublico = vldblPrecioMaximoPublico
                    .Update
                End With
                
                vgstrParametrosSP = aFarmaciaCompartida(0).lngCveDepartamentoFarmacia & _
                                    "|" & Trim(grdCargos.TextMatrix(X, 61)) & _
                                    "|" & CStr(vldblCantidadSeparar) & _
                                    "|" & Trim(rsReqFarmaciaCompartida!CHRUNIDADCONTROL) & _
                                    "|" & CStr(rsReqFarmaciaCompartida!smicvedepartamento) & _
                                    "|" & vldblCostoPromedio
                vllngResultado = 1
                frsEjecuta_SP vgstrParametrosSP, "SP_IvAumentaUbicacion"
                If vllngResultado = 1 Then
                    vldblCantidadUM = 0
                    vldblCantidadUV = vldblCantidadSeparar
                   
                    pMovimientoKardex "EOE", _
                    vllngnumentsal, _
                    Trim(grdCargos.TextMatrix(X, 61)), _
                    CLng(vldblCantidadUM), _
                    CLng(vldblCantidadUV), _
                    CInt(aFarmaciaCompartida(0).lngCveDepartamentoFarmacia)
                Else
                    vlblnTermina = True
                    MsgBox "No se puede registrar la entada del artículo " & Chr(13) & grdCargos.TextMatrix(X, 61) & Chr(13) & " el departamento " & rsReqFarmaciaCompartida!nombreDepartamento & " no tiene existencia, consulte de nuevo.", vbOKOnly + vbExclamation, "Mensaje"
                End If
                
                ' Actualiza Articulo
                'vgstrParametrosSP = grdCargos.TextMatrix(X, 61) & "|" & CStr(vldblCostoUltEntrada) & "|" & CStr(vldblPrecioMaximoPublico) & "|" & fdtmServerFecha & "|" & 0 & "|" & aFarmaciaCompartida(0).lngClaveEmpresaFarmacia
                'frsEjecuta_SP vgstrParametrosSP, "sp_IvupdEntradaArticulo"
                
                vllngnoerror = flngLiberaArticulo(grdCargos.TextMatrix(X, 61), vgintNumeroDepartamento)
                If vllngnoerror <> 2 Then vlblnTermina = True
                                
                'Grabar detalle en IvReposicionSaldo (se utiliza en el proceso de reposición de medicamentos)
                With rsIvReposicionSaldo
                    .AddNew
                    !NUMNUMENTRADASALIDA = CDbl(vllngnumentsal)
                    !chrcvearticulo = grdCargos.TextMatrix(X, 61)
                    !intCantidadDevuelta = vldblCantidadSeparar
                    !INTCANTIDADREPUESTA = 0
                    !INTSALDO = vldblCantidadSeparar
                    .Update
                End With
                                
                Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGraba, "OTRA ENTRADA CONSIGNACIÓN", CStr(vllngnumentsal))
            End If
        End If
        
SiguienteEnt:
        X = X + 1
    Loop
    
    If Not vlblnTermina Then
        'EntornoSIHO.ConeccionSIHO.CommitTrans
        flngRegistrarOtraES = 0
    Else
        EntornoSIHO.ConeccionSIHO.RollbackTrans
        flngRegistrarOtraES = -1
    End If

    rsIvOtrasEntSalMaestro.Close
    rsIvOtrasEntSalDetalle.Close
    rsIvReposicionSaldo.Close
    
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":flngRegistrarOtraES"))
    Unload Me
End Function

Private Sub pAcumularPuntos(lngConsecutivoFactura As Long, strFolioDocumento As String, vldtmFechaHoy As Date, vldtmHoraHoy As Date)
On Error GoTo NotificaError
    
    Dim vlstrSentencia As String
    Dim rsRango As New ADODB.Recordset
    Dim rsPuntosObtenidos As New ADODB.Recordset
    Dim rs As New ADODB.Recordset
    Dim vllngCveMedicoLab As Long
    Dim vllngCveMedicoImagen As Long
    Dim vllngCveMedicoCargo As Long
    Dim vllngCveTipoIngreso As Long
    
    '-- 16801 --
    vllngCveTipoIngreso = 0
    vllngCveMedicoLab = 0
    vllngCveMedicoImagen = 0
    vllngCveMedicoCargo = 0
    
    'Busca si el Subtotal entra en algún rango en el tabulador de puntos
    vlstrSentencia = " Select min(ta.mnylimitesuperior), ta.intPuntosPaciente, ta.intPuntosMedico From PvTabuladorPuntosLealtad ta Where " & Val(Format(txtFPSubtotal.Text, "")) & " >= ta.mnylimiteinferior" & _
                     " And " & Val(Format(txtFPSubtotal.Text, "")) & " <= ta.mnylimitesuperior " & _
                     " Group by ta.intpuntospaciente, ta.intpuntosmedico"
    
    Set rsRango = frsRegresaRs(vlstrSentencia, adOpenDynamic, adLockOptimistic)
    If rsRango.RecordCount > 0 Then
        vlstrSentencia = "select intCveTipoIngreso, intCveTipoPaciente from ExPacienteIngreso where intNumCuenta = " & Val(txtMovimientoPaciente.Text)
        Set rs = frsRegresaRs(vlstrSentencia, adOpenDynamic, adLockOptimistic)
        If rs.RecordCount > 0 Then vllngCveTipoIngreso = rs!intCveTipoIngreso
        
        '- 8  EXTERNO
        '-10 CONSULTA EXTERNA
        If vllngCveTipoIngreso = 8 Or vllngCveTipoIngreso = 10 Then
            'Busca si existe una solicitud de laboratorio, para generar puntos al médico
            vlstrSentencia = "select nvl(min(intnummedico), 0) intnummedico from LASolicitudExamen where intMovPaciente = " & Val(txtMovimientoPaciente.Text)
            Set rs = frsRegresaRs(vlstrSentencia, adOpenDynamic, adLockOptimistic)
            If rs.RecordCount > 0 Then vllngCveMedicoLab = rs!intnummedico
        
            'Busca si existe una solicitud de imagenologia, para generar puntos al médico
            vlstrSentencia = "select nvl(min(intnummedico), 0) intnummedico from IMSolicitudEstudio where intMovPaciente = " & Val(txtMovimientoPaciente.Text)
            Set rs = frsRegresaRs(vlstrSentencia, adOpenDynamic, adLockOptimistic)
            If rs.RecordCount > 0 Then vllngCveMedicoImagen = rs!intnummedico
        End If
                
        '- 1   INTERNAMIENTO Normal
        '- 2   AMBULATORIO
        '- 4   INTERNO FUE URGENCIAS
        '- 5   INTERNO FUE AMBULATORIO
        '- 6   RECIÉN NACIDO
        '-11  CORTA ESTANCIA
        '-12  INTERNO FUE CORTA ESTANCIA
        '-13  CORTA ESTANCIA FUE AMBULATORIO
        If vllngCveTipoIngreso = 1 Or vllngCveTipoIngreso = 2 Or vllngCveTipoIngreso = 4 Or vllngCveTipoIngreso = 5 Or vllngCveTipoIngreso = 6 Or vllngCveTipoIngreso = 11 Or vllngCveTipoIngreso = 12 Or vllngCveTipoIngreso = 13 Then
            'Busca si hay médico a cargo, para generar puntos al médico
            vlstrSentencia = "select nvl(min(intcvemedicotratante), 0) intnummedico from ExPacienteIngreso where intnumcuenta = " & Val(txtMovimientoPaciente.Text)
            Set rs = frsRegresaRs(vlstrSentencia, adOpenDynamic, adLockOptimistic)
            If rs.RecordCount > 0 Then vllngCveMedicoCargo = rs!intnummedico
        End If
        
        vlstrSentencia = "SELECT * FROM PvPuntosObtenidosPaciente"
        Set rsPuntosObtenidos = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
           
        rsPuntosObtenidos.AddNew
        rsPuntosObtenidos!intIdFactura = lngConsecutivoFactura
        rsPuntosObtenidos!chrfoliofactura = Trim(strFolioDocumento)
        rsPuntosObtenidos!intNumCuenta = CLng(txtMovimientoPaciente.Text)
        rsPuntosObtenidos!intnumpaciente = vllngNumeroPaciente
        rsPuntosObtenidos!mnySubtotalFactura = Val(Format(txtFPSubtotal.Text, ""))
        rsPuntosObtenidos!intpuntospaciente = rsRango!intpuntospaciente
        rsPuntosObtenidos!intcvemedicolab = vllngCveMedicoLab
        rsPuntosObtenidos!intpuntosMedicoLab = IIf(vllngCveMedicoLab = 0, 0, rsRango!intPuntosMedico)
        rsPuntosObtenidos!intcvemedicoImagen = vllngCveMedicoImagen
        rsPuntosObtenidos!intpuntosMedicoImagen = IIf(vllngCveMedicoImagen = 0, 0, rsRango!intPuntosMedico)
        rsPuntosObtenidos!intcvemedicoCargo = vllngCveMedicoCargo
        rsPuntosObtenidos!intpuntosMedicoCargo = IIf(vllngCveMedicoCargo = 0, 0, rsRango!intPuntosMedico)
        rsPuntosObtenidos!dtmFechahora = vldtmFechaHoy + vldtmHoraHoy
        rsPuntosObtenidos.Update
        rsPuntosObtenidos.Close
        
    End If
    rsRango.Close
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":pAcumularPuntos"))
End Sub

Private Sub pLlenapoliza(vllngxNumeroCuenta As Long, vldblxCantidad As Double, vlintxTipoMovto As Integer, apoliza() As RegistroPoliza)
    Dim vlintTamaño As Integer
    Dim vlintPosicion As Integer
    Dim vlblnEstaCuenta As Boolean
    Dim z As Integer
    
    If apoliza(0).llngNumeroCuenta = 0 Then
        apoliza(0).llngNumeroCuenta = vllngxNumeroCuenta
        apoliza(0).ldblCantidadMovimiento = vldblxCantidad
        apoliza(0).lintTipoMovimiento = vlintxTipoMovto
    Else
        vlblnEstaCuenta = False
        vlintTamaño = UBound(apoliza(), 1)
        For z = 0 To vlintTamaño
            If apoliza(z).llngNumeroCuenta = vllngxNumeroCuenta Then
                vlblnEstaCuenta = True
                vlintPosicion = z
            End If
        Next z
        
        If vlblnEstaCuenta Then
            If apoliza(vlintPosicion).lintTipoMovimiento = vlintxTipoMovto Then
                apoliza(vlintPosicion).ldblCantidadMovimiento = apoliza(vlintPosicion).ldblCantidadMovimiento + vldblxCantidad
            Else
                If apoliza(vlintPosicion).ldblCantidadMovimiento > vldblxCantidad Then
                    apoliza(vlintPosicion).ldblCantidadMovimiento = apoliza(vlintPosicion).ldblCantidadMovimiento - vldblxCantidad
                Else
                    If apoliza(vlintPosicion).ldblCantidadMovimiento < vldblxCantidad Then
                        apoliza(vlintPosicion).ldblCantidadMovimiento = vldblxCantidad - apoliza(vlintPosicion).ldblCantidadMovimiento
                        If apoliza(vlintPosicion).lintTipoMovimiento = 1 Then
                            apoliza(vlintPosicion).lintTipoMovimiento = 0
                        Else
                            apoliza(vlintPosicion).lintTipoMovimiento = 1
                        End If
                    Else
                        apoliza(vlintPosicion).llngNumeroCuenta = 0
                        apoliza(vlintPosicion).ldblCantidadMovimiento = 0
                        apoliza(vlintPosicion).lintTipoMovimiento = 0
                    End If
                End If
            End If
        Else
            ReDim Preserve apoliza(vlintTamaño + 1)
            apoliza(vlintTamaño + 1).llngNumeroCuenta = vllngxNumeroCuenta
            apoliza(vlintTamaño + 1).ldblCantidadMovimiento = vldblxCantidad
            apoliza(vlintTamaño + 1).lintTipoMovimiento = vlintxTipoMovto
        End If
    End If
End Sub


Private Function fBlnExtraeParametropoliza(lstrActivo As String, lstrArticulo As String, ByRef llngCuenta As Long, llngDepartamento As Long) As Boolean
'Esta función sólo es válido para cuentas de activos y sólo para el cargo
'La función completa es utilizada en el proceso de generación de póliza de almacén
On Error GoTo NotificaError
    'Dim rs As New ADODB.Recordset
    Dim lstrAux As String
    Dim lblnError As Boolean
  
    fBlnExtraeParametropoliza = False
    lblnError = False
    If Not lblnError Then
        lstrAux = ""
        lstrAux = lstrAux & "SELECT intCveDepartamento, chrTipoActivoGastoCosto, intNumCuentaContable, chrTipoArticuloMedicamentoInsu, chrCveFamilia, chrCveSubFamilia, chrTipoGastoCostoAmbos "
        lstrAux = lstrAux & " FROM IvParametroPoliza "
        lstrAux = lstrAux & " WHERE chrTipoActivoGastoCosto = 'A'"
        lstrAux = lstrAux & " AND TNYCLAVEEMPRESA = " & vgintClaveEmpresaContable
      
        If (Mid(lstrActivo, 1, 1) = "1") Then
            lstrAux = lstrAux & " AND intCveDepartamento = " & CStr(llngDepartamento) 'CStr(vlintdepartamento)
        End If
        
        If ((Mid(lstrActivo, 2, 1) > "1") And (Mid(lstrActivo, 2, 1) < "5")) Then
            lstrAux = lstrAux & " AND chrTipoArticuloMedicamentoInsu = " & fstrTipoFamiliaSubFamilia(lstrArticulo, 1) & " "
            If ((Mid(lstrActivo, 2, 1) = "3") Or (Mid(lstrActivo, 2, 1) = "4")) Then
                lstrAux = lstrAux & " AND chrCveFamilia = " & fstrTipoFamiliaSubFamilia(lstrArticulo, 2) & " "
                If (Mid(lstrActivo, 2, 1) = "4") Then
                    lstrAux = lstrAux & " AND chrCveSubFamilia = " & fstrTipoFamiliaSubFamilia(lstrArticulo, 3) & " "
                End If
            End If
        End If
        
        If (Mid(lstrActivo, 3, 1) = "5") Then
            lstrAux = lstrAux & " AND chrTipoGastoCostoAmbos = '" & frsRegresaRs("SELECT chrCostoGasto FROM IvArticulo WHERE chrCveArticulo = '" & lstrArticulo & "' ").Fields(0) & "' "
        End If
      
        Screen.MousePointer = vbHourglass
        Set rs = frsRegresaRs(lstrAux)
        Screen.MousePointer = vbDefault
        
        If rs.RecordCount > 0 Then 'Existe cuenta asignada a esa combinación
            rs.MoveFirst
            llngCuenta = rs!INTNUMCUENTACONTABLE
            fBlnExtraeParametropoliza = True
        Else
            fBlnExtraeParametropoliza = False
        End If
        rs.Close
    End If
  
Exit Function
NotificaError:
    Screen.MousePointer = vbDefault
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fBlnExtraeParametroPoliza"))
End Function


Private Sub pActualizaEstatusReqDetalle(vlstrCveArticulo As String, vllngNumReq As Long, vlstrEstatusDetalleReq As String)
On Error GoTo NotificaError

    vlstrx = "UPDATE IvRequisicionDetalle SET " & _
             " vchEstatusDetRequis = '" & vlstrEstatusDetalleReq & "' " & _
             " WHERE " & _
             " chrCveArticulo = '" & Trim(vlstrCveArticulo) & "' AND " & _
             " numNumRequisicion = CAST(" & str(vllngNumReq) & " AS NUMERIC)"
    pEjecutaSentencia vlstrx

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pActualizaEstatusReqDetalle"))
    Unload Me
End Sub

'- Cancela el cargo del paciente después de realizar la devolución -'
Private Function flngCancelaCargo() As Long
On Error GoTo NotificaError
    Dim rsPvBorradoCargo As New ADODB.Recordset
    Dim rsCargo As New ADODB.Recordset
    Dim vldblCantidadCargo As Double
    Dim vldblPrecio As Double
    Dim vldblIVA As Double
    Dim vldblDescuento As Double
    Dim vldblIVAxArticulo As Double
    Dim vldblDescuentoxArticulo As Double
    Dim intCantidadExtraPaquete As Long         '|  Sirve para actualizar el campo intCantidadExtraPaquete de la tabla PvCargo
    Dim intCantidadPaquete As Long              '|  Sirve para actualizar el campo intCantidadPaquete de la tabla PvCargo
    Dim intCantidadDescontarPaquete As Long     '|  Cantidad de cargos que serán quitados del paquete
    Dim intCantidadDevuelta As Long             '|  Cantidad de cargos que se van a devolver
    Dim strArticulo As String                   '|  Para la clave de los artículo
    Dim rsCargoNuevo As New ADODB.Recordset
    Dim vldblCantidadDevuelta As Double
    Dim Y As Long
    Dim vlintNumCargo As Long
    Dim blnCargo As Boolean
    Dim blnCantidad As Boolean
    Dim blnCargoNuevo As Boolean
    Dim rs As New ADODB.Recordset
    
    vlstrx = "SELECT * FROM PvBorradoCargo WHERE intNumCargo = -1"
    Set rsPvBorradoCargo = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
    
    'EntornoSIHO.ConeccionSIHO.BeginTrans
    
    vlblnTermina = False
    vlblnError = False
    vlintMensaje = 0
    X = 1
    blnCantidad = True
    blnCargoNuevo = False
    vldblCantidadSeparar = 0
    
    Do While X <= grdCargos.Rows - 1 And Not vlblnError And Not vlblnTermina
        If grdCargos.TextMatrix(X, 60) <> "" Then
            vllngValidaCargos = 0
            
            vlstrx = "SELECT ivrequisicionmaestro.*, ivrequisiciondetalle.intcantidadsolicitada FROM IvRequisicionMaestro " & _
                     "INNER JOIN IvRequisicionDetalle ON ivrequisicionmaestro.numnumrequisicion = IvRequisicionDetalle.numnumrequisicion " & _
                     "WHERE numReqSolicitaConsignacion = " & CDbl(grdCargos.TextMatrix(X, 12)) & _
                     " AND IvRequisicionDetalle.chrcvearticulo = '" & grdCargos.TextMatrix(X, 61) & "'"
            Set rsIvRequisicionConsigna = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
            
            If (Val(grdCargos.TextMatrix(X, 30)) > 0 And Val(grdCargos.TextMatrix(X, 54)) > 0) Then
                vldblCantidadSeparar = CDbl(grdCargos.TextMatrix(X, 54))
            Else
                vldblCantidadSeparar = CDbl(rsIvRequisicionConsigna!IntCantidadSolicitada)
            End If
            
            blnCargo = False
            vlintNumCargo = grdCargos.RowData(X)
            Y = X + 1
            
            vlstrx = "SELECT * FROM PvCargo WHERE intNumCargo = " & grdCargos.RowData(X)
            Set rsCargo = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
            If rsCargo.RecordCount <> 0 And blnCantidad = True Then
                'vgstrParametrosSP = vgintClaveEmpresaContable & "|" & grdCargos.TextMatrix(X, 12) & "|" & aFarmaciaCompartida(0).lngCveDepartamentoConsignacion & "|" & Trim(grdCargos.TextMatrix(X, 17))
                'Set rsReqFarmaciaCompartida = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelReqFarmaciaCompartida")
                                
                If vllngValidaCargos = 0 Then 'Cargo no facturado
                                        
                    vldblCantidadCargo = rsCargo!MNYCantidad 'Cantidad de articulos pendientes a surtir
                    Set rs = frsEjecuta_SP(rsCargo!CHRCVECARGO, "SP_GNSELARTICULO")
                    strArticulo = rs!chrcvearticulo
                    
                    '--------------------'
                    '|  Borra el cargo  |'
                    '--------------------'
                    rsPvBorradoCargo.AddNew
                    rsPvBorradoCargo!IntNumCargo = rsCargo!IntNumCargo
                    rsPvBorradoCargo!chrTipoDocumento = rsCargo!chrTipoDocumento
                    rsPvBorradoCargo!intFolioDocumento = rsCargo!intFolioDocumento
                    rsPvBorradoCargo!INTMOVPACIENTE = rsCargo!INTMOVPACIENTE
                    rsPvBorradoCargo!CHRTIPOPACIENTE = rsCargo!CHRTIPOPACIENTE
                    rsPvBorradoCargo!CHRCVECARGO = IIf(rsCargo!chrTipoCargo = "AR", strArticulo, rsCargo!CHRCVECARGO)
                    rsPvBorradoCargo!smicveconcepto = rsCargo!smicveconcepto
                    rsPvBorradoCargo!chrTipoCargo = rsCargo!chrTipoCargo
                    rsPvBorradoCargo!MNYCantidad = rsCargo!MNYCantidad
                    rsPvBorradoCargo!mnyPrecio = rsCargo!mnyPrecio
                    rsPvBorradoCargo!dtmFechahora = rsCargo!dtmFechahora
                    rsPvBorradoCargo!intEmpleado = vllngPersonaGraba
                    rsPvBorradoCargo!SMIDEPARTAMENTO = vgintNumeroDepartamento  'rsReqFarmaciaCompartida!smiCveDeptoAlmacen
                    rsPvBorradoCargo!bitExcluido = rsCargo!bitExcluido
                    rsPvBorradoCargo!bitDescuentaInventario = rsCargo!intDescuentaInventario
                    rsPvBorradoCargo!DTMFECHABORRADO = fdtmServerFechaHora
                    rsPvBorradoCargo!MNYDESCUENTO = rsCargo!MNYDESCUENTO
                    rsPvBorradoCargo!MNYIVA = rsCargo!MNYIVA
                    rsPvBorradoCargo!INTNUMKARDEX = rsCargo!INTNUMKARDEX
                    rsPvBorradoCargo!intnumpaquete = rsCargo!intnumpaquete
                    rsPvBorradoCargo!intCantidadPaquete = rsCargo!intCantidadPaquete
                    rsPvBorradoCargo!intCantidadExtraPaquete = rsCargo!intCantidadExtraPaquete
                    rsPvBorradoCargo!mnycosto = rsCargo!mnycosto
                    rsPvBorradoCargo!intPersonaCargo = rsCargo!intEmpleado
                    rsPvBorradoCargo!chrTipoPersonaCargo = rsCargo!chrMedicoEnfermera
                    rsPvBorradoCargo.Update
                                        
                    If vldblCantidadCargo > vldblCantidadSeparar Then
                        'genera un nuevo cargo
                        Set rsCargoNuevo = frsRegresaRs("select * from pvCargo where intnumCargo = -1", adLockOptimistic, adOpenDynamic)
                        rsCargoNuevo.AddNew
                        rsCargoNuevo!chrTipoDocumento = rsCargo!chrTipoDocumento
                        rsCargoNuevo!intFolioDocumento = rsCargo!intFolioDocumento
                        rsCargoNuevo!INTMOVPACIENTE = rsCargo!INTMOVPACIENTE
                        rsCargoNuevo!CHRTIPOPACIENTE = rsCargo!CHRTIPOPACIENTE
                        rsCargoNuevo!CHRCVECARGO = rsCargo!CHRCVECARGO
                        rsCargoNuevo!smicveconcepto = rsCargo!smicveconcepto
                        rsCargoNuevo!chrTipoCargo = rsCargo!chrTipoCargo
                        rsCargoNuevo!mnyPrecio = rsCargo!mnyPrecio
                        rsCargoNuevo!dtmFechahora = fdtmServerFechaHora
                        rsCargoNuevo!intEmpleado = rsCargo!intEmpleado
                        rsCargoNuevo!SMIDEPARTAMENTO = rsCargo!SMIDEPARTAMENTO
                        rsCargoNuevo!bitExcluido = rsCargo!bitExcluido
                        rsCargoNuevo!bitHojaConsumo = rsCargo!bitHojaConsumo
                        rsCargoNuevo!intNumCirugia = rsCargo!intNumCirugia
                        rsCargoNuevo!intNumCargoPaquete = rsCargo!intNumCargoPaquete
                        rsCargoNuevo!intDescuentaInventario = rsCargo!intDescuentaInventario
                        rsCargoNuevo!INTNUMKARDEX = rsCargo!INTNUMKARDEX
                        rsCargoNuevo!mnyIncrementoHorario = rsCargo!mnyIncrementoHorario
                        rsCargoNuevo!bitPrecioManual = rsCargo!bitPrecioManual
                        rsCargoNuevo!intnumpaquete = rsCargo!intnumpaquete
                        rsCargoNuevo!intCveGrupo = rsCargo!intCveGrupo
                        rsCargoNuevo!chrFolioFacturaPaciente = rsCargo!chrFolioFacturaPaciente
                        rsCargoNuevo!intpaquetesPaciente = rsCargo!intpaquetesPaciente
                        rsCargoNuevo!mnycosto = rsCargo!mnycosto
                        rsCargoNuevo!chrMedicoEnfermera = rsCargo!chrMedicoEnfermera
                        rsCargoNuevo!bitFechaManual = rsCargo!bitFechaManual
                        rsCargoNuevo!mnyIeps = rsCargo!mnyIeps
                        blnCargoNuevo = True
                        
                        pActualizaEstatusReqDetalle Trim(grdCargos.TextMatrix(X, 61)), Val(grdCargos.TextMatrix(X, 12)), "SURTIDA"
                        frsEjecuta_SP grdCargos.TextMatrix(X, 12), "SP_IVUPDESTATUSREQMAESTRO"
                            
                        vldblIVA = rsCargo!MNYIVA
                        vldblDescuento = rsCargo!MNYDESCUENTO
                        vldblIVAxArticulo = vldblIVA / vldblCantidadCargo
                        vldblDescuentoxArticulo = vldblDescuento / vldblCantidadCargo
                        
                        rsCargoNuevo!MNYCantidad = vldblCantidadCargo - vldblCantidadSeparar
                        
                        'rsCargoNuevo!MNYIVA = Format(vldblIVAxArticulo * (vldblCantidadCargo - Val(grdCargos.TextMatrix(X, 13))), "##########.00")
                        'rsCargoNuevo!MNYDESCUENTO = Format(vldblDescuentoxArticulo * (vldblCantidadCargo - Val(grdCargos.TextMatrix(X, 13))), "##########.00")
                        rsCargoNuevo!MNYIVA = Format(vldblIVAxArticulo * (vldblCantidadCargo - vldblCantidadSeparar), "##########.00")
                        rsCargoNuevo!MNYDESCUENTO = Format(vldblDescuentoxArticulo * (vldblCantidadCargo - vldblCantidadSeparar), "##########.00")
                        
                        '---------------------------'
                        '|  Descuenta del paquete  |'
                        '---------------------------'
                        intCantidadExtraPaquete = 0
                        intCantidadPaquete = 0
                        intCantidadDescontarPaquete = 0
                        intCantidadDevuelta = vldblCantidadSeparar      'Val(grdCargos.TextMatrix(X, 13))
                        '|  Verifica si el cargo esta asignado a algún paquete
                        If rsCargo!intCantidadExtraPaquete > 0 Or rsCargo!intCantidadPaquete > 0 Then
                            '|  Verifica si es necesario que se afecte al paquete
                            If (vldblCantidadCargo - intCantidadDevuelta) >= (rsCargo!intCantidadPaquete + rsCargo!intCantidadExtraPaquete) Then
                                intCantidadExtraPaquete = rsCargo!intCantidadExtraPaquete
                                intCantidadPaquete = rsCargo!intCantidadPaquete
                            Else
                                intCantidadDescontarPaquete = (rsCargo!intCantidadPaquete + rsCargo!intCantidadExtraPaquete) - (vldblCantidadCargo - intCantidadDevuelta)
                                '|  Si se completa con la cantidad extra del paquete
                                If intCantidadDescontarPaquete <= rsCargo!intCantidadExtraPaquete Then
                                    intCantidadExtraPaquete = rsCargo!intCantidadExtraPaquete - intCantidadDescontarPaquete
                                    intCantidadPaquete = rsCargo!intCantidadPaquete
                                Else
                                    intCantidadPaquete = (rsCargo!intCantidadPaquete + rsCargo!intCantidadExtraPaquete) - intCantidadDescontarPaquete
                                    intCantidadExtraPaquete = 0
                                End If
                            End If
                            rsCargoNuevo!intCantidadExtraPaquete = intCantidadExtraPaquete
                            rsCargoNuevo!intCantidadPaquete = intCantidadPaquete
                        End If
                        rsCargoNuevo.Update
                        
                        pActualizaEstatusReqDetalle Trim(grdCargos.TextMatrix(X, 61)), Val(grdCargos.TextMatrix(X, 12)), "SURTIDA PARCIAL"
                        frsEjecuta_SP grdCargos.TextMatrix(X, 12), "SP_IVUPDESTATUSREQMAESTRO"
                    Else
                        pActualizaEstatusReqDetalle Trim(grdCargos.TextMatrix(X, 61)), Val(grdCargos.TextMatrix(X, 12)), "CANCELADA"
                        frsEjecuta_SP grdCargos.TextMatrix(X, 12), "SP_IVUPDESTATUSREQMAESTRO"
                    End If
                    
                    ' -- 16652
                    ' -- Actualiza el estatus de la requisición consigna
                    vlstrx = "SELECT ivrequisicionmaestro.*, ivrequisiciondetalle.intcantidadsolicitada FROM IvRequisicionMaestro " & _
                             "INNER JOIN IvRequisicionDetalle ON ivrequisicionmaestro.numnumrequisicion = IvRequisicionDetalle.numnumrequisicion " & _
                             "WHERE numReqSolicitaConsignacion = " & CDbl(grdCargos.TextMatrix(X, 12)) & _
                             " AND IvRequisicionDetalle.chrcvearticulo = '" & grdCargos.TextMatrix(X, 61) & "'"
                                                          
                    Set rsIvRequisicionConsigna = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
                    
                    If rsIvRequisicionConsigna.RecordCount > 0 Then
                        If blnCargoNuevo Then
                            pActualizaEstatusReqDetalle Trim(grdCargos.TextMatrix(X, 61)), rsIvRequisicionConsigna!numNumRequisicion, "SURTIDA PARCIAL"
                        Else
                            pActualizaEstatusReqDetalle Trim(grdCargos.TextMatrix(X, 61)), rsIvRequisicionConsigna!numNumRequisicion, "CANCELADA"
                        End If
                        frsEjecuta_SP rsIvRequisicionConsigna!numNumRequisicion, "SP_IVUPDESTATUSREQMAESTRO"
                    End If
                    
                    rsCargo.Delete
                    rsCargo.Update
                   
                Else
                    vlblnError = True
                    vlintMensaje = Abs(vllngValidaCargos)
                End If
            End If
        End If
Siguiente:
        X = X + 1
    Loop
    
    If Not vlblnError Then
        flngCancelaCargo = 0
    Else
        EntornoSIHO.ConeccionSIHO.RollbackTrans
        flngCancelaCargo = -1
    End If

    rsPvBorradoCargo.Close
    
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":flngCancelaCargo"))
    Unload Me
End Function


Private Sub pDatosPaciente(vllngNumCuenta As Long)
On Error GoTo NotificaError
    Dim rs As ADODB.Recordset
    
    vllngNumeroPaciente = 0
    vlstrx = ""
    If (OptTipoPaciente(0).Value) Then  ' Interno
        vlstrx = vlstrx & _
                "SELECT " & _
                " AdPaciente.numCvePaciente NumPaciente," & _
                " AdAdmision.numNumCuenta Cuenta," & _
                " ltrim(rtrim(AdPaciente.vchApellidoPaterno))||' '||ltrim(rtrim(AdPaciente.vchApellidoMaterno))||' '||ltrim(rtrim(AdPaciente.vchNombre)) Nombre," & _
                " AdArea.vchDescripcion Area," & _
                " AdAdmision.vchNumCuarto Cuarto " & _
                " FROM " & _
                " AdAdmision " & _
                " INNER JOIN AdPaciente ON AdAdmision.numCvePaciente=AdPaciente.numCvePaciente " & _
                " INNER JOIN AdCuarto ON AdAdmision.vchNumCuarto=AdCuarto.vchNumCuarto " & _
                " INNER JOIN AdArea ON AdCuarto.tnyCveArea=AdArea.tnyCveArea " & _
                " WHERE " & _
                " CAST(AdAdmision.numNumCuenta AS INT)=" & str(vllngNumCuenta) & " "
    Else ' Externo
        vlstrx = vlstrx & _
                "SELECT " & _
                " RegistroExterno.intNumPaciente NumPaciente," & _
                " RegistroExterno.intNumCuenta Cuenta," & _
                " ltrim(rtrim(Externo.chrApePaterno))||' '||ltrim(rtrim(Externo.chrApeMaterno))||' '||ltrim(rtrim(Externo.chrNombre)) Nombre," & _
                " ' ' Area," & _
                " ' ' Cuarto " & _
                " FROM " & _
                " RegistroExterno " & _
                " INNER JOIN Externo ON RegistroExterno.intNumPaciente=Externo.intNumPaciente " & _
                " WHERE " & _
                " RegistroExterno.intNumCuenta=" & str(vllngNumCuenta) & " "
    End If
    
    Set rs = frsRegresaRs(vlstrx)
    If rs.RecordCount <> 0 Then
        vllngNumeroPaciente = rs!NumPaciente
    End If
    If rs.State <> adStateClosed Then rs.Close
                    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":pDatosPaciente"))
    Unload Me
End Sub

Private Sub fintCuantosMaestros()
    Dim intIndex As Integer
    Dim rsTemp As ADODB.Recordset
    
    ReDim arrintCveProveedorSub(grdCargos.Rows - 1)
    ReDim arrintCveProveedorAlm(grdCargos.Rows - 1)
    ReDim arrintCveProveedor(grdCargos.Rows - 1)
    
    For intIndex = 1 To grdCargos.Rows - 1
        If Val(grdCargos.TextMatrix(intIndex, 13)) <> 0 Then
            Set rsTemp = frsEjecuta_SP(grdCargos.TextMatrix(intIndex, 12) & "|0|0", "sp_IVArticuloSub")
            If Not rsTemp.EOF Then
                arrintCveProveedorSub(intIndex) = rsTemp!departamento
                arrintCveProveedor(intIndex) = rsTemp!intCveGrupo
            Else
                arrintCveProveedorSub(intIndex) = 0
                arrintCveProveedor(intIndex) = 0
            End If
            rsTemp.Close
            
            Set rsTemp = frsRegresaRs("select IvRequisicionMaestro.smiCveDeptoAlmacen cveDeptoSol from IvRequisicionMaestro where numNumRequisicion = " & grdCargos.TextMatrix(intIndex, 3))
            If Not rsTemp.EOF Then
                arrintCveProveedorAlm(intIndex) = rsTemp!cveDeptoSol
            Else
                arrintCveProveedorAlm(intIndex) = 0
            End If
            rsTemp.Close
        End If
    Next
End Sub
'- Da entrada de los artículos al inventario después de realizar la devolución de cargo a paciente -'
Private Function flngEntradaAlmacen() As Long
On Error GoTo NotificaError
    Dim rsIvKardexInventario As New ADODB.Recordset
    Dim rsIvUbicacion As New ADODB.Recordset
    Dim rsCargo As New ADODB.Recordset
    Dim rsTemp As ADODB.Recordset
    Dim vllngNumDepto As Long
    Dim vlNumDevolucion As Long
    Dim llngIdKardex As Long
    Dim vlstrModulo As String
    Dim lintUnidad As Integer
    Dim llngNumPoliza As Long
    Dim lintCiclos As Integer
    Dim lintConsecutivo As Long
    Dim lblnRequiConsigna As Boolean
    
    Dim rsAux As New ADODB.Recordset
    Dim lstrConfiActivo As String  'para identificar la configuracion de la cuenta de activos
    Dim llngCuentaCargo As Long
    Dim ldblCantidad As Double
    Dim ldblTipoCambioDia As Double
    Dim llngDeptoSurteRequisicion As Long
    Dim vldblCostoProveedor As Double
    Dim vlngIdentitySalidaConsigna As Long
    Dim vlblnGraboSalidaConsigna As Boolean
    
    vlblnGraboSalidaConsigna = False
    
    vlstrModulo = cgstrModulo
    vlstrx = "SELECT * FROM IvKardexInventario WHERE intNumMovimiento = -1"
    Set rsIvKardexInventario = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
    
    'EntornoSIHO.ConeccionSIHO.BeginTrans
    
    'Si se tiene configurada la cuenta de activo del almacen y cuenta del proveedor
    vlblnTermina = False
    pCargaParametroAlmacen
    lstrConfiActivo = gstrConfiguracionActivo
    If lstrConfiActivo = "" Then
        'Existen datos incorrectos. Por favor verifique.  -***cambiar****
        MsgBox SIHOMsg(539) & " No existen parámetros de póliza para cuenta de activo.", vbExclamation, "Error"
        vlblnTermina = True
    End If
    
    ldblTipoCambioDia = fdblTipoCambio(fdtmServerFecha, "O")
    ReDim apoliza(0)
    ReDim aPolizaOrden(0)
    vldblCantidadSeparar = 0
    vlngIdentitySalidaConsigna = 0
    X = 1
    Do While X <= grdCargos.Rows - 1 And Not vlblnTermina
        If grdCargos.TextMatrix(X, 60) <> "" Then
            vlstrx = "SELECT * FROM PvCargo WHERE intNumCargo = " & grdCargos.RowData(X)
            Set rsCargo = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
            If rsCargo.RecordCount <> 0 Then
                vgstrParametrosSP = vgintClaveEmpresaContable & "|" & grdCargos.TextMatrix(X, 12) & "|" & aFarmaciaCompartida(0).lngCveDepartamentoConsignacion & "|" & Trim(grdCargos.TextMatrix(X, 17)) & "|" & grdCargos.RowData(X)
                Set rsReqFarmaciaCompartida = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelReqFarmaciaCompartida")
                If rsReqFarmaciaCompartida.RecordCount = 0 Then
                    vlblnTermina = True
                    MsgBox "No se encontraron los datos de la requisición de farmacia compartida", vbExclamation + vbOKOnly, "Mensaje"
                End If
                
                vlstrx = "SELECT ivrequisicionmaestro.*, ivrequisiciondetalle.intcantidadsolicitada FROM IvRequisicionMaestro " & _
                         "INNER JOIN IvRequisicionDetalle ON ivrequisicionmaestro.numnumrequisicion = IvRequisicionDetalle.numnumrequisicion " & _
                         "WHERE numReqSolicitaConsignacion = " & CDbl(grdCargos.TextMatrix(X, 12)) & _
                         " AND IvRequisicionDetalle.chrcvearticulo = '" & grdCargos.TextMatrix(X, 61) & "'"
                Set rsIvRequisicionConsigna = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
                
                If (Val(grdCargos.TextMatrix(X, 30)) > 0 And Val(grdCargos.TextMatrix(X, 54)) > 0) Then
                    vldblCantidadSeparar = CDbl(grdCargos.TextMatrix(X, 54))
                Else
                    vldblCantidadSeparar = CDbl(rsIvRequisicionConsigna!IntCantidadSolicitada)      'CDbl(grdCargos.TextMatrix(X, 4))
                End If
                
                If Not vlblnTermina Then  'Cargo no facturado
                    ' No tomar en cuenta el inventario si se devuelve a prov sub
                    If rsCargo!INTNUMKARDEX <> 0 Then ' si el movimiento está en 0 se supone que es de un proveedor subrogado
                        vllngnoerror = flngBloqueaArticulo2(grdCargos.TextMatrix(X, 61), vgintNumeroDepartamento, cgstrModulo, Me.Name)
                        If vllngnoerror = 0 Then
                            vlblnTermina = True
                        ElseIf vllngnoerror = 2 Then
                            vlstrx = "SELECT * FROM IvUbicacion WHERE smiCveDepartamento = " & rsReqFarmaciaCompartida!smiCveDeptoAlmacen & " AND chrCveArticulo = '" & Trim(grdCargos.TextMatrix(X, 61)) & "'"
                            Set rsIvUbicacion = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
                            With rsIvUbicacion
                                If .RecordCount = 0 Then
                                    .AddNew
                                    !smicvedepartamento = rsReqFarmaciaCompartida!smiCveDeptoAlmacen 'recibe
                                    !chrcvearticulo = Trim(grdCargos.TextMatrix(X, 61))
                                    !smicvelocalizacion = 0
                                    !mnycostopromedio = frsRegresaRs("SELECT mnyCostoUltEntrada FROM IvArticuloEmpresas WHERE chrCveArticulo = '" & Trim(grdCargos.TextMatrix(X, 61)) & "' and tnyClaveEmpresa = " & vgintClaveEmpresaContable).Fields(0)
                                End If
                                !intexistenciadeptoum = IIf(IsNull(!intexistenciadeptoum), 0, !intexistenciadeptoum) + IIf(Trim(rsReqFarmaciaCompartida!CHRUNIDADCONTROL) = "A", 0, vldblCantidadSeparar)
                                !intExistenciaDeptouv = IIf(IsNull(!intExistenciaDeptouv), 0, !intExistenciaDeptouv) + IIf(Trim(rsReqFarmaciaCompartida!CHRUNIDADCONTROL) = "A", vldblCantidadSeparar, 0)
                                .Update
                            End With
                            
                            With rsIvKardexInventario
                                .AddNew
                                !vchTablaRelacion = "EDCP"
                                !numNumReferencia = CDbl(grdCargos.TextMatrix(X, 12)) 'Requisición de la cual se hace la devolución...
                                !chrcvearticulo = grdCargos.TextMatrix(X, 61)
                                !DTMFECHAHORAMOV = fdtmServerFechaHora
                                !relCantidadUM = IIf(Trim(rsReqFarmaciaCompartida!CHRUNIDADCONTROL) = "A", 0, vldblCantidadSeparar)
                                !relCantidadUV = IIf(Trim(rsReqFarmaciaCompartida!CHRUNIDADCONTROL) = "A", vldblCantidadSeparar, 0)
                                !smicvedepartamento = rsReqFarmaciaCompartida!smiCveDeptoAlmacen 'Departamento recibe
                                vllngNumDepto = rsReqFarmaciaCompartida!smiCveDeptoAlmacen
                                
                                Set rsTemp = frsRegresaRs("SELECT ISNULL(mnyCostoPromedio, 0) mnyCostoPromedio, ISNULL(intExistenciaDeptoUM, 0) intExistenciaDeptoUM, ISNULL(intExistenciaDeptoUV, 0) intExistenciaDeptoUV FROM IvUbicacion WHERE smiCveDepartamento = " & rsReqFarmaciaCompartida!smiCveDeptoAlmacen & " AND chrCveArticulo = '" & Trim(grdCargos.TextMatrix(X, 61)) & "'")
                                If Not rsTemp.EOF Then
                                    !mnycostopromedio = rsTemp!mnycostopromedio
                                    !RELEXISTENCIAUM = rsTemp!intexistenciadeptoum
                                    !RELEXISTENCIAUV = rsTemp!intExistenciaDeptouv
                                Else
                                    !mnycostopromedio = 0
                                    !RELEXISTENCIAUM = 0
                                    !RELEXISTENCIAUV = 0
                                End If
                                rsTemp.Close
                                !bitRecalculo = 0
                                .Update
                                llngIdKardex = flngObtieneIdentity("sec_IvKardexInventario", rsIvKardexInventario!intNumMovimiento)
                            End With
                            
                            
                            '-- Requisiciones consigna -------------------------------------------------------
                            '-- Disminuir existencias de almacen que solicitó a consigna y aumenta el almacen consigna, registro en kardex --'
                            
                            If rsIvRequisicionConsigna.RecordCount > 0 Then
                                lintUnidad = IIf(Trim(rsReqFarmaciaCompartida!CHRUNIDADCONTROL) = "A", 1, 0)
                                
                                'Almacen que solicitó a consigna
                                vgstrParametrosSP = CStr(rsReqFarmaciaCompartida!smiCveDeptoAlmacen) & _
                                                    "|" & Trim(grdCargos.TextMatrix(X, 61)) & _
                                                    "|" & CStr(vldblCantidadSeparar) & _
                                                    "|" & lintUnidad
                                                    
                                llngResultado = 1
                                frsEjecuta_SP vgstrParametrosSP, "sp_IvDescuentaUbicacion", True, llngResultado
                                If llngResultado = 1 Then
                                    vlngIdentitySalidaConsigna = flngGrabaConsignacionMaestro(vlngIdentitySalidaConsigna, "E", 2, rsIvRequisicionConsigna!numNumRequisicion, rsIvRequisicionConsigna!smiCveDeptoAlmacen, vllngPersonaGraba)
                                    
                                    pMovimientoKardex "SCO", vlngIdentitySalidaConsigna, Trim(grdCargos.TextMatrix(X, 61)), 0, CLng(vldblCantidadSeparar), rsIvRequisicionConsigna!smiCveDeptoRequis
                                    
                                    'Almacen consigna
                                    '----------------
                                    'Busca el precio del proveedor
                                    vldblCostoProveedor = 0
                                    vgstrParametrosSP = rsReqFarmaciaCompartida!INTCVEPROVEEDOR & "|C|" & Trim(grdCargos.TextMatrix(X, 61))
                                    Set rsAux = frsEjecuta_SP(vgstrParametrosSP, "Sp_Coselartproveedor")
                                    If rsAux.RecordCount > 0 Then
                                        'unidad alterna
                                        vldblCostoProveedor = rsAux!mnyCostoVigente _
                                                            * IIf(rsAux!vchMoneda = "PESOS", 1, ldblTipoCambioDia)
                                    Else
                                        'el artículo no está asignado a la lista de precios del proveedor
                                        MsgBox SIHOMsg(971) & Chr(13) & grdCargos.TextMatrix(X, 2) & Chr(13) & rsReqFarmaciaCompartida!nombreDepartamento, vbExclamation, "Mensaje"
                                        vlblnTermina = True
                                        GoTo Siguiente
                                    End If
                                    
                                    vgstrParametrosSP = rsIvRequisicionConsigna!smiCveDeptoAlmacen & _
                                                        "|" & Trim(grdCargos.TextMatrix(X, 61)) & _
                                                        "|" & CStr(vldblCantidadSeparar) & _
                                                        "|" & Trim(rsReqFarmaciaCompartida!CHRUNIDADCONTROL) & _
                                                        "|" & CStr(rsIvRequisicionConsigna!smiCveDeptoRequis) & _
                                                        "|" & vldblCostoProveedor '***
                                    frsEjecuta_SP vgstrParametrosSP, "SP_IvAumentaUbicacion"
                                    pMovimientoKardex "ECO", vlngIdentitySalidaConsigna, Trim(grdCargos.TextMatrix(X, 61)), 0, CLng(vldblCantidadSeparar), rsIvRequisicionConsigna!smiCveDeptoAlmacen
                                    
                                    pGrabaConsignaDetalle vlngIdentitySalidaConsigna, Trim(grdCargos.TextMatrix(X, 17)), Trim(grdCargos.TextMatrix(X, 61)), CLng(vldblCantidadSeparar), Trim(rsReqFarmaciaCompartida!CHRUNIDADCONTROL), Format(vldblCostoProveedor, "############.0000"), Format(vldblCostoProveedor, "############.0000"), 0
                                Else
                                    vlblnTermina = True
                                    MsgBox SIHOMsg(540) & Chr(13) & grdCargos.TextMatrix(X, 61) & Chr(13) & rsReqFarmaciaCompartida!nombreDepartamento, vbOKOnly + vbExclamation, "Mensaje"
                                End If
                                                                
                                '-- Póliza consignación ------------
                                'Para cuentas de activos y para el cargo
                                If fBlnExtraeParametropoliza(lstrConfiActivo, Trim(grdCargos.TextMatrix(X, 61)), llngCuentaCargo, rsReqFarmaciaCompartida!smiCveDeptoAlmacen) Then
                                    If fblnCuentasValidas(rsReqFarmaciaCompartida) Then
                                        vgstrParametrosSP = rsReqFarmaciaCompartida!INTCVEPROVEEDOR & "|C|" & Trim(grdCargos.TextMatrix(X, 61))
                                        Set rsAux = frsEjecuta_SP(vgstrParametrosSP, "Sp_Coselartproveedor")
                                        If rsAux.RecordCount > 0 Then
                                            'unidad alterna
                                            ldblCantidad = rsAux!mnyCostoVigente _
                                                          * vldblCantidadSeparar _
                                                          * IIf(rsAux!vchMoneda = "PESOS", 1, ldblTipoCambioDia)
                                            'cargo cuenta puente proveedor
                                            pLlenapoliza rsReqFarmaciaCompartida!numCuentaProveedConsiga, Format(ldblCantidad, "############.0000"), 1, apoliza()
                                            'abono cuenta activo almacen
                                            pLlenapoliza llngCuentaCargo, Format(ldblCantidad, "############.0000"), 0, apoliza()
                                        
                                            'Abono cuenta orden almacen consigna
                                            pLlenapoliza rsReqFarmaciaCompartida!numCuentaOrdenAlmacen, Format(ldblCantidad, "############.0000"), 1, aPolizaOrden()
                                            'Cargo cuenta orden proveedor consigna
                                            pLlenapoliza rsReqFarmaciaCompartida!numCuentaOrdenProveedor, Format(ldblCantidad, "############.0000"), 0, aPolizaOrden()
                                                            
                                        Else
                                            'el artículo no está asignado a la lista de precios del proveedor
                                            MsgBox SIHOMsg(971) & Chr(13) & grdCargos.TextMatrix(X, 2) & Chr(13) & rsReqFarmaciaCompartida!nombreDepartamento, vbExclamation, "Mensaje"
                                            vlblnTermina = True
                                        End If
                                    Else
                                        vlblnTermina = True
                                    End If
                                Else
                                    'No se encontró la cuenta contable
                                    MsgBox SIHOMsg(539) & " No existen parámetros de póliza para cuenta de activo.", vbExclamation, "Error"
                                    vlblnTermina = True
                                End If
                            Else
                                vlblnTermina = True
                                MsgBox "No se encontraron los datos de la requisición de farmacia compartida", vbExclamation + vbOKOnly, "Mensaje"
                            End If
                                                                                
                        End If
                        vllngnoerror = flngLiberaArticulo(grdCargos.TextMatrix(X, 61), vgintNumeroDepartamento)
                        If vllngnoerror = 0 Then
                            vlblnTermina = True
                        End If
                    End If
                End If
            Else
                vlblnTermina = True
            End If
        End If
Siguiente:
        X = X + 1
    Loop

    '---Movimiento contable (cargo cuenta puente proveedor, abono cuenta activo del almacen)---
    If Not vlblnTermina Then
        llngResultado = 1
        vgstrParametrosSP = vgintClaveEmpresaContable & "|" & "Grabando poliza"
        frsEjecuta_SP vgstrParametrosSP, "sp_CnUpdEstatusCierre", True, llngResultado
        If llngResultado = 1 Then
            If fblnPeriodoCerrado(vgintClaveEmpresaContable, Year(fdtmServerFecha), Month(fdtmServerFecha)) Then
                'El periodo contable esta cerrado
                MsgBox SIHOMsg(209), vbExclamation + vbOKOnly, "Mensaje"
                vlblnTermina = True
            Else
                llngNumPoliza = flngInsertarPoliza(fdtmServerFecha, "D", "CANCELACIÓN DE REQUISICIONES DE CONSIGNACIÓN", vllngPersonaGraba)
                For lintCiclos = 0 To UBound(apoliza(), 1)
                    lintConsecutivo = flngInsertarPolizaDetalle(llngNumPoliza, apoliza(lintCiclos).llngNumeroCuenta, apoliza(lintCiclos).ldblCantidadMovimiento, apoliza(lintCiclos).lintTipoMovimiento)
                Next lintCiclos
                
                'Poliza: CARGO Cuenta orden proveedor consigna   ABONO Cuenta orden Almacen consigna
                vgstrParametrosSP = vgintClaveEmpresaContable _
                                    & "|" & Year(fdtmServerFecha) _
                                    & "|" & Month(fdtmServerFecha) _
                                    & "|" & Format(fdtmServerFecha, "DD/MM/YYYY") _
                                    & "|" & flngFolioPoliza(vgintClaveEmpresaContable, "O", Year(fdtmServerFecha), Month(fdtmServerFecha), False) _
                                    & "|" & "O" _
                                    & "|" & "CANCELACIÓN DE SURTIDO CONSIGNACIÓN " _
                                    & "|" & aFarmaciaCompartida(0).lngCveDepartamentoConsignacion _
                                    & "|" & vllngPersonaGraba _
                                    & "|S/N|0"
                llngNumPoliza = 1
                frsEjecuta_SP vgstrParametrosSP, "SP_IVINSCNPOLIZA", True, llngNumPoliza
                For lintCiclos = 0 To UBound(aPolizaOrden(), 1)
                    lintConsecutivo = flngInsertarPolizaDetalle(llngNumPoliza, aPolizaOrden(lintCiclos).llngNumeroCuenta, aPolizaOrden(lintCiclos).ldblCantidadMovimiento, aPolizaOrden(lintCiclos).lintTipoMovimiento)
                Next lintCiclos
                
                pEjecutaSentencia "update CnEstatusCierre set vchEstatus='Libre' where tnyClaveEmpresa=" & str(vgintClaveEmpresaContable)
            End If
        Else
            'No se puede realizar la operación, inténtelo en unos minutos.
            MsgBox SIHOMsg(720), vbExclamation + vbOKOnly, "Mensaje"
            vlblnTermina = True
        End If
    End If

    If Not vlblnTermina Then
        'EntornoSIHO.ConeccionSIHO.CommitTrans
        flngEntradaAlmacen = 0
    Else
        EntornoSIHO.ConeccionSIHO.RollbackTrans
        flngEntradaAlmacen = -1
    End If
    
    rsIvKardexInventario.Close
    
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":flngEntradaAlmacen"))
    Unload Me
End Function


'- Guarda el registro de la devolución -'
Private Function flngRegistrarDevolucion() As Long
On Error GoTo NotificaError
    Dim rsIvDevoluPacientMaestro As New ADODB.Recordset
    Dim rsIvDevoluPacientDetalle As New ADODB.Recordset
    Dim rsCargo As New ADODB.Recordset
    Dim rsTemp As ADODB.Recordset
    Dim vllngIdentity As Long
    Dim vllngIdentitySub As Long
    Dim colDev As Collection
    Dim colDevAlm As Collection
    Dim objDevolucionSub As clsDevolucionSub
    Dim blnYaEstaMaestro As Boolean
    Dim dtmFechaDevSubrog As Date
    Dim strSql As String
    Dim vlstrx As String
    Dim vlstrModulo As String

    vlstrModulo = cgstrModulo
    
    Set colDev = New Collection
    Set colDevAlm = New Collection

    dtmFechaDevSubrog = fdtmServerFechaHora

    vlstrx = "SELECT * FROM IvDevoluPacientMaestro WHERE intCveAlmacen IS NULL"
    Set rsIvDevoluPacientMaestro = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)

    vlstrx = "SELECT * FROM IvDevoluPacientDetalle WHERE intNumDevoluPaciente IS NULL"
    Set rsIvDevoluPacientDetalle = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
    
    fintCuantosMaestros
    pDatosPaciente txtMovimientoPaciente.Text
    
    'EntornoSIHO.ConeccionSIHO.BeginTrans
    
    vlblnTermina = False
    vlblnError = False
    vlintMensaje = 0
    vldblCantidadSeparar = 0
    X = 1
    Do While X <= grdCargos.Rows - 1 And Not vlblnError And Not vlblnTermina
        If grdCargos.TextMatrix(X, 60) <> "" Then
            vllngValidaCargos = 0
            
            vlstrx = "SELECT * FROM PvCargo WHERE intNumCargo = " & grdCargos.RowData(X)
            Set rsCargo = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
            If rsCargo.RecordCount <> 0 Then
                vgstrParametrosSP = vgintClaveEmpresaContable & "|" & grdCargos.TextMatrix(X, 12) & "|" & aFarmaciaCompartida(0).lngCveDepartamentoConsignacion & "|" & Trim(grdCargos.TextMatrix(X, 17)) & "|" & grdCargos.RowData(X)
                Set rsReqFarmaciaCompartida = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelReqFarmaciaCompartida")

                vlstrx = "SELECT ivrequisicionmaestro.*, ivrequisiciondetalle.intcantidadsolicitada FROM IvRequisicionMaestro " & _
                         "INNER JOIN IvRequisicionDetalle ON ivrequisicionmaestro.numnumrequisicion = IvRequisicionDetalle.numnumrequisicion " & _
                         "WHERE numReqSolicitaConsignacion = " & CDbl(grdCargos.TextMatrix(X, 12)) & _
                         " AND IvRequisicionDetalle.chrcvearticulo = '" & grdCargos.TextMatrix(X, 61) & "'"
                Set rsIvRequisicionConsigna = frsRegresaRs(vlstrx, adLockOptimistic, adOpenDynamic)
                
                If (Val(grdCargos.TextMatrix(X, 30)) > 0 And Val(grdCargos.TextMatrix(X, 54)) > 0) Then
                    vldblCantidadSeparar = CDbl(grdCargos.TextMatrix(X, 54))
                Else
                    vldblCantidadSeparar = CDbl(rsIvRequisicionConsigna!IntCantidadSolicitada)      'CDbl(grdCargos.TextMatrix(X, 4))
                End If

                If vllngValidaCargos = 0 Then 'Cargo no facturado
                    ' No tomar en cuenta el inventario si se devuelve a prov sub
                    If arrintCveProveedorSub(X) = 0 Then ' no encontro árticulos de proveedores subrogados
                        vllngnoerror = flngBloqueaArticulo2(grdCargos.TextMatrix(X, 61), vgintNumeroDepartamento, cgstrModulo, Me.Name)
                        If vllngnoerror = 0 Then
                            vlblnError = True
                        ElseIf vllngnoerror = 2 Then
                            blnYaEstaMaestro = False
                            For Each objDevolucionSub In colDevAlm
                                If objDevolucionSub.departamento = IIf(vlstrModulo = "EX", arrintCveProveedorAlm(X), CLng(grdCargos.TextMatrix(X, 24))) Then
                                    blnYaEstaMaestro = True
                                    vllngIdentity = objDevolucionSub.identity
                                End If
                            Next
                            
                            If Not blnYaEstaMaestro Then
                                With rsIvDevoluPacientMaestro
                                    .AddNew
                                    !intNumCuenta = Val(txtMovimientoPaciente.Text)
                                    !intcvepaciente = vllngNumeroPaciente
                                    !CHRTIPOPACIENTE = IIf(OptTipoPaciente(0).Value, "I", "E")
                                    !intCveEmpleado = vllngPersonaGraba
                                    !dtmFechaDevoluClient = fdtmServerFecha
                                    !dtmHoraDevoluClient = fdtmServerHora
                                    If vlstrModulo = "EX" Then
                                        !smicvedepartamento = vgintNumeroDepartamento
                                        !intCveAlmacen = arrintCveProveedorAlm(X)
                                    Else
                                        !smicvedepartamento = CLng(grdCargos.TextMatrix(X, 24))
                                        !intCveAlmacen = rsReqFarmaciaCompartida!smiCveDeptoAlmacen 'vgintNumeroDepartamento
                                    End If
                                    .Update
                                    vllngIdentity = CStr(flngObtieneIdentity("Sec_IvDevoluPacientMaestro", rsIvDevoluPacientMaestro!intNumDevoluPaciente))
                                End With
                                Set objDevolucionSub = New clsDevolucionSub
                                objDevolucionSub.departamento = IIf(vlstrModulo = "EX", arrintCveProveedorAlm(X), CLng(grdCargos.TextMatrix(X, 24)))
                                objDevolucionSub.identity = vllngIdentity
                                colDevAlm.Add objDevolucionSub
                            End If

                            With rsIvDevoluPacientDetalle
                                .AddNew
                                !intNumDevoluPaciente = vllngIdentity
                                !chrcvearticulo = grdCargos.TextMatrix(X, 61)
                                !relCantidad = vldblCantidadSeparar
                                !intCveUnidadVta = rsReqFarmaciaCompartida!ClaveTipoUnidad
                                !bitUnidadControl = IIf(Trim(rsReqFarmaciaCompartida!CHRUNIDADCONTROL) = "A", 1, 0)
                                Set rsTemp = frsRegresaRs("SELECT ISNULL(mnyCostoPromedio, 0) mnyCostoPromedio FROM IvUbicacion WHERE smiCveDepartamento = " & IIf(vlstrModulo = "EX", arrintCveProveedorAlm(X), CStr(rsReqFarmaciaCompartida!smiCveDeptoAlmacen)) & " AND chrCveArticulo = '" & Trim(grdCargos.TextMatrix(X, 61)) & "'")
                                If Not rsTemp.EOF Then
                                    !mnycostopromedio = rsTemp!mnycostopromedio
                                Else
                                    !mnycostopromedio = 0
                                End If
                                rsTemp.Close
                                !numNumRequisicion = CDbl(grdCargos.TextMatrix(X, 12))
                                !IntNumCargo = grdCargos.RowData(X) 'agrega el numero de cargo que corresponde a la devolución caso 7018 CGR
                                .Update
                            End With
                        End If
                        
                        vllngnoerror = flngLiberaArticulo(grdCargos.TextMatrix(X, 61), vgintNumeroDepartamento)
                        If vllngnoerror = 0 Then
                            vlblnError = True
                        End If
                    Else ' si encontro articulos de proveedores subrogados
                        blnYaEstaMaestro = False
                        For Each objDevolucionSub In colDev
                            If objDevolucionSub.departamento = arrintCveProveedorSub(X) Then
                                blnYaEstaMaestro = True
                                vllngIdentitySub = objDevolucionSub.identity
                            End If
                        Next
                        
                        If Not blnYaEstaMaestro Then
                            With rsIvDevoluPacientMaestro
                                .AddNew
                                !intNumCuenta = Val(txtMovimientoPaciente.Text)
                                !intcvepaciente = vllngNumeroPaciente
                                !CHRTIPOPACIENTE = IIf(OptTipoPaciente(0).Value, "I", "E")
                                !intCveEmpleado = vllngPersonaGraba
                                !smicvedepartamento = CLng(grdCargos.TextMatrix(X, 24)) 'vgintNumeroDepartamento
                                !dtmFechaDevoluClient = fdtmServerFecha
                                !dtmHoraDevoluClient = fdtmServerHora
                                !intCveAlmacen = arrintCveProveedorSub(X) 'se agrega como departamento almacen, el proveedor subrogado
                                .Update
                                vllngIdentitySub = CStr(flngObtieneIdentity("Sec_IvDevoluPacientMaestro", rsIvDevoluPacientMaestro!intNumDevoluPaciente))
                            End With
                            Set objDevolucionSub = New clsDevolucionSub
                            objDevolucionSub.departamento = arrintCveProveedorSub(X)
                            objDevolucionSub.departamentoReq = arrintCveProveedorAlm(X)
                            objDevolucionSub.identity = vllngIdentitySub
                            colDev.Add objDevolucionSub
                        End If
                        
                        With rsIvDevoluPacientDetalle
                            .AddNew
                            !intNumDevoluPaciente = vllngIdentitySub
                            !chrcvearticulo = grdCargos.TextMatrix(X, 61)
                            !relCantidad = vldblCantidadSeparar
                            !intCveUnidadVta = rsReqFarmaciaCompartida!ClaveTipoUnidad
                            !bitUnidadControl = IIf(Trim(rsReqFarmaciaCompartida!CHRUNIDADCONTROL) = "A", 1, 0)
                            Set rsTemp = frsRegresaRs("SELECT ISNULL(mnyCostoVigente, 0) mnyCostoVigente FROM CoListaPrecioProveedor WHERE intCveProveedor = " & arrintCveProveedor(X) & " AND chrCveArticulo = '" & Trim(grdCargos.TextMatrix(X, 61)) & "'")
                            If Not rsTemp.EOF Then
                                !mnycostopromedio = rsTemp!mnyCostoVigente
                            Else
                                !mnycostopromedio = 0
                            End If
                            !numNumRequisicion = CDbl(grdCargos.TextMatrix(X, 12))
                            !IntNumCargo = grdCargos.RowData(X) '#############################################################
                            .Update
                        End With
                        
                        strSql = "INSERT INTO IvRequisicionesSurtidas (dtmFechaRegistro, numCantidadSurtida, numNumCargo)" & _
                                 " VALUES(" & fstrFechaSQL(CStr(dtmFechaDevSubrog), CStr(dtmFechaDevSubrog)) & ", " & vldblCantidadSeparar * -1 & ", " & grdCargos.RowData(X) & ")"
                        pEjecutaSentencia strSql
                    End If
                Else
                    vlblnError = True
                    vlintMensaje = Abs(vllngValidaCargos)
                End If
            End If
            rsCargo.Close
        End If
        X = X + 1
    Loop
    
    flngRegistrarDevolucion = vlintMensaje

    If Not vlblnError Then
        'EntornoSIHO.ConeccionSIHO.CommitTrans
        vllngUltimaDevolucion = vllngIdentity
    Else
        EntornoSIHO.ConeccionSIHO.RollbackTrans
        If vlintMensaje <> 0 Then
            MsgBox SIHOMsg(CInt(vlintMensaje)), vbExclamation + vbOKOnly, "Mensaje"
        End If
    End If
    
    rsIvDevoluPacientMaestro.Close
    rsIvDevoluPacientDetalle.Close
    
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":flngRegistrarDevolucion"))
    Unload Me
End Function


Private Function fblnBuscaCargosConsignacion()
    ' -- 16652
    On Error GoTo NotificaError
    
    'Busca si la cuenta contiene cargos realizados en unidades alternas de medicamento surtido por ALMACEN DE CONSIGNACION
    fblnBuscaCargosConsignacion = False
'    If Val(grdCargos.TextMatrix(grdCargos.Row, 65)) > 0 Then
        vgstrParametrosSP = vgintClaveEmpresaContable & "|" & grdCargos.TextMatrix(grdCargos.Row, 12) & "|" & aFarmaciaCompartida(0).lngCveDepartamentoConsignacion & "|" & Trim(grdCargos.TextMatrix(grdCargos.Row, 17)) & "|" & grdCargos.RowData(grdCargos.Row)
        Set rsReqFarmaciaCompartida = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelReqFarmaciaCompartida")
        If rsReqFarmaciaCompartida.RecordCount > 0 Then
            grdCargos.TextMatrix(grdCargos.Row, 60) = rsReqFarmaciaCompartida!nombreDepartamento
            grdCargos.TextMatrix(grdCargos.Row, 61) = rsReqFarmaciaCompartida!chrcvearticulo
            fblnBuscaCargosConsignacion = True
        End If
        rsReqFarmaciaCompartida.Close
'    End If
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":fblnBuscaCargosConsignacion"))
End Function

Private Sub pCuadreIngresosDescuentos(vlblnFacturaAsistenciaSocial As Boolean)
    
    Dim vlintcontador As Integer
    Dim vlintPosicion As Integer
    
    Dim vldblTotalIngresos As Double
    Dim vldblTotalDescuentos As Double
    Dim vldblTotalIngresosRound As Double
    Dim vldblTotalDescuentosRound As Double
    Dim vldblDiferenciaIngreso As Double
    Dim vldblDiferenciaDescuento As Double
    
    vldblTotalIngresosRound = 0
    vldblTotalDescuentosRound = 0
    vldblTotalIngresos = 0
    vldblTotalDescuentos = 0
    
    '-------------------------------------------------------------------'
    ' Revisa y cuadra movimientos a póliza de los INGRESOS y DESCUENTOS '
    '-------------------------------------------------------------------'
    For vlintcontador = 0 To UBound(aCPCargosPoliza) - 1
        If vlblnFacturaAsistenciaSocial Then
            vldblTotalIngresos = vldblTotalIngresos + aCPCargosPoliza(vlintcontador).dblCantidadIngreso + aCPCargosPoliza(vlintcontador).dblCantidadDescuento
            
            vldblTotalIngresosRound = vldblTotalIngresosRound + Round(aCPCargosPoliza(vlintcontador).dblCantidadIngreso, 2) + Round(aCPCargosPoliza(vlintcontador).dblCantidadDescuento, 2)
        Else
            vldblTotalIngresos = vldblTotalIngresos + aCPCargosPoliza(vlintcontador).dblCantidadIngreso
            vldblTotalDescuentos = vldblTotalDescuentos + aCPCargosPoliza(vlintcontador).dblCantidadDescuento
            
            vldblTotalIngresosRound = vldblTotalIngresosRound + Round(aCPCargosPoliza(vlintcontador).dblCantidadIngreso, 2)
            vldblTotalDescuentosRound = vldblTotalDescuentosRound + Round(aCPCargosPoliza(vlintcontador).dblCantidadDescuento, 2)
        End If
    Next vlintcontador
       
    '----------'
    ' Ingresos '
    '----------'
    If (Round(vldblTotalIngresos - vldblTotalIngresosRound, 2) >= 0.01 _
            And Round(vldblTotalIngresos - vldblTotalIngresosRound, 2) <= 0.99 _
       ) _
       Or _
       (Round(vldblTotalIngresos - vldblTotalIngresosRound, 2) <= -0.01 _
            And Round(vldblTotalIngresos - vldblTotalIngresosRound, 2) >= -0.99 _
       ) Then
       vldblTotalIngresos = Round(vldblTotalIngresos, 2)
       Do While Val(vldblTotalIngresos) <> Val(vldblTotalIngresosRound)
            If vldblTotalIngresos > vldblTotalIngresosRound Then
                vlintPosicion = 0
                vldblDiferenciaIngreso = 0
                For vlintcontador = 0 To UBound(aCPCargosPoliza) - 1
                    If Round(aCPCargosPoliza(vlintcontador).dblCantidadIngreso, 2) - aCPCargosPoliza(vlintcontador).dblCantidadIngreso < vldblDiferenciaIngreso And aCPCargosPoliza(vlintcontador).blnAjustadoParaCuadre = False Then
                        vldblDiferenciaIngreso = Round(aCPCargosPoliza(vlintcontador).dblCantidadIngreso, 2) - aCPCargosPoliza(vlintcontador).dblCantidadIngreso
                        vlintPosicion = vlintcontador
                    End If
                Next vlintcontador

                If vldblDiferenciaIngreso <> 0 Then
                    vldblTotalIngresosRound = vldblTotalIngresosRound + 0.01
                    aCPCargosPoliza(vlintPosicion).dblCantidadIngreso = Round(aCPCargosPoliza(vlintPosicion).dblCantidadIngreso, 2) + 0.01
                    aCPCargosPoliza(vlintPosicion).blnAjustadoParaCuadre = True
                Else
                    vldblTotalIngresos = vldblTotalIngresosRound
                End If
            Else
                vlintPosicion = 0
                vldblDiferenciaIngreso = 0
                For vlintcontador = 0 To UBound(aCPCargosPoliza) - 1
                    If Round(aCPCargosPoliza(vlintcontador).dblCantidadIngreso, 2) - aCPCargosPoliza(vlintcontador).dblCantidadIngreso > vldblDiferenciaIngreso And aCPCargosPoliza(vlintcontador).blnAjustadoParaCuadre = False Then
                        vldblDiferenciaIngreso = Round(aCPCargosPoliza(vlintcontador).dblCantidadIngreso, 2) - aCPCargosPoliza(vlintcontador).dblCantidadIngreso
                        vlintPosicion = vlintcontador
                    End If
                Next vlintcontador

                If vldblDiferenciaIngreso <> 0 Then
                    vldblTotalIngresosRound = vldblTotalIngresosRound - 0.01
                    aCPCargosPoliza(vlintPosicion).dblCantidadIngreso = Round(aCPCargosPoliza(vlintPosicion).dblCantidadIngreso, 2) - 0.01
                    aCPCargosPoliza(vlintPosicion).blnAjustadoParaCuadre = True
                Else
                    vldblTotalIngresos = vldblTotalIngresosRound
                End If
            End If
        Loop
    End If

    '------------'
    ' Descuentos '
    '------------'
    If Not vlblnFacturaAsistenciaSocial Then
        If (Round(vldblTotalDescuentos - vldblTotalDescuentosRound, 2) >= 0.01 _
                And Round(vldblTotalDescuentos - vldblTotalDescuentosRound, 2) <= 0.99 _
           ) _
           Or _
           (Round(vldblTotalDescuentos - vldblTotalDescuentosRound, 2) <= -0.01 _
                And Round(vldblTotalDescuentos - vldblTotalDescuentosRound, 2) >= -0.99 _
           ) Then
           vldblTotalDescuentos = Round(vldblTotalDescuentos, 2)
           Do While Val(vldblTotalDescuentos) <> Val(vldblTotalDescuentosRound)
                If vldblTotalDescuentos > vldblTotalDescuentosRound Then
                    vlintPosicion = 0
                    vldblDiferenciaDescuento = 0
                    For vlintcontador = 0 To UBound(aCPCargosPoliza) - 1
                        If Round(aCPCargosPoliza(vlintcontador).dblCantidadDescuento, 2) - aCPCargosPoliza(vlintcontador).dblCantidadDescuento < vldblDiferenciaDescuento And aCPCargosPoliza(vlintcontador).blnAjustadoParaCuadre = False Then
                            vldblDiferenciaDescuento = Round(aCPCargosPoliza(vlintcontador).dblCantidadDescuento, 2) - aCPCargosPoliza(vlintcontador).dblCantidadDescuento
                            vlintPosicion = vlintcontador
                        End If
                    Next vlintcontador
    
                    If vldblDiferenciaDescuento <> 0 Then
                        vldblTotalDescuentosRound = vldblTotalDescuentosRound + 0.01
                        aCPCargosPoliza(vlintPosicion).dblCantidadDescuento = Round(aCPCargosPoliza(vlintPosicion).dblCantidadDescuento, 2) + 0.01
                        aCPCargosPoliza(vlintPosicion).blnAjustadoParaCuadre = True
                    Else
                        vldblTotalDescuentos = vldblTotalDescuentosRound
                    End If
                Else
                    vlintPosicion = 0
                    vldblDiferenciaDescuento = 0
                    For vlintcontador = 0 To UBound(aCPCargosPoliza) - 1
                        If Round(aCPCargosPoliza(vlintcontador).dblCantidadDescuento, 2) - aCPCargosPoliza(vlintcontador).dblCantidadDescuento > vldblDiferenciaDescuento And aCPCargosPoliza(vlintcontador).blnAjustadoParaCuadre = False Then
                            vldblDiferenciaDescuento = Round(aCPCargosPoliza(vlintcontador).dblCantidadDescuento, 2) - aCPCargosPoliza(vlintcontador).dblCantidadDescuento
                            vlintPosicion = vlintcontador
                        End If
                    Next vlintcontador
    
                    If vldblDiferenciaDescuento <> 0 Then
                        vldblTotalDescuentosRound = vldblTotalDescuentosRound - 0.01
                        aCPCargosPoliza(vlintPosicion).dblCantidadDescuento = Round(aCPCargosPoliza(vlintPosicion).dblCantidadDescuento, 2) - 0.01
                        aCPCargosPoliza(vlintPosicion).blnAjustadoParaCuadre = True
                    Else
                        vldblTotalDescuentos = vldblTotalDescuentosRound
                    End If
                End If
            Loop
        End If
    End If

End Sub

Private Sub pHabilitaGrabacionFactura(vlblnFacturasSinGrabar As Boolean)
        If vlblnFacturasSinGrabar Then
            chkFacturaBase.Value = 0
            chkFacturaBase.Enabled = False
            cmdEliminaDonativo.Enabled = True
        Else
            pIniciaChkFacturaBase
            cmdEliminaDonativo.Enabled = False
            pHabilitaGrabacionFacturaPaciente
        End If
End Sub

Private Sub pMuestraDevolucionDinero()
    'Visualizar el botón de devoluciones de dinero en caso que el total a pagar sea negativo
    If CDbl(txtFPTotalPagar.Text) < 0 Then
        If Len(txtFPTotalPagar.Text) > 10 Then txtFPTotalPagar.FontBold = False
        cmdDevolucionesDinero.Visible = True
    Else
        txtFPTotalPagar.FontBold = True
        cmdDevolucionesDinero.Visible = False
    End If
End Sub

Public Function Truncar(ByVal dblVar As Double, ByVal nDecimales As Integer) As Double

    Dim stVar As String
    
    stVar = CStr(dblVar)
    stVar = Left(stVar, InStr(1, stVar, ".") + nDecimales)
    Truncar = CDbl(stVar)
    
End Function

Private Sub pIniciaVariables(grdGrid_name As String)
    If grdGrid_name = "grdFacturaPaciente" Then
        txtFPDescuentos.Text = Format(0, "$ ###,###,###,###.00")
        txtFPSubtotal.Text = Format(0, "$ ###,###,###,###.00")
        txtFPIVA.Text = Format(0, "$ ###,###,###,###.00")
        txtFPTotalFactura.Text = Format(0, "$ ###,###,###,###.00")
        txtFPPagos.Text = Format(0, "$ ###,###,###,###.00")
        txtFPNotasCredito.Text = Format(0, "$ ###,###,###,###.00")
        txtFPTotalPagar.Text = Format(0, "$ ###,###,###,###.00")
        
        If blnCalcularEnBaseACargos Then
            Frame13.Enabled = False
        Else
            Frame13.Enabled = True
        End If
    Else
        txtFEDescuentos.Text = Format(0, "$ ###,###,###,###.00")
        txtFEDescuentoEspecial.Text = Format(0, "$ ###,###,###,###.00")
        txtFESubtotal.Text = Format(0, "$ ###,###,###,###.00")
        txtFEIVA.Text = Format(0, "$ ###,###,###,###.00")
        txtFETotalFactura.Text = Format(0, "$ ###,###,###,###.00")
        txtFEDedyCoa.Text = Format(0, "$ ###,###,###,###.00")
        txtFEPagos.Text = Format(0, "$ ###,###,###,###.00")
        txtFETotalPagar.Text = Format(0, "$ ###,###,###,###.00")
    End If
End Sub


Private Sub pMayusculas(ByRef KeyAscii As Integer)
    KeyAscii = Asc(UCase(Chr(KeyAscii)))
End Sub

Public Sub pSelTextBox(ObjTxt As TextBox)
'-------------------------------------------------------------------------------------------
' Selecciona el texto dentro de un TextBox
'-------------------------------------------------------------------------------------------
    On Error GoTo NotificaError
    
    With ObjTxt
      If .Enabled And .Visible Then
        .SelStart = 0
        .SelLength = Len(ObjTxt.Text)
      End If
    End With
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":pSelTextBox"))
End Sub

Private Function fblnLeerXMLAXA(strRequestXMLinterfazAXA As String, strResponseXMLinterfazAXA As String, strTipo As String) As Boolean

    Dim vlblnLeerXML As Boolean                    'Indica si se ha podido leer un archivo XML
        
    Dim DOMRequestTimbradoXML As MSXML2.DOMDocument 'Indica el archivo XML al que se le cargará la info
    Set DOMRequestTimbradoXML = New MSXML2.DOMDocument
    
    Dim DOMResponseTimbradoXML As MSXML2.DOMDocument 'Indica el archivo XML al que se le cargará la info
    Set DOMResponseTimbradoXML = New MSXML2.DOMDocument
    
    Dim DOMnodoAuxiliar As MSXML2.IXMLDOMNode
    
    'Se lee el archivo XML request
    vlblnLeerXML = DOMRequestTimbradoXML.loadXML(strRequestXMLinterfazAXA)
    
    'Se lee el archivo XML response
    vlblnLeerXML = DOMResponseTimbradoXML.loadXML(strResponseXMLinterfazAXA)
        
    'Se restauran los valores de las variables a obtener
    vgstrNumControlXML = ""
    vgstrICDXML = ""
    vgstrNumAutorizacionGralXML = ""
    vgstrNumAutorizacionEspecialXML = ""
        
    'Si se pudo leer el archivo...
    If vlblnLeerXML Then
        
        '--------------------------------------------------------- OBTENCIÓN DE VARIABLES ADICIONALES PARA LA INTERFAZ DE AXA --------------------------------------------------------------
        
        'Se obtiene la IP y el nombre de la máquina huesped
        Call ObtenerPCIP
        vgstrIP = vgstrNumeroIP
        vgstrEquipo = vgstrNombreMaquina
        
        '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
        'Se valida el tipo de transacción para saber de donde se extraerá la información (se valida según el tipo de transacción)
        If Trim(strTipo) = "CP" Then
        
            'NÚMERO DE CONTROL (NÚMERO DE NÓMINA)
            Set DOMnodoAuxiliar = DOMRequestTimbradoXML.selectSingleNode("//@numeroNomina")
            
            If DOMnodoAuxiliar Is Nothing Then
                vgstrNumControlXML = ""
            Else
                vgstrNumControlXML = Trim(DOMRequestTimbradoXML.selectSingleNode("//@numeroNomina").Text)
            End If
            
            'ICD (MOTIVO DE INGRESO)
            Set DOMnodoAuxiliar = DOMResponseTimbradoXML.selectSingleNode("//@numeroNomina")
            
            If DOMnodoAuxiliar Is Nothing Then
                vgstrICDXML = ""
            Else
                vgstrICDXML = Trim(DOMResponseTimbradoXML.selectSingleNode("//@motivoIngreso").Text)
            End If
            
            'NÚMERO DE AUTORIZACIÓN GENERAL
            Set DOMnodoAuxiliar = DOMRequestTimbradoXML.selectSingleNode("//@autorizacionGeneral")
            
            If DOMnodoAuxiliar Is Nothing Then
                vgstrNumAutorizacionGralXML = ""
            Else
                vgstrNumAutorizacionGralXML = Trim(DOMRequestTimbradoXML.selectSingleNode("//@autorizacionGeneral").Text)
            End If
        
            'NÚMERO DE AUTORIZACIÓN ESPECIAL
            Set DOMnodoAuxiliar = DOMRequestTimbradoXML.selectSingleNode("//@autorizacionEspecial")
            
            If DOMnodoAuxiliar Is Nothing Then
                vgstrNumAutorizacionEspecialXML = ""
            Else
                vgstrNumAutorizacionEspecialXML = Trim(DOMRequestTimbradoXML.selectSingleNode("//@autorizacionEspecial").Text)
            End If
        
        Else
        
            'NÚMERO DE CONTROL (NÚMERO DE NÓMINA)
            Set DOMnodoAuxiliar = DOMRequestTimbradoXML.selectSingleNode("//@numeroNomina")
            
            If DOMnodoAuxiliar Is Nothing Then
                vgstrNumControlXML = ""
            Else
                vgstrNumControlXML = Trim(DOMRequestTimbradoXML.selectSingleNode("//@numeroNomina").Text)
            End If
            
            'ICD (MOTIVO DE INGRESO)
            Set DOMnodoAuxiliar = DOMRequestTimbradoXML.selectSingleNode("//@motivoIngreso")
            
            If DOMnodoAuxiliar Is Nothing Then
                vgstrICDXML = ""
            Else
                vgstrICDXML = Trim(DOMRequestTimbradoXML.selectSingleNode("//@motivoIngreso").Text)
            End If
            
            'NÚMERO DE AUTORIZACIÓN ESPECIAL
            Set DOMnodoAuxiliar = DOMResponseTimbradoXML.selectSingleNode("//@autorizacionEspecial")
            
            If DOMnodoAuxiliar Is Nothing Then
                vgstrNumAutorizacionEspecialXML = ""
            Else
                vgstrNumAutorizacionEspecialXML = Trim(DOMResponseTimbradoXML.selectSingleNode("//@autorizacionEspecial").Text)
            End If
            
            '----------------- SE VALIDA SI ES HOSPITALIZACIÓN YA QUE SE MANEJAN DIFERENTE LA AUTORIZACION GENERAL -----------------
            If Trim(strTipo) = "HO" Then
            
                'NÚMERO DE AUTORIZACIÓN GENERAL
                Set DOMnodoAuxiliar = DOMRequestTimbradoXML.selectSingleNode("//@autorizacionGeneral")
                
                If DOMnodoAuxiliar Is Nothing Then
                    vgstrNumAutorizacionGralXML = ""
                Else
                    vgstrNumAutorizacionGralXML = Trim(DOMRequestTimbradoXML.selectSingleNode("//@autorizacionGeneral").Text)
                End If
                                    
            Else
            
                'NÚMERO DE AUTORIZACIÓN GENERAL
                Set DOMnodoAuxiliar = DOMResponseTimbradoXML.selectSingleNode("//@autorizacionGeneral")
                
                If DOMnodoAuxiliar Is Nothing Then
                    vgstrNumAutorizacionGralXML = ""
                Else
                    vgstrNumAutorizacionGralXML = Trim(DOMResponseTimbradoXML.selectSingleNode("//@autorizacionGeneral").Text)
                End If
                        
            End If
            '-----------------------------------------------------------------------------------------------------------------------------------------------
            
        End If
        
    'Se detalla la causa del por que no se pudo leer el xml
    Else
        MsgBox DOMRequestTimbradoXML.parseError.reason
    End If
    
    'Se regresa el resultado de la función
    fblnLeerXMLAXA = vlblnLeerXML
    
End Function

Private Sub pAjusteDescuentoEspecial(vldblSubtotal As Double)
'PROCEDIMIENTO QUE HACE UN AJUSTE A LOS REGISTROS DE LAS POLIZA, AGREGANDO EL PRORRATEO DEL DESCUENTO ESPECIAL
Dim dblImporteConcepto As Double
Dim dblDescuentos As Double
Dim dblDEspecial As Double
Dim dblImportes As Double
Dim vlintcontador As Long

'obtenemos los descuentos de conceptos que no vienen de los cargos
For vlintcontador = 0 To UBound(aCPCargosPoliza) - 1
    If aCPCargosPoliza(vlintcontador).blnConceptoNormal = False Then
       dblDescuentos = dblDescuentos + aCPCargosPoliza(vlintcontador).dblCantidadDescuento
    Else
       dblImportes = dblImportes + aCPCargosPoliza(vlintcontador).dblCantidadIngreso
       dblDescuentos = dblDescuentos + aCPCargosPoliza(vlintcontador).dblCantidadDescuento
    End If
Next vlintcontador
    
For vlintcontador = 0 To UBound(aCPCargosPoliza) - 1
    If aCPCargosPoliza(vlintcontador).blnConceptoNormal = True Then
       'importe
       dblImporteConcepto = aCPCargosPoliza(vlintcontador).dblCantidadIngreso '- aCPCargosPoliza(intcontador).dblCantidadDescuento
       
       'prorrateo del descuento normal
       If dblDescuentos > 0 Then
          dblImporteConcepto = dblImporteConcepto - (dblImporteConcepto * dblDescuentos / dblImportes)
       End If
          
       'prorrateo del descuento especial
       dblDEspecial = (dblImporteConcepto * dblDescuentoEspecial / vldblSubtotal)
        
       'se agrega descuento especial a la cantidad de descuento normal en el arreglo
       aCPCargosPoliza(vlintcontador).dblCantidadDescuento = aCPCargosPoliza(vlintcontador).dblCantidadDescuento + dblDEspecial
           
    End If
Next vlintcontador
End Sub

Private Sub pIniciaValores()
    pBarraAlCien
    pIniciaChkFacturaBase
End Sub

Private Sub pInsPaquetesFacturados(vlstrFolioDocumento As String, rsgrupo As ADODB.Recordset)
    Dim strParametros As String
    Dim rsExisteCargoPostergado As ADODB.Recordset
    Dim rsExisteControlPostergado As ADODB.Recordset
    
    strParametros = txtMovimientoPaciente.Text & "|" & IIf(optGrupoCuenta(0).Value, "'G'", IIf(OptTipoPaciente(0).Value, "'I'", "'E'")) & "|" & Trim(vlstrFolioDocumento)
    frsEjecuta_SP strParametros, "SP_PVINSPAQUETESFACTURADOS"
    If optGrupoCuenta(0).Value Then
       rsgrupo.MoveFirst
       Do Until rsgrupo.EOF
                pEstadoCuenta rsgrupo!INTMOVPACIENTE, rsgrupo!CHRTIPOPACIENTE, True
                rsgrupo.MoveNext
       Loop
    Else
        '-------------------------'
        '- Cerrar o abrir cuenta -'
        '-------------------------'
        Set rsExisteCargoPostergado = frsRegresaRs("SELECT * FROM PVCARGOPOSTERGADO WHERE INTMOVPACIENTE = " & txtMovimientoPaciente.Text, adLockReadOnly, adOpenForwardOnly)
        Set rsExisteControlPostergado = frsRegresaRs("SELECT * FROM PVCONTROLASEGURADORAPOSTERGADO WHERE INTMOVPACIENTE = " & txtMovimientoPaciente.Text, adLockReadOnly, adOpenForwardOnly)
        
        If rsExisteCargoPostergado.RecordCount > 0 Or rsExisteControlPostergado.RecordCount > 0 Then
            pEstadoCuenta CLng(txtMovimientoPaciente), IIf(OptTipoPaciente(0).Value, "I", "E"), False, True
        Else
            pEstadoCuenta CLng(txtMovimientoPaciente), IIf(OptTipoPaciente(0).Value, "I", "E"), False
        End If
    End If

End Sub

Private Sub pUpdateParciales(vlngConsecutivoFactura As Long)
    Dim vlstrSentencia As String

    vlstrSentencia = "UPDATE PvFacturasParciales SET PvFacturasParciales.INTFACTURABASE = " & vlngConsecutivoFactura
    vlstrSentencia = vlstrSentencia & " WHERE PvFacturasParciales.INTFACTURABASE IS NULL AND "
    vlstrSentencia = vlstrSentencia & " PvFacturasParciales.INTMOVPACIENTE = " & txtMovimientoPaciente.Text & " AND "
    vlstrSentencia = vlstrSentencia & " PvFacturasParciales.CHRTIPOPACIENTE = '" & IIf(OptTipoPaciente(0).Value, "I", "E") & "'"
    pEjecutaSentencia vlstrSentencia

End Sub

Public Sub pMovimientoPaciente()
    Dim rs As New ADODB.Recordset
    Dim rsAddenda As New ADODB.Recordset
    Dim rsPaquete As New ADODB.Recordset
    Dim rsDatosFiscales As New ADODB.Recordset
    Dim vlstrSentencia As String
    Dim vldblValidoDolares As String
    Dim rsCuentas As New ADODB.Recordset
    Dim blnValidaCorte As Boolean
    Dim vllngMensaje As Long
    Dim rsFechaCuenta As New ADODB.Recordset
    Dim strSentencia As String
    Dim strSql As String
    Dim rsAux As New ADODB.Recordset
    Dim rsCatCargos As ADODB.Recordset
    Dim vlblnManejaCatalogoCargos As Boolean
    Dim rsParametros As New ADODB.Recordset
    Dim vlLngCont As Long
    Dim rsInterfazWS As New ADODB.Recordset
    Dim rsLogInterfaz As New ADODB.Recordset
    Dim rsGrupoValidaReqYAuto As New ADODB.Recordset    'Recorset para mostrar mensaje de requisiciones pendientes o cargos automaticos pendientes cuando se trate de un grupo de cuenta
    Dim vlblnReqPendiente As Boolean                    'Variable para identificar si hay requisiciones pendientes
    Dim vlblnCargoAutoPendiente As Boolean              'Variable para identificar si hay cargos automaticos pendientes
    Dim rsCheckup As New ADODB.Recordset
    Dim blnEsAseguradora As Boolean                     '18084
    
                           
    vlblnEjecutoActivate = False
    vlblnFacturado = False
    
    'If KeyCode = vbKeyReturn Then
        lblnCanceloFacturaPaciente = False
        lblMensajeReqAut(36).Visible = False
    
        '-------------------------------------------------
        lblnCambiaNombreCargos = False ' inicializa variable caso 6614
        '-----------------------------------------------------
        'Carga la clave de la empresa PCE
        pCargaEmpresaPCE
          
        'Revisa si se utiliza socios
        vlUsaSocios = fblRevisaUsoSocios()
    
        'Se obtiene el tipo de paciente configurado como socio
        If vlUsaSocios = True Then
            vgLngTipoPacienteSocio = flngTipoPacienteSocio()
        End If
    
        blnExisteExcedente = False
        vlblncontrolaseguradora = False
        
        cmdLiquidaCuenta.Enabled = lintConceptoLiquidacion <> -1 And Not optGrupoCuenta(0).Value
        
        vgblnPrimeraVez = True
        If fdblTipoCambio(fdtmServerFecha, "V") = 0 Then
            MsgBox SIHOMsg(231), vbCritical, "Mensaje"
            Exit Sub
        End If
        
        If RTrim(txtMovimientoPaciente.Text) = "" Then
            If optGrupoCuenta(0).Value Then
                frmBusquedaGrupos.vgblnFormaBusqueda = True
                Load frmBusquedaGrupos
                frmBusquedaGrupos.Show vbModal
                'Evalúa si escogió un grupo
                If frmBusquedaGrupos.vgintCveGrupo <> -1 Then
                    txtMovimientoPaciente.Text = frmBusquedaGrupos.vgintCveGrupo
                    txtMovimientoPaciente_KeyDown 13, 1
                End If
                Unload frmBusquedaGrupos
            Else
                With FrmBusquedaPacientes
                    If OptTipoPaciente(1).Value Then 'Externos
                        .vgstrTipoPaciente = "E"

                        .Caption = .Caption & " externos"
                        .vgblnPideClave = False
                        .vgIntMaxRecords = 100
                        .vgstrMovCve = "M"
                        .optSoloActivos.Enabled = True
                        .optSinFacturar.Enabled = True
                        .optTodos.Enabled = True
                        .optSinFacturar.Value = True
                        .vgStrOtrosCampos = ", SiTipoIngreso.vchNombre as Tipo, TO_CHAR(ExPacienteIngreso.dtmFechaHoraIngreso, 'dd/mm/yyyy hh:mi:ss am') as ""Fecha"", isnull(CCempresa.vchDescripcion,adTipoPaciente.vchDescripcion) as Empresa "
                        .vgstrTamanoCampo = "800,3400,1500,1750,4100"
                    Else
                        .vgstrTipoPaciente = "I"  'Internos

                        .vgblnPideClave = False
                        .Caption = .Caption & " internos"
                        .vgIntMaxRecords = 100
                        .vgstrMovCve = "M"
                        .optSinFacturar.Value = True
                        .optSinFacturar.Enabled = True
                        .optSoloActivos.Enabled = True
                        .optTodos.Enabled = True
                        .vgStrOtrosCampos = ", SiTipoIngreso.vchNombre as Tipo, TO_CHAR(ExPacienteIngreso.dtmFechaHoraIngreso, 'dd/mm/yyyy hh:mi:ss am') as ""Fecha ing."", TO_CHAR(ExPacienteIngreso.dtmFechaHoraEgreso, 'dd/mm/yyyy hh:mi:ss am') as ""Fecha egr."", isnull(CCempresa.vchDescripcion,adTipoPaciente.vchDescripcion) as Empresa "
                        .vgstrTamanoCampo = "800,3400,2200,1050,1050,4100"
                    End If
                    
                    txtMovimientoPaciente.Text = .flngRegresaPaciente()
                                        
                    If txtMovimientoPaciente <> -1 Then
                        txtMovimientoPaciente_KeyDown vbKeyReturn, 0
                    Else
                        txtMovimientoPaciente.Text = ""
                    End If
                End With
            End If
        Else
            
            'Se inicializanlas variables relacionadas con la addenda
            vglngCveAddenda = 0
            vglngCveInterfazWS = 0
            vgstrProveedorAXA = ""
            vgstrContratoAXA = ""
            vgstrFolioReceta = ""
            vglngNumPacienteXML = 0

            If optGrupoCuenta(0).Value Then 'Grupo
                Set rs = frsEjecuta_SP(txtMovimientoPaciente.Text, "SP_PVSELGRUPOFACTURA")
                Set rsPostergado = frsRegresaRs("SELECT BITPOSTERGADA FROM EXPACIENTEINGRESO WHERE BITPOSTERGADA = 999999", adLockOptimistic, adOpenDynamic)
            Else
                If OptTipoPaciente(0).Value Then 'Internos
                    vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & str(vgintClaveEmpresaContable)
                    Set rs = frsEjecuta_SP(vgstrParametrosSP, "SP_PVSELINTERNOFACTURA")
                    Set rsPostergado = frsRegresaRs("SELECT BITPOSTERGADA FROM EXPACIENTEINGRESO WHERE INTNUMCUENTA = " & txtMovimientoPaciente.Text, adLockOptimistic, adOpenDynamic)
                Else  'Externos
                    vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & str(vgintClaveEmpresaContable)
                    Set rs = frsEjecuta_SP(vgstrParametrosSP, "SP_PVSELEXTERNOFACTURA")
                    Set rsPostergado = frsRegresaRs("SELECT BITPOSTERGADA FROM EXPACIENTEINGRESO WHERE INTNUMCUENTA = " & txtMovimientoPaciente.Text, adLockOptimistic, adOpenDynamic)
                End If
            End If

            If rs.RecordCount <> 0 Then
                pCargaVariables str(vgintClaveEmpresaContable), txtMovimientoPaciente.Text, IIf(OptTipoPaciente(0).Value, "I", "E"), IIf(IsNull(rs!cveEmpresa), 0, rs!cveEmpresa)
                
                If optGrupoCuenta(1).Value Then
                    'Determina si la cuenta se encuentra bloqueada por trabajo social
                    vgblnCuentaBloqueada = IIf(IsNull(rs!CuentaBloqueada), 0, rs!CuentaBloqueada)
                    
                    lblEstadoPaciente.Caption = ""
                    If OptTipoPaciente(0).Value Then
                        'Muestra si el paciente esta dado de alta voluntaria o médica o si aún permanece internado
                        lblEstadoPaciente.Caption = rs!EstadoPaciente
                    End If
                End If
                
                'Si es un grupo no debe poder seleccionar/Deseleccionar ningun cargo
                If optGrupoCuenta(0).Value Then
                    cmdSelQuita(0).Enabled = False
                    cmdSelQuita(1).Enabled = False
                    cmdSelecciona.Enabled = False
                Else
                    cmdSelQuita(0).Enabled = True
                    cmdSelQuita(1).Enabled = True
                    cmdSelecciona.Enabled = True
                End If
                
                'Verifica si se usa un catálogo especial y si todos los cargos estan dentro de él (PEMEX, PCE)
                vlblnManejaCatalogoCargos = fblnManejaCatalogoCargos(CLng(IIf(IsNull(rs!cveEmpresa), 0, rs!cveEmpresa)))
                If vlblnManejaCatalogoCargos Then
                    vllngEmpresaManejaCargos = CLng(IIf(IsNull(rs!cveEmpresa), 0, rs!cveEmpresa))
                    lblnCambiaNombreCargos = vlblnManejaCatalogoCargos
                    
                    If (vllngEmpresaManejaCargos <> llngCveEmpresaPCE And llngCveEmpresaPCE <> 0) _
                    Or (vllngEmpresaManejaCargos <> 0 And llngCveEmpresaPCE = 0) Then
                    'Si la empresa no es PCE, los cargos que no estén en el catálogo de la empresa se mostrarán con la descripción y concepto de facturación del hospital
                        If fblnCargosFueraCatalogo(CLng(txtMovimientoPaciente.Text), IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")), CLng(IIf(IsNull(rs!cveEmpresa), 0, rs!cveEmpresa))) Then
                            pCancelar
                            pEnfocaTextBox txtMovimientoPaciente
                            Exit Sub
                        End If
                     
                     ElseIf vllngEmpresaManejaCargos = llngCveEmpresaPCE Then
                    '|  PCE se valida de una forma especial (Esto fue validado por el cliente)
                        
                        '| Valida que todos los cargos de la cuenta esten configurados
                        If Not fblnInfoCompletaPCE Then
                            'La cuenta del paciente tiene cargos que no están registrados en el catálogo de Pensiones.
                            '¿Desea obtener un listado con los cargos?
                            If MsgBox(SIHOMsg(942), vbQuestion + vbYesNo, "Mensaje") = vbYes Then pImprimirInfoFaltantePCE
                            pCancelar
                            pEnfocaTextBox txtMovimientoPaciente
                            Exit Sub
                        End If
                        'Valida que esté configurada la cuenta para gastos no deducibles
                        If lngCuentaGastosNoDeducibles = 0 Then
                            '¡No se ha registrado la cuenta para gastos no deducibles!
                            'MsgBox SIHOMsg(1112), vbCritical, "Mensaje"
                            pCancelar
                            pEnfocaTextBox txtMovimientoPaciente
                            Exit Sub
                        End If
                    End If
                End If
                
                vldblRetencionServicios = IIf(IsNull(rs!PorcentajeServicios), 0, rs!PorcentajeServicios)
                
                If rs!Facturado = 0 Or rs!Facturado = False Then
                    blnValidaCorte = True
                    If optGrupoCuenta(0).Value Then
                        vlstrSentencia = "Select COUNT (*) Co " & _
                                         "  From ( Select intmovpaciente " & _
                                         "              , chrtipopaciente " & _
                                         "           From PVDETALLEFACTURACONSOLID " & _
                                         "          Where PVDETALLEFACTURACONSOLID.intcvegrupo = " & txtMovimientoPaciente.Text & " ) ctas " & _
                                         "       Inner Join PVPAGO On ( ctas.intmovpaciente = PVPAGO.intmovpaciente " & _
                                         "                              And ctas.chrtipopaciente = PVPAGO.chrtipopaciente) " & _
                                         " Where PVPAGO.bitcancelado = 0"
                        Set rsCuentas = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
                        If rsCuentas!CO > 0 Then blnValidaCorte = False
                    End If
                    '|  Valida si el corte actual es correcto
'                    If blnValidaCorte Then
'                        vllngMensaje = flngCorteValido(vgintNumeroDepartamento, vglngNumeroEmpleado, "P")
'
'                        If vllngMensaje <> 0 Then
'                            'Cierre el corte actual antes de registrar este documento.
'                            'No existe un corte abierto
'                            MsgBox SIHOMsg(Str(vllngMensaje)), vbOKOnly + vbInformation, "Mensaje"
'                            Unload Me
'                            Exit Sub
'                        End If
'                    End If
                    
                    pLimpiaGrid MSFGFacturasParciales
                    cmdEliminaDonativo.Enabled = False
                    Set vgcolFacturasParciales = Nothing
                    Set vgcolFacturasParciales = New Collection
                    vgdblTotalPagarPesosPaciente = 0    'Monto total factura en pesos del paciente
                    frmFacturacion.Refresh
                    
                    'Datos generales del paciente:
                    lblPaciente.Caption = " " + rs!Nombre
                    vgintEmpresa = IIf(IsNull(rs!cveEmpresa), 0, rs!cveEmpresa)
                    vlstrRFCEmpresa = IIf(IsNull(rs!RFC), "", rs!RFC)
                    lblEmpresa.Caption = " " + IIf(rs!bitUtilizaConvenio = 1, IIf(IsNull(rs!empresa), "", rs!empresa), rs!tipo)
                    Label57(0).Caption = IIf(rs!bitUtilizaConvenio = 1, "Empresa", "Tipo de paciente")
                    vgintTipoPaciente = rs!cveTipoPaciente
                    vgintCveExtra = IIf(IsNull(rs!intCveExtra), 0, rs!intCveExtra) 'Esta puede ser el numero de empleado o del médico
                    lblDireccion.Caption = IIf(IsNull(rs!calle), "", rs!calle)
                    lblNumExterior.Caption = IIf(IsNull(rs!NumeroExterior), "", rs!NumeroExterior)
                    lblNumInterior.Caption = IIf(IsNull(rs!NumeroInterior), "", rs!NumeroInterior)
                    lblColonia.Caption = IIf(IsNull(rs!Colonia), "", rs!Colonia)
                    If Not IsNull(rs!IdCiudad) Then cboCiudad.ListIndex = flngLocalizaCbo(cboCiudad, str(rs!IdCiudad))
                    lblTelefono.Caption = IIf(IsNull(rs!Telefono), "", rs!Telefono)
                    lblFechaIngreso.Caption = IIf(IsNull(rs!FechaIngreso), "", rs!FechaIngreso)
                    lblMedico.Caption = IIf(IsNull(rs!Medico), "", rs!Medico)
                    lblDiagnostico.Caption = IIf(IsNull(rs!Diagnostico), "", rs!Diagnostico)
                    lblCodigoPostal.Caption = IIf(IsNull(rs!CP), "", rs!CP)
                    
                    cboUsoCFDI(0).ListIndex = flngLocalizaCbo(cboUsoCFDI(0), flngCatalogoSATIdByNombreTipo("c_UsoCFDI", CLng(vgintTipoPaciente), "TP", 1))
                    cboUsoCFDI(1).ListIndex = flngLocalizaCbo(cboUsoCFDI(1), flngCatalogoSATIdByNombreTipo("c_UsoCFDI", CLng(vgintEmpresa), "EM", 1))
                    
                    'Revisa parámetro que indica si el cálculo en porcentaje de los conceptos de seguros es sobre el total de la cuenta antes de descuentos e IVA
'                    vlintbitConcepSeguroSinDescuentoIVA = 0
'                    vlstrSentencia = "SELECT bitConcepSeguroSinDescuentoIVA FROM CcEmpresa WHERE BITACTIVO = 1 AND intCveEmpresa = " & vgintEmpresa
'                    Set rsParametros = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
'                    If rsParametros.RecordCount > 0 Then vlintbitConcepSeguroSinDescuentoIVA = rsParametros!bitConcepSeguroSinDescuentoIVA
'                    rsParametros.Close
                            
                    vlintbitCalculaConcSegconDescuento = 0
                    vlstrSentencia = "SELECT bitCalculaConcSegconDescuento FROM CcEmpresa WHERE BITACTIVO = 1 AND intCveEmpresa = " & vgintEmpresa
                    Set rsParametros = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
                    If rsParametros.RecordCount > 0 Then vlintbitCalculaConcSegconDescuento = rsParametros!bitCalculaConcSegconDescuento
                    rsParametros.Close
                    
                    vlintbitCalculaConceptoSeguroconIVA = 0
                    vlstrSentencia = "SELECT bitCalculaConceptoSeguroconIVA FROM CcEmpresa WHERE BITACTIVO = 1 AND intCveEmpresa = " & vgintEmpresa
                    Set rsParametros = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
                    If rsParametros.RecordCount > 0 Then vlintbitCalculaConceptoSeguroconIVA = rsParametros!bitCalculaConceptoSeguroconIVA
                    rsParametros.Close
                    
                    'Verifica si la empresa maneja addenda en caso de que el paciente sea de tipo empresa
'                    If optGrupoCuenta(0).Value = False And vgintEmpresa <> 0 Then
'                        vglngCveAddenda = 1
'                        frsEjecuta_SP txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|FA|" & vgintClaveEmpresaContable, "FN_PVSELADDENDAEMPRESA", True, vglngCveAddenda
'                        vglngCveAddenda = vglngCveAddenda
'
'                        'Valida si se tiene licencia para emitir la addenda seleccionada
'                        vglngCveAddenda = IIf(fblLicenciaAddenda(vglngCveAddenda) = True, vglngCveAddenda, 0)
'
'                        'Verifica si utiliza una interfaz para la facturación
'                            'Se valida si la empresa seleccionada está configurada para usarse con alguna interfaz de WS
'                            '-------------------------------------------------------------------------------------------------------------------------------------------------------->
'                                vglngCveInterfazWS = 1
'                                frsEjecuta_SP vgintEmpresa & "|" & vgintClaveEmpresaContable, "FN_GNSELINTERFAZWS", True, vglngCveInterfazWS
'
'                                'Se verifica si se cuenta con una licencia para la interfaz obtenida
'                                vglngCveInterfazWS = IIf(fblnLicenciaWS(vglngCveInterfazWS) = True, vglngCveInterfazWS, 0)
'
'                                If vglngCveInterfazWS <> 0 Then 'Si la empresa tiene configurada una interfaz se obtiene la clave del proveedor y la clave de contrato
'                                    ' - Número de proveedor AXA
'                                    Set rsInterfazWS = frsEjecuta_SP(CStr(vgintClaveEmpresaContable), "SP_GNSELCONFIGINTERFAZWS")
'                                    If rsInterfazWS!CVEPROVEEDOR = "" Then
'                                        '¡No ha ingresado datos!
'                                        MsgBox "No se ha configurado la clave de proveedor AXA para el uso de la interfaz con el web service.", vbInformation + vbOKOnly, "Mensaje"
'                                    Else
'                                        vgstrProveedorAXA = Trim(rsInterfazWS!CVEPROVEEDOR)
'                                    End If
'
'                                    ' - Número de contrato AXA
'                                    Set rsInterfazWS = frsEjecuta_SP(vgintEmpresa & "|" & "CONTRATO", "SP_SISELEQUIVALENCIA")
'                                    If rsInterfazWS.RecordCount = 0 Then
'                                        '¡No ha ingresado datos!
'                                        MsgBox "No se ha configurado la clave de contrato configurada para la empresa del paciente.", vbInformation + vbOKOnly, "Mensaje"
'                                    Else
'                                        vgstrContratoAXA = Trim(rsInterfazWS!Clave)
'                                    End If
'
'                                    'Se selecciona el registro del log de transacciones de la interfaz para obtener la información necesaria
'                                    vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & "|" & IIf(OptTipoPaciente(0).Value = True, "I", "E")
'                                    Set rsLogInterfaz = frsEjecuta_SP(vgstrParametrosSP, "SP_GNSELLOGINTERFAZAXAPACIENTE")
'
'                                    If rsLogInterfaz.RecordCount > 0 Then
'
'                                        'AQUI SE VA A CARGAR LA INFORMACIÓN REGISTRADA EN EL LOG DE TRANSACCIONES DE LA INTERFAZ DE AXA
'                                        If Not fblnLeerXMLAXA(rsLogInterfaz!CLBXMLREQUEST, rsLogInterfaz!CLBXMLRESPONSE, rsLogInterfaz!chrTipo) Then
'                                            MsgBox "No se pudo recuperar la información del ingreso de paciente AXA.", vbInformation + vbOKOnly, "Mensaje"
'                                        Else
'
'                                            'FOLIO DE TRANSACCIÓN DEL LOG
'                                            vglngFolioIngresoLogAXA = Trim(rsLogInterfaz!INTCVEFOLIO)
'
'                                            'FOLIO DE RECETA
'                                            vgstrFolioReceta = Trim(rsLogInterfaz!VCHFOLIORECETA)
'
'                                            'NUMERO DE PACIENTE CORRESPONDIENTE EN EL LOG
'                                            vglngNumPacienteXML = rsLogInterfaz!intnumpaciente
'
'                                            'CLAVE DEL TIPO INGRESO DEL PACIENTE
'                                            vglngCveTipoIngresoXML = rsLogInterfaz!IntCveTipoIngreso
'
'                                        End If
'
'                                    Else 'Si el recordcount = 0, significa que no fué ingresado por medio de WS exitosamente, por lo que la facturación se realizaría de manera normal
'                                        vglngCveInterfazWS = 0
'                                    End If
'                                End If
'                            '<-------------------------------------------------------------------------------------------------------------------------------------------------------
'                    End If
'
'                    If vglngCveAddenda = 0 Then
'                        cmdAddenda.Enabled = False
'                    End If
                    
                    'Se consulta si el paciente a facturar es de tipo socio
                    If (Val(vgLngTipoPacienteSocio) = Val(vgintTipoPaciente)) And (Val(vgLngTipoPacienteSocio) > 0 And Val(vgintTipoPaciente) > 0) Then
                        vgSocio = True
                        vgLngTipoPacienteSocio = flngTipoPacienteSocio()
                        sstFacturacion.TabCaption(4) = "Factura bonificada"
                        lblEmpresa.Caption = "SOCIO"
                        vlstrRFCEmpresa = ""
                        Label57(0).Caption = "Tipo de paciente"
                        chkOtrosDatosFiscales.Enabled = False
                    Else
                        vgSocio = False
                        vgLngTipoPacienteSocio = 0
                        sstFacturacion.TabCaption(4) = "Factura empresa"
                        chkOtrosDatosFiscales.Enabled = True
                    End If
                    
                    ' ---Datos fiscales factura PACIENTE ---
                    If optGrupoCuenta(0).Value And vgintEmpresa = 0 Then
                        vlstrSentencia = "Select PvParametro.chrNombreFacturaPOS chrNombre, PvParametro.chrDireccionPOS chrCalle, ' ' chrTelefono, " & _
                                         "PvParametro.vchNumeroExteriorPOS vchNumeroExterior, PvParametro.vchNumeroInteriorPOS vchNumeroInterior, " & _
                                         "'XAXX010101000' chrRFC, INTCVECIUDAD, vchColoniaPOS vchColonia, vchCodigoPostalPOS vchCodigoPostal, ' ' vchCorreoElectronico, ' ' correo " & _
                                         " From pvparametro where tnyclaveempresa = " & vgintClaveEmpresaContable
                    Else
                        If optGrupoCuenta(0).Value Then
                            vlstrSentencia = " SELECT CcEmpresa.VCHDESCRIPCION as chrNombre, "
                            vlstrSentencia = vlstrSentencia & "     CcEmpresa.CHRCALLE as chrCalle, ccempresa.vchNumeroExterior, ccempresa.vchNumeroInterior,"
                            vlstrSentencia = vlstrSentencia & "     CcEmpresa.CHRTELEFONOEMPRESA as chrTelefono, "
                            vlstrSentencia = vlstrSentencia & "     CcEmpresa.CHRRFCEMPRESA as chrRFC, CCEMPRESA.INTCVECIUDAD, "
                            vlstrSentencia = vlstrSentencia & "     CcEmpresa.VCHCOLONIA as vchcolonia, TO_CHAR(CCEMPRESA.VCHCODIGOPOSTAL) vchcodigopostal, trim(CcEmpresa.vchCorreo) vchCorreoElectronico, "
                            vlstrSentencia = vlstrSentencia & "     TO_CHAR(CCEMPRESA.VCHCODIGOPOSTAL) vchcodigopostal, trim(CcEmpresa.vchCorreo) correo "
                            vlstrSentencia = vlstrSentencia & " FROM CcEmpresa "
                            vlstrSentencia = vlstrSentencia & " WHERE CcEmpresa.INTCVEEMPRESA = " & vgintEmpresa
                        Else
'                            vlstrSentencia = " select PvDatosFiscales.* " & _
                                                ", CASE WHEN trim(NVL(PvDatosFiscales.vchCorreoElectronico,'')) <> '' THEN trim(NVL(PvDatosFiscales.vchCorreoElectronico,'')) ELSE exPaciente.vchCorreoElectronico END correo " & _
                                             " from PvDatosFiscales " & _
                                                " LEFT JOIN EXPACIENTEINGRESO ON EXPACIENTEINGRESO.INTNUMCUENTA = PvDatosFiscales.INTNUMCUENTA " & _
                                                    " AND EXPACIENTEINGRESO.INTCVETIPOINGRESO IN (SELECT SITIPOINGRESO.INTCVETIPOINGRESO FROM SITIPOINGRESO WHERE SITIPOINGRESO.CHRTIPOINGRESO = PVDATOSFISCALES.CHRTIPOPACIENTE ) " & _
                                                " LEFT JOIN EXPACIENTE ON EXPACIENTE.INTNUMPACIENTE = EXPACIENTEINGRESO.INTNUMPACIENTE " & _
                                             " where PvDatosFiscales.intID = (select MAX(intID) from PvDatosFiscales where PvDatosFiscales.chrTipoPaciente = '" & IIf(OptTipoPaciente(0).Value, "I", "E") & "' and PvDatosFiscales.intNumCuenta = " & Trim(txtMovimientoPaciente.Text) & ")"
                        End If
                    End If
                    
'                    Set rsDatosFiscales = frsRegresaRs(vlstrSentencia)
'                    If rsDatosFiscales.RecordCount = 0 Then
'                        txtNombreFactura.Text = Trim(rs!Nombre)
'                        vgstrFacturaNombre = rs!Nombre
'                        txtDireccionFactura(0).Text = Trim(IIf(IsNull(rs!Calle), "", rs!Calle))
'                        If optGrupoCuenta(0).Value Then
'                            txtDireccionFactura(1).Text = ""
'                        Else
'                            txtDireccionFactura(1).Text = Trim(IIf(IsNull(rs!CORREO), "", rs!CORREO))
'                        End If
'                        vgstrFacturaDireccion = Trim(txtDireccionFactura(0).Text)
'                        lstrDatosFiscalesCorreo = Trim(txtDireccionFactura(1).Text)
'                        txtFacturaNumExterior.Text = IIf(IsNull(rs!NumeroExterior), "", Trim(rs!NumeroExterior))
'                        vgstrFacturaNumExterior = txtFacturaNumExterior.Text
'                        txtFacturaNumInterior.Text = IIf(IsNull(rs!NumeroInterior), "", Trim(rs!NumeroInterior))
'                        vgstrFacturaNumInterior = txtFacturaNumInterior.Text
'                        If optGrupoCuenta(0).Value = False And rsDatosFiscales.RecordCount <> 0 Then
'                            chkExtranjero.Value = IIf((rsDatosFiscales!bitExtranjero = 0), vbUnchecked, vbChecked)
'                            vgBitExtranjero = IIf((rsDatosFiscales!bitExtranjero = 0), 0, 1)
'                        Else
'                            chkExtranjero.Value = vbUnchecked
'                            vgBitExtranjero = 0
'                        End If
'                        If IsNull(rs!IdCiudad) Then
'                            cboCiudad.ListIndex = -1
'                        Else
'                            cboCiudad.ListIndex = flngLocalizaCbo(cboCiudad, Str(rs!IdCiudad))
'                        End If
'                        vglngFacturaCiudad = cboCiudad.ItemData(cboCiudad.ListIndex)
'                        txtTelefonoFactura.Text = IIf(IsNull(rs!Telefono), "", Trim(rs!Telefono))
'                        vgstrFacturaTelefono = txtTelefonoFactura.Text
'                        txtRFCFactura.Text = Trim(IIf(IsNull(rs!RFC), "", rs!RFC))
'                        vgstrFacturaRFC = txtRFCFactura.Text
'                        txtColoniaFactura.Text = Trim(IIf(IsNull(rs!Colonia), "", rs!Colonia))
'                        vgstrFacturaColonia = txtColoniaFactura.Text
'                        txtCPFactura.Text = Trim(IIf(IsNull(rs!CP), "", rs!CP))
'                        vgstrFacturaCodigoPostal = txtCPFactura.Text
'                    Else
'                        txtNombreFactura.Text = Trim(IIf(IsNull(rsDatosFiscales!CHRNOMBRE), "", rsDatosFiscales!CHRNOMBRE))
'                        vgstrFacturaNombre = txtNombreFactura.Text
'                        txtDireccionFactura(0).Text = Trim(IIf(IsNull(rsDatosFiscales!CHRCALLE), "", rsDatosFiscales!CHRCALLE))
'                        txtDireccionFactura(1).Text = Trim(IIf(IsNull(rsDatosFiscales!vchCorreoElectronico), Trim(IIf(IsNull(rsDatosFiscales!CORREO), "", rsDatosFiscales!CORREO)), rsDatosFiscales!vchCorreoElectronico))
'                        txtFacturaNumExterior.Text = IIf(IsNull(rsDatosFiscales!VCHNUMEROEXTERIOR), "", Trim(rsDatosFiscales!VCHNUMEROEXTERIOR))
'                        vgstrFacturaNumExterior = txtFacturaNumExterior.Text
'                        txtFacturaNumInterior.Text = IIf(IsNull(rsDatosFiscales!VCHNUMEROINTERIOR), "", Trim(rsDatosFiscales!VCHNUMEROINTERIOR))
'                        vgstrFacturaNumInterior = txtFacturaNumInterior.Text
'                        If optGrupoCuenta(0).Value = False And rsDatosFiscales.RecordCount <> 0 Then
'                            chkExtranjero.Value = IIf((rsDatosFiscales!bitExtranjero = 0), vbUnchecked, vbChecked)
'                            vgBitExtranjero = IIf((rsDatosFiscales!bitExtranjero = 0), 0, 1)
'                        Else
'                            chkExtranjero.Value = vbUnchecked
'                            vgBitExtranjero = 0
'                        End If
'                        If IsNull(rsDatosFiscales!INTCVECIUDAD) Then
'                            cboCiudad.ListIndex = -1
'                            vglngFacturaCiudad = -1
'                        Else
'                            cboCiudad.ListIndex = flngLocalizaCbo(cboCiudad, Str(rsDatosFiscales!INTCVECIUDAD))
'                            vglngFacturaCiudad = cboCiudad.ItemData(cboCiudad.ListIndex)
'                        End If
'                        vgstrFacturaDireccion = txtDireccionFactura(0).Text
'                        lstrDatosFiscalesCorreo = txtDireccionFactura(1).Text
'                        txtTelefonoFactura.Text = Trim(IIf(IsNull(rsDatosFiscales!CHRTELEFONO), "", rsDatosFiscales!CHRTELEFONO))
'                        vgstrFacturaTelefono = txtTelefonoFactura.Text
'                        txtRFCFactura.Text = Trim(IIf(IsNull(fStrRFCValido(rsDatosFiscales!chrRFC)), "", fStrRFCValido(rsDatosFiscales!chrRFC)))
'                        vgstrFacturaRFC = txtRFCFactura.Text
'                        txtColoniaFactura.Text = Trim(IIf(IsNull(rsDatosFiscales!VCHCOLONIA), "", rsDatosFiscales!VCHCOLONIA))
'                        vgstrFacturaColonia = txtColoniaFactura.Text
'                        txtCPFactura.Text = Trim(IIf(IsNull(rsDatosFiscales!VCHCODIGOPOSTAL), "", rsDatosFiscales!VCHCODIGOPOSTAL))
'                        vgstrFacturaCodigoPostal = txtCPFactura.Text
'                    End If
                    
                    lblCuarto.Caption = IIf(IsNull(rs!Cuarto), "", rs!Cuarto)
                    gintAseguradora = IIf((rs!bitUtilizaConvenio = 1 And rs!bitAseguradora = 1), 1, 0)
                    gintConvenio = IIf((rs!bitUtilizaConvenio = 1), 1, 0)
                                      
                    optTipoFacturacion(0).Enabled = gintAseguradora = 1
                    optTipoFacturacion(1).Value = True
                    optTipoFacturacion_Click 0
                            
                    'Llenar la el estado de cuenta:
                    pLlenaCargos
                    
                    'Aplica 100% de descuento a los cargos NO excluidos para pacientes de tipo SOCIO (Sin activar el bitPrecioManual)
                    If vgSocio = True Then
                        For vlLngCont = 1 To grdCargos.Rows - 1
                            If grdCargos.TextMatrix(vlLngCont, 18) <> "X" Then
                                pActualizaDescuentos 100, vlLngCont, 1
                            End If
                        Next
                    End If
                    
                    'Llenar la consulta de pagos:
                    pLlenaPagos
                                        
                    txtTotal.Text = Format(Val(Format(txtTotal.Text, "")) - Val(Format(txtPagos.Text, "")), "$ ###,###,###,##0.00")
                    pConfiguraGridFacturaPaciente
                    pConfiguraGridFacturaEmpresa
                    pConsultaControl
                    
                    If (vgintEmpresa = 0 Or blnExisteExcedente) And vgSocio = False Then
                        pLlenaFacturasParticulares grdFacturaPaciente
                    Else
                        If gintAseguradora = 0 Then
                            pLlenaFacturasConvenio grdFacturaPaciente
                            pLlenaFacturasConvenio grdFacturaEmpresa
                        Else
                            pLlenaFacturasConvenioAseguradora grdFacturaPaciente
                            'pLlenaFacturasConvenioAseguradora grdFacturaEmpresa
                        End If
                    End If
                                       
                    ''18084
                    blnEsAseguradora = False
                    lblNombreCarta.Visible = False
                    If rs!bitUtilizaConvenio = 1 And rs!bitAseguradora = 1 Then
                        blnEsAseguradora = True
                        pLlenarCartasAutorizacion
                        claveCarta = claveCartaEdoCta 'IIf(claveCartaEdoCta = 0, -1, claveCartaEdoCta)
                        cboCartaAutorizacion.ListIndex = flngLocalizaCbo(cboCartaAutorizacion, str(claveCarta))
                        lblNombreCarta.Caption = cboCartaAutorizacion.Text
                        'If cboCartaAutorizacion.ListIndex > 0 Then
                        '    claveCarta = cboCartaAutorizacion.ItemData(cboCartaAutorizacion.ListIndex)
                        'Else
                        '    claveCarta = pGrabaCartaGeneralAseguradora(txtMovimientoPaciente.Text, vgintEmpresa)
                        '    pLlenarCartasAutorizacion
                        'End If
                    End If
                    pConsultaControl
                    
                    If IIf(IsNull(rs!bitAseguradora), 0, rs!bitAseguradora) = 1 Then
                        txtNombreAsegurado.Text = rs!Nombre
                        txtPersonaAutoriza.Text = IIf(IsNull(rs!Autoriza), "", rs!Autoriza)
                        If Not IsNull(rs!CveTipoPoliza) Then cboTipoPoliza.ListIndex = flngLocalizaCbo(cboTipoPoliza, str(rs!CveTipoPoliza))
                        vlPolizaInicial = cboTipoPoliza.ListIndex
                        vgblnCambioPoliza = False
                        txtNumeroPoliza.Text = IIf(IsNull(rs!NumeroPoliza), "", rs!NumeroPoliza)
                        txtNumeroControl.Text = IIf(IsNull(rs!NumeroControl), "", rs!NumeroControl)
                        lblnDatosSeguroModificados = False
                        pCargaControl
                        If vlchrIncluirConceptosSeguro = "" Then
                           vlchrIncluirConceptosSeguro = "I"
                        End If
                        If intMensajeControl > 0 Then
                            'La cuenta no se puede facturar porque se activó el parámetro Calcular importes de seguro en base a los cargos
                            'o
                            'El parámetro Calcular importes de seguro en base a los cargos está activo, será necesario volver a grabar el control
                            MsgBox SIHOMsg(intMensajeControl), vbExclamation, "Mensaje"
                        End If
                    Else
                        vlchrIncluirConceptosSeguro = ""
                        vlintDesgloseConceptosVICFDI = 0
                    End If
                    
                    '--------------------------------------
                    'Estados de los frames, Tabs y estatus
                    '--------------------------------------
                    vgstrEstadoManto = "F" 'Facturando
                    freDatosFiscales.Enabled = True
                    freTipoFactura.Enabled = True
                    frmTipoAgrupa.Enabled = True
                    freDatosPaciente.Enabled = False
                    sstFacturacion.TabEnabled(1) = True 'Estado de Cuenta
                    sstFacturacion.TabEnabled(2) = blnEsAseguradora 'Control Aseguradora 18084
                    sstFacturacion.TabEnabled(4) = IIf(rs!bitUtilizaConvenio = 1, True, False) 'Factura Empresa
                    sstFacturacion.TabEnabled(5) = False 'Busqueda
                    optMuestraCargos(2).Enabled = IIf(rs!bitUtilizaConvenio = 1, True, False) 'Filtro de excluidos
                    optMuestraCargos(1).Enabled = IIf(rs!bitUtilizaConvenio = 1, True, False) 'Filtro de sin excluir
                    cmdBuscar.Enabled = IIf(vlstrDatosPaciente <> "", True, False)
                    
                    lblnCanceloFacturaPaciente = fblnSoloFacPacienteCancelada(sstFacturacion.TabEnabled(2), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(txtMovimientoPaciente.Text))
                    If lblnCanceloFacturaPaciente Or rsPostergado!BITPOSTERGADA = 1 Then 'y factura de la empresa activa, factura de paciente cancelada
                        fraConceptosAseguradora.Enabled = False
                        freControlAseguradora.Enabled = False
                        cmdGrabarControl.Enabled = False
                        cmdConfiguracion.Enabled = False
                        cmdBorraControl.Enabled = False
                        cmdAddenda.Enabled = False
                    Else
                        fraConceptosAseguradora.Enabled = True
                        freControlAseguradora.Enabled = True
                        cmdGrabarControl.Enabled = True
                        cmdConfiguracion.Enabled = True
                    End If
                    
                    pEnfocaTextBox txtNombreFactura
                    'Si es un grupo valida si es de empresa oparticulares para habilitar/deshabilitar el tab de Factura Paciente
                    If optGrupoCuenta(0).Value Then
                        If rs!bitUtilizaConvenio Then
                            sstFacturacion.TabEnabled(3) = False
                        Else
                            sstFacturacion.TabEnabled(3) = True
                        End If
                    End If
                        
                    'Identifica el tipo de formato a utilizar
'                    lngCveFormato = 1
'                    frsEjecuta_SP vgintNumeroDepartamento & "|" & vgintEmpresa & "|" & vgintTipoPaciente & "|" & IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")), "fn_PVSelFormatoFactura2", True, lngCveFormato
'                    vllngFormatoaUsar = lngCveFormato
'
'                    'Se valida en caso de no haber formato activo mostrar mensaje y cancelar transacción
'                    If vllngFormatoaUsar = 0 Then
'                        'No se encontró un formato válido de factura.
'                        MsgBox SIHOMsg(373), vbCritical, "Mensaje"
'                        pCancelar
'                        Exit Sub
'                    End If
'
'                    'Se compara el tipo de folio con el tipo de formato a utilizar con la fn "fintTipoEmisionComprobante"
'                    '(intTipoEmisionComprobante: 0 = Error, 1 = Físico, 2 = Digital)
'                    intTipoEmisionComprobante = fintTipoEmisionComprobante("FA", vllngFormatoaUsar)
'                    If intTipoEmisionComprobante = 1 Then        'FISICO
'                        'Si es físico se factura de manera normal
'                        frmTipoAgrupa.Enabled = False
'                        frmTipoAgrupa.Visible = False
'                    ElseIf intTipoEmisionComprobante = 2 Then    'DIGITAL
'
'                        'Se revisa el tipo de CFD de la Factura (0 = CFD, 1 = CFDi, 2 = Físico, 3 = Error)
'                        intTipoCFDFactura = fintTipoCFD("FA", vllngFormatoaUsar)
'
'                        'Si aparece un error terminar la transacción
'                        If intTipoCFDFactura = 3 Then   'ERROR
'                            'Si es error, se cancela la transacción
'                            pCancelar
'                            Exit Sub
'                        End If
'
'                        'Si es digital se cargan las opciones de agrupamiento predeterminadas
'                        'y se desactivan las que no tienen un archivo de Crystal Report activo
'                        frmTipoAgrupa.Enabled = True
'                        frmTipoAgrupa.Visible = True
'                        strSQL = "select intTipoAgrupaDigital, vchDescripcionAgrupa1, vchDescripcionAgrupa2,vchDescripcionAgrupa3 from FORMATO where intNumeroFormato = " & vllngFormatoaUsar
'                        Set rsAux = frsRegresaRs(strSQL)
'
'                       'Se cargan las opciones predeterminadas
'                        '_____________________________________________________________________________________________________________________________________________
'                        If optGrupoCuenta(1).Value And OptTipoPaciente(1).Value Then
'                           strSQL = "SELECT INTAGRUPACIONFACTURA FROM CUPRESUPUESTOPACIENTE " & _
'                                    "INNER JOIN CUPRESUPUESTO ON CUPRESUPUESTO.INTPRESUPUESTO = CUPRESUPUESTOPACIENTE.INTPRESUPUESTO " & _
'                                    "WHERE CUPRESUPUESTOPACIENTE.INTCTAPACIENTE = " & Trim(Me.txtMovimientoPaciente.Text)
'                           Set rsCheckup = frsRegresaRs(strSQL, adLockOptimistic)
'                           If rsCheckup.RecordCount > 0 Then
'                              If rsCheckup!INTAGRUPACIONFACTURA = 1 Then
'                                 optTipoAgrupacion(0) = True
'                              Else
'                                 optTipoAgrupacion(1) = True
'                              End If
'                           Else
'                              'Se cargan las opciones predeterminadas
'                              If rsAux!intTipoAgrupaDigital = 1 Then
'                                 optTipoAgrupacion(0) = True
'                              ElseIf rsAux!intTipoAgrupaDigital = 2 Then
'                                 optTipoAgrupacion(1) = True
'                              ElseIf rsAux!intTipoAgrupaDigital = 3 Then
'                                 optTipoAgrupacion(2) = True
'                              End If
'                           End If
'                        Else
'                              'Se cargan las opciones predeterminadas
'                              If rsAux!intTipoAgrupaDigital = 1 Then
'                                 optTipoAgrupacion(0) = True
'                              ElseIf rsAux!intTipoAgrupaDigital = 2 Then
'                                 optTipoAgrupacion(1) = True
'                              ElseIf rsAux!intTipoAgrupaDigital = 3 Then
'                                 optTipoAgrupacion(2) = True
'                              End If
'                        End If
'                        '_______________________________________________________________
'                        'Se deshabilitan los que no tienen asociados un archivo de Crystal
'                        If IsNull(rsAux!vchdescripcionagrupa1) Or Trim(rsAux!vchdescripcionagrupa1) = "" Then
'                            optTipoAgrupacion(0).Enabled = False
'                        Else
'                            optTipoAgrupacion(0).Enabled = True
'                        End If
'
'                        If IsNull(rsAux!vchdescripcionagrupa2) Or Trim(rsAux!vchdescripcionagrupa2) = "" Then
'                            optTipoAgrupacion(1).Enabled = False
'                        Else
'                            optTipoAgrupacion(1).Enabled = True
'                        End If
'
'                        If IsNull(rsAux!vchdescripcionagrupa3) Or Trim(rsAux!vchdescripcionagrupa3) = "" Then
'                            optTipoAgrupacion(2).Enabled = False
'                        Else
'                            optTipoAgrupacion(2).Enabled = True
'                        End If
'
'                    ElseIf intTipoEmisionComprobante = 0 Then   'ERROR
'                        'Si es error, se cancela la transacción y se cancelan los cambios
'                        pCancelar
'                        Exit Sub
'                    End If
                    
'                    vlblnReqPendiente = False
'                    vlblnCargoAutoPendiente = False
'
'                    If optGrupoCuenta(0).Value Then
'                        vlstrSentencia = "SELECT intmovpaciente, chrtipopaciente " & _
'                                         " FROM PVDETALLEFACTURACONSOLID " & _
'                                         " WHERE PVDETALLEFACTURACONSOLID.intCveGrupo = " & txtMovimientoPaciente.Text
'                        Set rsGrupoValidaReqYAuto = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
'
'                        rsGrupoValidaReqYAuto.MoveFirst
'                        Do Until rsGrupoValidaReqYAuto.EOF
'                            'Verificar requisiciones
'                            If fblnRequisicionPaciente(rsGrupoValidaReqYAuto!INTMOVPACIENTE, rsGrupoValidaReqYAuto!CHRTIPOPACIENTE) Then
'                                vlblnReqPendiente = True
'                            End If
'
'                            'Verificar cargos automaticos
'                            If fblnCargosAutomaticosPendientes(rsGrupoValidaReqYAuto!INTMOVPACIENTE, rsGrupoValidaReqYAuto!CHRTIPOPACIENTE) Then
'                                vlblnCargoAutoPendiente = True
'                            End If
'
'                            rsGrupoValidaReqYAuto.MoveNext
'                        Loop
'                    Else
'                        'Verificar requisiciones
'                        If fblnRequisicionPaciente(CLng(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E")) Then
'                            vlblnReqPendiente = True
'                        End If
'
'                        'Verificar cargos automaticos
'                        If fblnCargosAutomaticosPendientes(CLng(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E")) Then
'                            vlblnCargoAutoPendiente = True
'                        End If
'                    End If
                    
'                    If vlblnReqPendiente And vlblnCargoAutoPendiente Then
'                        lblMensajeReqAut(36).Height = 385
'                        lblMensajeReqAut(36).Top = 9295
'                        lblMensajeReqAut(36).Visible = True
'                        lblMensajeReqAut(36).Caption = "Existen requisiciones pendientes de surtir y cargos automáticos programados pendientes de aplicarse."
'                    Else
'                        If vlblnReqPendiente Then
'                            lblMensajeReqAut(36).Height = 195
'                            lblMensajeReqAut(36).Top = 9490
'                            lblMensajeReqAut(36).Visible = True
'                            lblMensajeReqAut(36).Caption = "Existen requisiciones pendientes de surtir."
'                        Else
'                            If vlblnCargoAutoPendiente Then
'                                lblMensajeReqAut(36).Height = 195
'                                lblMensajeReqAut(36).Top = 9490
'                                lblMensajeReqAut(36).Visible = True
'                                lblMensajeReqAut(36).Caption = "Existen cargos automáticos programados pendientes de aplicarse."
'                            Else
'                                lblMensajeReqAut(36).Height = 385
'                                lblMensajeReqAut(36).Top = 9295
'                                lblMensajeReqAut(36).Visible = False
'                                lblMensajeReqAut(36).Caption = ""
'                            End If
'                        End If
'                    End If
                    
                Else
                    If optGrupoCuenta(0).Value Then
                        'La cuenta del grupo está completamente facturado.
                        MsgBox "La cuenta del grupo está completamente facturada.", vbInformation, "Mensaje"
                        vlblnFacturado = True
                    Else
                        'La cuenta del paciente está completamente facturada.
                        MsgBox SIHOMsg(597), vbExclamation, "Mensaje"
                        vlblnFacturado = True
                    End If
                    
                    pCancelar
                End If
                
                pFacturasAnteriores
            Else
                'La información no existe
                MsgBox SIHOMsg(12) & IIf(optGrupoCuenta(1).Value, " o los cargos se encuentran dentro de un grupo", ""), vbExclamation, "Mensaje"
                pCancelar
            End If
        End If
        
        vgblnPrimeraVez = False
    'End If
End Sub

Private Sub cboCFParaFacturaParcial_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = 13 Then
        pEnfocaTextBox txtCantidadFP
    ElseIf KeyCode = 27 Then
        pReestableceEstadoComponentes
        fraParametrosFP.Visible = False
        vgblnCancelacionFP = True
    End If
End Sub

Private Sub cboCiudad_DropDown()
    vgBlnCambioDatosFiscales = True
End Sub

Private Sub cboCiudad_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then txtTelefonoFactura.SetFocus
End Sub

Private Sub cboPaquetes_Validate(Cancel As Boolean)
        '18084
    With grdCargos
        If clStrSeleccionComboPaquetes = "P" Then
            If .TextMatrix(.Row, 30) <> cboPaquetes.ItemData(cboPaquetes.ListIndex) Then
                .TextMatrix(.Row, 33) = "*" 'Estatus para identificar cuando un registro cambió en los paquetes
                .TextMatrix(.Row, 55) = ""  'Limpia la columna del excedente en grupo de cargo
                .TextMatrix(.Row, 29) = IIf(cboPaquetes.ListIndex = 0, "", cboPaquetes.List(cboPaquetes.ListIndex)) 'Descripcion del paquete
                .TextMatrix(.Row, 30) = IIf(cboPaquetes.ListIndex = 0, 0, cboPaquetes.ItemData(cboPaquetes.ListIndex)) 'Clave del paquete
                .TextMatrix(.Row, 31) = IIf(cboPaquetes.ListIndex = 0, "", 0) 'Cantidad de cargos incluidos en el paquete
                .TextMatrix(.Row, 32) = IIf(cboPaquetes.ListIndex = 0, "", 0)
                .TextMatrix(.Row, 54) = IIf(cboPaquetes.ListIndex = 0, "", Val(.TextMatrix(.Row, 4)) - (Val(.TextMatrix(.Row, 31)) + Val(.TextMatrix(.Row, 32)))) 'Cantidad de cargos extras
                cmdActualizarCargos.Enabled = True
                If cboPaquetes.ItemData(cboPaquetes.ListIndex) = 0 And intCantidadIncluida = 0 Then
                   pRegistraCambio 0, .TextMatrix(.Row, 2), cboPaquetes.List(cboPaquetes.ListIndex)
                Else
                   pRegistraCambio intCantidadIncluida, .TextMatrix(.Row, 2), cboPaquetes.ItemData(cboPaquetes.ListIndex)
                End If
            End If
        Else
            If .TextMatrix(.Row, cintColCveCarta) <> cboPaquetes.ItemData(cboPaquetes.ListIndex) Then
'                .TextMatrix(.Row, cintColNombreCarta) = IIf(cboPaquetes.ListIndex = 0, "", cboPaquetes.List(cboPaquetes.ListIndex)) 'Descripcion del paquete
'                .TextMatrix(.Row, cintColCveCarta) = IIf(cboPaquetes.ListIndex = 0, 0, cboPaquetes.ItemData(cboPaquetes.ListIndex)) 'Clave del paquete
                
                If Val(grdCargos.TextMatrix(grdCargos.Row, 30)) > 0 Then
                    cambiarCartaPaquete Val(grdCargos.TextMatrix(grdCargos.Row, 30))
                Else
                    .TextMatrix(.Row, cintColNombreCarta) = IIf(cboPaquetes.ListIndex = -1, "", cboPaquetes.List(cboPaquetes.ListIndex)) 'Descripcion del paquete
                    .TextMatrix(.Row, cintColCveCarta) = IIf(cboPaquetes.ListIndex = -1, 0, cboPaquetes.ItemData(cboPaquetes.ListIndex)) 'Clave del paquete
                    'If Val(grdCargos.TextMatrix(grdCargos.Row, 30)) > 0 Then cambiarCartaPaquete Val(grdCargos.TextMatrix(grdCargos.Row, 30))
                    cmdActualizarCargos.Enabled = True
                End If
            
            End If
        End If
        .RowHeight(.Row) = 240      'Tamaño inicial del renglon del Grid
        .Row = IIf(.Rows - 1 > .Row, .Row + 1, 1)
        .SetFocus
    End With
End Sub

Private Sub cboRegimenFiscal_GotFocus()
    On Error GoTo NotificaError
    vlintRegimenFiscal = cboRegimenFiscal.ListIndex

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":cboRegimenFiscal_GotFocus"))
End Sub


Private Sub cboRegimenFiscal_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then txtNombreFactura.SetFocus
End Sub


Private Sub cboRegimenFiscal_LostFocus()
    On Error GoTo NotificaError

    If vlintRegimenFiscal <> cboRegimenFiscal.ListIndex Then
        vgBlnCambioDatosFiscales = True
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":cboRegimenFiscal_LostFocus"))
End Sub


Private Sub cboRegimenFiscal_Validate(Cancel As Boolean)
    On Error GoTo NotificaError

    If vlintRegimenFiscal <> cboRegimenFiscal.ListIndex Then
        vgBlnCambioDatosFiscales = True
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":cboRegimenFiscal_Validate"))
End Sub


Private Sub cboTipopoliza_Click()
    lblnDatosSeguroModificados = True
End Sub

Private Sub cboTipopoliza_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If cboTipoPoliza.ListIndex <> -1 Then
            If cboTipoPoliza.ItemData(cboTipoPoliza.ListIndex) = -1 Then
                frmMantoTresCampos.vllngCveCatalogo = 67
                frmMantoTresCampos.vlblnVisualizarCboCatalogos = False
                frmMantoTresCampos.Show vbModal, Me
                
                pCargaTipoPoliza
            Else
                txtNumeroPoliza.SetFocus
                'txtPersonaAutoriza.SetFocus
            End If
        Else
            txtNumeroPoliza.SetFocus
            'txtPersonaAutoriza.SetFocus
        End If
    End If
End Sub

Private Sub cboTipoPoliza_LostFocus()
    If cboTipoPoliza.ListIndex <> -1 Then
        If vlPolizaInicial <> cboTipoPoliza.ItemData(cboTipoPoliza.ListIndex) Then
            vgblnCambioPoliza = True
        End If
    End If
End Sub

Private Sub chkAutoriza_Click()
    lblnDatosSeguroModificados = True
End Sub
Private Sub acomodaControles()
    Dim tabSSTFactCuatro As Object
    
    Set lblCancelada(1).Container = freFechaFactura(1)
    lblCancelada(1).Top = lblFechaFactura(1).Top + lblFechaFactura(1).Height + 50
    lblCancelada(1).Left = lblFechaFactura(1).Left
    sstFacturacion.TabIndex = 4
    
    
    Set txtFacturasEncontradas(1).Container = freFechaFactura(2)
    txtFacturasEncontradas(1).Top = 285
    txtFacturasEncontradas(1).Left = lblFechaFactura(1).Left
    txtFacturasEncontradas(1).Width = lblFechaFactura(1).Width
    
    
    Set cmdAnteriorFactura(1).Container = freFechaFactura(2)
    cmdAnteriorFactura(1).Top = txtFacturasEncontradas(1).Top + txtFacturasEncontradas(1).Height + 20
    cmdAnteriorFactura(1).Left = (txtFacturasEncontradas(1).Left + (txtFacturasEncontradas(1).Width / 2)) - (txtFacturasEncontradas(1).Left + cmdAnteriorFactura(1).Width)
    
    Set cmdSiguienteFactura(1).Container = freFechaFactura(2)
    cmdSiguienteFactura(1).Top = txtFacturasEncontradas(1).Top + txtFacturasEncontradas(1).Height + 20
    cmdSiguienteFactura(1).Left = (txtFacturasEncontradas(1).Left + (txtFacturasEncontradas(1).Width / 2)) + txtFacturasEncontradas(1).Left
End Sub
Private Sub chkConsultaGeneraFacturas_Click(Index As Integer)
    Dim vlintcontador As Long
    Dim vllng As Double
    Dim xx As String
    Dim vlstrSentencia As String
    
    '-------------------------------------------------------------'
    ' El Index = 0 significa que es en la facturación al Paciente '
    ' El Index = 1 significa que es en la facturación a Empresa   '
    '-------------------------------------------------------------'
    If chkConsultaGeneraFacturas(Index).Value = 0 Then
        
        pFacturasAnteriores
        
        ''rsConsultaFacturas.Close ''
        freConsultaGeneraFacturas(Index).Height = IIf(Index = 1, 2625, 2625)
        
        chkConsultaGeneraFacturas(Index).Caption = "Consultar facturas"
        cmdSiguienteFactura(Index).Enabled = False
        cmdAnteriorFactura(Index).Enabled = False
        If Index = 0 Then
            cmdGrabarFacturaPaciente.Enabled = True
            cmdPrefacturaPaciente.Enabled = True
            pFacturaPacienteActiva
        Else
            cmdGrabarFacturaEmpresa.Enabled = True
            cmdPrefacturaEmpresa.Enabled = True
            pFacturaPacienteActiva
        End If
        
        optPesos(Index).Enabled = True
        optDolares(Index).Enabled = True
        freFechaFactura(Index).Visible = False
        freFechaFactura(2).Visible = False
        
        lblCancelada(Index).Visible = False
        freSeleccionaCliente.Visible = True
        pCargaControl
        If Index = 0 Then
            If (vgintEmpresa = 0 Or blnExisteExcedente) And vgSocio = False Then
                pLlenaFacturasParticulares grdFacturaPaciente
            Else
                If gintAseguradora = 0 Then
                    pLlenaFacturasConvenio grdFacturaPaciente
                Else
                    pLlenaFacturasConvenioAseguradora grdFacturaPaciente
                End If
            End If
        Else
            If vgintEmpresa <> 0 Or vgSocio = True Then
                If gintAseguradora = 0 Then
                    pLlenaFacturasConvenio grdFacturaEmpresa
                Else
                    pLlenaFacturasConvenioAseguradora grdFacturaEmpresa
                End If
            End If
        End If
        vgstrEstadoManto = "F"
    Else
        If chkFacturaSustitutaFP(0).Value = 1 Then
            chkFacturaSustitutaFP(0).Value = 0
        End If
            
        chkFacturaSustitutaFP(0).Enabled = False
        lstFacturaASustituirFP.Enabled = False
        
        If chkFacturaSustitutaFE.Value = 1 Then
            chkFacturaSustitutaFE.Value = 0
        End If
            
        chkFacturaSustitutaFE.Enabled = False
        lstFacturaASustituirFE.Enabled = False
    
        vlstrSentencia = "SELECT * FROM pvFactura " & _
                         " WHERE pvFactura.intMovPaciente = " & Trim(txtMovimientoPaciente.Text) & _
                         " AND pvFactura.chrTipoPaciente = " & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & _
                         " AND chrTipoFactura = " & IIf(Index = 0, "'P'", "'E'") & _
                         " ORDER BY dtmFechaHora"
        Set rsConsultaFacturas = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenStatic)
        If rsConsultaFacturas.RecordCount > 0 Then
            pConsultaFacturas rsConsultaFacturas!chrfoliofactura, Index
            freConsultaGeneraFacturas(Index).Height = IIf(Index = 1, 2625, 2625)
            chkConsultaGeneraFacturas(Index).Caption = "Generar factura"
            cmdSiguienteFactura(Index).Enabled = True
            cmdAnteriorFactura(Index).Enabled = True
            If Index = 0 Then
                cmdGrabarFacturaPaciente.Enabled = False
                cmdPrefacturaPaciente.Enabled = False
                pFacturaPacienteActiva
            Else
                cmdGrabarFacturaEmpresa.Enabled = False
                cmdPrefacturaEmpresa.Enabled = False
                pFacturaPacienteActiva
            End If
            optPesos(Index).Enabled = False
            optDolares(Index).Enabled = False
            freFechaFactura(Index).Visible = True
            freFechaFactura(2).Visible = True
            freSeleccionaCliente.Visible = False
            vgstrEstadoManto = "C"  'Que es una consulta
        Else
            chkConsultaGeneraFacturas(Index).Value = 0
            MsgBox SIHOMsg(360), vbExclamation, "Mensaje"
        End If
    End If

End Sub

Private Sub chkExtranjero_Click()
    vgBlnCambioDatosFiscales = True
    
    If chkRFCgenerico.Value = vbChecked And chkExtranjero.Value = vbChecked Then
        txtRFCFactura.Text = "XEXX010101000"
        chkRazonSocial.Enabled = False
        chkRazonSocial.Value = 0
    ElseIf chkRFCgenerico.Value = vbChecked And chkExtranjero.Value = vbUnchecked Then
        txtRFCFactura.Text = "XAXX010101000"
        chkRazonSocial.Enabled = True
    End If
End Sub

Private Sub chkFacturaCoaseguro_Click()
    If chkFacturaCoaseguro.Value = 1 Then
        If Not blnConceptoCoaseguro Then
            'No existe concepto de facturación para el
            MsgBox SIHOMsg(1061) & " Coaseguro", vbExclamation + vbOKOnly, "Mensaje"
            chkFacturaCoaseguro.Value = 0
        End If
    End If
End Sub

Private Sub chkFacturaCoaseguroAdicional_Click()
    If chkFacturaCoaseguroAdicional.Value = 1 Then
        If Not blnConceptoCoaseguroAdicional Then
            'No existe concepto de facturación para el
            MsgBox SIHOMsg(1061) & " Coaseguro adicional", vbExclamation + vbOKOnly, "Mensaje"
            chkFacturaCoaseguroAdicional.Value = 0
        End If
    End If
End Sub

Private Sub chkFacturaCoaseguroMedico_Click()
    If chkFacturaCoaseguroMedico.Value = 1 Then
        If Not blnConceptoCoaseguroMedico Then
            'No existe concepto de facturación para el Coaseguro médico
            MsgBox SIHOMsg(1061) & " Coaseguro médico", vbExclamation + vbOKOnly, "Mensaje"
            chkFacturaCoaseguroMedico.Value = 0
        End If
    Else
        txtHonorariosAFacturar.Text = ""
        txtPorcentajeCoaseguroMed.Text = ""
        txtCoaseguroMedico.Text = ""
        txtTotalCoaseguroMedico.Text = FormatCurrency(0, 2)
    End If
End Sub

Private Sub chkExtranjero_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then cboRegimenFiscal.SetFocus
End Sub

Private Sub chkFacturaBase_Click()
    If chkFacturaBase.Value Then
        cmdGrabarFacturaPaciente.Enabled = True
        cmdPrefacturaPaciente.Enabled = True
        pFacturaPacienteActiva
    Else
        If MSFGFacturasParciales.RowData(1) = -1 Then
            cmdGrabarFacturaPaciente.Enabled = False
            cmdPrefacturaPaciente.Enabled = False
            pFacturaPacienteActiva
        Else
            cmdGrabarFacturaPaciente.Enabled = True
            cmdPrefacturaPaciente.Enabled = True
            pFacturaPacienteActiva
        End If
    End If
End Sub

Private Sub chkFacturaCopago_Click()
    If chkFacturaCopago.Value = 1 Then
        If Not blnConceptoCopago Then
            'No existe concepto de facturación para el
            MsgBox SIHOMsg(1061) & " Copago", vbExclamation + vbOKOnly, "Mensaje"
            chkFacturaCopago.Value = 0
        End If
    End If
End Sub

Private Sub chkFacturaDeducible_Click()
    If chkFacturaDeducible.Value = 1 Then
        If Not blnConceptoDeducible Then
            'No existe concepto de facturación para el
            MsgBox SIHOMsg(1061) & " Deducible", vbExclamation + vbOKOnly, "Mensaje"
            chkFacturaDeducible.Value = 0
        End If
    End If
End Sub


Private Sub chkFacturaSustitutaFE_Click()
    Dim i As Integer

    If chkFacturaSustitutaFE.Value = 0 Then
        lstFacturaASustituirFE.Clear
        ReDim aFoliosPrevios(0)
    Else
        If chkFacturaSustitutaFE.Value = 1 Then
            chkFacturaSustitutaFP(0).Value = 0
        
            frmBusquedaFacturasPrevias.vlchrtipofactura = "E"
            frmBusquedaFacturasPrevias.vlchrtipopaciente = IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", IIf(OptTipoPaciente(1).Value, "E", "")))
            frmBusquedaFacturasPrevias.vlintmovpaciente = CLng(IIf(txtMovimientoPaciente.Text = "", "0", txtMovimientoPaciente.Text))
            frmBusquedaFacturasPrevias.Show vbModal, Me
            
            lstFacturaASustituirFE.Clear
            For i = 0 To UBound(aFoliosPrevios())
                If aFoliosPrevios(i).chrfoliofactura <> "" Then
                    lstFacturaASustituirFE.AddItem aFoliosPrevios(i).chrfoliofactura
                End If
            Next i
            
            If frmBusquedaFacturasPrevias.vlchrfoliofactura = "" Then
                chkFacturaSustitutaFE.Value = 0
            End If
        End If
    End If
End Sub

Private Sub chkFacturaSustitutaFE_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then SendKeys vbTab
End Sub

Private Sub chkFacturaSustitutaFP_Click(Index As Integer)
    Dim i As Integer
    If Index = 0 Then
        If chkFacturaSustitutaFP(0).Value = 0 Then
            lstFacturaASustituirFP.Clear
            ReDim aFoliosPrevios(0)
        Else
            If chkFacturaSustitutaFP(0).Value = 1 Then
                chkFacturaSustitutaFE.Value = 0
            
                frmBusquedaFacturasPrevias.vlchrtipofactura = "P"
                frmBusquedaFacturasPrevias.vlchrtipopaciente = IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", IIf(OptTipoPaciente(1).Value, "E", "")))
                frmBusquedaFacturasPrevias.vlintmovpaciente = CLng(IIf(txtMovimientoPaciente.Text = "", "0", txtMovimientoPaciente.Text))
                frmBusquedaFacturasPrevias.Show vbModal, Me
                
                lstFacturaASustituirFP.Clear
                For i = 0 To UBound(aFoliosPrevios())
                    If aFoliosPrevios(i).chrfoliofactura <> "" Then
                        lstFacturaASustituirFP.AddItem aFoliosPrevios(i).chrfoliofactura
                    End If
                Next i
                
                If frmBusquedaFacturasPrevias.vlchrfoliofactura = "" Then
                    chkFacturaSustitutaFP(0).Value = 0
                End If
            End If
        End If
        pHabilitaGrabacionFacturaPaciente
    End If
End Sub

Private Sub chkFacturaSustitutaFP_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
    If Index = 0 Then
        If KeyCode = vbKeyReturn Then SendKeys vbTab
    End If
End Sub

Private Sub chkNumeroControl_Click()
    lblnDatosSeguroModificados = True
End Sub

Private Sub chkNumeroPoliza_Click()
    lblnDatosSeguroModificados = True
End Sub

Private Sub chkRFCgenerico_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then cboRegimenFiscal.SetFocus
End Sub

Private Sub chkTipoPoliza_Click()
    lblnDatosSeguroModificados = True
End Sub

Private Sub cmdActualizaFiscales_Click()
    Dim rsPvDatosFiscales As New ADODB.Recordset
    Dim vlstrSentencia As String
    Dim vgstrParametrosSP As String
    
    If Trim(txtRFCFactura.Text) = "" Then
        ' Favor de registrar el RFC
        MsgBox SIHOMsg(1013), vbExclamation + vbOKOnly, "Mensaje"
        txtRFCFactura.SetFocus
        Exit Sub
    End If
    
    If Len(Trim(txtRFCFactura.Text)) < 12 Then
        'El RFC ingresado no tiene un tamaño válido, favor de verificar
        MsgBox SIHOMsg(1345), vbExclamation + vbOKOnly, "Mensaje"
        txtRFCFactura.SetFocus
        pEnfocaTextBox txtRFCFactura
        Exit Sub
    End If
    
    'Si la version de CFDI es 4.0, es obligatoria la captura del régimen fiscal
    If vgstrVersionCFDI = "4.0" Then
        If cboRegimenFiscal.ListIndex = 0 Then
            '¡No ha ingresado datos!
            MsgBox SIHOMsg(2), vbExclamation + vbOKOnly, "Mensaje"
            If cboRegimenFiscal.Enabled Then cboRegimenFiscal.SetFocus
            Exit Sub
        End If
    End If
    
    'Si la version de CFDI es 4.0, es obligatoria la captura del código postal a 5 dígitos
    If vgstrVersionCFDI = "4.0" Then
        If Trim(txtCPFactura.Text) = "" Or Len(txtCPFactura.Text) < 5 Then
            '¡Dato no válido, el código postal debe ser de 5 dígitos!
            MsgBox SIHOMsg(1181), vbExclamation + vbOKOnly, "Mensaje"
            txtCPFactura.SetFocus
            pEnfocaTextBox txtCPFactura
            Exit Sub
        End If
    Else
        If Trim(txtCPFactura.Text) <> "" And Len(txtCPFactura.Text) <> 5 Then ' el código postal puede ser null o de 5 dígitos
            '¡Dato no válido, el código postal debe ser de 5 dígitos!
            MsgBox SIHOMsg(1181), vbExclamation + vbOKOnly, "Mensaje"
            txtCPFactura.SetFocus
            pEnfocaTextBox txtCPFactura
            Exit Sub
        End If
    End If
    
    If Trim(txtDireccionFactura(1).Text) <> "" And InStr(Trim(txtDireccionFactura(1).Text), "@") <= 0 Then
        'La dirección del correo no es válida.
        MsgBox SIHOMsg(1196), vbCritical, "Mensaje"
        pEnfocaTextBox txtDireccionFactura(1)
        Exit Sub
    End If
    
    If cboCiudad.ListCount = 0 Or cboCiudad.ListIndex = -1 Then
        '¡Dato no válido, seleccione un valor de la lista!
        MsgBox SIHOMsg(3), vbExclamation + vbOKOnly, "Mensaje"
        cboCiudad.SetFocus
    Else
          vgstrParametrosSP = fStrRFCValido(txtRFCFactura.Text) & "|" & _
                                Trim(txtNombreFactura.Text) & "|" & _
                                Trim(txtDireccionFactura(0).Text) & "|" & _
                                Trim(txtTelefonoFactura.Text) & "|" & _
                                IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & _
                                CLng(txtMovimientoPaciente.Text) & "|" & _
                                cboCiudad.ItemData(cboCiudad.ListIndex) & "|" & _
                                Trim(txtColoniaFactura.Text) & "|" & _
                                Trim(txtCPFactura.Text) & "|" & _
                                Trim(txtFacturaNumExterior.Text) & "|" & _
                                Trim(txtFacturaNumInterior.Text) & "|" & _
                                IIf((chkExtranjero.Value = vbChecked), 1, 0) & "|" & _
                                Trim(txtDireccionFactura(1).Text) & "|" & _
                                IIf(cboRegimenFiscal.ItemData(cboRegimenFiscal.ListIndex) = 0, "", cboRegimenFiscal.ItemData(cboRegimenFiscal.ListIndex))

        frsEjecuta_SP vgstrParametrosSP, "Sp_Pvinsinsdatofiscal"
        'La información se actualizó satisfactoriamente.
        MsgBox SIHOMsg(284), vbOKOnly + vbInformation, "Mensaje"
        vgBlnCambioDatosFiscales = False    'Fueron modificados los datos fiscales del paciente
    End If
End Sub

Private Sub cmdAddenda_Click()

If vgblnCambioPoliza = False Then
    With frmAddendaDatos
        If optGrupoCuenta(0) Then
            .blngrupocuentas = 1
        Else
            .blngrupocuentas = 0
        End If
        .lngAddenda = vglngCveAddenda
        .lngCuenta = Val(txtMovimientoPaciente)
        .strTipoIngreso = IIf(OptTipoPaciente(0).Value, "I", "E")
        .lngCveEmpresaContable = vgintClaveEmpresaContable
        .lngCveEmpresaPaciente = vgintEmpresa
        .Show vbModal
    End With
Else
    MsgBox SIHOMsg(1146), vbExclamation, "Mensaje"
End If

End Sub

Private Sub cmdAgregaDonativo_Click()
    If vgstrVersionCFDI = "3.2" Then
        pObtieneEstadoComponentes
    Else
        MsgBox "Utilice la generación de comprobantes en la opción de pagos", vbInformation, "Mensaje"
    End If
End Sub

Private Function fdblTotalFacturasParciales(pintColumna As Integer, pblnSoloPesos As Boolean, plngConceptoFacturacion As Long, Optional pblnSinfacturar As Boolean = False) As Double
    Dim vlIntCont As Integer
    Dim vldblTotalFacturasParciales As Double
    Dim vldblTipoCambio As Double
    
    vldblTipoCambio = fdblTipoCambio(fdtmServerFecha, "V")
    vldblTotalFacturasParciales = 0
    
    For vlIntCont = 1 To MSFGFacturasParciales.Rows - 1
        If ((plngConceptoFacturacion = CLng(Val(MSFGFacturasParciales.TextMatrix(vlIntCont, 12)))) _
        Or (plngConceptoFacturacion = -1)) _
        And (MSFGFacturasParciales.TextMatrix(vlIntCont, 11) = "0" _
        Or Not pblnSinfacturar) Then
            If pblnSoloPesos Then
                vldblTotalFacturasParciales = vldblTotalFacturasParciales + IIf(MSFGFacturasParciales.TextMatrix(vlIntCont, 9) = "x", CDbl(Val(Format(MSFGFacturasParciales.TextMatrix(vlIntCont, pintColumna), ""))) * vldblTipoCambio, CDbl(Val(Format(MSFGFacturasParciales.TextMatrix(vlIntCont, pintColumna), "############.00"))))
            Else
                vldblTotalFacturasParciales = vldblTotalFacturasParciales + CDbl(Val(Format(MSFGFacturasParciales.TextMatrix(vlIntCont, pintColumna), "")))
            End If
        End If
    Next vlIntCont
    
    fdblTotalFacturasParciales = vldblTotalFacturasParciales
End Function

Private Function fdblCantidadPagada(paryFormasPago() As FormasPago) As Double
    Dim vlIntCont As Integer
    
    fdblCantidadPagada = 0
    For vlIntCont = 0 To UBound(paryFormasPago)
        fdblCantidadPagada = fdblCantidadPagada + paryFormasPago(vlIntCont).vldblCantidad
    Next vlIntCont
End Function

Private Sub pAgregaColeccion(paryFormasPago() As FormasPago, pintidFactura As Long, pintCveClienteCredito As Long, _
                             pstrTipoClienteCredito As String, pintCveDatosFiscales As Long, pstrDFNombre As String, _
                             pstrDFDireccion As String, pstrDFNumeroExterior As String, pstrDFNumeroInterior As String, pstrDFTelefono As String, pstrDFRFC As String, lngCveCiudad As Long, _
                             strDFColonia As String, strDFCP As String)
    Dim vlIntCont As Integer
    Dim vlfpaFacturaParcial As clsFacturaParcial
    
    Set vlfpaFacturaParcial = New clsFacturaParcial 'Se crea una instancia de la clase factura parcial
    For vlIntCont = 0 To UBound(paryFormasPago)
        With vlfpaFacturaParcial
            .intIdFacturaParcial = pintidFactura 'Para identificar cuales formas de pago corresponden a "X" factura
            .intCveClienteCredito = pintCveClienteCredito
            .strTipoClienteCredito = pstrTipoClienteCredito
            .intCveDatosFiscales = pintCveDatosFiscales
            .strDFNombre = pstrDFNombre
            .strDFDireccion = pstrDFDireccion
            .strDFNumeroExterior = pstrDFNumeroExterior
            .strDFNumeroInterior = pstrDFNumeroInterior
            .strDFTelefono = pstrDFTelefono
            .strDFRFC = pstrDFRFC
            .llngCveCiudad = lngCveCiudad
            .strDFColonia = strDFColonia
            .strDFCP = strDFCP
        End With
        
        With aFormasPago(vlIntCont)
            vlfpaFacturaParcial.AgregaFormaPago .vlintNumFormaPago, .vldblCantidad, .vlstrFolio, .vllngCuentaContable, .vldblTipoCambio, .vlbolEsCredito, .vldblDolares, .lngIdBanco, .vllngCuentaComisionBancaria, .vldblCantidadComisionBancaria, .vldblIvaComisionBancaria
        End With
        vgcolFacturasParciales.Add vlfpaFacturaParcial, "K" & pintidFactura & "_" & vlIntCont
    Next
End Sub

Private Sub cmdBuscarFiscales_Click()
    'Inicializa la pantalla de datos fiscales en la busqueda / Otros
    Load frmDatosFiscales
    frmDatosFiscales.sstDatos.Tab = 1
    frmDatosFiscales.Show vbModal
    
    If Not vgBlnCambioDatosFiscales Then    'Fueron modificados los datos fiscales del paciente
        vgBlnCambioDatosFiscales = IIf(frmDatosFiscales.vgblnModalResult, True, False)
    End If
    
    If frmDatosFiscales.vgblnModalResult Then
        txtNombreFactura.Text = IIf(Trim(frmDatosFiscales.txtNombreFactura) = "", " ", frmDatosFiscales.txtNombreFactura)
        txtDireccionFactura(0).Text = IIf(Trim(frmDatosFiscales.txtDireccionFactura) = "", " ", frmDatosFiscales.txtDireccionFactura)
        txtFacturaNumExterior.Text = IIf(Trim(frmDatosFiscales.txtNumExterior) = "", " ", frmDatosFiscales.txtNumExterior)
        txtFacturaNumInterior.Text = IIf(Trim(frmDatosFiscales.txtNumInterior) = "", " ", frmDatosFiscales.txtNumInterior)
        chkExtranjero.Value = IIf(frmDatosFiscales.chkExtranjero.Value = vbChecked, vbChecked, vbUnchecked)
        cboCiudad.ListIndex = flngLocalizaCbo(cboCiudad, str(frmDatosFiscales.llngCveCiudad))
        txtTelefonoFactura.Text = IIf(Trim(frmDatosFiscales.txtTelefonoFactura) = "", " ", frmDatosFiscales.txtTelefonoFactura)
        txtRFCFactura.Text = IIf(Trim(frmDatosFiscales.txtRFC) = "", " ", fStrRFCValido(frmDatosFiscales.txtRFC))
        txtColoniaFactura.Text = IIf(Trim(frmDatosFiscales.txtColonia) = "", " ", frmDatosFiscales.txtColonia)
        txtCPFactura.Text = IIf(Trim(frmDatosFiscales.txtCP) = "", " ", frmDatosFiscales.txtCP)
        txtDireccionFactura(1).Text = IIf(Trim(frmDatosFiscales.txtCorreo) = "", " ", frmDatosFiscales.txtCorreo)
        cboRegimenFiscal.ListIndex = flngLocalizaCbo(cboRegimenFiscal, frmDatosFiscales.vlstrRegimenFiscal)
        Unload frmDatosFiscales
        Set frmDatosFiscales = Nothing
    End If
End Sub

Private Sub cmdCancelaFacturasSAT_Click()
'''''''Cancelación masiva de facturas ante el SAT, cancelacion del XML
''''''Dim ArrIdFacturas() As String
''''''Dim vllngCantidadFacturas As Long
''''''Dim vllngCont As Long
''''''Dim vllngPersonaGraba As Long
''''''
''''''On Error GoTo NotificaError
''''''
''''''If MsgBox(SIHOMsg(1249), vbQuestion + vbYesNo, "Mensaje") = vbYes Then
''''''
''''''   vllngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
''''''   If vllngPersonaGraba = 0 Then Exit Sub
''''''
''''''     'Recorremos el grid para poder cargar el arreglo con los Id de las facturas que vamos a cancelar
''''''      With grdBuscaFacturas
''''''           vllngCantidadFacturas = 0
''''''           Erase ArrIdFacturas
''''''           ReDim ArrIdFacturas(3, 0)
''''''
''''''           '1-Id del comprobante
''''''           '2-Tipo de comprobante
''''''           '3-Bandera para saber si es un comprobante que esta en el SAT pero en el SIHO no( Se originan por errores después de hacer un timbrado
''''''                                                                                            '1 = Pendiente de cancelarse ante el SAT
''''''                                                                                            '2 = Comprobante que esta en el SAT pero en el SIHO no)
''''''           For vllngCont = 1 To .Rows - 1
''''''               If .TextMatrix(vllngCont, 0) = "*" And (.TextMatrix(vllngCont, 12) <> "NP" And .TextMatrix(vllngCont, 12) <> "CR") Then
''''''                   vllngCantidadFacturas = vllngCantidadFacturas + 1
''''''                   ReDim Preserve ArrIdFacturas(3, vllngCantidadFacturas)
''''''                   ArrIdFacturas(1, vllngCantidadFacturas) = .RowData(vllngCont)
''''''                   ArrIdFacturas(2, vllngCantidadFacturas) = "FA"
''''''                   ArrIdFacturas(3, vllngCantidadFacturas) = .TextMatrix(vllngCont, 12) '(1,2)
''''''               End If
''''''           Next vllngCont
''''''      End With
''''''
''''''      'Enviamos el arreglo a cancelación****************************************************************************
''''''      pCancelaCFDiMasivo ArrIdFacturas, vllngCantidadFacturas, "frmFacturacion", vllngPersonaGraba
''''''      pCargaBusqueda IIf(optTipoPacienteBusqueda(2).Value, "A", IIf(optTipoPacienteBusqueda(0).Value, "I", "E")), -1
''''''      grdBuscaFacturas.SetFocus
''''''
''''''End If
''''''Exit Sub
''''''NotificaError:
''''''    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.name & ":cmdCancelaFacturasSAT_Click"))
''''''    Unload Me
    
    
'Cancelacion maciva de facturas ante el SAT, cancelacion del XML
Dim vlLngCantidadFacturas As Long
Dim vlLngCont As Long
Dim vllngPersonaGraba As Long
Dim vlintFacturasCanceladas As Long

    '|  Los comprobantes seleccionados serán validados nuevamente ante el SAT.
    '|  ¿Desea continuar?
    If MsgBox(SIHOMsg(1249), vbQuestion + vbYesNo, "Mensaje") = vbYes Then
        vllngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
        If vllngPersonaGraba = 0 Then Exit Sub
        'Recorremos el grid para poder cargar el arreglo con los Id de las facturas que vamos a cancelar
        With grdBuscaFacturas
            vlLngCantidadFacturas = 0
            vlintFacturasCanceladas = 0
            For vlLngCont = 1 To .Rows - 1
                '|  Parámetros:  Columna fixed         Estado nuevo esquema cancelación         Estado nuevo esquema cancelación
                If .TextMatrix(vlLngCont, 0) = "*" And (.TextMatrix(vlLngCont, 12) <> "NP" And .TextMatrix(vlLngCont, 12) <> "CR") Then
                    vlLngCantidadFacturas = vlLngCantidadFacturas + 1
                    '|  Parámetros:         (     Folio factura      )
                    If fblnFacturaCancelable(.TextMatrix(vlLngCont, 11)) Then
                        '|  Parámetros:         Folio factura,              Estado nuevo esquema,       Persona graba, Honorarios, Nombre forma, Muestra mensaje de cancelación satisfactoria
                        pCancelaCFDiFacturaSiHO .TextMatrix(vlLngCont, 11), .TextMatrix(vlLngCont, 12), vllngPersonaGraba, 0, Me.Name, False
                        vlintFacturasCanceladas = vlintFacturasCanceladas + 1
                    End If
                End If
            Next vlLngCont
        End With
        If vlLngCantidadFacturas = vlintFacturasCanceladas Then
            '|  La operación se realizó satisfactoriamente.
            MsgBox SIHOMsg(420), vbInformation + vbOKOnly, "Mensaje"
        End If
        '|  Refresca la información
        pCargaBusqueda IIf(optTipoPacienteBusqueda(2).Value, "A", IIf(optTipoPacienteBusqueda(0).Value, "I", "E")), -1
        grdBuscaFacturas.SetFocus
    End If
    Exit Sub
    
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":cmdCancelaFacturasSAT_Click"))
    Unload Me
End Sub

Private Sub cmdConfiguracion_Click()
    Dim vlstrFormato As String
    Dim vlstrFormatoPorc As String
    
    vlstrFormato = "$###,###,###,###.00"
    vlstrFormatoPorc = "###.00"
    
    frmParametrosCuenta.blnHabilita = blnHabilitadosConceptos
    frmParametrosCuenta.chkCalcularCargosSeleccionados.Value = IIf(blnCalcularEnBaseACargosTemp, 1, 0)
    
    'Desglosar IVA's:
    frmParametrosCuenta.chkDesglosarIVAExcedente.Value = lintDesglosaIVAExcedenteTemp
    frmParametrosCuenta.chkDesglosarIVADeducible.Value = lintDesglosaIVADeducibleTemp
    frmParametrosCuenta.chkDesglosarIVACoaseguro.Value = lintDesglosaIVACoaseguroTemp
    frmParametrosCuenta.chkDesglosarIVACoaseguroM.Value = lintDesglosaIVACoaseguroMedicoTemp
    frmParametrosCuenta.chkDesglosarIVACoaseguroAdicional.Value = lintDesglosaIVACoaseguroAdicionalTemp
    frmParametrosCuenta.chkDesglosarIVACopago.Value = lintDesglosaIVACopagoTemp
        
    'Tipo
    If Trim(strTipoDesctoNotaExcedenteTemp) = "P" Then
        frmParametrosCuenta.optTipoDesctoExcedente(0).Value = True
    Else
        frmParametrosCuenta.optTipoDesctoExcedente(1).Value = True
    End If
    If Trim(strTipoDesctoNotaDeducibleTemp) = "P" Then
        frmParametrosCuenta.optTipoDesctoDeducible(0).Value = True
    Else
        frmParametrosCuenta.optTipoDesctoDeducible(1).Value = True
    End If
    If Trim(strTipoDesctoNotaCoaseguroTemp) = "P" Then
        frmParametrosCuenta.optTipoDesctoCoaseguro(0).Value = True
    Else
        frmParametrosCuenta.optTipoDesctoCoaseguro(1).Value = True
    End If
    If Trim(strTipoDesctoNotaCoaMedicoTemp) = "P" Then
        frmParametrosCuenta.optTipoDesctoCoaseguroMedico(0).Value = True
    Else
        frmParametrosCuenta.optTipoDesctoCoaseguroMedico(1).Value = True
    End If
    If Trim(strTipoDesctoNotaCoaAdicionalTemp) = "P" Then
        frmParametrosCuenta.optTipoDesctoCoaseguroAdicional(0).Value = True
    Else
        frmParametrosCuenta.optTipoDesctoCoaseguroAdicional(1).Value = True
    End If
    If Trim(strTipoDesctoNotaCopagoTemp) = "P" Then
        frmParametrosCuenta.optTipoDesctoCopago(0).Value = True
    Else
        frmParametrosCuenta.optTipoDesctoCopago(1).Value = True
    End If
        
    'Desglosar importes:
    frmParametrosCuenta.chkDesglosarCoaseguroAdicional.Value = lintDesglosaCoaseguroAdicionalTemp
    frmParametrosCuenta.chkDesglosarCoaseguroM.Value = lintDesglosaCoaseguroMedicoTemp
    frmParametrosCuenta.chkDesglosarExcedente.Value = lintDesglosaExcedenteTemp
    frmParametrosCuenta.chkDesglosarDeducible.Value = lintDesglosaDeducibleTemp
    frmParametrosCuenta.chkDesglosarCoaseguro.Value = lintDesglosaCoaseguroTemp
    frmParametrosCuenta.chkDesglosarCopago.Value = lintDesglosaCopagoTemp
    
    frmParametrosCuenta.txtPorcentajeExcedentePorNota.Text = Format(dblPorcentajeEXNotaTemp, vlstrFormatoPorc) ' Descuento que otorga el hospital a los pacientes de aseguradoras
    frmParametrosCuenta.txtCantidadLimiteExcedente.Text = Format(Val(Format(dblLimiteNotaEXTemp, "")), vlstrFormato) ' Cantidad límite del descuento
    frmParametrosCuenta.txtPorcentajeDeduciblePorNota.Text = Format(dblPorcentajeDENotaTemp, vlstrFormatoPorc) ' Descuento que otorga el hospital a los pacientes de aseguradoras
    frmParametrosCuenta.txtCantidadLimiteDeducible.Text = Format(Val(Format(dblLimiteNotaDETemp, "")), vlstrFormato) ' Cantidad límite del descuento
    frmParametrosCuenta.txtPorcentajeCoaseguroPorNota.Text = Format(dblPorcentajeCONotaTemp, vlstrFormatoPorc) 'Descuento que otorga el hospital a los pacientes de aseguradoras
    frmParametrosCuenta.txtCantidadLimiteCoaseguro.Text = Format(Val(Format(dblLimiteNotaCOTemp, "")), vlstrFormato) ' Cantidad límite del descuento
    frmParametrosCuenta.txtPorcentajeCoaseguroMPorNota.Text = Format(dblPorcentajeCMNotaTemp, vlstrFormatoPorc) 'Descuento que otorga el hospital a los pacientes de aseguradoras
    frmParametrosCuenta.txtCantidadLimiteCoaseguroM.Text = Format(Val(Format(dblLimiteNotaCMTemp, "")), vlstrFormato) ' Cantidad límite del descuento
    frmParametrosCuenta.txtPorcentajeCoasAdicionalPorNota.Text = Format(dblPorcentajeCANotaTemp, vlstrFormatoPorc) ' Descuento que otorga el hospital a los pacientes de aseguradoras
    frmParametrosCuenta.txtCantidadLimiteCoasAdicional.Text = Format(Val(Format(dblLimiteNotaCATemp, "")), vlstrFormato) ' Cantidad límite del descuento
    frmParametrosCuenta.txtPorcentajeCopagoPorNota.Text = Format(dblPorcentajeCPNotaTemp, vlstrFormatoPorc) ' Descuento que otorga el hospital a los pacientes de aseguradoras
    frmParametrosCuenta.txtCantidadLimiteCopago.Text = Format(Val(Format(dblLimiteNotaCPTemp, "")), vlstrFormato) ' Cantidad límite del descuento
    
    If frmParametrosCuenta.optTipoDesctoExcedente(0).Value Then
        frmParametrosCuenta.txtCantidadLimiteExcedente.Enabled = Val(Format(frmParametrosCuenta.txtPorcentajeExcedentePorNota.Text, "")) > 0
        frmParametrosCuenta.lbCantidadLimiteExcedente.Enabled = Val(Format(frmParametrosCuenta.txtPorcentajeExcedentePorNota.Text, "")) > 0
    End If
    If frmParametrosCuenta.optTipoDesctoDeducible(0).Value Then
        frmParametrosCuenta.txtCantidadLimiteDeducible.Enabled = Val(Format(frmParametrosCuenta.txtPorcentajeDeduciblePorNota.Text, "")) > 0
        frmParametrosCuenta.lbCantidadLimiteDeducible.Enabled = Val(Format(frmParametrosCuenta.txtPorcentajeDeduciblePorNota.Text, "")) > 0
    End If
    If frmParametrosCuenta.optTipoDesctoCoaseguro(0).Value Then
        frmParametrosCuenta.txtCantidadLimiteCoaseguro.Enabled = Val(Format(frmParametrosCuenta.txtPorcentajeCoaseguroPorNota.Text, "")) > 0
        frmParametrosCuenta.lbCantidadLimiteCoaseguro.Enabled = Val(Format(frmParametrosCuenta.txtPorcentajeCoaseguroPorNota.Text, "")) > 0
    End If
    If frmParametrosCuenta.optTipoDesctoCoaseguroMedico(0).Value Then
        frmParametrosCuenta.txtCantidadLimiteCoaseguroM.Enabled = Val(Format(frmParametrosCuenta.txtPorcentajeCoaseguroMPorNota.Text, "")) > 0
        frmParametrosCuenta.lbCantidadLimiteCoaMedico.Enabled = Val(Format(frmParametrosCuenta.txtPorcentajeCoaseguroMPorNota.Text, "")) > 0
    End If
    If frmParametrosCuenta.optTipoDesctoCoaseguroAdicional(0).Value Then
        frmParametrosCuenta.txtCantidadLimiteCoasAdicional.Enabled = Val(Format(frmParametrosCuenta.txtPorcentajeCoasAdicionalPorNota.Text, "")) > 0
        frmParametrosCuenta.lbCantidadLimiteCoaAdicional.Enabled = Val(Format(frmParametrosCuenta.txtPorcentajeCoasAdicionalPorNota.Text, "")) > 0
    End If
    If frmParametrosCuenta.optTipoDesctoCopago(0).Value Then
        frmParametrosCuenta.txtCantidadLimiteCopago.Enabled = Val(Format(frmParametrosCuenta.txtPorcentajeCopagoPorNota.Text, "")) > 0
        frmParametrosCuenta.lbCantidadLimiteCoPago.Enabled = Val(Format(frmParametrosCuenta.txtPorcentajeCopagoPorNota.Text, "")) > 0
    End If
    
    frmParametrosCuenta.chkDesglosaIVATasaHospi.Value = intIVATasaHospiTemp
    frmParametrosCuenta.chkCoaseguroPorFactura.Value = intCoaseguroPorFacturaTemp
    
    frmParametrosCuenta.optIncCS(1).Value = IIf(vlchrIncluirConceptosSeguroTemp = "D", True, False)
    frmParametrosCuenta.chkTotCS.Value = IIf(vlintDesgloseConceptosVICFDITemp = 0, vbUnchecked, vbChecked)

    frmParametrosCuenta.optTipoDesglose(IIf(vlintDesgloseConceptosVICFDITemp = 2, 1, 0)).Value = True
    frmParametrosCuenta.Show vbModal
    
    If frmParametrosCuenta.blnConfiguracionGuardada Then
        ' Descuentos por notas de crédito
        'Tipos de descuento
        strTipoDesctoNotaExcedenteTemp = IIf(frmParametrosCuenta.optTipoDesctoExcedente(0).Value, "P", "C")
        strTipoDesctoNotaDeducibleTemp = IIf(frmParametrosCuenta.optTipoDesctoDeducible(0).Value, "P", "C")
        strTipoDesctoNotaCoaseguroTemp = IIf(frmParametrosCuenta.optTipoDesctoCoaseguro(0).Value, "P", "C")
        strTipoDesctoNotaCoaMedicoTemp = IIf(frmParametrosCuenta.optTipoDesctoCoaseguroMedico(0).Value, "P", "C")
        strTipoDesctoNotaCoaAdicionalTemp = IIf(frmParametrosCuenta.optTipoDesctoCoaseguroAdicional(0).Value, "P", "C")
        strTipoDesctoNotaCopagoTemp = IIf(frmParametrosCuenta.optTipoDesctoCopago(0).Value, "P", "C")
        
        'Porcentajes
        dblPorcentajeEXNotaTemp = Val(Format(frmParametrosCuenta.txtPorcentajeExcedentePorNota.Text, ""))
        dblPorcentajeDENotaTemp = Val(Format(frmParametrosCuenta.txtPorcentajeDeduciblePorNota.Text, ""))
        dblPorcentajeCONotaTemp = Val(Format(frmParametrosCuenta.txtPorcentajeCoaseguroPorNota.Text, ""))
        dblPorcentajeCMNotaTemp = Val(Format(frmParametrosCuenta.txtPorcentajeCoaseguroMPorNota.Text, ""))
        dblPorcentajeCANotaTemp = Val(Format(frmParametrosCuenta.txtPorcentajeCoasAdicionalPorNota.Text, ""))
        dblPorcentajeCPNotaTemp = Val(Format(frmParametrosCuenta.txtPorcentajeCopagoPorNota.Text, ""))

        'Cantidad Limite
        dblLimiteNotaEXTemp = Val(Format(frmParametrosCuenta.txtCantidadLimiteExcedente.Text, ""))
        dblLimiteNotaDETemp = Val(Format(frmParametrosCuenta.txtCantidadLimiteDeducible.Text, ""))
        dblLimiteNotaCOTemp = Val(Format(frmParametrosCuenta.txtCantidadLimiteCoaseguro.Text, ""))
        dblLimiteNotaCMTemp = Val(Format(frmParametrosCuenta.txtCantidadLimiteCoaseguroM.Text, ""))
        dblLimiteNotaCATemp = Val(Format(frmParametrosCuenta.txtCantidadLimiteCoasAdicional.Text, ""))
        dblLimiteNotaCPTemp = Val(Format(frmParametrosCuenta.txtCantidadLimiteCopago.Text, ""))

        ' Calcular importes de conceptos de factura para seguros con base en los cargos seleccionados para facturar
        blnCalcularEnBaseACargosTemp = frmParametrosCuenta.chkCalcularCargosSeleccionados.Value

        'Conceptos que desglosan IVA
        lintDesglosaIVAExcedenteTemp = frmParametrosCuenta.chkDesglosarIVAExcedente.Value
        lintDesglosaIVADeducibleTemp = frmParametrosCuenta.chkDesglosarIVADeducible.Value
        lintDesglosaIVACoaseguroTemp = frmParametrosCuenta.chkDesglosarIVACoaseguro.Value
        lintDesglosaIVACoaseguroMedicoTemp = frmParametrosCuenta.chkDesglosarIVACoaseguroM.Value
        lintDesglosaIVACoaseguroAdicionalTemp = frmParametrosCuenta.chkDesglosarIVACoaseguroAdicional.Value
        lintDesglosaIVACopagoTemp = frmParametrosCuenta.chkDesglosarIVACopago.Value

        'Desglosar importes gravado y no gravado
        lintDesglosaCoaseguroAdicionalTemp = frmParametrosCuenta.chkDesglosarCoaseguroAdicional.Value
        lintDesglosaCoaseguroMedicoTemp = frmParametrosCuenta.chkDesglosarCoaseguroM.Value
        lintDesglosaExcedenteTemp = frmParametrosCuenta.chkDesglosarExcedente.Value
        lintDesglosaDeducibleTemp = frmParametrosCuenta.chkDesglosarDeducible.Value
        lintDesglosaCoaseguroTemp = frmParametrosCuenta.chkDesglosarCoaseguro.Value
        lintDesglosaCopagoTemp = frmParametrosCuenta.chkDesglosarCopago.Value

        'Desglosar IVa a la tasa del hospital
        intIVATasaHospiTemp = frmParametrosCuenta.chkDesglosaIVATasaHospi.Value

        'Permitir capturar cantidad de coaseguro por factura
        intCoaseguroPorFacturaTemp = frmParametrosCuenta.chkCoaseguroPorFactura.Value
        
        vlchrIncluirConceptosSeguroTemp = IIf(frmParametrosCuenta.optIncCS(0), "I", "D")
        vlintDesgloseConceptosVICFDITemp = IIf(frmParametrosCuenta.chkTotCS.Value = vbChecked, IIf(frmParametrosCuenta.optTipoDesglose(0).Value, 1, 2), 0)
        
        blnCambiosEnParametrosCuenta = True
    End If
    
    Unload frmParametrosCuenta
End Sub

Private Sub cmdConfirmartimbre_Click()
Dim vlLngCont As Long
Dim vllngPersonaGraba As Long
Dim vlngReg As Long
On Error GoTo NotificaError

blnNOMensajeErrorPAC = False 'de inicio siempre a False

'Los comprobantes seleccionados se encuentran pendientes de timbre fiscal ¿Desea confirmar el timbre fiscal?
If MsgBox(SIHOMsg(1310), vbQuestion + vbYesNo, "Mensaje") = vbYes Then
   vllngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
   If vllngPersonaGraba = 0 Then Exit Sub
      'Recorremos el grid para poder cargar el arreglo con los Id de las facturas que vamos a cancelar
      With grdBuscaFacturas
           For vlLngCont = 1 To .Rows - 1
               If .TextMatrix(vlLngCont, 0) = "*" And .TextMatrix(vlLngCont, 13) = "1" Then
                  pLogTimbrado 2
                  pgbBarraCFD.Value = 70
                  freBarraCFD.Top = 3200
                  Screen.MousePointer = vbHourglass
                  lblTextoBarraCFD.Caption = "Confirmando timbre fiscal, por favor espere..."
                  freBarraCFD.Visible = True
                  freBarraCFD.Refresh
                  blnNOMensajeErrorPAC = True
                  '----------------------
                  'se abre la transacción
                  '----------------------
                  EntornoSIHO.ConeccionSIHO.BeginTrans
                  If .TextMatrix(vlLngCont, 12) = "2" Then
                     'es una factura que esta pendiente de timbre fiscal pero se debe de cancelar después de la confirmación del timbre
                     vgIntBanderaTImbradoPendiente = 0
                     vlngReg = flngRegistroFolio("FA", .RowData(vlLngCont))
                     If Not fblnGeneraCFDpCancelacion(.RowData(vlLngCont), "FA", fblnTCFDi(vlngReg), 0) Then
                        On Error Resume Next
                        EntornoSIHO.ConeccionSIHO.RollbackTrans
                        If vgIntBanderaTImbradoPendiente = 1 Or vgIntBanderaTImbradoPendiente = 3 Then 'timbre pendiente de confirmar/o que no alcanzó a llegar el timbrado
                           'Por el momento no es posible confirmar el timbre de la factura <FOLIO>, intente de nuevo en unos minutos.
                           MsgBox Replace(SIHOMsg(1314), "<FOLIO>", Trim(.TextMatrix(vlLngCont, 1))), vbInformation + vbOKOnly, "Mensaje"
                           'la factura se queda igual, no se hace nada
                        ElseIf vgIntBanderaTImbradoPendiente = 2 Then
                             'No es posible realizar el timbrado de la factura <FOLIO>, la factura será cancelada.
                              MsgBox Replace(SIHOMsg(1313), "<FOLIO>", Trim(.TextMatrix(vlLngCont, 1))), vbExclamation + vbOKOnly, "Mensaje"
                              'Aqui se debe de cancelar la factura que vas a eliminar?
                              pEjecutaSentencia " UPDATE PVCANCELARCOMPROBANTES SET BITPENDIENTECANCELAR = 0 " & _
                              "Where INTCOMPROBANTE =" & .RowData(vlLngCont) & " And VCHTIPOCOMPROBANTE = 'FA'"
                              'se quita de los pendientes de timbre
                              pEliminaPendientesTimbre .RowData(vlLngCont), "FA"
                        End If
                     Else
                           EntornoSIHO.ConeccionSIHO.CommitTrans
                          'se confirmo el timbre correctamente
                          'Eliminamos la informacion de la factura de la tabla de pendientes de timbre fiscal
                           pEliminaPendientesTimbre .RowData(vlLngCont), "FA"
                           'Timbre fiscal de factura <FOLIO>: Confirmado.
                           MsgBox Replace(SIHOMsg(1315), "<FOLIO>", Trim(.TextMatrix(vlLngCont, 1))), vbInformation + vbOKOnly, "Mensaje"
                     End If
                  Else
                     vlngReg = flngRegistroFolio("FA", .RowData(vlLngCont))
                     If Not fblnGeneraComprobanteDigital(.RowData(vlLngCont), "FA", 0, fintAnoAprobacion(vlngReg), fStrNumeroAprobacion(vlngReg), fblnTCFDi(vlngReg)) Then
                       On Error Resume Next
                       EntornoSIHO.ConeccionSIHO.RollbackTrans
                       If vgIntBanderaTImbradoPendiente = 1 Or vgIntBanderaTImbradoPendiente = 3 Then 'timbre pendiente de confirmar/o que no alcanzó a llegar el timbrado
                          'Por el momento no es posible confirmar el timbre de la factura <FOLIO>, intente de nuevo en unos minutos.
                          MsgBox Replace(SIHOMsg(1314), "<FOLIO>", Trim(.TextMatrix(vlLngCont, 1))), vbInformation + vbOKOnly, "Mensaje"
                          'la factura se queda igual, no se hace nada
                       ElseIf vgIntBanderaTImbradoPendiente = 2 Then 'No se realizó el timbrado
                          'No es posible realizar el timbrado de la factura <FOLIO>, la factura será cancelada.
                          MsgBox Replace(SIHOMsg(1313), "<FOLIO>", Trim(.TextMatrix(vlLngCont, 1))), vbExclamation + vbOKOnly, "Mensaje"
                          'Aqui se debe de cancelar la factura
                          pCancelarFactura Trim(.TextMatrix(vlLngCont, 1)), vllngPersonaGraba, Me.Name
                       End If
                     Else
                      'Se guarda el LOG
                       Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGraba, Me.Caption, "Confirmación de timbre factura" & .TextMatrix(vlLngCont, 1))
                       'Eliminamos la informacion de la factura de la tabla de pendientes de timbre fiscal
                       pEliminaPendientesTimbre .RowData(vlLngCont), "FA"
                       'Commit
                       EntornoSIHO.ConeccionSIHO.CommitTrans
                      'Timbre fiscal de factura <FOLIO>: Confirmado.
                       MsgBox Replace(SIHOMsg(1315), "<FOLIO>", Trim(.TextMatrix(vlLngCont, 1))), vbInformation + vbOKOnly, "Mensaje"
                     End If
                  End If
                  
                  'Barra de progreso CFD
                   pgbBarraCFD.Value = 100
                   freBarraCFD.Top = 3200
                   Screen.MousePointer = vbDefault
                   lblTextoBarraCFD.Caption = ""
                   freBarraCFD.Visible = True
                   freBarraCFD.Refresh
                   freBarraCFD.Visible = False
                   'guardamos el log del timbrado
                   pLogTimbrado 1
               End If
           Next vlLngCont
      End With
      
      blnNOMensajeErrorPAC = False
      pCargaBusqueda IIf(optTipoPacienteBusqueda(2).Value, "A", IIf(optTipoPacienteBusqueda(0).Value, "I", "E")), -1
      grdBuscaFacturas.SetFocus
      
End If
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":cmdConfirmarTimbre_Click"))
    Unload Me
End Sub

Private Sub cmdDescuentoPuntos_Click()
    If cmdDescuentoPuntos.Caption = "Aplicar puntos de cliente leal" Then
        pAplicarDescuentoPuntos
        cmdDescuentoPuntos.Caption = "Desaplicar puntos de cliente leal"
    ElseIf cmdDescuentoPuntos.Caption = "Desaplicar puntos de cliente leal" Then
        pDesAplicarDescuentoPuntos
        cmdDescuentoPuntos.Caption = "Aplicar puntos de cliente leal"
    End If
End Sub

Private Sub cmdDevolucionesDinero_Click()
    Dim vllngContador As Long
    Dim vllngContador2 As Long
    Dim intSeleccionados As Integer
    Dim blnSiHaySinSeleccion As Boolean
    
    Load frmEntradaSalidaDinero
    With frmEntradaSalidaDinero
        .lblnManipulacion = True
        .MskFecha.Text = fdtmServerFecha
        .txtMovimientoPaciente.Text = txtMovimientoPaciente.Text
        
        .OptTipoPaciente(0).Value = OptTipoPaciente(0).Value
        .OptTipoPaciente(1).Value = OptTipoPaciente(1).Value
        
        .txtMovimientoPaciente_KeyDown 13, 0
        
        .pCargaFolio "SD"
        If Trim(.txtFolioRecibo.Text) = "" Then
            'No existen folios activos para este documento.
            MsgBox SIHOMsg(291), vbCritical, "Mensaje"
            Unload frmEntradaSalidaDinero
            Exit Sub
        End If
        
        .optSalidaDinero.Value = True
        If Val(.grdConceptos.TextMatrix(1, .lintColIdConcepto)) = 0 Then
            Unload frmEntradaSalidaDinero
            Exit Sub
        End If
        
        .txtCantidad.Text = FormatCurrency(Abs(Val(Format(txtFPTotalPagar.Text, ""))), 2)
        .optDolares.Value = optDolares(0).Value
        .optPesos.Value = Not optDolares(0).Value
        
        .lblCantidad.Enabled = False
        .txtCantidad.Enabled = False
        .optPesos.Enabled = False
        .optDolares.Enabled = False
        
        .txtComentario.Text = ""

        .pInicializaReporte
        .pFormatosRecibo
        
        .fraPaciente.Enabled = False
        .fraRecibo.Enabled = True
        .fraImprimir.Visible = False
        
        .cmdSave.TabIndex = 0
        .cmdSave.Enabled = True
        
        .Show vbModal
        
        grdFacturaPaciente.Redraw = False
        
        If .lblnGrabo Then
            blnSiHaySinSeleccion = False
            ReDim aryCargosSeleccionados(0)
            
            For vllngContador = 1 To grdCargos.Rows - 1
                If grdCargos.TextMatrix(vllngContador, 0) = "*" Then
                    intSeleccionados = UBound(aryCargosSeleccionados) + 1
                    ReDim Preserve aryCargosSeleccionados(intSeleccionados)
                    aryCargosSeleccionados(intSeleccionados).lngCargo = grdCargos.RowData(vllngContador)
                Else
                    If Trim(grdCargos.TextMatrix(vllngContador, 0)) = "" Then
                        blnSiHaySinSeleccion = True
                    End If
                End If
            Next vllngContador
        
            vlblnNoMostrarBarra = True
            txtMovimientoPaciente_KeyDown 13, 0
            vlblnNoMostrarBarra = False
            sstFacturacion.TabIndex = 3
            
            If blnSiHaySinSeleccion Then
                For vllngContador = 1 To grdCargos.Rows - 1
                    If grdCargos.TextMatrix(vllngContador, 0) <> "F" Then
                        grdCargos.TextMatrix(vllngContador, 0) = ""
                        For vllngContador2 = 1 To UBound(aryCargosSeleccionados)
                            If grdCargos.RowData(vllngContador) = aryCargosSeleccionados(vllngContador2).lngCargo Then
                                grdCargos.TextMatrix(vllngContador, 0) = "*"
                                Exit For
                            End If
                        Next vllngContador2
                    End If
                Next vllngContador
                
                pTotales
            End If
        End If
        
        If vgintEmpresa = 0 Or blnExisteExcedente Then
            pLlenaFacturasParticulares grdFacturaPaciente
        Else
            If gintAseguradora = 0 Then
                pLlenaFacturasConvenio grdFacturaPaciente
            Else
                pLlenaFacturasConvenioAseguradora grdFacturaPaciente
            End If
        End If
        
        grdFacturaPaciente.Redraw = True
    End With
    
    Unload frmEntradaSalidaDinero
    
    frmEntradaSalidaDinero.lblnManipulacion = False
End Sub

Private Sub cmdEliminaDonativo_Click()
    If (MSFGFacturasParciales.Row <> -1) And (MSFGFacturasParciales.RowData(1) <> -1) And CInt(MSFGFacturasParciales.TextMatrix(MSFGFacturasParciales.Row, 11)) <> 1 Then 'Celda 11 <> 1 significa que la factura parcial aun no se ha grabado
        If MsgBox(SIHOMsg(6), vbYesNo + vbInformation, "Mensaje") = vbYes Then
            pEliminaDeColeccion (MSFGFacturasParciales.RowData(MSFGFacturasParciales.Row))
            pBorrarRenglon MSFGFacturasParciales, MSFGFacturasParciales.Row
            
            If vgintEmpresa = 0 Or blnExisteExcedente Then
                pLlenaFacturasParticulares grdFacturaPaciente
            Else
                If gintAseguradora = 0 Then
                    pLlenaFacturasConvenio grdFacturaPaciente
                Else
                    pLlenaFacturasConvenioAseguradora grdFacturaPaciente
                End If
            End If
            
            If MSFGFacturasParciales.TextMatrix(1, 2) = "" Then
                MSFGFacturasParciales.RowData(1) = -1
                cmdEliminaDonativo.Enabled = False
            End If
        End If
        
        pHabilitaGrabacionFacturaPaciente
    End If
End Sub

Private Sub pEliminaDeColeccion(plngRegistro As Long)
    Dim vlIntCont As Integer
    
    For vlIntCont = 1 To vgcolFacturasParciales.Count
        If plngRegistro = vgcolFacturasParciales.Item(vlIntCont).intIdFacturaParcial Then
            vgcolFacturasParciales.Remove vlIntCont
            Exit For
        End If
    Next vlIntCont
End Sub

Private Sub cmdImprimirEstado_Click()
    frmReporteEstadoCuenta.llngNumeroCuenta = Val(txtMovimientoPaciente.Text)
    frmReporteEstadoCuenta.lstrTipoPaciente = IIf(OptTipoPaciente(0).Value, "I", "E")
    frmReporteEstadoCuenta.lstrNombreForma = "frmFacturacion"
    If cboCartaAutorizacion.ListIndex <> -1 Then
        frmReporteEstadoCuenta.llngNumeroCarta = cboCartaAutorizacion.ItemData(cboCartaAutorizacion.ListIndex)
    End If
    frmReporteEstadoCuenta.Show vbModal
End Sub

Private Sub cmdLiquidaCuenta_Click()
    Dim strSentencia As String
    Dim rs As New ADODB.Recordset
    
    'Verificar si los cargos cambiaron
    If fblnValidarCargos Then
        'Los cargos de la cuenta han sido modificados, consulte de nuevo.
        MsgBox SIHOMsg(1152), vbExclamation, "Mensaje"
        Unload Me
        Exit Sub
    End If
    
    If fblnValidarPagos Then
        'Los PAGOS/Devoluciones de $$ de la cuenta han sido modificados, consulte de nuevo.
       MsgBox SIHOMsg(1178), vbExclamation, "Mensaje"
       Unload Me
       Exit Sub
    End If
    
    cmdSelQuita_Click 0
    sstFacturacion_Click 1
    Load frmEntradaSalidaDinero
    With frmEntradaSalidaDinero
        .lblnManipulacion = True
        
        .MskFecha.Text = fdtmServerFecha
        .txtMovimientoPaciente.Text = txtMovimientoPaciente.Text
        
        .OptTipoPaciente(0).Value = OptTipoPaciente(0).Value
        .OptTipoPaciente(1).Value = OptTipoPaciente(1).Value
        
        .txtMovimientoPaciente_KeyDown 13, 0
        If .vgblnCuentaFacturada Then
            'La cuenta ya fue facturada
            Unload frmEntradaSalidaDinero
            Exit Sub
        End If
        
        .optEntradaDinero.Value = True
        
        .pCargaFolio "RE"
        If Trim(.txtFolioRecibo.Text) = "" Then
            'No existen folios activos para este documento.
            MsgBox SIHOMsg(291), vbCritical, "Mensaje"
            Unload frmEntradaSalidaDinero
            Exit Sub
        End If
        
        .pLimpiaConceptos
        .grdConceptos.Row = 1
        strSentencia = "SELECT PvConceptoPago.*, PvConceptoPagoEmpresa.* FROM PvConceptoPago INNER JOIN PvConceptoPagoEmpresa ON PvConceptoPago.intNumConcepto = PvConceptoPagoEmpresa.intNumConcepto WHERE PvConceptoPago.intNumConcepto = " & str(lintConceptoLiquidacion) & " AND PvConceptoPagoEmpresa.intCveEmpresa = " & str(vgintClaveEmpresaContable)
        Set rs = frsRegresaRs(strSentencia)
        If rs.RecordCount <> 0 Then
            .grdConceptos.TextMatrix(1, .lintColNombreConcepto) = rs!chrDescripcion
            .grdConceptos.TextMatrix(1, .lintColTipoConcepto) = rs!chrTipo
            .grdConceptos.TextMatrix(1, .lintColIdConcepto) = rs!intNumConcepto
            .grdConceptos.TextMatrix(1, .lintColNumeroCuenta) = rs!intNumeroCuenta
        End If
        
        .txtCantidad.Text = FormatCurrency(Format(txtFPTotalPagar.Text, ""), 2)
        
        .optDolares.Value = optDolares(0).Value
        .optPesos.Value = Not optDolares(0).Value
        
        .txtComentario.Text = "LIQUIDACION DE LA CUENTA " & txtMovimientoPaciente.Text & " " & IIf(OptTipoPaciente(0).Value, "INTERNO", "EXTERNO")

        .pInicializaReporte
        .pFormatosRecibo
        
        .fraPaciente.Enabled = False
        .fraRecibo.Enabled = False
        .fraImprimir.Visible = False
        
        .cmdSave.TabIndex = 0
        .cmdSave.Enabled = True
        
        .Show vbModal
        If .lblnGrabo Then
            txtMovimientoPaciente_KeyDown 13, 0
            sstFacturacion.TabIndex = 3
            EntornoSIHO.ConeccionSIHO.BeginTrans
            frsEjecuta_SP txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|0", "SP_PVUPDCUENTAFACTURADA"
            frsEjecuta_SP txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|1|" & IIf(vgstrTipoPaciente = "I", Null, fstrFechaSQL(fdtmServerFecha, fdtmServerHora)), "SP_EXUPDCERRARABRIRCUENTA"
            EntornoSIHO.ConeccionSIHO.CommitTrans
        End If
        
        If vgintEmpresa = 0 Or blnExisteExcedente Then
            pLlenaFacturasParticulares grdFacturaPaciente
        Else
            If gintAseguradora = 0 Then
                pLlenaFacturasConvenio grdFacturaPaciente
            Else
                pLlenaFacturasConvenioAseguradora grdFacturaPaciente
            End If
        End If
        
        .lblnManipulacion = False
    End With
    
    Unload frmEntradaSalidaDinero
End Sub

Private Sub cmdPostergar_Click()

Dim vlstrParametrosSP As String

    If rsPostergado!BITPOSTERGADA = 0 Then
        If MsgBox("¿Desea postergar esta cuenta? No podrá realizar más modificaciones.", vbExclamation + vbYesNo, "Mensaje") = vbYes Then
            vlstrParametrosSP = txtMovimientoPaciente.Text & "|" & vgintClaveEmpresaContable & "|" & IIf(OptTipoPaciente(0).Value, "'I'", "'E'")
            frsEjecuta_SP vlstrParametrosSP, "SP_PVINSDATOSCUENTAPOSTERGADA"
            MsgBox "Se han postergado los cargos del paciente, puede proseguir con la factura de la empresa.", vbOKOnly + vbInformation, "Mensaje"
            MsgBox "Se refrescará la información.", vbOKOnly + vbInformation, "Mensaje"
            txtMovimientoPaciente_KeyDown vbKeyReturn, 0
            pHabilitaGrabacionFacturaPaciente
        Else
            Exit Sub
        End If
    Else
        frsEjecuta_SP txtMovimientoPaciente.Text, "SP_PVDELDATOSCUENTAPOSTERGADA"
        MsgBox "Se han restaurado los cargos del paciente.", vbOKOnly + vbInformation, "Mensaje"
        MsgBox "Se refrescará la información.", vbOKOnly + vbInformation, "Mensaje"
        txtMovimientoPaciente_KeyDown vbKeyReturn, 0
        pHabilitaGrabacionFacturaPaciente
        
    End If

End Sub

Private Sub cmdPrefacturaEmpresa_Click()
On Error GoTo NotificaError

    Dim vlintcontador As Integer                 'Para los ciclos
    Dim rsPvDetalleCorte As New ADODB.Recordset  'Aqui añado los registros del detalle del corte
    Dim rsFactura As New ADODB.Recordset         'RS tipo tabla para guardar la fractura
    Dim rsDetalleFactura As New ADODB.Recordset  'RS tipo tabla para el Detalle de la FACTURA
    Dim rsDatosCliente As New ADODB.Recordset    'RS para los datos del cliente
    Dim rsDatosEmpresa As New ADODB.Recordset    'RS para Datos fiscales de la empresa
    Dim rsFacturaParcialEmpresa As New ADODB.Recordset
    
    Dim vlstrSentencia As String                 'Sirve pa TODOS los RS's
    Dim vlstrAux As String                       'Solo como auxiliar cuando se pone folio a los cargos
    Dim vllngNumeroCorte As Long                 'Trae el numero de corte actual
    Dim vldblTipoCambio As Double                'Trae el tipo de cambio utilizado en la pantalla de Formas de pago
    Dim vlstrFolioDocumento As String            'Este es el numero de factura a utilizar
    Dim vllngConsecutivoFactura As Long

    Dim vldtmFechaHoy As Date                    'Variable con la Fecha actual
    Dim vldtmHoraHoy As Date                     'Variable con la Hora actual
    Dim vldblIvaDescuento As Double
    
    Dim rsCuentas As New ADODB.Recordset        'Si se trata de un grupo, este rs contiene las cuentas que pertenecen al grupo
    
    'Otro Datos fiscales
    Dim vlstrNombreFactura As String
    Dim vlstrDireccion As String
    Dim strCodigoPostal As String
    Dim strColonia As String
    Dim vlstrNumeroExterior As String
    Dim vlstrNumeroInterior As String
    Dim vlBitExtranjero As Integer
    Dim vlstrTelefono As String
    Dim vlstrRFC As String
    Dim lngCveCiudad As Long
    Dim lngContador As Long
    Dim vlstrDFRegimenFiscal As String
    
    Dim strParametros As String
    
    '(PEMEX)
    Dim lngCveFormato As Long
    Dim rsDatosFactura As ADODB.Recordset
    Dim rsRutas As ADODB.Recordset
    Dim blnFacturaMultiple As Boolean
    Dim lngRenglonesDetalle As Long
    Dim lngTotalDocumentos As Long
    Dim arrFolios() As String
    Dim rsFolios As ADODB.Recordset
    Dim lngIndexFolios As Long
    
    Dim blnCancelarFacturacion As Boolean
    Dim blnFoliosOK As Boolean
    Dim strIdentificador As String
    Dim lngInicial As Long
    Dim lngFinal As Long
    
    Dim strFolio As String
    Dim strSerie As String
    Dim strNumeroAprobacion As String
    Dim strAnoAprobacion As String
    
    Dim vlrsDatos As New ADODB.Recordset
    Dim vlRFCTemp As String

    Dim vllngCorteUsado As Long
     
    Dim i As Long
    Dim vllngConsecPreFactura As Long
    Dim strRutaPDFPrefactura As String
    Dim strSentencia As String
    
    
    '(PEMEX)Se busca el tipo de formato que se va a utilizar
    lngCveFormato = 1
    frsEjecuta_SP vgintNumeroDepartamento & "|" & vgintEmpresa & "|" & vgintTipoPaciente & "|" & IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")), "fn_PVSelFormatoFactura2", True, lngCveFormato
    vllngFormatoaUsar = lngCveFormato
           
    If Not fblnDatosValidosEmpresaPrefactura() Then Exit Sub
        
    vldtmFechaHoy = fdtmServerFecha
    vldtmHoraHoy = fdtmServerHora
    
    '-----------------------------------------------------------'
    '       VALIDACION DE FORMATO/FOLIO (FISICO, DIGITAL)       '
    '-----------------------------------------------------------'
    'Identifica el tipo de formato a utilizar
    lngCveFormato = 1
    frsEjecuta_SP vgintNumeroDepartamento & "|" & vgintEmpresa & "|" & vgintTipoPaciente & "|" & IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")), "fn_PVSelFormatoFactura2", True, lngCveFormato
    vllngFormatoaUsar = lngCveFormato
    
    'Se valida en caso de no haber formato activo mostrar mensaje y cancelar transacción
    If vllngFormatoaUsar = 0 Then
        'No se encontró un formato válido de factura.
        MsgBox SIHOMsg(373), vbCritical, "Mensaje"
        pCancelar
        Exit Sub
    End If

    'Se compara el tipo de folio con el tipo de formato a utilizar con la fn "fintTipoEmisionComprobante"
    '(intTipoEmisionComprobante: 0 = Error, 1 = Físico, 2 = Digital)
    'Se revisa el tipo de CFD de la Factura (0 = CFD, 1 = CFDi, 2 = Físico, 3 = Error)
    intTipoEmisionComprobante = 2   'Digital fijo, por ser prefactura
    intTipoCFDFactura = 1           'CFDI fijo, por ser prefactura
        
    'Validar licencia de descuentos de conceptos de seguro
    If Not fblnLicenciaCFDIDesc(vlchrIncluirConceptosSeguro) Then
        Exit Sub
    End If
  
    'Validar uso del comprobante, claves de productos/servicios y unidades
    If Not fblnValidaSAT("E") Then
        Exit Sub
    End If
        
    vldblTipoCambio = fdblTipoCambio(vldtmFechaHoy, "V") 'Tipo de cambio a la Venta
    If vldblTipoCambio = 0 Then
        'No está registrado el tipo de cambio del día.
        MsgBox SIHOMsg(231), vbCritical, "Mensaje"
        Exit Sub
    End If
    
    '--------------------------------------------------------------'
    '                     Otros datos fiscales                     '
    '--------------------------------------------------------------'
    If chkOtrosDatosFiscales.Value = 1 Then
        Load frmDatosFiscales
        frmDatosFiscales.Show vbModal
        frmDatosFiscales.sstDatos.Tab = 1
        With frmDatosFiscales
            vlstrNombreFactura = .vgstrNombre
            vlstrDireccion = .vgstrDireccion
            vlstrNumeroExterior = .vgstrNumExterior
            vlstrNumeroInterior = .vgstrNumInterior
            vlBitExtranjero = .vgBitExtranjero
            vlstrTelefono = .vgstrTelefono
            vlstrRFC = fStrRFCValido(.vgstrRFC)
            lngCveCiudad = .llngCveCiudad
            strCodigoPostal = .vgstrCP
            strColonia = .vgstrColonia
            vlstrDFRegimenFiscal = .vlstrRegimenFiscal
        End With
        Unload frmDatosFiscales
        Set frmDatosFiscales = Nothing
        If Trim(vlstrRFC) = "" Or Trim(vlstrNombreFactura) = "" Then Exit Sub
    End If
        
'    If fblnValidarPagos Then
'       'Los PAGOS/Devoluciones de $$ de la cuenta han sido modificados, consulte de nuevo.
'       MsgBox SIHOMsg(1178), vbExclamation, "Mensaje"
'       Unload Me
'       Exit Sub
'    End If
        
    EntornoSIHO.ConeccionSIHO.BeginTrans
    
    '------------------------'
    '- Número de la factura -'
    '------------------------'
    vllngConsecPreFactura = 0
    vlstrSentencia = "Select SEC_PVPREFACTURA.NextVal as Id From DUAL"
    
    Set vlrsDatos = frsRegresaRs(vlstrSentencia, adOpenDynamic, adLockOptimistic)
    vllngConsecPreFactura = vlrsDatos!id
    
    strFolio = vllngConsecPreFactura
    strSerie = "PF-"
    strNumeroAprobacion = " "
    strAnoAprobacion = "0"
    vlstrFolioDocumento = strSerie & strFolio
    
    '---------------------------------------------------------------'
    ' Actualiza la fecha de facturación en caso de que sea un grupo '
    '---------------------------------------------------------------'
    If optGrupoCuenta(0).Value Then
        vlstrSentencia = "Update PvFacturacionConsolidada Set chrFolioFactura = '" & vlstrFolioDocumento & "' WHERE INTCVEGRUPO = " & txtMovimientoPaciente.Text
        pEjecutaSentencia vlstrSentencia
    End If
    
    '-------------------------------------'
    ' Guardar en la factura y su detallín '
    '-------------------------------------'
    'Si es socio, se consultando los datos del Socio en lugar de los de la empresa
    If vgSocio = True Then
    '****************************************************************************************************
    '****************************************************************************************************
    '****************************************************************************************************
        If OptTipoPaciente(0).Value Then
            'Paciente Interno
            vlstrSentencia = "SELECT rtrim(adPaciente.vchApellidoPaterno) || ' ' || rtrim(adPaciente.vchApellidoMaterno) || ' ' || rtrim(adPaciente.vchNombre) VCHRAZONSOCIAL, " & _
                             " adPaciente.chrRfc chrRfcEmpresa, ADPACIENTE.vchCallePart as chrCalle, ADPACIENTE.VCHNUMEROEXTERIOR, AdPaciente.VchNumeroInterior, adPaciente.vchTelefonoPart chrTelefonoEmpresa, " & _
                             " VCHCOLONIAPART vchcolonia, INTCIUDADPART intCveCiudad, VCHCODPOSTALPART vchcodigopostal, adpaciente.vchNumeroExterior, adPaciente.vchNumeroInterior " & _
                             " FROM adPaciente " & _
                             " INNER JOIN adadmision ON adpaciente.numcvepaciente = adadmision.numcvepaciente " & _
                             " WHERE adadmision.numnumcuenta = " & Trim(txtMovimientoPaciente)
            Set rsDatosEmpresa = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)

        ElseIf OptTipoPaciente(1).Value Then
            'Paciente Externo
            vlstrSentencia = "SELECT rtrim(Externo.chrApePaterno) || ' ' || rtrim(Externo.chrApeMaterno) || ' ' || rtrim(Externo.chrNombre) VCHRAZONSOCIAL, " & _
                             " Externo.chrRFC chrRfcEmpresa, EXTERNO.CHRCALLE, EXTERNO.VCHNUMEROEXTERIOR, EXTERNO.VchNumeroInterior, Externo.chrTelefono chrTelefonoEmpresa, " & _
                             " VCHCOLONIA vchcolonia, INTCIUDAD intCveCiudad, VCHCODPOSTAL vchcodigopostal " & _
                             " FROM Externo " & _
                             " INNER JOIN registroexterno ON externo.intnumpaciente = registroexterno.intnumpaciente " & _
                             " WHERE registroexterno.intnumcuenta = " & Trim(txtMovimientoPaciente)
            Set rsDatosEmpresa = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
        End If
    '****************************************************************************************************
    '****************************************************************************************************
    '****************************************************************************************************
    Else
        vlstrSentencia = "SELECT * FROM CcEmpresa WHERE intCveEmpresa = " & Trim(str(vgintEmpresa))
        Set rsDatosEmpresa = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
    End If
    
    vlstrSentencia = "SELECT * FROM PVFactura WHERE intConsecutivo = -1"
    Set rsFactura = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
    
    With rsFactura
        .AddNew
        !chrfoliofactura = vlstrFolioDocumento
        !dtmFechahora = vldtmFechaHoy + vldtmHoraHoy
        If vlBitExtranjero = 1 Then
            !CHRRFC = "XEXX010101000"
        Else
            !CHRRFC = IIf(Len(IIf(chkOtrosDatosFiscales.Value = 0, fStrRFCValido(rsDatosEmpresa!chrRFCempresa), fStrRFCValido(vlstrRFC))) < 12 Or Len(IIf(chkOtrosDatosFiscales.Value = 0, fStrRFCValido(rsDatosEmpresa!chrRFCempresa), fStrRFCValido(vlstrRFC))) > 13, "XAXX010101000", Trim(IIf(chkOtrosDatosFiscales.Value = 0, fStrRFCValido(rsDatosEmpresa!chrRFCempresa), fStrRFCValido(vlstrRFC))))
        End If
        !CHRNOMBRE = IIf(chkOtrosDatosFiscales.Value = 0, Trim(rsDatosEmpresa!VCHRAZONSOCIAL), Trim(vlstrNombreFactura))
        !chrCalle = IIf(chkOtrosDatosFiscales.Value = 0, Trim(rsDatosEmpresa!chrCalle), Trim(vlstrDireccion))
        !VCHNUMEROEXTERIOR = IIf(chkOtrosDatosFiscales.Value = 0, Trim(rsDatosEmpresa!VCHNUMEROEXTERIOR), Trim(vlstrNumeroExterior))
        !VCHNUMEROINTERIOR = IIf(chkOtrosDatosFiscales.Value = 0, Trim(rsDatosEmpresa!VCHNUMEROINTERIOR), Trim(vlstrNumeroInterior))
        !chrTelefono = IIf(chkOtrosDatosFiscales.Value = 0, Trim(rsDatosEmpresa!chrTelefonoEmpresa), Trim(vlstrTelefono))
        If dblExcedenteDeIVA > 0 Then
        'Si se cobró IVA de más al paciente, a la aseguradora no se le debe de cobrar IVA
            !smyIVA = 0
        Else
            If dblDescuentoEspecial = 0 Then
               !smyIVA = Round(IIf(optPesos(1).Value, ldblIVACargosSelConvenio - dblIVAPaciente, dblIVAP / vldblTipoCambio), 2)
            Else
               !smyIVA = Round(IIf(optPesos(1).Value, ldblIVACargosSelConvenio, dblIVAP / vldblTipoCambio), 2)
            End If
        End If
        !MNYDESCUENTO = Round((Round(ldblDescuentosFactura, 2) + Round(dblDescuentoEspecial, 2)), 2) 'sumamos el descuento especial
        
        !chrEstatus = " "
        !INTMOVPACIENTE = txtMovimientoPaciente.Text
        !CHRTIPOPACIENTE = IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E"))
        !SMIDEPARTAMENTO = vgintNumeroDepartamento
        !intCveEmpleado = vglngNumeroEmpleado
        !intNumCorte = vllngNumeroCorte
        !mnyAnticipo = Val(Format(txtFEPagos.Text, ""))
        '!mnyTotalFactura = CDbl(Format((IIf(optPesos(1).Value, Val(Format(txtFETotalFactura.Text, "")), dblTotalFacturaP / vldblTipoCambio)), "$ ###,###,###,###.00"))
        !mnyTotalFactura = Val(Format(txtFETotalFactura.Text, "")) - Val(Format(txtRetenionServ.Text, ""))
        !BITPESOS = IIf(optPesos(1).Value, 1, 0)
        !mnytipocambio = IIf(optPesos(1).Value, 0, vldblTipoCambio)
        !chrTipoFactura = "E"
        !intNumCliente = 0
        !intCveVentaPublico = 0
        'No se usara más DTMFECHAINGRESO
'        !dtmfechaingreso = IIf(rsFechaIngreso.RecordCount > 0, dtmfecha, !dtmFechaHora)
        !intCveCiudad = IIf(chkOtrosDatosFiscales.Value = 0, Trim(rsDatosEmpresa!intCveCiudad), lngCveCiudad)
        !intcveempresa = vgintEmpresa
        !mnyTotalPagar = Val(Format(txtFETotalPagar.Text, ""))
        !VCHCOLONIA = IIf(chkOtrosDatosFiscales.Value = 0, Trim(IIf(IsNull(rsDatosEmpresa!VCHCOLONIA), " ", rsDatosEmpresa!VCHCOLONIA)), strColonia)
        !VCHCODIGOPOSTAL = IIf(chkOtrosDatosFiscales.Value = 0, Trim(IIf(IsNull(rsDatosEmpresa!VCHCODIGOPOSTAL), " ", rsDatosEmpresa!VCHCODIGOPOSTAL)), strCodigoPostal)
        !vchSerie = strSerie
        !INTFOLIO = strFolio
        !MNYDESCUENTOESPECIAL = dblDescuentoEspecial 'agregamos el descuento especial
        !intTipoDetalleFactura = IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3))
        If cboUsoCFDI(1).ListIndex > -1 Then
            !intCveUsoCFDI = cboUsoCFDI(1).ItemData(cboUsoCFDI(1).ListIndex)
        End If
        !NUMPORCENTDESCUENTOESPECIAL = dblDescuentoEspecialPorcentaje
        !chrIncluirConceptosSeguro = vlchrIncluirConceptosSeguro
        !INTDESGLOSECONCEPTOSVICFDI = vlintDesgloseConceptosVICFDI
        !MNYRETENSERVICIOS = vldblImporteRetencionServ / IIf(optPesos(1).Value, 1, vldblTipoCambio) 'Val(Format(txtRetenionServ.Text, ""))
        !VCHREGIMENFISCALRECEPTOR = IIf(chkOtrosDatosFiscales.Value = 0, Trim(IIf(IsNull(rsDatosEmpresa!VCHREGIMENFISCAL), " ", rsDatosEmpresa!VCHREGIMENFISCAL)), vlstrDFRegimenFiscal)
        If claveCarta > 0 Then !intCveCarta = claveCarta
        .Update
        vlRFCTemp = Trim(!CHRRFC) 'Se guarda el RFC para posible envío de CFD/CFDi
    End With
    
    vldblIvaDescuento = 0
    vllngConsecutivoFactura = flngObtieneIdentity("SEC_PvFactura", rsFactura!intConsecutivo)
        
    vlstrSentencia = "SELECT * FROM PVDetalleFactura WHERE chrFolioFactura = ''"
    Set rsDetalleFactura = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
    With rsDetalleFactura
        For vlintcontador = 1 To grdFacturaEmpresa.Rows - 1
            .AddNew
            !chrfoliofactura = vlstrFolioDocumento
            !smicveconcepto = grdFacturaEmpresa.RowData(vlintcontador)
            !chrTipo = grdFacturaEmpresa.TextMatrix(vlintcontador, 6) 'Tipo de concepto (Ver llenaFactura)
            If !chrTipo = "NO" Or !chrTipo = "OC" Then
                ' la cantidad en la tabla no debe de ir redondeada
                '!mnyCantidad = IIf(optPesos(1).Value, Val(Format(grdFacturaEmpresa.TextMatrix(vlintContador, 9), "")), Val(Format(grdFacturaEmpresa.TextMatrix(vlintContador, 10), "")) / vldblTipoCambio)
                '!mnyCantidad = IIf(optPesos(1).Value, Val(Format(grdFacturaEmpresa.TextMatrix(vlintContador, 2), "")), Val(Format(grdFacturaEmpresa.TextMatrix(vlintContador, 10), "")) / vldblTipoCambio)
                !MNYCantidad = Val(Format(grdFacturaEmpresa.TextMatrix(vlintcontador, 2), ""))
                
            ElseIf !chrTipo = "DE" Or !chrTipo = "OD" Or !chrTipo = "OP" Then
                !MNYCantidad = IIf(optPesos(1).Value, Val(Format(grdFacturaEmpresa.TextMatrix(vlintcontador, 3), "")), Val(Format(grdFacturaEmpresa.TextMatrix(vlintcontador, 11), "")) / vldblTipoCambio)
                If !chrTipo = "OD" Then 'Descuentos por conceptos de seguro, identificar el importe gravado
                    If grdFacturaEmpresa.TextMatrix(vlintcontador, 7) = "EX" Then       'Excedente en suma asegurada
                        !mnyCantidadGravada = ldblExcedenteGrava
                    ElseIf grdFacturaEmpresa.TextMatrix(vlintcontador, 7) = "DE" Then   'Deducible
                        !mnyCantidadGravada = ldblDeducibleGrava
                    ElseIf grdFacturaEmpresa.TextMatrix(vlintcontador, 7) = "CO" Then   'Coaseguro
                        !mnyCantidadGravada = ldblCoaseguroGrava
                    ElseIf grdFacturaEmpresa.TextMatrix(vlintcontador, 7) = "CM" Then   'Coaseguro
                        !mnyCantidadGravada = ldblCoaseguroMedicoGrava
                    ElseIf grdFacturaEmpresa.TextMatrix(vlintcontador, 7) = "CA" Then   'Coaseguro adicional
                        !mnyCantidadGravada = ldblCoaseguroAdicionalGrava
                    ElseIf grdFacturaEmpresa.TextMatrix(vlintcontador, 7) = "CP" Then   'Copago
                        !mnyCantidadGravada = ldblCopagoGrava
                    ElseIf grdFacturaEmpresa.TextMatrix(vlintcontador, 7) = "EI" Then   'Excedente de IVA
                        !mnyCantidadGravada = 0
                    End If
                End If
            End If
            !MNYIVA = Val(grdFacturaEmpresa.TextMatrix(vlintcontador, 4))
            '!MNYDESCUENTO = Val(Format(FormatCurrency(Val(grdFacturaEmpresa.TextMatrix(vlintContador, 5)), 2), ""))
            !MNYDESCUENTO = Val(Format(grdFacturaEmpresa.TextMatrix(vlintcontador, 5), ""))
            If Trim(!chrTipo) <> "OD" Then
                If !MNYIVA <> 0 Then
'                    vldblIvaDescuento = vldblIvaDescuento + (!MNYDESCUENTO * (vgdblCantidadIvaGeneral / 100))
                    vldblIvaDescuento = vldblIvaDescuento + (!MNYDESCUENTO * (!MNYIVA / (!MNYCantidad - !MNYDESCUENTO)))
                End If
                
                If !MNYIVA <> 0 And !mnyIVAConcepto = 0 Then
'                    !mnyIVAConcepto = !mnyCantidad * (vgdblCantidadIvaGeneral / 100)
                    !mnyIVAConcepto = !MNYCantidad * (!MNYIVA / (!MNYCantidad - !MNYDESCUENTO))
                    !MNYRETSERVCONCEPTO = Val(Format(grdFacturaEmpresa.TextMatrix(vlintcontador, 14), ""))
                End If
                                        
                If Trim(!chrTipo) = "DE" Then
                    !mnyIVAConcepto = vldblIvaDescuento
                End If
            End If
            
            .Update
        Next vlintcontador
    End With
    rsDetalleFactura.Close
    rsFactura.Close
    
    '-----------------------------------------------------------------------------------------------------------'
    'Inserta en PvFacturaImporte
    If dblExcedenteDeIVA = 0 Then
        vgstrParametrosSP = str(vllngConsecutivoFactura) & "|" & str(vldblsubtotalgravadoSinRound) & "|" & str(ldblImporteNoGravaSelConvenio) _
                            & "|" & str(vldbldescuentogravado) & "|" & str(Format((vldbldescuentototal - vldbldescuentogravado - vldbldescuentoexento), "###############.00")) & "|" & str(ldblImporteExentoSelConvenio) & "|" & str(vldbldescuentoexento)
    Else
        vgstrParametrosSP = str(vllngConsecutivoFactura) & "|0|" & str(Val(Format(txtFETotalFactura, ""))) _
                            & "|" & str(vldbldescuentogravado) & "|" & str(Format((vldbldescuentototal - vldbldescuentogravado - vldbldescuentoexento), "###############.00")) & "|" & str(ldblImporteExentoSelConvenio) & "|" & str(vldbldescuentoexento)
    End If
    frsEjecuta_SP vgstrParametrosSP, "SP_PVINSFACTURAIMPORTE"
    
    '----------------------------------------------------'
    ' Insertar las facturas parciales que se descontaron '
    '----------------------------------------------------'
    If UBound(alngFacturasParciales) > 0 Then
        vlstrSentencia = "SELECT * FROM PvFacturaParcialEmpresa WHERE intFacturaParcial = -1"
        Set rsFacturaParcialEmpresa = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
        With rsFacturaParcialEmpresa
            For vlintcontador = 1 To UBound(alngFacturasParciales)
                .AddNew
                !intFacturaEmpresa = vllngConsecutivoFactura
                !intFacturaParcial = alngFacturasParciales(vlintcontador)
                !intcveempresa = vgintEmpresa
                !INTMOVPACIENTE = CLng(txtMovimientoPaciente.Text)
                !CHRTIPOPACIENTE = IIf(OptTipoPaciente(0).Value, "I", "E")
                .Update
            Next vlintcontador
        End With
    End If
    
    '---------------------------------------------------------'
    '          Verificar si los cargos cambiaron              '
    '---------------------------------------------------------'
    If fblnValidarCargos Then
        'Los cargos de la cuenta han sido modificados, consulte de nuevo.
         MsgBox SIHOMsg(1152), vbExclamation, "Mensaje"
         EntornoSIHO.ConeccionSIHO.RollbackTrans
         Unload Me
         Exit Sub
    End If
    
    '------------------------------------------'
    ' Poner el número de factura en los CARGOS '
    '------------------------------------------'
    vlstrAux = ""
    vlstrSentencia = " Update PvCargo set chrFolioFactura = '" & Trim(vlstrFolioDocumento) & "'" & _
                     " Where intNumCargo IN ("
    For vlintcontador = 1 To grdCargos.Rows - 1
        If grdCargos.TextMatrix(vlintcontador, 0) = "*" _
            And (grdCargos.TextMatrix(vlintcontador, 18) = "" Or optTipoFacturacion(0).Value) Then
            vlstrSentencia = vlstrSentencia & Trim(str(grdCargos.RowData(vlintcontador)))
            vlstrAux = vlstrAux & "," & Trim(str(grdCargos.RowData(vlintcontador)))
            If vlintcontador < grdCargos.Rows - 1 Then
                vlstrSentencia = vlstrSentencia & ", "
            End If
        End If
        
        If vlintcontador Mod 50 = 0 And vlstrAux <> "" Then
            vlstrSentencia = Trim(vlstrSentencia)
            If Mid(vlstrSentencia, Len(vlstrSentencia), 1) = "," Then
                vlstrSentencia = Mid(vlstrSentencia, 1, Len(vlstrSentencia) - 1) & ") "
            Else
                vlstrSentencia = vlstrSentencia & ")"
            End If
            pEjecutaSentencia (vlstrSentencia)
            vlstrSentencia = ""
            vlstrSentencia = vlstrSentencia & " Update PvCargo set chrFolioFactura = '" & Trim(vlstrFolioDocumento) & "'" & _
                             " Where intNumCargo IN ("
            vlstrAux = ""
        End If
    Next vlintcontador
    
    vlintcontador = vlintcontador - 1
    If vlintcontador Mod 50 <> 0 And vlstrAux <> "" Then
        vlstrSentencia = Trim(vlstrSentencia)
        If Mid(vlstrSentencia, Len(vlstrSentencia), 1) = "," Then
            vlstrSentencia = Mid(vlstrSentencia, 1, Len(vlstrSentencia) - 1) & ") "
        Else
            vlstrSentencia = vlstrSentencia & ")"
        End If
        pEjecutaSentencia (vlstrSentencia)
    End If
                   
    '------ Se cambió la inserción de paquete facturado a esta parte para poder tomarlo como referencia al momento de generar el XML para AXA :P
    'Inserta en PvPaquetePacienteFacturado
    strParametros = txtMovimientoPaciente.Text & "|" & IIf(optGrupoCuenta(0).Value, "'G'", IIf(OptTipoPaciente(0).Value, "'I'", "'E'")) & "|" & Trim(vlstrFolioDocumento)
    frsEjecuta_SP strParametros, "SP_PVINSPAQUETESFACTURADOS"
                   
    '---------------------------------------------------------'
    ' Cierra las cuentas del grupo y las pone como facturadas '
    '---------------------------------------------------------'
    If optGrupoCuenta(0).Value Then
        vlstrSentencia = txtMovimientoPaciente.Text
        frsEjecuta_SP vlstrSentencia, "Sp_PvUpdEstadoCuentasGpoFact"
    End If
    freBarra.Visible = False

    '------------------------------------------------------------------------------'
    ' (PEMEX)Se consulta los datos de la factura para saber el número de registros '
    '------------------------------------------------------------------------------'
    blnFacturaMultiple = False
    If fblnObtieneDatosFormatoProc(lngCveFormato, vllngConsecutivoFactura, lngRenglonesDetalle, lngTotalDocumentos, rsDatosFactura) Then
        blnFacturaMultiple = True
    End If
    
    If blnFacturaMultiple Then
        blnCancelarFacturacion = False
        blnFoliosOK = False
        lngInicial = 0
        lngFinal = 0
        strIdentificador = ""
        Do
            ReDim arrFolios(1)
            arrFolios(1) = vlstrFolioDocumento
            lngIndexFolios = 1
            blnFoliosOK = True
            If lngTotalDocumentos > 1 Then
                Set rsFolios = frsEjecuta_SP("FA|" & vgintNumeroDepartamento & "|" & lngTotalDocumentos - 1 & "|1|" & strIdentificador & "|" & lngInicial & "|" & lngFinal & "|0", "sp_GNSelFoliosFactMult")
                Do Until rsFolios.EOF
                    lngIndexFolios = lngIndexFolios + 1
                    ReDim Preserve arrFolios(lngIndexFolios)
                    If Not IsNull(rsFolios!vchFolio) Then
                       arrFolios(lngIndexFolios) = rsFolios!vchFolio
                    Else
                        blnFoliosOK = False
                    End If
                    rsFolios.MoveNext
                Loop
                rsFolios.Close
            End If
            
            If Not blnFoliosOK Then
                If fmsgNuevaSerieFolios("FA", vgintNumeroDepartamento, strIdentificador, lngInicial, lngFinal) = vbCancel Then
                    blnCancelarFacturacion = True
                End If
            End If
        Loop Until blnCancelarFacturacion Or blnFoliosOK
        
        If blnCancelarFacturacion Then
            EntornoSIHO.ConeccionSIHO.RollbackTrans
            Exit Sub
        End If
        
        'Registro de folios
        For lngContador = 2 To lngIndexFolios
            pEjecutaSentencia "insert into PVFacturaFolios(chrFolioFactura, chrFolioRelacionado, smiCveDepartamento, intnumDocumento) values('" & vlstrFolioDocumento & "', '" & arrFolios(lngContador) & "', " & vgintNumeroDepartamento & ", " & lngContador & ")"
        Next
    End If

    '---------------------------------------------'
    ' Que se actualice el CONTROL DE ASEGURADORAS '
    '---------------------------------------------'
    If gintAseguradora = 1 Then
        vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & _
                            "|" & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & _
                            "|" & str(vgintEmpresa) & _
                            "|" & vlstrFolioDocumento
        frsEjecuta_SP vgstrParametrosSP, "Sp_PvUpdControlAseguradoraEmp"
    End If
    
    If optGrupoCuenta(0).Value Then
       vlstrSentencia = "SELECT intmovpaciente " & _
                         "     , chrtipopaciente " & _
                         " FROM PVDETALLEFACTURACONSOLID " & _
                         " WHERE PVDETALLEFACTURACONSOLID.intCveGrupo = " & txtMovimientoPaciente.Text
        Set rsCuentas = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
        Do Until rsCuentas.EOF
            pEstadoCuenta rsCuentas!INTMOVPACIENTE, rsCuentas!CHRTIPOPACIENTE, True
            rsCuentas.MoveNext
        Loop
    Else
        pEstadoCuenta CLng(txtMovimientoPaciente), IIf(OptTipoPaciente(0).Value, "I", "E"), True
    End If
    
    '---------------------------------------------------------------------------------------
    'Se agregan los movimientos de la factura base ó de la factura base y la nota de crédito(se abre y se cierra el corte)
    '---------------------------------------------------------------------------------------
    vllngCorteUsado = fRegistrarMovArregloCorte(vllngNumeroCorte, True)
    If vllngCorteUsado <> vllngNumeroCorte Then
       'actualizamos el corte en el que se registró la factura, esto es por si hay un cambio de corte al momento de hacer el registro d ela información de la factura
       pEjecutaSentencia "Update pvfactura set INTNUMCORTE = " & vllngCorteUsado & " where intConsecutivo = " & vllngConsecutivoFactura
    End If
     
    '-------------------------------------------------------------------------------------------------
    'VALIDACIÓN DE LOS DATOS ANTES DE INSERTAR EN GNCOMPROBANTEFISCLADIGITAL EN EL PROCESO DE TIMBRADO
    '-------------------------------------------------------------------------------------------------
    If intTipoEmisionComprobante = 2 Then
       If Not fblnValidaDatosCFDCFDi(vllngConsecutivoFactura, "FA", IIf(intTipoCFDFactura = 1, True, False), CInt(strAnoAprobacion), strNumeroAprobacion) Then
          EntornoSIHO.ConeccionSIHO.RollbackTrans
          Exit Sub
       End If
    End If
        
    '---------------------'
    ' Facturación digital '
    '---------------------'
    strSentencia = "SELECT VCHRUTAXML, VCHRUTAPDF FROM CNEMPRESACONTABLE WHERE TNYCLAVEEMPRESA = " & vgintClaveEmpresaContable
    Set rsRutas = frsRegresaRs(strSentencia)
    strRutaPDFPrefactura = rsRutas!vchRutaPDF & "/" & vlstrFolioDocumento & ".pdf"
    
    If intTipoEmisionComprobante = 2 Then
    '|  Genera el comprobante fiscal digital para la factura
        'Barra de progreso CFD

        frmFacturacion.Enabled = False
        blnNOMensajeErrorPAC = False
        If intTipoCFDFactura = 1 Then
           pLogTimbrado 2
        End If
        
        If Not fblnGeneraComprobanteDigital(vllngConsecutivoFactura, "FA", IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), CInt(strAnoAprobacion), strNumeroAprobacion, IIf(intTipoCFDFactura = 1, True, False), , vglngCveAddenda, False) Then
           On Error Resume Next

           If intTipoCFDFactura = 1 Then pLogTimbrado 1
           If vgIntBanderaTImbradoPendiente = 1 Then
              'El comprobante se realizó de manera correcta, sin embargo no fue posible confirmar el timbre fiscal
              MsgBox Replace(SIHOMsg(1306), "El comprobante", "La factura"), vbInformation + vbOKOnly, "Mensaje"
           ElseIf vgIntBanderaTImbradoPendiente = 2 Or vgIntBanderaTImbradoPendiente = 3 Then
                   '1338, 'La factura no pudo ser timbrada, será cancelada en el sistema.
                   MsgBox SIHOMsg(1338), vbCritical + vbOKOnly, "Mensaje"
                   pCancelarFactura Trim(vlstrFolioDocumento), vglngNumeroEmpleado, "frmFacturacion", True
                  
                   'Actualiza PDF al cancelar facturas
                   If Not fblnGeneraComprobanteDigital(vllngConsecutivoFactura, "FA", 1, 0, "", False, True, -1, False) Then
                          On Error Resume Next
                   End If
                   
                   'imprimimos la factura cancelada
                   fblnImprimeComprobanteDigital vllngConsecutivoFactura, "FA", "PDF", vllngFormatoaUsar, IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), strRutaPDFPrefactura, True

                   Unload Me
                   Exit Sub
           End If
        Else ' timbrado correcto
            If intTipoCFDFactura = 1 Then
               pLogTimbrado 1
            End If
        End If
           
        frmFacturacion.Enabled = True
    End If
    
    '|  Facturación electrónica
    If intTipoEmisionComprobante = 2 Then
        If Not fblnImprimeComprobanteDigital(vllngConsecutivoFactura, "FA", "PDF", vllngFormatoaUsar, IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), strRutaPDFPrefactura, True) Then
            pIniciaChkFacturaBase
            Unload Me
            Exit Sub
        End If
        
        Screen.MousePointer = vbDefault
       
        '***** SE COMENTAREÓ EL ENVÍO DE CFD POR CORREO PARA EMPRESAS POR SI SE REQUIERE AGREGAR POSTERIORMENTE *****'
        'Verifica el parámetro de envío de CFDs por correo
        If fblnRevisaEnvioCorreo(vgintClaveEmpresaContable) Then
            If MsgBox(SIHOMsg(1090), vbYesNo + vbQuestion, "Mensaje") = vbYes Then
                pEnviarCFD "FA", vllngConsecutivoFactura, CLng(vgintClaveEmpresaContable), Trim(vlRFCTemp), vglngNumeroEmpleado, Me, False, True
            End If
        End If
    
        vlRFCTemp = "" 'Se restaura el valor de la variable
        '************************************************************************************************************'

    Else
        '(PEMEX)
        If blnFacturaMultiple Then
            pImprimeFormatoProc vllngFormatoaUsar, lngRenglonesDetalle, lngTotalDocumentos, rsDatosFactura, arrFolios
        Else
            pImprimeFormato vllngFormatoaUsar, vllngConsecutivoFactura
        End If
    End If
    
    Screen.MousePointer = vbDefault
    
    'Nada de lo que hace este proceso de prefactura debe de quedar guardado así que se hace rollback
    EntornoSIHO.ConeccionSIHO.RollbackTrans

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":cmdPrefacturaEmpresa_Click"))
End Sub

Private Sub cmdPrefacturaPaciente_Click()

On Error GoTo NotificaError

    Dim vlintcontador As Long                       'Para los ciclos
    Dim rsFactura As New ADODB.Recordset            'RS tipo tabla para guardar la fractura
    Dim rsDetalleFactura As New ADODB.Recordset     'RS tipo tabla para el Detalle de la FACTURA
    Dim rsTipoPaciente As New ADODB.Recordset       'RS para el Tipo de paciente en crédito
    Dim rsFacturaPacConcepto As New ADODB.Recordset 'Para guardar en PvFacturaPacienteConcepto
    Dim vlstrSentencia As String                    'Sirve pa TODOS los RS's
    Dim vllngNumeroCorte As Long                    'Trae el numero de corte actual
    Dim vldblTipoCambio As Double                   'Trae el tipo de cambio utilizado en la pantalla de Formas de pago
    Dim vlblnbandera As Boolean                     'Bandera para control de flujo
    Dim vlstrFolioDocumento As String               'Este es el numero de factura a utilizar
    Dim vllngConsecutivoFactura As Long             '
    Dim vlstrTipoPacienteCredito As String          'Sería 'PI' 'PE' 'EM' 'CO' 'ME'
    Dim vllngCveClienteCredito As Long              'Clave del empledo o del médico
    Dim vllngNumCliente As Long                     'Numero de cliente en caso de que sea a acredito
    Dim vldtmFechaHoy As Date                       'Varible con la Fecha actual
    Dim vldtmHoraHoy As Date                        'Varible con la Hora actual
    Dim vldblFacturaDeducible As Double             'Monto del deducible a facturar
    Dim vldblFacturaCoaseguro As Double             'Monto del coaseguro a facturar
    Dim vldblFacturaCoaseguroMedico As Double       'Monto del coaseguro médico a facturar
    Dim vldblFacturaCoaseguroAdicional As Double    'Monto del coaseguro adicional a facturar
    Dim vldblFacturaCopago As Double                'Monto del copago a facturar
    Dim vldblFacturaExcedente As Double             'Monto del Excedente a facturar
    Dim vldblFacturaCoaseguroMedicoPorCobrar As Double    'Monto del coaseguro médico que quedaría pendiente de cobrar al momento de facturar
    Dim vlstrAux As String                          'string auxliar para grabar folio de factura en cargos
    
    'Variables para obtener los datos fiscales
    Dim vlstrDFRFC As String
    Dim vlstrDFNombre As String
    Dim vlstrDFDireccion As String
    Dim vlstrDFNumExterior As String
    Dim vlstrDFNumInterior As String
    Dim lngCveCiudad As Long                        'Clave de la ciudad del domicilio fiscal
    Dim vlstrDFTelefono As String
    Dim vlstrDFColonia As String
    Dim vlstrDFCodigoPostal As String
    
    'Datos de la factura
    Dim vldblIVA As Double
    Dim vldblIvaDescuento As Double
    Dim vldblDescuento As Double
    Dim vldblAnticipo As Double
    Dim vldblTotalFactura As Double
    Dim vlintBitPesos As Integer
    Dim vlintNumCliente As Integer
    Dim vlblnDescuentoParcial As Boolean

    Dim dblTotalPagar As Double                     'Total a pagar de la factura
    Dim rsgrupo As New ADODB.Recordset              'Para tener las cuentas del grupo
    Dim vlrsDatos As New ADODB.Recordset
    Dim rsRutas As New ADODB.Recordset
        
    Dim strFolio As String
    Dim strSerie As String
    Dim strNumeroAprobacion As String
    Dim strAnoAprobacion As String
    
    Dim intPaquetes As Integer
    Dim vlintEstadoTimbradoFBase As Integer
    Dim vlRFCTemp As String
    
    Dim strSentencia As String
    Dim i As Long
    
    Dim vllngConsecPreFactura As Long
    
    Dim strRutaPDFPrefactura As String
    
    vldblFacturaExcedente = 0
    vldblFacturaDeducible = 0
    vldblFacturaCopago = 0
    vldblFacturaCoaseguro = 0
    vldblFacturaCoaseguroMedico = 0
    vldblFacturaCoaseguroAdicional = 0
    
    '(PEMEX)Se busca el tipo de formato que se va a utilizar
    Dim lngCveFormato As Long
    lngCveFormato = 1
    frsEjecuta_SP vgintNumeroDepartamento & "|0|" & vgintTipoPaciente & "|" & IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")), "fn_PVSelFormatoFactura2", True, lngCveFormato
    vllngFormatoaUsar = lngCveFormato
    
    If Not fblnDatosValidosPacientePrefactura() Then Exit Sub
        
    If optGrupoCuenta(0).Value Then
        Set rsgrupo = frsRegresaRs("SELECT intmovpaciente, chrtipopaciente FROM PVDETALLEFACTURACONSOLID WHERE PVDETALLEFACTURACONSOLID.intCveGrupo = " & txtMovimientoPaciente.Text, adLockReadOnly, adOpenForwardOnly)
    End If
    
    vldtmFechaHoy = fdtmServerFecha
    vldtmHoraHoy = fdtmServerHora

    '-------------------------------'
    ' Tipo de cambio de los DOLARES '
    '-------------------------------'
    vldblTipoCambio = fdblTipoCambio(vldtmFechaHoy, "V") 'Tipo de cambio a la Venta
    If vldblTipoCambio = 0 Then
        MsgBox SIHOMsg(231), vbCritical, "Mensaje"
        Exit Sub
    End If
    
    '***********************************************************'
    '       VALIDACION DE FORMATO/FOLIO (FISICO, DIGITAL)       '
    '***********************************************************'
    'Identifica el tipo de formato a utilizar
    pIdentificaFormato
    
    'Se valida en caso de no haber formato activo mostrar mensaje y cancelar transacción
    If vllngFormatoaUsar = 0 Then
        'No se encontró un formato válido de factura.
        MsgBox SIHOMsg(373), vbCritical, "Mensaje"
        pCancelar
        Exit Sub
    End If

    'Se compara el tipo de folio con el tipo de formato a utilizar con la fn "fintTipoEmisionComprobante"
    '(intTipoEmisionComprobante: 0 = Error, 1 = Físico, 2 = Digital)
    'Se revisa el tipo de CFD de la Factura (0 = CFD, 1 = CFDi, 2 = Físico, 3 = Error)
    intTipoEmisionComprobante = 2   'Digital fijo, por ser prefactura
    intTipoCFDFactura = 1           'CFDI fijo, por ser prefactura
    
    'Validar uso del comprobante, claves de productos/servicios y unidades
    If Not fblnValidaSAT("P") Then
        Exit Sub
    End If
    
    '---------------------------'
    '- Número del corte actual -'
    '---------------------------'
    vllngNumeroCorte = flngNumeroCorte(vgintNumeroDepartamento, vglngNumeroEmpleado, "P")
               
    '-----------------------------------------------------------'
    ' Las formas de pago y consulta de crédito para el paciente '
    '-----------------------------------------------------------'
    vlblnbandera = False
    ' (Si el total de la factura es mayor a cero O (El total de la factura es igual a cero Y el subtotal sea mayor a cero)) Y el total a pagar sea mayor o igual a cero
    If (Val(Format(txtFPTotalFactura.Text, "")) > 0 Or (Val(Format(txtFPTotalFactura.Text, "")) = 0 And grdCargos.RowData(1) <> -1)) And Not (CDbl(txtFPTotalPagar.Text) < 0) Then
      If optTipoCliente(0).Value Or lstFPBuscaCliente.ListCount = 0 Then 'El mismo cliente que el de la nota
         If optGrupoCuenta(1).Value Then
            vlstrSentencia = "Select chrTipo From AdTipoPaciente Where tnyCveTipoPaciente = " & Trim(str(vgintTipoPaciente))
            Set rsTipoPaciente = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
            If rsTipoPaciente!chrTipo = "CO" Then
               vlstrTipoPacienteCredito = "PA"
            Else
               vlstrTipoPacienteCredito = rsTipoPaciente!chrTipo
            End If
                        
            If vlstrTipoPacienteCredito = "PA" Then
               vlstrTipoPacienteCredito = IIf(OptTipoPaciente(0).Value, "PI", "PE")
               vllngCveClienteCredito = CLng(txtMovimientoPaciente.Text) 'Igual que la cuenta del paciente
            Else
               vllngCveClienteCredito = vgintCveExtra
            End If
         End If
      Else
         If optTipoCliente(1).Value Then
            vlstrTipoPacienteCredito = "CO"
         ElseIf optTipoCliente(2).Value Then
            vlstrTipoPacienteCredito = "EM"
         ElseIf optTipoCliente(3).Value Then
            vlstrTipoPacienteCredito = "ME"
         ElseIf optTipoCliente(4).Value Then
            vlstrTipoPacienteCredito = "PI"
         ElseIf optTipoCliente(5).Value Then
            vlstrTipoPacienteCredito = "PE"
         End If
            vllngCveClienteCredito = lstFPBuscaCliente.ItemData(lstFPBuscaCliente.ListIndex)
         End If
                
         If Val(Format(txtFPTotalPagar.Text, "")) > 0 Then
'            vlblnbandera = fblnFormasPagoPos(aFormasPago(), IIf(optPesos(0).Value, Val(Format(txtFPTotalPagar.Text, "")), Val(Format(txtFPTotalPagar.Text, "")) * vldblTipoCambio), True, vldblTipoCambio, True, vllngCveClienteCredito, vlstrTipoPacienteCredito, Trim(Replace(Replace(Replace(txtRFCFactura.Text, "-", ""), "_", ""), " ", "")), False, False, True, "frmFacturacion")

            vlblnbandera = True
         Else
            vlblnbandera = True
         End If
    Else
        '¡No se puede facturar si la cantidad es cero o menor que cero¡
        MsgBox SIHOMsg(429), vbExclamation, "Mensaje"
        Exit Sub
    End If

    If Not (vlblnbandera) Then Exit Sub 'Para que ya no haga nada si le di un esqueich (<ESC>) a las formas de pago

    '-----------------------------'
    ' Datos fiscales del paciente '
    '-----------------------------'
    pDatosFacturaPaciente
    
    '-----------------------------------------
    'Variables para obtener los datos fiscales
    '-----------------------------------------
    vlstrDFRFC = fStrRFCValido(txtRFCFactura.Text)
    vlstrDFNombre = Trim(txtNombreFactura.Text)
    vlstrDFDireccion = Trim(txtDireccionFactura(0).Text)
    vlstrDFNumExterior = Trim(txtFacturaNumExterior.Text)
    vlstrDFNumInterior = Trim(txtFacturaNumInterior.Text)
    lngCveCiudad = cboCiudad.ItemData(cboCiudad.ListIndex)
    vlstrDFTelefono = Trim(txtTelefonoFactura.Text)
    vlstrDFColonia = Trim(txtColoniaFactura.Text)
    vlstrDFCodigoPostal = Trim(txtCPFactura.Text)
            
    If optTipoCliente(0).Value = False And optTipoCliente(1).Value = False Then pActualizaDatosFiscales
            
    '-------------------'
    'Datos de la factura'
    '-------------------'
    vldblIVA = Format(IIf(vgintEmpresa = 0, (vldblsubtotalgravado * (fdblTasaIVAEmpresa(vgintEmpresa) / 100)), IIf(optPesos(0).Value, dblIVAPaciente, dblIVAP / vldblTipoCambio)), "###############.00")
    vldblDescuento = Val(Format(txtFPDescuentos.Text, ""))
    vldblAnticipo = Val(Format(txtFPPagos.Text, ""))
    vldblTotalFactura = Val(Format(txtFPTotalFactura.Text, ""))
    dblTotalPagar = Val(Format(txtFPTotalPagar.Text, ""))
    vlintBitPesos = IIf(optPesos(0).Value, 1, 0)
    vlintNumCliente = vllngNumCliente
                                      
    '-----------------------------------------------------------'
    'Revisión del control de aseguradora cuando aplica
    '-----------------------------------------------------------'
    If Not fblnVcontrolAseguradora Then
       '¡No es posible facturar! El control de aseguradora ha cambiado, consulte de nuevo.'
       MsgBox SIHOMsg(1242), vbExclamation, "Mensaje"
       Unload Me
       Exit Sub
    End If
                                 
    '--------------------------'
    'Inicio de la transacción '
    '--------------------------'
    EntornoSIHO.ConeccionSIHO.BeginTrans
                              
    '------------------------'
    '- Folio de la factura -'
    '------------------------'
'        pCargaArreglo alstrParametrosSalida, vllngFoliosFaltantes & "|" & ADODB.adBSTR & "|" & strFolio & "|" & ADODB.adBSTR & "|" & strSerie & "|" & ADODB.adBSTR & "|" & strNumeroAprobacion & "|" & ADODB.adBSTR & "|" & strAnoAprobacion & "|" & ADODB.adBSTR
'        frsEjecuta_SP "FA|" & vgintNumeroDepartamento & "|1", "sp_gnFolios", , , alstrParametrosSalida
'        pObtieneValores alstrParametrosSalida, vllngFoliosFaltantes, strFolio, strSerie, strNumeroAprobacion, strAnoAprobacion
    
    '|Si la serie está vacía el SP regresa un espacio en blanco por eso se debe de hacer el TRIM
        vllngConsecPreFactura = 0
    vlstrSentencia = "Select SEC_PVPREFACTURA.NextVal as Id From DUAL"
    
    Set vlrsDatos = frsRegresaRs(vlstrSentencia, adOpenDynamic, adLockOptimistic)
    vllngConsecPreFactura = vlrsDatos!id
    
    strFolio = vllngConsecPreFactura
    strSerie = "PF-"
    strNumeroAprobacion = " "
    strAnoAprobacion = "0"
    vlstrFolioDocumento = strSerie & strFolio

                
    '------------------------------------------'
    '- Número de cliente inicializado en CERO -'
    '------------------------------------------'
    vllngNumCliente = 0
                    
    '------------------------------------'
    ' Guardar maestro de la factura      '
    '------------------------------------'
    vlstrSentencia = "SELECT * FROM PVFactura WHERE intConsecutivo = -1"
    Set rsFactura = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
    With rsFactura
         .AddNew
         !chrfoliofactura = vlstrFolioDocumento
         !dtmFechahora = vldtmFechaHoy + vldtmHoraHoy
         If chkExtranjero Then
            !CHRRFC = "XEXX010101000"
         Else
            !CHRRFC = IIf(Len(fStrRFCValido(vlstrDFRFC)) < 12 Or Len(fStrRFCValido(vlstrDFRFC)) > 13, "XAXX010101000", fStrRFCValido(vlstrDFRFC))
         End If
         !CHRNOMBRE = IIf(Trim(vlstrDFNombre) = "", " ", Trim(vlstrDFNombre))
         !chrCalle = Trim(vlstrDFDireccion)
         !VCHNUMEROEXTERIOR = Trim(vlstrDFNumExterior)
         !VCHNUMEROINTERIOR = Trim(vlstrDFNumInterior)
         !chrTelefono = Trim(vlstrDFTelefono)
         !VCHCOLONIA = Trim(vlstrDFColonia)
         !VCHCODIGOPOSTAL = Trim(vlstrDFCodigoPostal)
         !smyIVA = vldblIVA
         !MNYDESCUENTO = vldblDescuento
         !chrEstatus = " "
         !INTMOVPACIENTE = txtMovimientoPaciente.Text
         !CHRTIPOPACIENTE = IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E"))
         !SMIDEPARTAMENTO = vgintNumeroDepartamento
         !intCveEmpleado = vglngNumeroEmpleado
         !intNumCorte = vllngNumeroCorte
         !mnyAnticipo = vldblAnticipo
         !mnyTotalFactura = vldblTotalFactura 'IIf(optPesos(0).Value, vldblTotalFactura, vldblTotalFactura / vldblTipoCambio) 'ya esta en dlls
         !BITPESOS = vlintBitPesos
         !mnytipocambio = IIf(optPesos(0).Value, 0, vldblTipoCambio)
         !chrTipoFactura = "P"
         !intNumCliente = vlintNumCliente
         !intCveVentaPublico = 0
         !intCveCiudad = lngCveCiudad
         !intcveempresa = 0
         !mnyHonorariosFacturados = IIf(blnCalcularEnBaseACargos, ldblHonorariosAFacturar, 0)
         !mnyTotalPagar = dblTotalPagar
         !mnyTotalNotasCredito = Val(Format(txtFPNotasCredito.Text, ""))
         !vchSerie = strSerie
         !INTFOLIO = strFolio
         !intTipoDetalleFactura = IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3))
         !CHROBSERVACIONES = IIf(TxtObservacionesP.Text = "", "", TxtObservacionesP.Text)
         If cboUsoCFDI(0).ListIndex > -1 Then
            !intCveUsoCFDI = cboUsoCFDI(0).ItemData(cboUsoCFDI(0).ListIndex)
         End If
         If claveCarta > 0 Then !intCveCarta = claveCarta
         .Update
         vlRFCTemp = Trim(!CHRRFC) 'Se graba el valor del RFC para posible envío de CFD/CFDi
    End With
      
    vllngConsecutivoFactura = flngObtieneIdentity("SEC_PvFactura", rsFactura!intConsecutivo)
                
    '---------------------------------------------------------
    'Variables para ver lo que se graba en la factura --------
    vldblIvaDescuento = 0
    vlblnDescuentoParcial = False
    '------------------------------------'
    ' Guardar detalle de la factura      '
    '------------------------------------'
    vlstrSentencia = "SELECT * FROM PVDetalleFactura WHERE chrFolioFactura = '' "
    Set rsDetalleFactura = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
    With rsDetalleFactura
         ' Variables para ver lo que se graba en la factura
         vldblFacturaExcedente = 0
         vldblFacturaDeducible = 0
         vldblFacturaCopago = 0
         vldblFacturaCoaseguro = 0
         vldblFacturaCoaseguroMedico = 0
         vldblFacturaCoaseguroAdicional = 0
                
         For vlintcontador = 1 To grdFacturaPaciente.Rows - 1
             .AddNew
             !chrfoliofactura = vlstrFolioDocumento
             !smicveconcepto = grdFacturaPaciente.RowData(vlintcontador)
             !chrTipo = grdFacturaPaciente.TextMatrix(vlintcontador, 6)  'Tipo de concepto (ver llenaFacturas)
             If grdFacturaPaciente.TextMatrix(vlintcontador, 6) = "NO" Or grdFacturaPaciente.TextMatrix(vlintcontador, 6) = "OC" Then
                '!mnyCantidad = IIf(optPesos(0).Value, Format(Val(grdFacturaPaciente.TextMatrix(vlintContador, 9)), "###############.00"), Val(grdFacturaPaciente.TextMatrix(vlintContador, 10)) / vldblTipoCambio)
                !MNYCantidad = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 9), ""))
                
                'Cuando el Tipo sea Otros Cargos, hay que saber cual es, para actualizar la cantidad de acuerdo al tipo de Otros Cargos
                If grdFacturaPaciente.TextMatrix(vlintcontador, 6) = "OC" Then
                   If grdFacturaPaciente.TextMatrix(vlintcontador, 7) = "EX" Then 'Excedente en suma asegurada
                      vldblFacturaExcedente = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 2), ""))
                      !mnyCantidadGravada = ldblExcedenteGrava
                      !mnyIVAConcepto = dblIVAExcedente
                   ElseIf grdFacturaPaciente.TextMatrix(vlintcontador, 7) = "DE" Then 'Deducible
                          vldblFacturaDeducible = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 2), ""))
                          !mnyCantidadGravada = ldblDeducibleGrava
                          !mnyIVAConcepto = dblIVADeducible
                   ElseIf grdFacturaPaciente.TextMatrix(vlintcontador, 7) = "CO" Then 'Coaseguro
                          vldblFacturaCoaseguro = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 2), ""))
                          !mnyCantidadGravada = ldblCoaseguroGrava
                          !mnyIVAConcepto = dblIVACoaseguro
                   ElseIf grdFacturaPaciente.TextMatrix(vlintcontador, 7) = "CM" Then 'Coaseguro médico
                          vldblFacturaCoaseguroMedico = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 2), ""))
                          !mnyCantidadGravada = ldblCoaseguroMedicoGrava
                          !mnyIVAConcepto = dblIVACoaseguroMedico
                   ElseIf grdFacturaPaciente.TextMatrix(vlintcontador, 7) = "CA" Then 'Coaseguro adicional
                          vldblFacturaCoaseguroAdicional = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 2), ""))
                          !mnyCantidadGravada = ldblCoaseguroAdicionalGrava
                          !mnyIVAConcepto = dblIVACoaseguroAdicional
                   ElseIf grdFacturaPaciente.TextMatrix(vlintcontador, 7) = "CP" Then 'Copago
                          vldblFacturaCopago = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 2), ""))
                          !mnyCantidadGravada = ldblCopagoGrava
                          !mnyIVAConcepto = dblIVACopago
                   End If
                        
                   If Trim(grdFacturaPaciente.TextMatrix(vlintcontador, 7)) <> "" Then
                      'Llenar PvFacturaPacienteConcepto
                      vlstrSentencia = "SELECT * FROM PvFacturaPacienteConcepto WHERE chrFolioFactura = '' "
                      Set rsFacturaPacConcepto = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
                      With rsFacturaPacConcepto
                           .AddNew
                           !INTMOVPACIENTE = CLng(txtMovimientoPaciente.Text)
                           !CHRTIPOPACIENTE = IIf(OptTipoPaciente(0).Value, "I", "E")
                           !chrfoliofactura = vlstrFolioDocumento
                           !chrTipo = grdFacturaPaciente.TextMatrix(vlintcontador, 7)
                           !intcveempresa = vgintEmpresa
                           .Update
                      End With
                   End If
                End If
             Else  'Puede ser: !chrTipo = "DE" Or !chrTipo = "OD" Or !chrTipo = "OP"
                '!mnyCantidad = IIf(optPesos(0).Value, Val(Format(grdFacturaPaciente.TextMatrix(vlintContador, 3), "")), Val(grdFacturaPaciente.TextMatrix(vlintContador, 11)) / vldblTipoCambio)
                !MNYCantidad = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 3), ""))
             End If
             
             !MNYIVA = Val(grdFacturaPaciente.TextMatrix(vlintcontador, 4))
             !MNYDESCUENTO = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 5), ""))
                                            
             If !MNYIVA <> 0 And Trim(!chrTipo) <> "OC" Then
'               vldblIvaDescuento = vldblIvaDescuento + (!MNYDESCUENTO * (vgdblCantidadIvaGeneral / 100))
                vldblIvaDescuento = vldblIvaDescuento + (!MNYDESCUENTO * (!MNYIVA / (!MNYCantidad - !MNYDESCUENTO)))
                
                If !mnyIVAConcepto = 0 Then
'                  !mnyIVAConcepto = !mnyCantidad * (vgdblCantidadIvaGeneral / 100)
                   !mnyIVAConcepto = !MNYCantidad * (!MNYIVA / (!MNYCantidad - !MNYDESCUENTO))
                End If
             End If
                    
             If Trim(!chrTipo) = "DE" Then
                If vlblnDescuentoParcial Then 'Despues de una vuelta los demas descuentos seran por facturas parciales
                   !mnyIVAConcepto = IIf(!MNYIVA < 0, !MNYIVA * -1, !MNYIVA)
                Else
                   !mnyIVAConcepto = vldblIvaDescuento
                   vlblnDescuentoParcial = True
                End If
             End If
                                            
             .Update
         Next vlintcontador
         rsDetalleFactura.Close
                
         vgstrParametrosSP = str(vllngConsecutivoFactura) & "|" & str(vldblsubtotalgravadoSinRound) & "|" & str(vldblsubtotalNogravado - vldblsubtotalExento) _
                     & "|" & str(vldbldescuentogravado) & "|" & str(Format((vldbldescuentototal - vldbldescuentogravado - vldbldescuentoexento), "###############.00")) & "|" & str(vldblsubtotalExento) & "|" & str(vldbldescuentoexento)
         frsEjecuta_SP vgstrParametrosSP, "SP_PVINSFACTURAIMPORTE"
    End With
        
    '---------------------------------------------------------'
    'Verificar si los cargos cambiaron                        '
    '---------------------------------------------------------'
    If fblnValidarCargos Then
       'Los cargos de la cuenta han sido modificados, consulte de nuevo.
       MsgBox SIHOMsg(1152), vbExclamation, "Mensaje"
       EntornoSIHO.ConeccionSIHO.RollbackTrans
       Exit Sub
    End If
            
     '------------------------------------------'
     ' Poner el número de factura en los CARGOS '
     '------------------------------------------'
     vlstrSentencia = " Update PVCargo Set chrFolioFactura = '" & Trim(vlstrFolioDocumento) & "'" & " Where intNumCargo IN ("
      
     For vlintcontador = 1 To grdCargos.Rows - 1
        'Se agrega el folio de factura únicamente a los cargos del paciente cuando es un socio
         If grdCargos.TextMatrix(vlintcontador, 0) = "*" And ((((vgintEmpresa = 0 And vgSocio = False) Or (vgSocio = True And grdCargos.TextMatrix(vlintcontador, 18) = "X") Or (grdCargos.TextMatrix(vlintcontador, 18) = "X")))) Then
            vlstrSentencia = vlstrSentencia & Trim(str(grdCargos.RowData(vlintcontador)))
            vlstrAux = vlstrAux & "," & Trim(str(grdCargos.RowData(vlintcontador)))
            If vlintcontador < grdCargos.Rows - 1 Then
               vlstrSentencia = vlstrSentencia & ", "
            End If
         End If

         If vlintcontador Mod 50 = 0 And vlstrAux <> "" Then
            vlstrSentencia = Trim(vlstrSentencia)
            If Mid(vlstrSentencia, Len(vlstrSentencia), 1) = "," Then
                   vlstrSentencia = Mid(vlstrSentencia, 1, Len(vlstrSentencia) - 1) & ") "
            Else
                   vlstrSentencia = vlstrSentencia & ")"
            End If
            pEjecutaSentencia (vlstrSentencia)
            vlstrSentencia = ""
            vlstrSentencia = vlstrSentencia & "  Update PVCargo Set chrFolioFactura = '" & Trim(vlstrFolioDocumento) & "'" & _
                           " Where intNumCargo IN ("
            vlstrAux = ""
         End If
     Next vlintcontador
         
    vlintcontador = vlintcontador - 1
    If vlintcontador Mod 50 <> 0 And vlstrAux <> "" Then
       vlstrSentencia = Trim(vlstrSentencia)
       If Mid(vlstrSentencia, Len(vlstrSentencia), 1) = "," Then
              vlstrSentencia = Mid(vlstrSentencia, 1, Len(vlstrSentencia) - 1) & ") "
       Else
               vlstrSentencia = vlstrSentencia & ")"
       End If
       pEjecutaSentencia (vlstrSentencia)
    End If
           
    If gintAseguradora = 1 Then
       '--------------------------------------
       'Actualizar el control de aseguradoras:
       '--------------------------------------
       If blnCalcularEnBaseACargos Then
          vldblFacturaCoaseguroMedicoPorCobrar = Val(Format(txtTotalCoaseguroMedico.Text, "")) - dblCoaseguroMedicoCargos - dblCoaseguroMFacturado
       Else
          vldblFacturaCoaseguroMedicoPorCobrar = 0
       End If
       vgstrParametrosSP = str(vldblFacturaExcedente) & "|" & str(vldblFacturaDeducible) & "|" & str(vldblFacturaCoaseguro) & "|" & str(vldblFacturaCoaseguroMedico) & "|" & str(vldblFacturaCoaseguroAdicional) _
                      & "|" & str(vldblFacturaCopago) & "|" & vlstrFolioDocumento & "|" & txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") _
                      & "|" & str(vgintEmpresa) & "|" & CStr(dblExcedenteH) & "|" & CStr(dblDeducibleH) & "|" & CStr(dblCoaseguroH) & "|" & CStr(dblCoaseguroMH) & "|" & CStr(dblCoaseguroAH) & "|" & CStr(dblCopagoH) _
                      & "|" & str(ldblHonorariosAFacturar + ldblHonorariosFacturadosPac) & "|0|" & vldblFacturaCoaseguroMedicoPorCobrar & "|" & IIf(intCoaseguroPorFactura = 0, Val(Format(txtCantidadMaximaCO.Text, "")), 0) _
                      & "|" & IIf(dblExcedenteDeIVA > 0, str(dblExcedenteDeIVA), 0)
                      
       frsEjecuta_SP vgstrParametrosSP, "SP_PVUPDCONTROLASEGURADORAPACI"
    
       '-------------------------------------------------------------
       'Si se factura en base a los cargos seleccionados
       'Marca los cargos poniendo el folio de la factura del paciente
       ' Y la cantidad de paquetes que se tomaron en cuenta
       '-------------------------------------------------------------
       If blnCalcularEnBaseACargos Then
          ReDim aryPaquetesPaciente(0)
          vlstrAux = ""
      
          'Actualizar PvCargo.chrFolioFacturaPaciente
          vlstrSentencia = "Update PvCargo Set chrFolioFacturaPaciente = '" & Trim(vlstrFolioDocumento) & "'" & " Where intNumCargo In ("
          
          For vlintcontador = 1 To grdCargos.Rows - 1
              If grdCargos.TextMatrix(vlintcontador, 0) = "*" And _
                 grdCargos.TextMatrix(vlintcontador, clbytColumnaExclusion) <> "X" And _
                 grdCargos.TextMatrix(vlintcontador, cintColMarcadoParaFacturar) <> "1" Then
             
                 vlstrSentencia = vlstrSentencia & Trim(str(grdCargos.RowData(vlintcontador)))
                 vlstrAux = vlstrAux & "," & Trim(str(grdCargos.RowData(vlintcontador)))
                 If vlintcontador < grdCargos.Rows - 1 Then
                    vlstrSentencia = vlstrSentencia & ", "
                 End If
              
                 If Val(grdCargos.TextMatrix(vlintcontador, 30)) > 0 Then
                    If Not fblnExistePaquetePaciente(aryPaquetesPaciente, Val(grdCargos.TextMatrix(vlintcontador, 30))) Then
                           intPaquetes = UBound(aryPaquetesPaciente) + 1
                           ReDim Preserve aryPaquetesPaciente(intPaquetes)
                           aryPaquetesPaciente(intPaquetes).lngPaquete = Val(grdCargos.TextMatrix(vlintcontador, 30))
                           aryPaquetesPaciente(intPaquetes).intCantidad = Val(grdCargos.TextMatrix(vlintcontador, cintColCantidadPaquete))
                    End If
                 End If
              End If
          
              If vlintcontador Mod 50 = 0 And vlstrAux <> "" Then
                 vlstrSentencia = Trim(vlstrSentencia)
                 If Mid(vlstrSentencia, Len(vlstrSentencia), 1) = "," Then
                    vlstrSentencia = Mid(vlstrSentencia, 1, Len(vlstrSentencia) - 1) & ") "
                 Else
                    vlstrSentencia = vlstrSentencia & ")"
                 End If
              
                 pEjecutaSentencia (vlstrSentencia)
              
                 vlstrSentencia = ""
                 vlstrSentencia = "Update PvCargo Set chrFolioFacturaPaciente = '" & Trim(vlstrFolioDocumento) & "'" & " Where intNumCargo In ("
                 vlstrAux = ""
              End If
          Next vlintcontador
          vlintcontador = vlintcontador - 1
      
          If vlintcontador Mod 50 <> 0 And vlstrAux <> "" Then
             vlstrSentencia = Trim(vlstrSentencia)
             If Mid(vlstrSentencia, Len(vlstrSentencia), 1) = "," Then
                vlstrSentencia = Mid(vlstrSentencia, 1, Len(vlstrSentencia) - 1) & ") "
             Else
                vlstrSentencia = vlstrSentencia & ")"
             End If
             pEjecutaSentencia (vlstrSentencia)
          End If
      
          For vlintcontador = 1 To UBound(aryPaquetesPaciente)
              'Checar si esto va a aplicar
              'Guarda la cantidad de los paquetes que se tomaron en cuenta para hacer los cálculos
              vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & _
                                  IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & _
                                  aryPaquetesPaciente(vlintcontador).lngPaquete & "|" & _
                                  aryPaquetesPaciente(vlintcontador).intCantidad & "|" & _
                                  Trim(vlstrFolioDocumento)
              frsEjecuta_SP vgstrParametrosSP, "Sp_PvUpdPaquetesFacturaPacient"
          Next vlintcontador
    
       End If
    End If
     
    Dim strParametros As String
    
    strParametros = txtMovimientoPaciente.Text & "|" & IIf(optGrupoCuenta(0).Value, "'G'", IIf(OptTipoPaciente(0).Value, "'I'", "'E'")) & "|" & Trim(vlstrFolioDocumento)
    frsEjecuta_SP strParametros, "SP_PVINSPAQUETESFACTURADOS"
    
    pGrabarConceptosDesgloce

    '-------------------------------------------------------------------------------------------------
    'VALIDACIÓN DE LOS DATOS ANTES DE INSERTAR EN GNCOMPROBANTEFISCLADIGITAL EN EL PROCESO DE TIMBRADO
    '-------------------------------------------------------------------------------------------------
    If intTipoEmisionComprobante = 2 Then
        If Not fblnValidaDatosCFDCFDi(vllngConsecutivoFactura, "FA", IIf(intTipoCFDFactura = 1, True, False), CInt(strAnoAprobacion), strNumeroAprobacion) Then
           EntornoSIHO.ConeccionSIHO.RollbackTrans
           Exit Sub
        End If
    End If

'    EntornoSIHO.ConeccionSIHO.CommitTrans
'    EntornoSIHO.ConeccionSIHO.BeginTrans
                        
      '------------------------------
      'TIMBRADO FISCAL DE LA FACTURA
      '------------------------------
      
    strSentencia = "SELECT VCHRUTAXML, VCHRUTAPDF FROM CNEMPRESACONTABLE WHERE TNYCLAVEEMPRESA = " & vgintClaveEmpresaContable
    Set rsRutas = frsRegresaRs(strSentencia)
    strRutaPDFPrefactura = rsRutas!vchRutaPDF & "/" & vlstrFolioDocumento & ".pdf"
      
    If intTipoEmisionComprobante = 2 Then

9            frmFacturacion.Enabled = False
10           vlintEstadoTimbradoFBase = 0

12           If Not fblnGeneraComprobanteDigital(vllngConsecutivoFactura, "FA", IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), CInt(strAnoAprobacion), strNumeroAprobacion, IIf(intTipoCFDFactura = 1, True, False), True, 0, False) Then
            On Error Resume Next

15              vlintEstadoTimbradoFBase = vgIntBanderaTImbradoPendiente
            '-----------------------------------------------------------------------------------------------------------------------------------------------------
16              If vgIntBanderaTImbradoPendiente = 1 Then 'timbre pendiente

               '--------------------------------------------------------------------------------------------------------------------------------------------------
51                ElseIf vgIntBanderaTImbradoPendiente = 2 Or vgIntBanderaTImbradoPendiente = 3 Then 'errores controlados por el PAC o en el proceso, 100% seguro de que no se timbró

                   fblnImprimeComprobanteDigital vllngConsecutivoFactura, "FA", "PDF", vllngFormatoaUsar, IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), strRutaPDFPrefactura, True

90                 frmFacturacion.Enabled = True
            End If

         Else ' se timbró correctamente la factura

105             frmFacturacion.Enabled = True

182          End If
    End If

       '-------------------------
       'Impresión de factura
       '-------------------------
251       If intTipoEmisionComprobante = 2 Then
             fblnImprimeComprobanteDigital vllngConsecutivoFactura, "FA", "PDF", vllngFormatoaUsar, IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), strRutaPDFPrefactura, True
          
          '---------------------------------
          'ENVÍO DEL CFD DE LA(S) FACTURA(S)
          '---------------------------------
          'Verifica el parámetro de envío de CFDs por correo
          
            Screen.MousePointer = vbDefault
          
258          If fblnRevisaEnvioCorreo(vgintClaveEmpresaContable) And optTipoCliente(1).Value = False And vlintEstadoTimbradoFBase = 0 Then
                '¿Desea enviar por e-mail la información del comprobante fiscal digital?
259                If MsgBox(SIHOMsg(1090), vbYesNo + vbQuestion, "Mensaje") = vbYes Then
                        pEnviarCFD "FA", vllngConsecutivoFactura, CLng(vgintClaveEmpresaContable), Trim(vlRFCTemp), vglngNumeroEmpleado, Me, False, True
261                End If
262          End If

263       Else
264          pImprimeFormato vllngFormatoaUsar, vllngConsecutivoFactura
265       End If

    Screen.MousePointer = vbDefault

    'Nada de lo que hace este proceso de prefactura debe de quedar guardado así que se hace rollback
    EntornoSIHO.ConeccionSIHO.RollbackTrans
    
Exit Sub
NotificaError:
    If Err.Description <> "No hay ninguna transacción activa." Then Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":cmdPrefacturaPaciente_Click" & Erl()))
End Sub

Private Sub cmdRefrescar_Click()
    Dim lngClave As Long

    lngClave = txtMovimientoPaciente.Text
    
    Call Form_KeyPress(27)
    
    txtMovimientoPaciente.Text = lngClave
    Call txtMovimientoPaciente_KeyDown(13, 0)
    sstFacturacion.Tab = 1
End Sub

Private Sub cmdSepararCargosFarmacia_Click()
On Error GoTo NotificaError
    '-- Caso 16652
    '-- Proceso para separar cargos,
    '-- Para permitir que el hospital conserve su operación natural, pero que la facturación se divida en dos facturas:
    '-- 1.  Una factura por la razón social del hospital por servicios, materiales, anestésicos, etc. con IVA al 16%.
    '-- 2.  Una factura por la razón social de farmacia por medicamentos con IVA al 0%.
    
    Dim lintResultado As Long
    
    If cmdActualizarCargos.Enabled Then
        MsgBox SIHOMsg(624), vbExclamation, "Mensaje"
        cmdActualizarCargos.SetFocus
        Exit Sub
    End If
    
    If MsgBox("A continuación, se realizará el proceso de separación de cargos, este proceso no es reversible." & Chr(13) & "¿Está seguro que desea continuar?", vbYesNo + vbQuestion + vbDefaultButton2, "Mensaje") = vbNo Then
        Exit Sub
    End If
    
    vllngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
    If vllngPersonaGraba = 0 Then Exit Sub
    
    EntornoSIHO.ConeccionSIHO.BeginTrans
    
    lintResultado = flngRegistrarDevolucion                         '-- Registro de la devolución de los cargos a paciente
    If lintResultado = 0 Then lintResultado = flngEntradaAlmacen    '-- Registro de los movimientos en el kardex y contables de la devolución
    If lintResultado = 0 Then lintResultado = flngRegistrarOtraES   '-- Registro de otra entrada y otra salida incluyendo kardex y movimientos contables
    If lintResultado = 0 Then lintResultado = flngRegistrarCargoDirecto '-- Creación de los cargos directos en farmacia
    If lintResultado = 0 Then lintResultado = flngCancelaCargo      '-- Cancelación de los cargos en hospital requisicón consigna
    
    If lintResultado = 0 Then
        EntornoSIHO.ConeccionSIHO.CommitTrans
        pLlenaCargos
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cmdSepararCargosFarmacia_Click"))
    Unload Me
End Sub

Private Sub Form_Unload(Cancel As Integer)
    Set vgcolFacturasParciales = Nothing
    rsControlSeguro.Close
End Sub

Private Sub grdBuscaFacturas_Click()
  With grdBuscaFacturas
        If .MouseCol = 0 And .MouseRow > 0 Then
            If .TextMatrix(.Row, 13) = "1" Then
                If .TextMatrix(.Row, 0) = "*" Then
                   If vllngSeleccPendienteTimbre > 0 Then
                      vllngSeleccPendienteTimbre = vllngSeleccPendienteTimbre - 1
                   End If
                   .TextMatrix(.Row, 0) = ""
                Else
                   vllngSeleccPendienteTimbre = vllngSeleccPendienteTimbre + 1
                   .TextMatrix(.Row, 0) = "*"
                End If
                Me.cmdConfirmartimbre.Enabled = vllngSeleccPendienteTimbre > 0
            Else
                If vgblnNuevoEsquemaCancelacion Then
                    If (.TextMatrix(.Row, 12) <> "NP" And .TextMatrix(.Row, 12) <> "CR") Then
                        If .TextMatrix(.Row, 0) = "*" Then
                            If vllngSeleccionadas > 0 Then
                               vllngSeleccionadas = vllngSeleccionadas - 1
                            End If
                            .TextMatrix(.Row, 0) = ""
                        Else
                            vllngSeleccionadas = vllngSeleccionadas + 1
                            .TextMatrix(.Row, 0) = "*"
                        End If
                        Me.cmdCancelaFacturasSAT.Enabled = vllngSeleccionadas > 0
                    End If
                Else
                    If (.TextMatrix(.Row, 12) > "0") Then
                        If .TextMatrix(.Row, 0) = "*" Then
                            If vllngSeleccionadas > 0 Then
                               vllngSeleccionadas = vllngSeleccionadas - 1
                            End If
                            .TextMatrix(.Row, 0) = ""
                        Else
                            vllngSeleccionadas = vllngSeleccionadas + 1
                            .TextMatrix(.Row, 0) = "*"
                        End If
                        Me.cmdCancelaFacturasSAT.Enabled = vllngSeleccionadas > 0
                    End If
                End If
            End If
        End If
  End With
End Sub
Private Sub grdBuscaFacturas_KeyPress(KeyAscii As Integer)
    If KeyAscii = 13 Then grdBuscaFacturas_DblClick
End Sub
Private Sub cboPaquetes_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then cboPaquetes_Validate False
End Sub
Private Sub cboPaquetes_LostFocus()
    cboPaquetes.Visible = False
End Sub

'Private Sub grdCargos_SelChange()
'
'End Sub

Private Sub grdPagos_DblClick()
    Dim vlIntCont As Integer
    'Total pagos
    Dim vldblTotalPagos As Double
   
    Dim vlintContadorPagos As Integer
    vldblTotalPagos = 0
    With grdPagos
'   Si es sobre el encabezado, entonces selecciona / deselecciona todos los renglones
        If .MouseRow = 0 Then
            'Modificamos cada elemento del grid
            For vlIntCont = 1 To .Rows - 1
                If .TextMatrix(0, 0) = "*" Then
                    .TextMatrix(vlIntCont, 0) = IIf(.TextMatrix(vlIntCont, 0) = "F", "F", "")
                Else
                    .TextMatrix(vlIntCont, 0) = IIf(.TextMatrix(vlIntCont, 0) = "F", "F", "*")
                End If
            Next vlIntCont
            'Modificamos el encabezado
            If .TextMatrix(0, 0) = "*" Then
                .TextMatrix(0, 0) = ""
            Else
                  .TextMatrix(0, 0) = "*"
            End If
        Else
            'Seleccion / deseleccion individual
            If .TextMatrix(.Row, 0) = "*" Then
                .TextMatrix(.Row, 0) = ""
            Else
                .TextMatrix(.Row, 0) = IIf(.TextMatrix(.Row, 0) = "F", "F", "*")
            End If
        End If
    End With
    
      For vlintContadorPagos = 1 To grdPagos.Rows - 1
        If grdPagos.TextMatrix(vlintContadorPagos, 0) = "*" Then
            vldblTotalPagos = vldblTotalPagos + CDbl(Val(IIf(grdPagos.TextMatrix(vlintContadorPagos, 5) = "Pesos", 1, grdPagos.TextMatrix(vlintContadorPagos, 8)) * grdPagos.TextMatrix(vlintContadorPagos, cintColCantidadPago)))
        End If
    Next
    
    txtPagos.Text = Format(vldblTotalPagos, "$ ###,###,###,##0.00")
    txtTotal.Text = txtTotalFactura.Text
    If Not optMuestraCargos(1).Value Then
        '------------------------------------------------------
        ' No le quito los pagos cuando veo solo los excluidos
        ' porque los pagos solo son del paciente particular
        '-------------------------------------------------------
        txtTotal.Text = Format(Val(Format(txtTotal.Text, "")) - Val(Format(txtPagos.Text, "")), "$ ###,###,###,##0.00")
    End If
End Sub

Private Function ConvertirDolaresACantidad(pesos As Double) As Double
  
  Dim vlintContadorPagos As Integer
  Dim vldblTotalPagos As Double
  Dim dblTipoCambio As Double
  
   dblTipoCambio = fdblTipoCambio(fdtmServerFecha, "V")
       For vlintContadorPagos = 1 To grdPagos.Rows - 1
        If grdPagos.TextMatrix(vlintContadorPagos, 0) = "*" Then
        'se convierte primero los pesos a dolares usando la conversion del dia hoy
            vldblTotalPagos = vldblTotalPagos + CDbl(Val(IIf(grdPagos.TextMatrix(vlintContadorPagos, 5) = "Pesos", (grdPagos.TextMatrix(vlintContadorPagos, cintColCantidadPago)) / dblTipoCambio, 0)))
        End If
    Next
      For vlintContadorPagos = 1 To grdPagos.Rows - 1
        If grdPagos.TextMatrix(vlintContadorPagos, 0) = "*" Then
        'se convierte despues los dolares con el tipo de cambio que fue hecho
            vldblTotalPagos = vldblTotalPagos + CDbl(Val(IIf(grdPagos.TextMatrix(vlintContadorPagos, 5) = "Dolares", (grdPagos.TextMatrix(vlintContadorPagos, cintColCantidadPago)), 0)))
        End If
    Next
    ConvertirDolaresACantidad = vldblTotalPagos
    End Function
    
Private Sub Label1_Click()

End Sub

Private Sub lblMensajeReqAut_Click(Index As Integer)
     If lblMensajeReqAut(36).Enabled And lblMensajeReqAut(36).Visible Then
        If optGrupoCuenta(0).Value Then
            frmReqPendientesGrupo.Show vbModal, Me
        Else
            MsgBox "Requisiciones pendientes de surtir" & vbCrLf & vstrRequisicion, vbOKOnly + vbInformation, "Mensaje"
        End If
    End If
End Sub

Private Sub lstUrgencias_DblClick()
    If lstUrgencias.ListIndex = 0 Then
        grdCargos.TextMatrix(grdCargos.Row, clbytColumnaUrgente) = ""
    Else
        grdCargos.TextMatrix(grdCargos.Row, clbytColumnaUrgente) = RTrim(Mid(Trim(lstUrgencias.List(lstUrgencias.ListIndex)), 1, Len(Trim(lstUrgencias.List(lstUrgencias.ListIndex))) - 1))
    End If
    grdCargos.Col = clbytColumnaUrgente - 1
    grdCargos.SetFocus
End Sub

Private Sub lstUrgencias_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then lstUrgencias_DblClick
End Sub

Private Sub pCargaUrgencias(lngNumeroRegistro As Long)
    Dim vlstrSentencia As String
    Dim rs As New ADODB.Recordset
    Dim vlintcontador As Integer
    
    lstUrgencias.Clear
    vlstrSentencia = "Select distinct 1 Campo, ltrim(CAST(mnyPorcentaje as char(50))) || ' %' Campo2, mnyPorcentaje Incremento from pvHorarioEmpresa " & _
                     " Where mnyPorcentaje > 0 and (intCveCargo = -1 or intcveCargo = " & Trim(grdCargos.TextMatrix(lngNumeroRegistro, 17)) & ")" & _
                     " and (intDiaSemana = " & Trim(str(Weekday(CDate(grdCargos.TextMatrix(lngNumeroRegistro, 10))))) & " or " & _
                     " (intHoraInicio+intDuracion)/24 = " & Trim(str(Weekday(CDate(grdCargos.TextMatrix(lngNumeroRegistro, 10))))) & ")" & _
                     " and chrTipoCargo = '" & Trim(grdCargos.TextMatrix(lngNumeroRegistro, 1)) & "'"
    ' Que la empresa sea Cero o que el cargo sea Excluido(18)
    If vgintEmpresa = 0 Or grdCargos.TextMatrix(lngNumeroRegistro, 18) = "X" Then
        vlstrSentencia = vlstrSentencia & " and chrTipo = 'TP' " & _
                            " and intTipoPacienteInterno = " & Trim(str(vgintTipoPaciente))
    Else 'Cuando es empresa
        vlstrSentencia = vlstrSentencia & " and ((chrTipo = 'EM' " & _
                            " and intCveEmpresa = " & Trim(str(vgintEmpresa)) & ")" & _
                            " or (chrTipo = 'TP' and intTipoPacienteInterno =" & Trim(str(vgintTipoPaciente)) & "))"
    End If
    Set rs = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenForwardOnly)
    If rs.RecordCount < 2 And rs.RecordCount > 0 Then
        If Trim(grdCargos.TextMatrix(grdCargos.Row, clbytColumnaUrgente)) <> "" Then
            grdCargos.TextMatrix(grdCargos.Row, clbytColumnaUrgente) = ""
        Else
            grdCargos.TextMatrix(grdCargos.Row, clbytColumnaUrgente) = Trim(str(rs!incremento))
        End If
    ElseIf rs.RecordCount = 0 Then
        grdCargos.TextMatrix(grdCargos.Row, clbytColumnaUrgente) = ""
    ElseIf rs.RecordCount > 0 Then
        pLlenarListRs lstUrgencias, rs, 0, 1
        rs.Close
        lstUrgencias.AddItem "Sin urgencia", 0
        lstUrgencias.ItemData(0) = 0
        freListaUrgencias.Width = 5
        freListaUrgencias.Top = 2500
        freListaUrgencias.Left = 8000
        freListaUrgencias.Visible = True
        For vlintcontador = 8000 To 6065 Step -5
            If freListaUrgencias.Width < 1950 Then
                freListaUrgencias.Width = freListaUrgencias.Width + 5
            End If
            freListaUrgencias.Left = vlintcontador
        Next
        lstUrgencias.ListIndex = 0
        lstUrgencias.SetFocus
    End If
    
    cmdActualizarCargos.Enabled = True
End Sub

Private Sub pCargaPaquetes()
    Dim vlstrSentencia As String
    Dim rs As New ADODB.Recordset
    Dim vlintcontador As Integer
    Dim rsCargos As ADODB.Recordset
    Dim vgstrParametrosSP As String

    cboPaquetes.Clear
    '18084
    claveCarta = 0
    If cboCartaAutorizacion.ListIndex > 0 Then
         claveCarta = cboCartaAutorizacion.ItemData(cboCartaAutorizacion.ListIndex)
    End If
    If optGrupoCuenta(0).Value Then
        vgstrParametrosSP = txtMovimientoPaciente.Text & "|X|" & IIf(chkIncluyeCargosFacturados.Value = 1, 2, 0) & "|-1|" & IIf(optGrupoCuenta(0).Value, "G", "C") & IIf(optGrupoCuenta(0).Value, "|S", "|N") & "|" & IIf(lblnCambiaNombreCargos, 1, 0) '& "|" & claveCarta
    Else
        vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & IIf(chkIncluyeCargosFacturados.Value = 1, 2, 0) & "|-1|C|N|" & IIf(lblnCambiaNombreCargos, 1, 0) '& "|" & claveCarta
    End If
    Set rsCargos = frsEjecuta_SP(vgstrParametrosSP, "SP_PVSELCARGOSPACIENTE")
    
    
    If optGrupoCuenta(0).Value Then
        vlstrSentencia = "SELECT pvPaquete.intNumPaquete, Trim(pvPaquete.chrDescripcion) || ' (' || cast(FN_PVSELPAQUETESINFACTURAR (" & Trim(str(txtMovimientoPaciente.Text)) & "," & "" _
                         & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & "," & " pvPaquetePaciente.INTNUMPAQUETE) as varchar2(10)) || ')' Descripcion " & _
                         " FROM pvPaquetePaciente " & _
                         " INNER JOIN pvPaquete ON pvPaquete.INTNUMPAQUETE = pvPaquetePaciente.INTNUMPAQUETE " & _
                         " WHERE pvPaquetePaciente.intMovPaciente = " & Trim(str(txtMovimientoPaciente.Text)) & _
                         " AND pvPaquetePaciente.chrTipoPaciente = " & IIf(OptTipoPaciente(0).Value, "'I'", "'E'")
    Else
        vlstrSentencia = "SELECT pvPaquete.intNumPaquete, Trim(pvPaquete.chrDescripcion) || ' (' || cast(FN_PVSELPAQUETESINFACTURAR (" & Trim(str(txtMovimientoPaciente.Text)) & "," & "" _
                         & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & "," & " pvPaquetePaciente.INTNUMPAQUETE) as varchar2(10)) || ')' Descripcion " & _
                         " FROM pvPaquetePaciente " & _
                         " INNER JOIN pvPaquete ON pvPaquete.INTNUMPAQUETE = pvPaquetePaciente.INTNUMPAQUETE " & _
                         " WHERE pvPaquetePaciente.intMovPaciente = " & Trim(str(txtMovimientoPaciente.Text)) & _
                         " AND pvPaquetePaciente.chrTipoPaciente = " & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & _
                         " AND NVL(FN_PVSELPAQUETESINFACTURAR (" & Trim(str(txtMovimientoPaciente.Text)) & "," & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & ", pvPaquetePaciente.INTNUMPAQUETE),0) <> 0 " & _
                         " and pvPaquetePaciente.INTNUMPAQUETE NOT IN (SELECT DISTINCT PVPAQUETEPACIENTE.INTNUMPAQUETE " & _
                                                                        " From PVDETALLEFACTURACONSOLID " & _
                                                                            " INNER JOIN PVFACTURACIONCONSOLIDADA ON PVFACTURACIONCONSOLIDADA.INTCVEGRUPO = PVDETALLEFACTURACONSOLID.INTCVEGRUPO " & _
                                                                                " AND PVFACTURACIONCONSOLIDADA.CHRFOLIOFACTURA IS NULL " & _
                                                                            " INNER JOIN PVPAQUETEPACIENTE ON PVDETALLEFACTURACONSOLID.INTMOVPACIENTE = PVPAQUETEPACIENTE.INTMOVPACIENTE " & _
                                                                                " AND PVDETALLEFACTURACONSOLID.CHRTIPOPACIENTE = PVPAQUETEPACIENTE.CHRTIPOPACIENTE " & _
                                                                            " INNER JOIN PVCARGO ON PVCARGO.INTMOVPACIENTE = PVPAQUETEPACIENTE.INTMOVPACIENTE " & _
                                                                                " AND PVCARGO.CHRTIPOPACIENTE = PVPAQUETEPACIENTE.CHRTIPOPACIENTE " & _
                                                                                " AND PVCARGO.INTCVEGRUPO = PVDETALLEFACTURACONSOLID.INTCVEGRUPO " & _
                                                                                " AND PVCARGO.INTNUMPAQUETE = PVPAQUETEPACIENTE.INTNUMPAQUETE " & _
                                                                        " Where PVDETALLEFACTURACONSOLID.CHRTIPOPACIENTE = " & IIf(OptTipoPaciente(0).Value, " 'I'", "'E'") & _
                                                                            " AND PVDETALLEFACTURACONSOLID.INTMOVPACIENTE = " & Trim(str(txtMovimientoPaciente.Text)) & ")"
    End If
                     
    Set rs = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenForwardOnly)
    If rs.RecordCount < 2 And rs.RecordCount > 0 Then
        '-------------------------------------------'
        ' Cuando nomas hay un solo paquete asignado '
        '-------------------------------------------'
        If Val(grdCargos.TextMatrix(grdCargos.Row, 30)) <> 0 Then
            grdCargos.TextMatrix(grdCargos.Row, 29) = "" 'Descripcion del paquete
            grdCargos.TextMatrix(grdCargos.Row, 30) = 0  'Clave del paquete
            grdCargos.TextMatrix(grdCargos.Row, 31) = "" 'Cantidad de cargos incluidos en el paquete
            grdCargos.TextMatrix(grdCargos.Row, 32) = "" 'Cantidad de cargos incluidos en el paquete pero no en la definicion inicial
            grdCargos.TextMatrix(grdCargos.Row, 54) = "" 'Cantidad de cargos extras
            txtCantidadPaquete.Text = ""
        Else
        ' Colocar cantidades en paquete
            If rsCargos.RecordCount > 0 Then
                Do While Not rsCargos.EOF
                    If Trim(rsCargos!IntNumCargo) = Trim(grdCargos.RowData(grdCargos.Row)) Then
                        grdCargos.TextMatrix(grdCargos.Row, 31) = IIf(rsCargos!CantidadPaquete = 0, 0, rsCargos!CantidadPaquete)
                        grdCargos.TextMatrix(grdCargos.Row, 32) = IIf(rsCargos!CantidadExtraPaquete = 0, 0, rsCargos!CantidadExtraPaquete)
                        grdCargos.TextMatrix(grdCargos.Row, 54) = Val(grdCargos.TextMatrix(grdCargos.Row, 4)) - (Val(grdCargos.TextMatrix(grdCargos.Row, 31)) + Val(grdCargos.TextMatrix(grdCargos.Row, 32)))
                        txtCantidadPaquete.Text = IIf(rsCargos!CantidadPaquete = 0, "", rsCargos!CantidadPaquete)
                    End If
                rsCargos.MoveNext
                Loop
            End If
            rsCargos.Close
            grdCargos.TextMatrix(grdCargos.Row, 29) = Trim(rs!Descripcion) 'Descripcion del paquete
            grdCargos.TextMatrix(grdCargos.Row, 30) = rs!intnumpaquete 'Clave del paquete
        End If
        
        grdCargos.TextMatrix(grdCargos.Row, 33) = "*" 'Estatus para identificar cuando un registro cambió en los paquetes
        grdCargos.TextMatrix(grdCargos.Row, 55) = ""  'Limpia la columna del excedente en grupo de cargo
        cmdActualizarCargos.Enabled = True
        cmdSelQuita(2).Enabled = False
            
    ElseIf rs.RecordCount = 0 Then
        '----------------------------------'
        ' Cuando no hay paquetes asignados '
        '----------------------------------'
        grdCargos.TextMatrix(grdCargos.Row, 29) = "" 'Descripcion del paquete
        grdCargos.TextMatrix(grdCargos.Row, 30) = 0 'Clave del paquete
        grdCargos.TextMatrix(grdCargos.Row, 31) = "" 'Cantidad de cargos incluidos en el paquete
        grdCargos.TextMatrix(grdCargos.Row, 32) = "" 'Cantidad de cargos incluidos en el paquete pero no en la definicion inicial
        grdCargos.TextMatrix(grdCargos.Row, 54) = "" 'Cantidad de cargos extras
    
    ElseIf rs.RecordCount > 0 Then
        '----------------------------------------------------------------'
        ' Cuando hay mas de un paquete asignado, hay que llenar la lista '
        '----------------------------------------------------------------'
        grdCargos.RowHeight(grdCargos.Row) = cboPaquetes.Height
        If cboPaquetes.ListCount = 0 Then
            pLlenarCboRs cboPaquetes, rs, 0, 1
            cboPaquetes.AddItem "Sin paquete", 0
            cboPaquetes.ItemData(0) = 0
            cboPaquetes.ListIndex = 0
        End If
        If Val(grdCargos.TextMatrix(grdCargos.Row, 30)) > 0 Then
            cboPaquetes.ListIndex = flngLocalizaCbo(cboPaquetes, grdCargos.TextMatrix(grdCargos.Row, 30))
        End If
        rs.Close
        cboPaquetes.Top = grdCargos.CellTop + 52
        cboPaquetes.Left = grdCargos.CellLeft + 10
        cboPaquetes.Width = grdCargos.CellWidth + 10
        cboPaquetes.Visible = True
        frmFacturacion.Refresh
        cboPaquetes.SetFocus
    End If
End Sub

Private Sub cmdActualizarCargos_Click()
    Dim vlstrBloqueo As String
    Dim vlstrCargos As String
    Dim vllngContador As Long
    Dim vllngPersonaGraba As Long
    Dim vlstrSentencia As String
    Dim blnExcluido As Boolean 'Para idendificar si el cambio fue por excluir o no un cargo
    Dim vlLngCont As Long
    Dim blnUPDCostoDescuento As Boolean
    
    '-------------------------------------
    ' Persona que graba
    '-------------------------------------
    vllngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
    If vllngPersonaGraba <> 0 Then
        vlstrBloqueo = fstrBloqueaCuenta(Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"))
        If vlstrBloqueo = "L" Then
            freTrabajando.Top = 2500
            lblTextoTrabajando.Caption = " Actualizando cargos, por favor espere..."
            freTrabajando.Visible = True
            frmFacturacion.Refresh
            vlstrCargos = ""
            blnUPDCostoDescuento = fblnUPDCostoDescuento
            
            For vllngContador = 1 To grdCargos.Rows - 1
                vlstrSentencia = ""
                '---------------------------'
                ' -- Exclusión de Cargos -- '
                '---------------------------'
                ' ¿es igual la columna 18 a la 21? (para el performance)
                blnExcluido = Trim(grdCargos.TextMatrix(vllngContador, 18)) <> Trim(grdCargos.TextMatrix(vllngContador, 21))
                If blnExcluido Then
                    vlstrSentencia = "Update PvCargo set "
                    vlstrSentencia = vlstrSentencia & " bitExcluido = " & IIf(Trim(grdCargos.TextMatrix(vllngContador, 21)) = "", "0", "1")
                End If
                '-------------------------------------'
                ' -- Actualización de los paquetes -- '
                '-------------------------------------'
                ' ¿Este Registro tiene estatus de cambio de paquete (col. 33)? (para el performance)
                If Trim(grdCargos.TextMatrix(vllngContador, 33)) = "*" Then
                    If vlstrSentencia = "" Then
                        vlstrSentencia = "Update PvCargo set "
                    Else
                        vlstrSentencia = vlstrSentencia & ", "
                    End If
                    
                    If Val(grdCargos.TextMatrix(vllngContador, 31)) = 0 And Val(grdCargos.TextMatrix(vllngContador, 32)) = 0 Then
                        vlstrSentencia = vlstrSentencia & " intNumPaquete= 0"
                        vlstrSentencia = vlstrSentencia & ", intCantidadPaquete= 0"
                        vlstrSentencia = vlstrSentencia & ", intCantidadExtraPaquete= 0"
                    Else
                        vlstrSentencia = vlstrSentencia & " intNumPaquete= " & Val(grdCargos.TextMatrix(vllngContador, 30))
                        vlstrSentencia = vlstrSentencia & ", intCantidadPaquete= " & Val(grdCargos.TextMatrix(vllngContador, 31))
                        vlstrSentencia = vlstrSentencia & ", intCantidadExtraPaquete= " & Val(grdCargos.TextMatrix(vllngContador, 32))
                    End If
                    
                    vlstrCargos = IIf(vlstrCargos = "", Trim(str(grdCargos.RowData(vllngContador))), vlstrCargos & "," & Trim(str(grdCargos.RowData(vllngContador))))
                End If
                
                '------------------------------------------------------'
                ' -- Cargos con Urgencia para incremento de precios -- '
                '------------------------------------------------------'
                ' ¿es igual la columna 22 a la 23? (para el performance)
                If Val(Trim(grdCargos.TextMatrix(vllngContador, 22))) <> Val(Trim(grdCargos.TextMatrix(vllngContador, clbytColumnaUrgente))) Then
                    If vlstrSentencia = "" Then
                        vlstrSentencia = "Update PvCargo set "
                    Else
                        vlstrSentencia = vlstrSentencia & ", "
                    End If
                    vlstrSentencia = vlstrSentencia & " mnyIncrementoHorario = " & Trim(str(Val(grdCargos.TextMatrix(vllngContador, clbytColumnaUrgente)) / 100)) & _
                                ", mnyPrecio = (mnyPrecio/(1+isnull(mnyIncrementoHorario,0))) * (1+ " & Trim(str(Val(grdCargos.TextMatrix(vllngContador, 23)) / 100)) & ")"
                End If
                '18084
                If Trim(grdCargos.TextMatrix(vllngContador, cintColCveCarta)) <> "" Then
                    If vlstrSentencia = "" Then
                        vlstrSentencia = "Update PvCargo set "
                    Else
                        vlstrSentencia = vlstrSentencia & ", "
                    End If
                    vlstrSentencia = vlstrSentencia & " intcvecarta = " & IIf(Val(Trim(grdCargos.TextMatrix(vllngContador, cintColCveCarta))) > 0, Val(Trim(grdCargos.TextMatrix(vllngContador, cintColCveCarta))), "Null")
                        
                End If
                
                If vlstrSentencia <> "" Then
                    vlstrSentencia = vlstrSentencia & " where intNumCargo=" & str(grdCargos.RowData(vllngContador))
                    pEjecutaSentencia vlstrSentencia
                End If
                
                If blnExcluido And blnUPDCostoDescuento Then
                    vgstrParametrosSP = _
                                        Trim(txtMovimientoPaciente.Text) & _
                                        "|" & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & _
                                        "|" & Trim(txtMovimientoPaciente.Text) & _
                                        "|" & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & _
                                        "|" & Trim(str(vgintTipoPaciente)) & _
                                        "|" & Trim(str(vgintEmpresa)) & _
                                        "|" & Trim(str(grdCargos.RowData(vllngContador))) & _
                                        "|" & "1" & _
                                        "|" & "0" & _
                                        "|" & "0" & _
                                        "|" & "0" & _
                                        "|" & "0" & _
                                        "|" & "0" & _
                                        "|" & str(vllngPersonaGraba) & _
                                        "|" & str(vgintNumeroDepartamento) & _
                                        "|" & "0"
                    frsEjecuta_SP vgstrParametrosSP, "sp_PvUpdTrasladoCargos", True
                End If
                '----------------------------------------'
                ' Campo de estatus de cambio en paquetes '
                '----------------------------------------'
                grdCargos.TextMatrix(vllngContador, 33) = ""
            Next vllngContador
            
            If vlstrCargos <> "" Then
                frsEjecuta_SP vlstrCargos, "SP_PVUPDCARGOPAQUETE", True
            End If
            
            pLiberaCuenta
            '--------------------------------
            ' Quito Letrero
            '--------------------------------
            freTrabajando.Visible = False
            frmFacturacion.Refresh
            
            'Si es aseguradora Consultar y Cargar control
            vglngPaqueteAddenda = 0
            pLlenaCargos
            
            'Aplica 100% de descuento a los cargos NO excluidos para pacientes de tipo SOCIO
            If vgSocio = True Then
                For vlLngCont = 1 To grdCargos.Rows - 1
                    If grdCargos.TextMatrix(vlLngCont, 18) <> "X" Then
                        pActualizaDescuentos 100, vlLngCont, 1
                    End If
                Next
                
                'Actualiza los totales
                pTotales
            End If
            
            cmdActualizarCargos.Enabled = False
            cmdSelQuita(2).Enabled = True
        Else
            If vlstrBloqueo = "F" Then
                'La cuenta ya ha sido facturada
                MsgBox SIHOMsg(299), vbOKOnly + vbInformation, "Mensaje"
            Else
                If vlstrBloqueo = "O" Then
                    'La cuenta esta siendo usada por otra persona, intente de nuevo.
                    MsgBox SIHOMsg(300), vbOKOnly + vbInformation, "Mensaje"
                End If
            End If
        End If
    End If
End Sub

Private Sub pCargaBusqueda(vlStrTipoPaciente As String, vllngCuenta As Long)
    Dim vlintcontador As Integer
    Dim vlstrSentencia As String
    Dim rs As New ADODB.Recordset
    Dim vlstrFechaInicial As String
    Dim vlstrFechaFinal As String
    Dim rsFoiosRelacionados As ADODB.Recordset
    Dim lngAux As Long
    Dim lngAncho As Long
    Dim vlstrFolio As String
    Dim vlBackColor As Variant
    Dim vlForeColor As Variant
    
    ' Mensajito de Consulta de facturas
    freTrabajando.Top = 2500
    lblTextoTrabajando.Caption = "Consultando facturas, por favor espere..."
    freTrabajando.Visible = True
    frmFacturacion.Refresh
    
    grdBuscaFacturas.Redraw = False
    grdBuscaFacturas.Clear
    grdBuscaFacturas.Cols = 1
    grdBuscaFacturas.Rows = 2
    grdBuscaFacturas.RowData(1) = -1
    pConfiguraGridBusqueda
    vllngSeleccionadas = 0 'son seleccionadas para cancelacion ante la sat
    vllngSeleccPendienteTimbre = 0 'son seleccionadas pendientes de timbre fiscal
    
    lngAncho = 1000
    lngAux = 0
        
    If optTipoBusqueda(1).Value Or optTipoBusqueda(2) Then
       vlstrFechaInicial = fdtmServerFecha
       vlstrFechaFinal = fdtmServerFecha
       vlstrFolio = TxtFolio
       If optTipoBusqueda(1).Value Then
              If (Not optMostrarSolo(0).Value) Then
                  vlstrFolio = ""
              Else
                  If vlbNombre Then
                      vlstrFolio = "-1"
                      vlbNombre = False
                  Else
                      vlstrFolio = TxtFolio
                      vlbNombre = True
                  End If
              End If
       End If
    Else
       vlstrFechaInicial = mskFechaInicial.Text
       vlstrFechaFinal = mskFechaFinal.Text
       vlstrFolio = "-1"
       
       If Not IsDate(mskFechaInicial.Text) Or Not IsDate(mskFechaFinal.Text) Then
           MsgBox SIHOMsg(1309), vbExclamation, "Mensaje"
           grdBuscaFacturas.Redraw = True
           freTrabajando.Visible = False
           Exit Sub
       End If
    End If
    If optTipoBusqueda(1).Value Then vlstrFolio = -1

    vgstrParametrosSP = _
    IIf(optTipoBusqueda(2).Value = 0, "-1", vlstrFolio) & _
    "|" & IIf(Not optMostrarSolo(0).Value, fstrFechaSQL("01/01/2010"), fstrFechaSQL(vlstrFechaInicial)) & _
    "|" & IIf(Not optMostrarSolo(0).Value, fstrFechaSQL(fdtmServerFecha), fstrFechaSQL(vlstrFechaFinal)) & _
    "|" & IIf(Not optMostrarSolo(0).Value, 1, IIf(optTipoBusqueda(0).Value, 1, 0)) & _
    "|-1" & _
    "|" & IIf(Not optMostrarSolo(0).Value, "A", vlStrTipoPaciente) & _
    "|" & IIf(Not optMostrarSolo(0).Value, "-1", CStr(vllngCuenta)) & _
    "|" & CStr(vgintNumeroDepartamento) & _
    "|" & vgintClaveEmpresaContable & _
    "|" & IIf(optMostrarSolo(2).Value, 1, 0) & _
    "|" & IIf(optMostrarSolo(1).Value, 1, 0) & _
    "|" & IIf(optMostrarSolo(3).Value, 1, 0) & _
    "|" & IIf(optMostrarSolo(4).Value, 1, 0)
    
''''''    vgstrParametrosSP = _
''''''    IIf((ChkFacturasCancelaNoSAT.Value = vbChecked Or Me.chkPendientestimbre.Value = vbChecked), "-1", vlstrFolio) & _
''''''    "|" & IIf((ChkFacturasCancelaNoSAT.Value = vbChecked Or Me.chkPendientestimbre.Value = vbChecked), fstrFechaSQL("01/01/2010"), fstrFechaSQL(vlstrFechaInicial)) & _
''''''    "|" & IIf((ChkFacturasCancelaNoSAT.Value = vbChecked Or Me.chkPendientestimbre.Value = vbChecked), fstrFechaSQL(fdtmServerFecha), fstrFechaSQL(vlstrFechaFinal)) & _
''''''    "|" & IIf((ChkFacturasCancelaNoSAT.Value = vbChecked Or Me.chkPendientestimbre.Value = vbChecked), 1, IIf(optTipoBusqueda(0).Value, 1, 0)) & _
''''''    "|-1" & _
''''''    "|" & IIf((ChkFacturasCancelaNoSAT.Value = vbChecked Or Me.chkPendientestimbre.Value = vbChecked), "A", vlStrTipoPaciente) & _
''''''    "|" & IIf((ChkFacturasCancelaNoSAT.Value = vbChecked Or Me.chkPendientestimbre.Value = vbChecked), "-1", CStr(vllngCuenta)) & _
''''''    "|" & CStr(vgintNumeroDepartamento) & _
''''''    "|" & vgintClaveEmpresaContable & _
''''''    "|" & IIf(ChkFacturasCancelaNoSAT.Value = vbChecked, 1, 0) & _
''''''    "|" & IIf(chkPendientestimbre.Value = vbChecked, 1, 0)
''''''
''''''    '---------------------------------------------------------------------------------------------------------------------------------
    
 
    
    
    Set rs = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelFacturaFiltro_NE")
    
    Do While Not rs.EOF
        With grdBuscaFacturas
            If .RowData(1) <> -1 Then
                 .Rows = .Rows + 1
                 .Row = .Rows - 1
            End If
            .RowData(.Row) = rs!IdFactura
            If vgblnNuevoEsquemaCancelacion Then
                '|.TextMatrix(.Row, 0) = IIf(rs!PendienteTimbreFiscal = 1, "*", "")
                .TextMatrix(.Row, 0) = IIf(rs!PendienteTimbreFiscal = 1 Or (rs!PendienteCancelarSAT_NE <> "NP" And rs!PendienteCancelarSAT_NE <> "CR"), "*", "")
            Else
                .TextMatrix(.Row, 0) = IIf(rs!PendienteTimbreFiscal = 1 Or rs!PendienteCancelarSat > 0, "*", "")
            End If
            .TextMatrix(.Row, 1) = rs!Folio
            'ajustar la columna de los folios-------------
             PB.Font = .CellFontName
             PB.FontSize = .CellFontSize
             lngAux = PB.TextWidth(.TextMatrix(.Row, 1))
             If lngAux > lngAncho Then
                lngAncho = lngAux
             End If
             '-----------------------------------------------------------------------------------------------
            .TextMatrix(.Row, 2) = IIf(IsNull(rs!Paciente), " ", rs!Paciente)
            .TextMatrix(.Row, 3) = IIf(IsNull(rs!RazonSocial), " ", Trim(rs!RazonSocial))
            .TextMatrix(.Row, 4) = rs!fecha
            .TextMatrix(.Row, 5) = FormatCurrency(rs!TotalFactura, 2)
            .TextMatrix(.Row, 6) = FormatCurrency(rs!IVA, 2)
            .TextMatrix(.Row, 7) = FormatCurrency(rs!TotalFactura - rs!IVA, 2)
            .TextMatrix(.Row, 8) = rs!Moneda
            .TextMatrix(.Row, 9) = IIf(IsNull(rs!PersonaFacturo), " ", rs!PersonaFacturo)
            .TextMatrix(.Row, 10) = IIf(IsNull(rs!PersonaCancelo), " ", rs!PersonaCancelo)
            .TextMatrix(.Row, 11) = rs!Folio
            
            If vgblnNuevoEsquemaCancelacion Then
                .TextMatrix(.Row, 12) = rs!PendienteCancelarSAT_NE
            Else
                .TextMatrix(.Row, 12) = rs!PendienteCancelarSat
            End If
            .TextMatrix(.Row, 13) = rs!PendienteTimbreFiscal
            
            If vgblnNuevoEsquemaCancelacion Then
                If (.TextMatrix(.Row, 12) <> "NP" And .TextMatrix(.Row, 12) <> "CR") Then vllngSeleccionadas = vllngSeleccionadas + 1
            Else
                If rs!PendienteCancelarSat > 0 And rs!chrEstatus = "C" Then vllngSeleccionadas = vllngSeleccionadas + 1
            End If
            
            If rs!PendienteTimbreFiscal > 0 Then vllngSeleccPendienteTimbre = vllngSeleccPendienteTimbre + 1
            
            .Col = 0
            If rs!chrEstatus = "C" Then
                If vgblnNuevoEsquemaCancelacion Then
                    Select Case rs!PendienteCancelarSAT_NE
                        Case "PC", "XX"
                            vlForeColor = &HFF&    '| Rojo
                            vlBackColor = &HC0E0FF '| Naranja
                        Case "PA"
                            vlForeColor = &HFFFFFF '| Blanco
                            vlBackColor = &H80FF&  '| Naranja fuerte
                        Case "NP"
                            vlForeColor = &HFF&    '| Blanco
                            vlBackColor = &HFFFFFF '| Rojo
                    End Select

                    '| La primer columna se pinta de rojo
                    .Col = 1
                    .CellForeColor = &HFF&
                    '| Las demás columnas se pintan dependiendo del estado que guarde la factura
                    For vlintcontador = 3 To .Cols
                        .Col = .Col + 1
                        .CellForeColor = vlForeColor
                        .CellBackColor = vlBackColor
                    Next
                Else
                    If rs!PendienteCancelarSat > 0 Then
                       .Col = 1
                       For vlintcontador = 3 To .Cols
                           .Col = .Col + 1
                           .CellBackColor = &HC0E0FF
                       Next
                    End If
                End If
            Else
            
                If vgblnNuevoEsquemaCancelacion Then
                    Select Case rs!PendienteCancelarSAT_NE
                        Case "PA"
                            vlForeColor = &HFFFFFF '| Blanco
                            vlBackColor = &H80FF&  '| Naranja fuerte
                        Case "CR"
                            vlForeColor = &HFFFFFF '| Blanco
                            vlBackColor = &HFF&    '| Rojo
                        Case "NP"
                            vlForeColor = &H0&     '| Negro
                            vlBackColor = &HFFFFFF '| Rojo
                    End Select
                    
                    '| La primer columna se pinta de negro
                    .Col = 1
                    .CellForeColor = &H0&
                    '| Las demás columnas se pintan dependiendo del estado que guarde la factura
                    For vlintcontador = 3 To .Cols
                        .Col = .Col + 1
                        .CellForeColor = vlForeColor
                        .CellBackColor = vlBackColor
                    Next
                Else
                    If rs!PendienteCancelarSat > 0 Then
                       .Col = 1
                       For vlintcontador = 3 To .Cols
                           .Col = .Col + 1
                           .CellBackColor = &HC0E0FF
                       Next
                    End If
                End If
            
            
                If rs!PendienteTimbreFiscal = 1 Then
                   .Col = 1
                   For vlintcontador = 3 To .Cols
                       .Col = .Col + 1
                       .CellBackColor = &H80FFFF 'amarillo
                   Next
                End If
            End If
            
            If rs!NumFoliosRelacionados > 0 Then
                Set rsFoiosRelacionados = frsRegresaRs("select * from PVFacturaFolios where smiCveDepartamento = " & rs!CveDepartamento & " and chrFolioFactura = '" & rs!Folio & "'")
                Do Until rsFoiosRelacionados.EOF
                    
                    If .RowData(1) <> -1 Then
                         .Rows = .Rows + 1
                         .Row = .Rows - 1
                    End If
                    
                    .RowData(.Row) = rs!IdFactura
                    .TextMatrix(.Row, 1) = "    " & rsFoiosRelacionados!chrFolioRelacionado
                    .TextMatrix(.Row, 2) = IIf(IsNull(rs!Paciente), " ", rs!Paciente)
                    .TextMatrix(.Row, 3) = IIf(IsNull(rs!RazonSocial), " ", Trim(rs!RazonSocial))
                    .TextMatrix(.Row, 4) = rs!fecha
                    .TextMatrix(.Row, 9) = IIf(IsNull(rs!PersonaFacturo), " ", rs!PersonaFacturo)
                    .TextMatrix(.Row, 10) = IIf(IsNull(rs!PersonaCancelo), " ", rs!PersonaCancelo)
                    .TextMatrix(.Row, 11) = rs!Folio
                    If (rs!PendienteCancelarSat > 0 Or (.TextMatrix(.Row, 12) <> "NP" And .TextMatrix(.Row, 12) <> "CR")) Then vllngSeleccionadas = vllngSeleccionadas + 1
                    If rs!PendienteTimbreFiscal > 0 Then vllngSeleccPendienteTimbre = vllngSeleccPendienteTimbre + 1
                    
                    .Col = 0
                    If rs!chrEstatus = "C" Then
                        For vlintcontador = 2 To .Cols
                            .Col = .Col + 1
                            .CellForeColor = &HFF&
                        Next
                  
                        If (rs!PendienteCancelarSat > 0 Or rs!PendienteCancelarSAT_NE <> "CA") Then
                           .Col = 1
                           For vlintcontador = 3 To .Cols
                               .Col = .Col + 1
                               .CellBackColor = &HC0E0FF
                           Next
                        End If
                    Else 'las pendientes de timbre fiscal nunca deben de estar canceladas
                        If rs!PendientesTimbreFiscal = 1 Then
                           .Col = 1
                           For vlintcontador = 3 To .Cols
                               .Col = .Col + 1
                               .CellBackColor = &H80FFFF 'amarillo
                           Next
                        End If
                    End If
                    rsFoiosRelacionados.MoveNext
                Loop
                
                rsFoiosRelacionados.Close
            End If
        End With
        rs.MoveNext
    Loop
    
    If lngAncho > 1000 Then grdBuscaFacturas.ColWidth(1) = lngAncho + 100
    
    grdBuscaFacturas.Redraw = True
    rs.Close
    
    freTrabajando.Visible = False
    
    grdBuscaFacturas.Row = 1
    grdBuscaFacturas.Col = 2
    
    Me.cmdCancelaFacturasSAT.Enabled = vllngSeleccionadas > 0
    Me.cmdConfirmartimbre.Enabled = vllngSeleccPendienteTimbre > 0

End Sub

Private Sub pConfiguraGridBusqueda()
     With grdBuscaFacturas
        .Cols = 14
        .FixedCols = 2
        .FixedRows = 1
        .FormatString = "|Factura|Paciente|Razón social|Fecha|Total factura|IVA|Subtotal|Moneda|Persona que facturó|Persona que canceló|"
        .ColWidth(0) = 200  'Fix selección
        .ColWidth(1) = 1000 'Numero de Factura
        .ColWidth(2) = 4000 'Paciente
        .ColWidth(3) = 3400 'Facturado a:
        .ColWidth(4) = 1430 'Fecha
        .ColWidth(5) = 1430 'Total factura
        .ColWidth(6) = 1300 'Subtotal
        .ColWidth(7) = 1460 'Iva
        .ColWidth(8) = 1000 'Moneda
        .ColWidth(9) = 4000 'Empleado Facturo
        .ColWidth(10) = 4000 'Empleado Cancelo
        .ColWidth(11) = 0 'Folio de la factura principal
        .ColWidth(12) = 0 'si la factura esta pendiente de capturar en la SAT
        .ColWidth(13) = 0 'si la factura esta pendiente de timbre fiscal
        .ColAlignment(0) = flexAlignCenterCenter
        .ColAlignment(1) = flexAlignLeftCenter
        .ColAlignment(2) = flexAlignLeftCenter
        .ColAlignment(3) = flexAlignLeftCenter
        .ColAlignment(4) = flexAlignLeftCenter
        .ColAlignment(5) = flexAlignRightCenter
        .ColAlignment(6) = flexAlignRightCenter
        .ColAlignment(7) = flexAlignRightCenter
        .ColAlignment(8) = flexAlignCenterCenter
        .ColAlignment(9) = flexAlignLeftCenter
        .ColAlignmentFixed(0) = flexAlignCenterCenter
        .ColAlignmentFixed(1) = flexAlignLeftCenter
        .ColAlignmentFixed(2) = flexAlignCenterCenter
        .ColAlignmentFixed(3) = flexAlignCenterCenter
        .ColAlignmentFixed(4) = flexAlignCenterCenter
        .ColAlignmentFixed(5) = flexAlignCenterCenter
        .ColAlignmentFixed(6) = flexAlignCenterCenter
        .ColAlignmentFixed(7) = flexAlignCenterCenter
        .ColAlignmentFixed(8) = flexAlignCenterCenter
        .ColAlignmentFixed(9) = flexAlignCenterCenter
        .ColAlignmentFixed(10) = flexAlignCenterCenter
        .ScrollBars = flexScrollBarBoth
    End With
End Sub
Private Function fblnDatosValidosEmpresa() As Boolean
    Dim vlstrSentencia As String
    Dim vPrinter As Printer
    Dim lngContador As Long
    Dim dblIVA As Double
    Dim dblTipoCambio As Double
    Dim dblIVAFactura As Double
    Dim vlAddendaValida As Long
    Dim rsRegimenEmpresaConvenio As New ADODB.Recordset
    
    fblnDatosValidosEmpresa = True
    
    dblTipoCambio = fdblTipoCambio(fdtmServerFecha, "V")
    
    'Permiso para guardar:
    fblnDatosValidosEmpresa = fblnRevisaPermiso(vglngNumeroLogin, vllngNumeroOpcion, "E")

    'Verifica si se usa un catálogo especial y si todos los cargos estan dentro de él (PEMEX, PCE)
    If fblnManejaCatalogoCargos(vgintEmpresa) Then
        If fblnCargosFueraCatalogo(CLng(txtMovimientoPaciente.Text), IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")), vgintEmpresa) Then
           fblnDatosValidosEmpresa = False
        End If
    End If
    
    'Formatos de factura:
    If fblnDatosValidosEmpresa And vllngFormatoaUsar = 0 Then
        fblnDatosValidosEmpresa = False
        'No se encontró un formato válido de factura, por favor de uno de alta.
        MsgBox SIHOMsg(373), vbCritical, "Mensaje"
    End If
    
    'Cuentas de IVA:
    If fblnDatosValidosEmpresa And (glngCtaIVACobrado = 0 Or glngCtaIVANoCobrado = 0) Then
        fblnDatosValidosEmpresa = False
        'No se encuentran registradas las cuentas de IVA cobrado y no cobrado en los parámetros generales del sistema.
        MsgBox SIHOMsg(729), vbCritical, "Mensaje"
    End If
    
    'Cuenta bloqueada:
    If fblnDatosValidosEmpresa And vgblnCuentaBloqueada Then
        fblnDatosValidosEmpresa = False
        'No se puede realizar ésta operación. La cuenta se encuentra bloqueada por trabajo social.
        MsgBox SIHOMsg(662), vbCritical, "Mensaje"
    End If
    
    'Conceptos para facturar:
    If fblnDatosValidosEmpresa And grdFacturaEmpresa.RowData(1) = -1 Then
        fblnDatosValidosEmpresa = False
        'No existen conceptos para facturar.
        MsgBox SIHOMsg(372), vbCritical, "Mensaje"
    End If
   
    'Si no hay facturas parciales por conceptos de seguro sin descontar,
    'y aún no se factura al paciente o no se hizo el 100% de descuento en los conceptos de seguro a cobrar
    'No se puede facturar
    If Not blnParciales Then
        'Factura del paciente ya guardada:
        If fblnDatosValidosEmpresa And grdFacturaPaciente.RowData(1) > 0 And Not (Val(Format(txtFPDescuentos.Text, "")) <> 0 And Val(Format(txtFPSubtotal.Text, "")) = 0) Then
            fblnDatosValidosEmpresa = False
            'Facture la cuenta del paciente primero.
            MsgBox SIHOMsg(549), vbCritical, "Mensaje"
        End If
    End If
    
    
    If fblnDatosValidosEmpresa And fblnFPPendientesTimbre(1) Then fblnDatosValidosEmpresa = False
     
       
    
    'Validación de impresora:
    If fblnDatosValidosEmpresa Then
        If rsImpresoras.RecordCount > 0 Then
            For Each vPrinter In Printers
                If UCase(Trim(vPrinter.DeviceName)) = UCase(Trim(rsImpresoras!Impresora)) Then
                    Set Printer = vPrinter
                End If
            Next
        Else
            fblnDatosValidosEmpresa = False
            'No se tiene asignada una impresora en la cual imprimir las facturas
            MsgBox SIHOMsg(492), vbCritical, "Mensaje"
        End If
    End If
    
    'Control de aseguradora registrado:
    If fblnDatosValidosEmpresa Then
        If sstFacturacion.TabEnabled(2) Then
            If rsControlSeguro.RecordCount = 0 Then
                fblnDatosValidosEmpresa = False
                'No se ha grabado el control de la aseguradora. Capture primero el control y reintente facturar.
                MsgBox SIHOMsg(370), vbCritical, "Mensaje"
                sstFacturacion.Tab = 2
                cboParentesco.SetFocus
            End If
        End If
    End If
    
    'Cuentas de los conceptos de facturación
    If fblnDatosValidosEmpresa Then
        For lngContador = 0 To UBound(aCPCargosPoliza) - 1
            Set rsTemp = frsRegresaRs("select * from PvConceptoFacturacion where smiCveConcepto = " & aCPCargosPoliza(lngContador).lngConceptoFacturacion, adLockReadOnly, adOpenForwardOnly)
            If (aCPCargosPoliza(lngContador).dblCantidadIngreso > 0 And aCPCargosPoliza(lngContador).lngCuentaIngreso = 0) Or _
               (aCPCargosPoliza(lngContador).dblCantidadDescuento > 0 And aCPCargosPoliza(lngContador).lngCuentaDescuento = 0) Then
               fblnDatosValidosEmpresa = False
               'No existe cuenta contable para el concepto de facturación:
                MsgBox SIHOMsg(907) + " " + rsTemp!chrDescripcion, vbInformation + vbOKOnly, "Mensaje"
            End If
        Next lngContador
    End If
    
    'Conceptos de seguros:
    If fblnDatosValidosEmpresa Then
        If rsConceptosSeguro.RecordCount = 0 Then
            fblnDatosValidosEmpresa = False
            'No se tiene asignado el concepto de facturación para el deducible y coaseguro.
            MsgBox SIHOMsg(371), vbCritical, "Mensaje"
        End If
    End If
    
    'Que el IVA sea mayor a cero (sucede que el IVA puede ser negativo cuando se factura parcialmente al seguro y se descuenta algun concepto de seguro)
    If fblnDatosValidosEmpresa And Val(Format(txtFEIVA.Text, "")) < 0 Then
        fblnDatosValidosEmpresa = False
        MsgBox "Seleccione cargos que contengan IVA mayor al de la factura del paciente.", vbCritical, "Mensaje"
    End If
    
    'Persona que autoriza por parte de la aseguradora:
    If fblnDatosValidosEmpresa And sstFacturacion.TabEnabled(2) And chkAutoriza.Value = 1 And Trim(txtPersonaAutoriza.Text) = "" Then
        fblnDatosValidosEmpresa = False
        '¡No ha ingresado datos!
        MsgBox SIHOMsg(2), vbCritical, "Mensaje"
        sstFacturacion.Tab = 2
        If chkAutoriza.Value = 1 Then
            txtPersonaAutoriza.SetFocus
        End If
    End If
    
    'Tipo de póliza:
    If fblnDatosValidosEmpresa And sstFacturacion.TabEnabled(2) And chkTipoPoliza.Value = 1 Then  'And cboTipoPoliza.ItemData(cboTipoPoliza.ListIndex) <= 0 Then
        If cboTipoPoliza.ListIndex <= 0 Then
            fblnDatosValidosEmpresa = False
            '¡No ha ingresado datos!
            MsgBox SIHOMsg(2), vbCritical, "Mensaje"
            sstFacturacion.Tab = 2
            cboTipoPoliza.SetFocus
        End If
    End If
    
    'Número de póliza:
    If fblnDatosValidosEmpresa And sstFacturacion.TabEnabled(2) And chkNumeroPoliza.Value = 1 And Trim(txtNumeroPoliza.Text) = "" Then
        fblnDatosValidosEmpresa = False
        '¡No ha ingresado datos!
        MsgBox SIHOMsg(2), vbCritical, "Mensaje"
        sstFacturacion.Tab = 2
        txtNumeroPoliza.SetFocus
    End If
    
    'Número de control:
    If fblnDatosValidosEmpresa And sstFacturacion.TabEnabled(2) And chkNumeroControl.Value = 1 And Trim(txtNumeroControl.Text) = "" Then
        fblnDatosValidosEmpresa = False
        '¡No ha ingresado datos!
        MsgBox SIHOMsg(2), vbCritical, "Mensaje"
        sstFacturacion.Tab = 2
        If chkNumeroControl.Value = 1 Then
            txtNumeroControl.SetFocus
        End If
    End If
    
    'Parchecillos para que no se puedan facturar cantidades negativas
    If fblnDatosValidosEmpresa And Val(Format(txtFESubtotal.Text, "")) < 0 Then
    'Si el subtotal es negativo
        fblnDatosValidosEmpresa = False
        '¡No se puede generar la factura con importes negativos!
        MsgBox SIHOMsg(1084), vbCritical, "Mensaje"
        sstFacturacion.Tab = 4
        grdFacturaEmpresa.SetFocus
    End If
    
'   Se comentó la siguiente validación por el caso HMG Caso 15829 E, PV Mensaje de IVA no corresponde al importe gravado
'    If fblnDatosValidosEmpresa And dblExcedenteDeIVA = 0 Then
'
'        'Si el IVA no corresponde al importe gravado
'        If Val(Format(txtFEDescuentoEspecial.Text, "")) = 0 Then 'sin descuento especial
'          dblIVA = Format(IIf(optPesos(1).Value, ldblIVACargosSelConvenio - dblIVAPaciente, dblIVAP / dblTipoCambio), "############.00")
'        Else
'          dblIVA = Format(IIf(optPesos(1).Value, ldblIVACargosSelConvenio, dblIVAP / dblTipoCambio), "############.00")
'        End If
'
'        If Format(Abs(Format(vldblsubtotalgravado * (vgdblCantidadIvaGeneral / 100), "############.00") - dblIVA), "############.00") > 0.03 Then
'            fblnDatosValidosEmpresa = False
'            '¡El IVA no corresponde al importe gravado!
'            MsgBox SIHOMsg(1085), vbCritical, "Mensaje"
'            sstFacturacion.Tab = 4
'            grdFacturaEmpresa.SetFocus
'        End If
'    End If
'   -----------------------------------
    
    If vgintEmpresa = llngCveEmpresaPCE Then
    'Si es PCE, que no se facture si el IVA de la factura es mayor al de la póliza
        dblIVAFactura = CDbl(Format(IIf(optPesos(1).Value, (ldblIVACargosSelConvenio - dblIVAPaciente), dblIVAP), "############.00"))
        
        If dblIVAFactura > CDbl(Format(dblIVAPolizaPCE, "############.00")) Then
            fblnDatosValidosEmpresa = False
            '¡El IVA de la factura es mayor al IVA de la póliza!
            MsgBox SIHOMsg(1113), vbCritical, "Mensaje"
            sstFacturacion.Tab = 4
            grdFacturaEmpresa.SetFocus
        End If
    End If
    
    'Si existen cargos sin facturar, se muestra mensaje
    If fblnDatosValidosEmpresa And blnCargosSinFacturar Then
        'Existen cargos que no serán facturados, desea continuar?
        If MsgBox(SIHOMsg(1077), vbYesNo + vbQuestion, "Mensaje") = vbNo Then
            fblnDatosValidosEmpresa = False
        End If
    End If
    
    'Validación de la Addenda:
    If vgintEmpresa <> 0 And cmdAddenda.Enabled = True Then
        vlAddendaValida = 1
        If optGrupoCuenta(0) Then
            frsEjecuta_SP CStr(vglngCveAddenda) & "|" & txtMovimientoPaciente.Text & "|" & "G", "FN_PVSELADDENDADATOSVALIDOS", True, vlAddendaValida
        Else
            frsEjecuta_SP CStr(vglngCveAddenda) & "|" & txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E"), "FN_PVSELADDENDADATOSVALIDOS", True, vlAddendaValida
        End If
        If vlAddendaValida = 0 Then
            fblnDatosValidosEmpresa = False
            'Hay información incorrecta en la addenda
            MsgBox SIHOMsg(1140), vbCritical, "Mensaje"
            sstFacturacion.Tab = 4
            cmdAddenda.SetFocus
        ElseIf vlAddendaValida = 2 Then
            fblnDatosValidosEmpresa = False
            'No se ha configurado la addenda
            MsgBox SIHOMsg(1143), vbCritical, "Mensaje"
            sstFacturacion.Tab = 4
            cmdAddenda.SetFocus
        End If
        
    End If
    
    'Datos fiscales de la empresa de convenio
    If fblnDatosValidosEmpresa And vgintEmpresa > 0 And vgstrVersionCFDI = "4.0" Then
        vlstrSentencia = "SELECT nvl(trim(vchcodigopostal), '0') codigopostal, nvl(trim(vchregimenfiscal), '0') regimenfiscal, vchdescripcion FROM CcEmpresa WHERE intCveEmpresa = " & vgintEmpresa
        Set rsRegimenEmpresaConvenio = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
        If rsRegimenEmpresaConvenio.RecordCount > 0 Then
            'Si la version de CFDI es 4.0, es obligatorio el dato del régimen fiscal
            If rsRegimenEmpresaConvenio!REGIMENFISCAL = "0" Then
                fblnDatosValidosEmpresa = False
                'El régimen fiscal de la empresa ... no es válido..
                MsgBox "El régimen fiscal de la empresa " & rsRegimenEmpresaConvenio!VCHDESCRIPCION & " no es válido.", vbExclamation + vbOKOnly, "Mensaje"
            End If
            'Si la version de CFDI es 4.0, es obligatoria el dato del código postal a 5 dígitos
            If fblnDatosValidosEmpresa And (rsRegimenEmpresaConvenio!CodigoPostal = "0" Or Len(rsRegimenEmpresaConvenio!CodigoPostal) < 5) Then
                fblnDatosValidosEmpresa = False
                'El código postal de la empresa ... debe ser de 5 dígitos.
                MsgBox "El código postal de la empresa " & rsRegimenEmpresaConvenio!VCHDESCRIPCION & " debe ser de 5 dígitos.", vbExclamation + vbOKOnly, "Mensaje"
            End If
        Else
            fblnDatosValidosEmpresa = False
        End If
        rsRegimenEmpresaConvenio.Close
    End If
    
    'Si se configuró otro tipo de póliza que no maneja addenda, se desactiva el botón y se cancela la clave de la addenda
    If cmdAddenda.Enabled = False Then vglngCveAddenda = 0
End Function
Private Sub cmdGrabarFacturaEmpresa_Click()
On Error GoTo NotificaError

    Dim vlintcontador As Integer                 'Para los ciclos
    Dim rsFormasPagos As New ADODB.Recordset     'Sólo para traer las formas de pago de cada pago
    Dim rsPvDetalleCorte As New ADODB.Recordset  'Aqui añado los registros del detalle del corte
    Dim rsFactura As New ADODB.Recordset         'RS tipo tabla para guardar la fractura
    Dim rsDetalleFactura As New ADODB.Recordset  'RS tipo tabla para el Detalle de la FACTURA
    Dim rsDatosCliente As New ADODB.Recordset    'RS para los datos del cliente
    Dim rsgrupo As New ADODB.Recordset           'RS para tener las cuentas del grupo
    Dim rsDatosEmpresa As New ADODB.Recordset    'RS para Datos fiscales de la empresa
    Dim rsFacturaParcialEmpresa As New ADODB.Recordset
    
    Dim vlstrSentencia As String                 'Sirve pa TODOS los RS's
    Dim vlstrSentenciaCargoEmp As String
    Dim vlstrAux As String                       'Solo como auxiliar cuando se pone folio a los cargos
    Dim vllngNumeroCorte As Long                 'Trae el numero de corte actual
    Dim vldblTipoCambio As Double                'Trae el tipo de cambio utilizado en la pantalla de Formas de pago
    Dim vlblnbandera As Boolean                  'Bandera para control de flujo
    Dim vlstrFolioDocumento As String            'Este es el numero de factura a utilizar
    Dim vllngConsecutivoFactura As Long
    Dim vllngPersonaGraba As Long                'Persona que esta generando la factura
    Dim vllngNumCliente As Long                  'Numero de cliente en caso de que la cuenta sea a credito
    Dim vllngFoliosFaltantes As Long             'Para controlar los folios faltantes de facturas
    Dim vllngCorteGrabando As Long               'Una bandera para saber que se pudo actualizar el corte
    Dim vldtmFechaHoy As Date                    'Variable con la Fecha actual
    Dim vldtmHoraHoy As Date                     'Variable con la Hora actual
    Dim vldblTotalIVACredito As Double           'IVA Total que no se ha cobrado aún, osea que se va a la cuenta de IVA no cobrado
    Dim vldblIvaDescuento As Double
    
    Dim dblPorcentaje As Double                 'Para calcular qué porcentaje es el pago en crédito respecto al total de la factura
    Dim dblPorcentajeContado As Double          'Para calcular qué porcentaje es el pago de contado respecto al total de la factura
    Dim dblSubtotalCredito As Double            'Para guardar el subtotal en el movimiento de crédito
    Dim dblIVACredito As Double                 'Para guardar el IVA en el movimiento de crédito
    Dim dblSubtotalPCE As Double                'Para la cuenta por cobrar a PCE
    Dim dblTotalFactura As Double               'Total de la factura
    Dim dblIVAFactura As Double                 'IVA de la factura
    Dim vllngMovimientoCredito As Long          'Consecutivo del movimiento de crédito creado
    Dim dblProporcionIVA As Double              'Para extraer el porcentaje que corresponde a IVA no cobrado
    Dim dblDedCoaseguro As Double               'Cantidad que se descuenta en la factura por deducible o coaseguro
    Dim rsCuentas As New ADODB.Recordset        'Si se trata de un grupo, este rs contiene las cuentas que pertenecen al grupo
    Dim vlintResul As Integer                   'Para ver si se quieren cambiar los datos fiscales
    
    'Otro Datos fiscales
    Dim vlstrNombreFactura As String
    Dim vlstrDireccion As String
    Dim strCodigoPostal As String
    Dim strColonia As String
    Dim vlstrNumeroExterior As String
    Dim vlstrNumeroInterior As String
    Dim vlBitExtranjero As Integer
    Dim vlstrTelefono As String
    Dim vlstrRFC As String
    Dim lngCveCiudad As Long
    Dim lngContador As Long
    Dim vlstrDFRegimenFiscal As String
    
    Dim rsBitFactReqPendiente As ADODB.Recordset
    Dim intBitFactReqPendiente As Integer
    Dim strParametros As String
    
    '(PEMEX)
    Dim lngCveFormato As Long
    Dim rsDatosFactura As ADODB.Recordset
    Dim blnFacturaMultiple As Boolean
    Dim lngRenglonesDetalle As Long
    Dim lngTotalDocumentos As Long
    Dim arrFolios() As String
    Dim rsFolios As ADODB.Recordset
    Dim lngIndexFolios As Long
    
    Dim blnCancelarFacturacion As Boolean
    Dim blnFoliosOK As Boolean
    Dim strIdentificador As String
    Dim lngInicial As Long
    Dim lngFinal As Long
    
    Dim strFolio As String
    Dim strSerie As String
    Dim strNumeroAprobacion As String
    Dim strAnoAprobacion As String
    
    Dim strSql As String
    Dim rsAux As New ADODB.Recordset
    Dim vlaryParametrosSalida() As String
    Dim vlRFCTemp As String
    Dim vlblnPagoAutomaticoporCancelacion As Boolean
    Dim dblretencion As Double
    Dim vlblnCredito As Boolean
    Dim dblTotalContado As Double

     Dim vllngCorteUsado As Long
     
    Dim i As Long
    Dim vlDblTotalCredito As Double
    
    '(PEMEX)Se busca el tipo de formato que se va a utilizar
    lngCveFormato = 1
    frsEjecuta_SP vgintNumeroDepartamento & "|" & vgintEmpresa & "|" & vgintTipoPaciente & "|" & IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")), "fn_PVSelFormatoFactura2", True, lngCveFormato
    vllngFormatoaUsar = lngCveFormato
           
    If Not fblnDatosValidosEmpresa() Then Exit Sub
        
    vldtmFechaHoy = fdtmServerFecha
    vldtmHoraHoy = fdtmServerHora
    
    dblIVACredito = 0
    
    '#Region caso 19038
    If optGrupoCuenta(0).Value = False Then
        If BlnSaldoFavor(txtMovimientoPaciente.Text) Or CDbl(txtTotal.Text) < 0 Or CDbl(txtTotalPagarControl.Text) < 0 Or CDbl(txtFPTotalPagar.Text) < 0 Or CDbl(txtFETotalPagar.Text) < 0 Then
            MsgBox SIHOMsg(1672), vbCritical, "Mensaje"
            Exit Sub
        End If
        
        If BlnValidaCantidades(txtMovimientoPaciente.Text) Then
            MsgBox SIHOMsg(1672), vbCritical, "Mensaje"
            Exit Sub
        End If
    End If
    '#End Region caso 19038
    
    '----------------------------------------------------------------'
    ' Verificar requisiciones y devoluciones pendientes de la cuenta '
    '----------------------------------------------------------------'

       
    '************************
        
    Set rsBitFactReqPendiente = frsEjecuta_SP(CStr(vgintClaveEmpresaContable), "SP_PVSELBITFACTREQPENDIENTE")
    If rsBitFactReqPendiente.RecordCount > 0 Then intBitFactReqPendiente = rsBitFactReqPendiente(0).Value
    rsBitFactReqPendiente.Close
    
    
    If optGrupoCuenta(0).Value Then
        Set rsgrupo = frsRegresaRs("SELECT intmovpaciente, chrtipopaciente FROM PVDETALLEFACTURACONSOLID WHERE intCveGrupo = " & txtMovimientoPaciente.Text, adLockReadOnly, adOpenForwardOnly)
    End If
      
    
    If vlblnVerificarRequisiciones Then
        If optGrupoCuenta(0).Value Then
                    rsgrupo.MoveFirst
                    Do Until rsgrupo.EOF
                        'Verificar requisiciones
                        If fblnRequisicionPaciente(rsgrupo!INTMOVPACIENTE, rsgrupo!CHRTIPOPACIENTE) Then
                            If intBitFactReqPendiente <> 1 Then
                               ' No se puede facturar porque existen requisiciones pendientes de surtir para este paciente
                                MsgBox SIHOMsg(987), vbExclamation, "Mensaje"
                                Exit Sub
                            Else
                                'Existen requisiciones pendientes de surtir para este paciente. ¿Desea continuar con la facturación de la cuenta?
                                If MsgBox(SIHOMsg(717), vbExclamation + vbYesNo, "Mensaje") = vbNo Then
                                    Exit Sub
                                Else
                                    GoTo VerificaDevolGrupoPac
                                End If
                                Exit Do
                            End If
                        End If
VerificaDevolGrupoPac:
        
        
                        'Verificar devoluciones
                        If fblnDevolucionPaciente(rsgrupo!INTMOVPACIENTE, rsgrupo!CHRTIPOPACIENTE) Then
                            If intBitFactReqPendiente <> 1 Then
                                MsgBox "No se puede facturar porque existen devoluciones pendientes de realizar para este paciente", vbExclamation, "Mensaje"
                                Exit Sub
                            Else
                                If MsgBox("Existen devoluciones pendientes de realizar para este paciente. ¿Desea continuar con la facturación de la cuenta?", vbExclamation + vbYesNo, "Mensaje") = vbNo Then Exit Sub
                                Exit Do
                            End If
                        End If
                        
                        'Verificar cargos automaticos
                        If fblnCargosAutomaticosPendientes(rsgrupo!INTMOVPACIENTE, rsgrupo!CHRTIPOPACIENTE) Then
                            If intBitFactReqPendiente <> 1 Then
                               'No se puede facturar porque existen cargos automáticos programados pendientes de aplicarse para este paciente.
                                MsgBox SIHOMsg(1244), vbExclamation, "Mensaje"
                                Exit Sub
                            Else
                                'Existen cargos automáticos programados pendientes de aplicarse para este paciente. ¿Desea continuar con la facturación de la cuenta?
                                If MsgBox(SIHOMsg(1245), vbExclamation + vbYesNo, "Mensaje") = vbNo Then
                                    Exit Sub
                                End If
                            End If
                        End If
                        
                        rsgrupo.MoveNext
                    Loop
            Else
            
            
                ' Verificar requisiciones
                If fblnRequisicionPaciente(CLng(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E")) Then
                    If intBitFactReqPendiente <> 1 Then
                        ' No se puede facturar porque existen requisiciones pendientes de surtir para este paciente
                        MsgBox SIHOMsg(987), vbExclamation, "Mensaje"
                        Exit Sub
                    Else
                        ' Existen requisiciones pendientes de surtir para este paciente. ¿Desea continuar con la facturación de la cuenta?
                        If MsgBox(SIHOMsg(717), vbExclamation + vbYesNo, "Mensaje") = vbNo Then
                            Exit Sub
                        Else
                            GoTo VerificaDevolPaciente
                        End If
                    End If
                End If
VerificaDevolPaciente:
        
          
                ' Verificar devoluciones
                If fblnDevolucionPaciente(CLng(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E")) Then
                    If intBitFactReqPendiente <> 1 Then
                        MsgBox "No se puede facturar porque existen devoluciones pendientes de realizar para este paciente", vbExclamation, "Mensaje"
                        Exit Sub
                    Else
                        If MsgBox("Existen devoluciones pendientes de realizar para este paciente. ¿Desea continuar con la facturación de la cuenta?", vbExclamation + vbYesNo, "Mensaje") = vbNo Then Exit Sub
                    End If
                End If
            End If
        End If
   
    '************************

    '-----------------------------------------------------------'
    '       VALIDACION DE FORMATO/FOLIO (FISICO, DIGITAL)       '
    '-----------------------------------------------------------'
    'Identifica el tipo de formato a utilizar
    lngCveFormato = 1
    frsEjecuta_SP vgintNumeroDepartamento & "|" & vgintEmpresa & "|" & vgintTipoPaciente & "|" & IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")), "fn_PVSelFormatoFactura2", True, lngCveFormato
    vllngFormatoaUsar = lngCveFormato
    
    'Se valida en caso de no haber formato activo mostrar mensaje y cancelar transacción
    If vllngFormatoaUsar = 0 Then
        'No se encontró un formato válido de factura.
        MsgBox SIHOMsg(373), vbCritical, "Mensaje"
        pCancelar
        Exit Sub
    End If

    'Se compara el tipo de folio con el tipo de formato a utilizar con la fn "fintTipoEmisionComprobante"
    '(intTipoEmisionComprobante: 0 = Error, 1 = Físico, 2 = Digital)
    intTipoEmisionComprobante = fintTipoEmisionComprobante("FA", vllngFormatoaUsar)
    If intTipoEmisionComprobante = 0 Then Exit Sub
    
    If intTipoEmisionComprobante = 2 Then
        'Se revisa el tipo de CFD de la Factura (0 = CFD, 1 = CFDi, 2 = Físico, 3 = Error)
        intTipoCFDFactura = fintTipoCFD("FA", vllngFormatoaUsar)
        
        'Si aparece un error terminar la transacción
        If intTipoCFDFactura = 3 Then   'ERROR
            'Si es error, se cancela la transacción
            Exit Sub
        End If
    End If
    
    'Validar licencia de descuentos de conceptos de seguro
    If Not fblnLicenciaCFDIDesc(vlchrIncluirConceptosSeguro) Then
        Exit Sub
    End If
  
    'Validar uso del comprobante, claves de productos/servicios y unidades
    If Not fblnValidaSAT("E") Then
        Exit Sub
    End If
            
    '- Persona que graba -'
    vllngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
    If vllngPersonaGraba = 0 Then Exit Sub
        
    vldblTipoCambio = fdblTipoCambio(vldtmFechaHoy, "V") 'Tipo de cambio a la Venta
    If vldblTipoCambio = 0 Then
        'No está registrado el tipo de cambio del día.
        MsgBox SIHOMsg(231), vbCritical, "Mensaje"
        Exit Sub
    End If
    
    '----------------------------------------------------'
    '                   Formas de pago                   '
    '----------------------------------------------------'
    vlblnbandera = False
    If Val(Format(txtFETotalPagar.Text, "")) > 0 Then
        vlblnbandera = fblnFormasPagoPos(aFormasPago(), IIf(optDolares(1).Value, (Val(Format(txtFETotalPagar.Text, ""))) * vldblTipoCambio, Val(Format(txtFETotalPagar.Text, ""))), True, vldblTipoCambio, True, CLng(vgintEmpresa), "CO", Trim(Replace(Replace(Replace(vlstrRFCEmpresa, "-", ""), "_", ""), " ", "")), , , True, "frmFacturacion")
    Else
        If Val(Format(txtFETotalPagar.Text, "")) < 0 Then
            MsgBox SIHOMsg(369), vbCritical, "Mensaje"
            Exit Sub
        End If
    End If
    '|  Le puse esta condición para que deje facturar en cero. - DM -
    If Val(Format(txtFETotalPagar.Text, "")) <> 0 Then
        If Not vlblnbandera Then Exit Sub  'Para que ya no haga nada
    End If
    
    If Not fnEncuentraHonorarios(False) Then
        Exit Sub
    End If
    
    '--------------------------------------------------------------'
    '                     Otros datos fiscales                     '
    '--------------------------------------------------------------'
    If chkOtrosDatosFiscales.Value = 1 Then
        Load frmDatosFiscales
        frmDatosFiscales.Show vbModal
        frmDatosFiscales.sstDatos.Tab = 1
        With frmDatosFiscales
            vlstrNombreFactura = .vgstrNombre
            vlstrDireccion = .vgstrDireccion
            vlstrNumeroExterior = .vgstrNumExterior
            vlstrNumeroInterior = .vgstrNumInterior
            vlBitExtranjero = .vgBitExtranjero
            vlstrTelefono = .vgstrTelefono
            vlstrRFC = fStrRFCValido(.vgstrRFC)
            lngCveCiudad = .llngCveCiudad
            strCodigoPostal = .vgstrCP
            strColonia = .vgstrColonia
            vlstrDFRegimenFiscal = .vlstrRegimenFiscal
        End With
        Unload frmDatosFiscales
        Set frmDatosFiscales = Nothing
        If Trim(vlstrRFC) = "" Or Trim(vlstrNombreFactura) = "" Then Exit Sub
    End If
    
    
    If fblnValidarPagos Then
       'Los PAGOS/Devoluciones de $$ de la cuenta han sido modificados, consulte de nuevo.
       MsgBox SIHOMsg(1178), vbExclamation, "Mensaje"
       Unload Me
       Exit Sub
    End If
        
    EntornoSIHO.ConeccionSIHO.BeginTrans
    
    ' RecordSet tipo tabla para generar las formas de pago en el corte
    vlstrSentencia = "SELECT * FROM PVDetalleCorte WHERE intConsecutivo = -1"
    Set rsPvDetalleCorte = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
    
    '------------------------'
    '- Número de la factura -'
    '------------------------'
    vllngFoliosFaltantes = 0
    pCargaArreglo alstrParametrosSalida, vllngFoliosFaltantes & "|" & ADODB.adBSTR & "|" & strFolio & "|" & ADODB.adBSTR & "|" & strSerie & "|" & ADODB.adBSTR & "|" & strNumeroAprobacion & "|" & ADODB.adBSTR & "|" & strAnoAprobacion & "|" & ADODB.adBSTR
    frsEjecuta_SP "FA|" & vgintNumeroDepartamento & "|1", "sp_gnFolios", , , alstrParametrosSalida
    pObtieneValores alstrParametrosSalida, vllngFoliosFaltantes, strFolio, strSerie, strNumeroAprobacion, strAnoAprobacion
    '|  Si la serie está vacía el SP regresa un espacio en blanco por eso se debe de hacer el TRIM
    vlstrFolioDocumento = Trim(strSerie) & strFolio
    If Trim(vlstrFolioDocumento) = "0" Then
        EntornoSIHO.ConeccionSIHO.RollbackTrans
        'No existen folios activos para este documento.
        MsgBox SIHOMsg(291), vbCritical, "Mensaje"
        Exit Sub
    End If
    
    '---------------------------'+147
        '- Número del corte actual -'
    '---------------------------'
    vllngNumeroCorte = flngNumeroCorte(vgintNumeroDepartamento, vglngNumeroEmpleado, "P")

    'se reinicia el arreglo de los movimientos del corte, solo importa el úlitmo 0 en los parametros para hacer el reinicio
    pAgregarMovArregloCorte 0, 0, "NA", "NA", 0, 0, False, "NA", 0, 0, "NA", 0, 0, "NA", "NA"
    
    '---------------------'
    '- Número de cliente -'
    '---------------------'
    vllngNumCliente = 0
    
    '---------------------'
    '- Bloqueo de cuenta -'
    '---------------------'
    If Not fblnBloqueoCuenta() Then                                                             '(5)
        EntornoSIHO.ConeccionSIHO.RollbackTrans
        Exit Sub
    End If  'Que pudo bloquear cuenta

    If grdPagos.RowData(1) > 0 Then 'Si no esta vacio                                           '(3)
        '-------------------'
        ' Cancelo los pagos '
        '-------------------'
        For vlintcontador = 1 To grdPagos.Rows - 1                                              '(2)
            If grdPagos.TextMatrix(vlintcontador, 7) = "DE" _
            Or grdPagos.TextMatrix(vlintcontador, 7) = "CO" _
            Or grdPagos.TextMatrix(vlintcontador, 7) = "CA" _
            Or grdPagos.TextMatrix(vlintcontador, 7) = "CP" _
            Or optTipoFacturacion(0).Value Then
                '--------------------------------------'
                ' Cancelo el Pago o Salida de Efectivo '
                '--------------------------------------'
                vlstrSentencia = "Update " & _
                                IIf(grdPagos.TextMatrix(vlintcontador, 9) = "E", "pvPago", "pvSalidaDinero") & _
                                " set bitCancelado = 1, chrFolioFactura = '" & Trim(vlstrFolioDocumento) & "'" & _
                                " where rtrim(chrFolioRecibo) = '" & Trim(grdPagos.TextMatrix(vlintcontador, 4)) & "'" & _
                                " and intMovPaciente = '" & Trim(txtMovimientoPaciente.Text) & "'" & _
                                " and chrTipoPaciente = " & IIf(OptTipoPaciente(0).Value, "'I'", "'E'")
                pEjecutaSentencia (vlstrSentencia)
                
                '------------------------------------------------------'
                ' Registrar las formas del Pago o Salida en la factura '
                '------------------------------------------------------'
                
                vgstrParametrosSP = Trim(grdPagos.TextMatrix(vlintcontador, 4)) & "|" & IIf(grdPagos.TextMatrix(vlintcontador, 9) = "E", "RE", "SD") & "|" & grdPagos.TextMatrix(vlintcontador, 10)
                Set rsFormasPagos = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelFormaDoctoCorte")
                Do While Not rsFormasPagos.EOF
'                   vgstrParametrosSP = CStr(vllngNumeroCorte) _
'                                        & "|" & fstrFechaSQL(fdtmServerFecha, fdtmServerFechaHora) _
'                                        & "|" & vlstrFolioDocumento _
'                                        & "|" & "FA" _
'                                        & "|" & CStr(rsFormasPagos!intFormaPago) _
'                                        & "|" & CStr(rsFormasPagos!mnycantidadpagada * IIf(Trim(rsFormasPagos!chrtipodocumento) = "SD", -1, 1)) _
'                                        & "|" & CStr(rsFormasPagos!mnytipocambio) _
'                                        & "|" & CStr(rsFormasPagos!intfoliocheque) _
'                                        & "|" & CStr(vllngNumeroCorte)
'                   frsEjecuta_SP vgstrParametrosSP, "Sp_PvInsDetalleCorte"
                    
                    If rsFormasPagos!intFormaPago <> -1 Then
                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", 0, rsFormasPagos!mnyCantidadPagada * IIf(Trim(rsFormasPagos!chrTipoDocumento) = "SD", -1, 1), False, _
                        fstrFechaSQL(fdtmServerFecha, fdtmServerFechaHora), rsFormasPagos!intFormaPago, rsFormasPagos!mnytipocambio, rsFormasPagos!intfoliocheque, vllngNumeroCorte, 1, vlstrFolioDocumento, "FA"
                    End If
                                        
                    'Movimiento de cargo a la cuenta de la forma de pago del recibo, pero como factura:
'                   vgstrParametrosSP = CStr(vllngNumeroCorte) _
'                                        & "|" & Trim(vlstrFolioDocumento) _
'                                        & "|" & "FA" _
'                                        & "|" & CStr(rsFormasPagos!intcuentacontable) _
'                                        & "|" & IIf(rsFormasPagos!mnytipocambio = 0, rsFormasPagos!mnycantidadpagada, rsFormasPagos!mnycantidadpagada * rsFormasPagos!mnytipocambio) _
'                                        & "|" & IIf(Trim(rsFormasPagos!chrtipodocumento) = "SD", 0, 1)
'                   frsEjecuta_SP vgstrParametrosSP, "SP_PVINSPVCORTEPOLIZA"
                    
                    pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", rsFormasPagos!INTCUENTACONTABLE, IIf(rsFormasPagos!mnytipocambio = 0, rsFormasPagos!mnyCantidadPagada, rsFormasPagos!mnyCantidadPagada * rsFormasPagos!mnytipocambio), _
                    IIf(Trim(rsFormasPagos!chrTipoDocumento) = "SD", False, True), "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                        
                    rsFormasPagos.MoveNext
                Loop
                rsFormasPagos.Close
                
                '----------------------------------------------------------------'
                ' Cancelar el Pago o Salida en el corte y su movimiento contable '
                '----------------------------------------------------------------'
'                vgstrParametrosSP = Trim(grdPagos.TextMatrix(vlintcontador, 4)) _
'                                    & "|" & IIf(grdPagos.TextMatrix(vlintcontador, 9) = "E", "RE", "SD") _
'                                    & "|" & grdPagos.TextMatrix(vlintcontador, 10) _
'                                    & "|" & CStr(vllngNumeroCorte)
'                frsEjecuta_SP vgstrParametrosSP, "Sp_PvUpdCancelaDoctoCorte"
                
                pAgregarMovArregloCorte vllngNumeroCorte, _
                                           vllngPersonaGraba, Trim(grdPagos.TextMatrix(vlintcontador, 4)), _
                                           IIf(grdPagos.TextMatrix(vlintcontador, 9) = "E", "RE", "SD"), _
                                           0, 0, False, "NA", 0, 0, "NA", _
                                           grdPagos.TextMatrix(vlintcontador, 10), 3, vlstrFolioDocumento, "FA"

            End If
        Next vlintcontador
    End If

    If Val(Format(txtFETotalPagar.Text, "")) > 0 Then
        '-------------------------------'
        ' Afecta corte (PvDetalleCorte) '
        '-------------------------------'
        For vlintcontador = 0 To UBound(aFormasPago(), 1)
'            With rsPvDetalleCorte
'                .AddNew
'                !INTNUMCORTE = vllngNumeroCorte
'                !DTMFECHAHORA = vldtmFechaHoy + vldtmHoraHoy
'                !CHRFOLIODOCUMENTO = vlstrFolioDocumento
'                !chrtipodocumento = "FA"
'                !intFormaPago = aFormasPago(vlintcontador).vlintNumFormaPago
'                !MNYCANTIDADPAGADA = IIf(aFormasPago(vlintcontador).vldblTipoCambio = 0, aFormasPago(vlintcontador).vldblCantidad, aFormasPago(vlintcontador).vldblDolares)
'                !mnytipocambio = aFormasPago(vlintcontador).vldblTipoCambio
'                !intfoliocheque = IIf(Trim(aFormasPago(vlintcontador).vlstrFolio) = "", "0", Trim(aFormasPago(vlintcontador).vlstrFolio))
'                !intNumCorteDocumento = vllngNumeroCorte
'                .Update
'            End With
             
             pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", 0, IIf(aFormasPago(vlintcontador).vldblTipoCambio = 0, aFormasPago(vlintcontador).vldblCantidad, aFormasPago(vlintcontador).vldblDolares), _
             False, CStr(vldtmFechaHoy + vldtmHoraHoy), CLng(aFormasPago(vlintcontador).vlintNumFormaPago), aFormasPago(vlintcontador).vldblTipoCambio, IIf(Trim(aFormasPago(vlintcontador).vlstrFolio) = "", "0", Trim(aFormasPago(vlintcontador).vlstrFolio)), _
             vllngNumeroCorte, 1, vlstrFolioDocumento, "FA", aFormasPago(vlintcontador).vlbolEsCredito, aFormasPago(vlintcontador).vlstrRFC, aFormasPago(vlintcontador).vlstrBancoSAT, aFormasPago(vlintcontador).vlstrBancoExtranjero, aFormasPago(vlintcontador).vlstrCuentaBancaria, aFormasPago(vlintcontador).vldtmFecha
             
                       
            '------------------------------'
            ' Generar movimiento a Crédito '
            '------------------------------'
            If aFormasPago(vlintcontador).vlbolEsCredito Then
                vlblnCredito = True
                ' Para ver que numero de cliente tiene esa empresa
                vlstrSentencia = "SELECT intNumCliente," & _
                                 " intNumCuentaContable " & _
                                 " FROM CcCliente " & _
                                 " INNER JOIN nodepartamento ON CcCliente.smiCveDepartamento = NoDepartamento.smiCveDepartamento " & _
                                 " WHERE intNumReferencia = " & Trim(str(vgintEmpresa)) & _
                                 " AND NoDepartamento.tnyClaveEmpresa = " & vgintClaveEmpresaContable & _
                                 " AND chrTipoCliente = 'CO' " & _
                                 " AND bitActivo = 1 "
                Set rsDatosCliente = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
                If rsDatosCliente.RecordCount = 0 Then
                    EntornoSIHO.ConeccionSIHO.RollbackTrans
                    rsDatosCliente.Close
                    'Se detectó un error en la información del cliente.
                    MsgBox SIHOMsg(367), vbCritical, "Mensaje"
                    Exit Sub
                End If
                
                vllngNumCliente = rsDatosCliente!intNumCliente
                
                If vgintEmpresa <> llngCveEmpresaPCE Then
                'Si no es PCE
                    dblretencion = Val(Format(txtRetenionServ.Text, ""))
                    dblTotalFactura = Val(Format(txtFETotalFactura.Text, "")) - dblretencion
                    dblIVAFactura = Val(Format(txtFEIVA.Text, ""))
                    dblDedCoaseguro = Val(Format(txtFEDedyCoa, ""))
                    dblPorcentaje = aFormasPago(vlintcontador).vldblCantidad / ((dblTotalFactura - dblDedCoaseguro) * IIf(optPesos(1).Value, 1, vldblTipoCambio))
                    dblSubtotalCredito = ((dblTotalFactura - dblIVAFactura) * IIf(optPesos(1).Value, 1, vldblTipoCambio)) * dblPorcentaje
                    dblIVACredito = (dblIVAFactura * IIf(optPesos(1).Value, 1, vldblTipoCambio)) * dblPorcentaje
                    'Aqui cambiar para que el ST = TotalCrédito - IVACrédito para que no haya centavillos voladores
                Else
                'Si es PCE
                    If Val(Format(txtFEIVA.Text, "")) > 0 Then
                    'Si no se factura IVA, la cuenta por cobrar no debe tener IVA
'                        If UBound(aFormasPago) > 0 Then
'                            dblretencion = Val(Format(txtRetenionServ.Text, ""))
'                            dblSubtotalPCE = IIf(optPesos(1).Value, Val(Format(txtFETotalFactura.Text, "")), dblTotalFacturaP) - IIf(optPesos(1).Value, ldblIVACargosSelConvenio - dblIVAPaciente, dblIVAP) - dblretencion
'                            dblIVAFactura = CDbl(Format(dblIVAPolizaPCE, "############.00"))
'                            dblPorcentaje = aFormasPago(vlintContador).vldblCantidad / (dblSubtotalPCE + dblIVAFactura)
'                            dblSubtotalCredito = dblSubtotalPCE * dblPorcentaje
'                            dblIVACredito = dblIVAPolizaPCE * dblPorcentaje
'                        Else
'                            dblIVACredito = IIf(optPesos(1).Value, ldblIVACargosSelConvenio - dblIVAPaciente, dblIVAP)
'                            dblSubtotalCredito = aFormasPago(vlintContador).vldblCantidad - dblIVACredito
'                        End If
                        
                        dblretencion = Val(Format(txtRetenionServ.Text, ""))
                        dblSubtotalPCE = IIf(optPesos(1).Value, Val(Format(txtFETotalFactura.Text, "")), dblTotalFacturaP) - IIf(optPesos(1).Value, ldblIVACargosSelConvenio - dblIVAPaciente, dblIVAP) - dblretencion
                        dblIVAFactura = CDbl(Format(dblIVAPolizaPCE, "############.00"))
                        dblPorcentaje = aFormasPago(vlintcontador).vldblCantidad / (dblSubtotalPCE + dblIVAFactura)
                        dblSubtotalCredito = dblSubtotalPCE * dblPorcentaje
                        dblIVACredito = dblIVAPolizaPCE * dblPorcentaje
                    Else
                        dblSubtotalCredito = aFormasPago(vlintcontador).vldblCantidad  'dblSubtotalPCE
                    End If
                End If
                
                vgstrParametrosSP = fstrFechaSQL(fdtmServerFecha) _
                                    & "|" & vllngNumCliente _
                                    & "|" & rsDatosCliente!INTNUMCUENTACONTABLE _
                                    & "|" & vlstrFolioDocumento _
                                    & "|" & "FA" _
                                    & "|" & aFormasPago(vlintcontador).vldblCantidad _
                                    & "|" & str(vgintNumeroDepartamento) _
                                    & "|" & str(vllngPersonaGraba) _
                                    & "| |0|" & dblSubtotalCredito & "|" & dblIVACredito
                vllngMovimientoCredito = 1
                frsEjecuta_SP vgstrParametrosSP, "SP_GNINSCREDITO", True, vllngMovimientoCredito

                '--------------------------------------------'
                ' Se genera un Cargo a clientes en la poliza '
                '--------------------------------------------'
'                pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", rsDatosCliente!intNumCuentaContable, aFormasPago(vlintcontador).vldblCantidad, True
                pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", rsDatosCliente!INTNUMCUENTACONTABLE, aFormasPago(vlintcontador).vldblCantidad, True, _
                "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                vlDblTotalCredito = aFormasPago(vlintcontador).vldblCantidad
                If CDbl(Format(txtRetenionServ.Text, "")) > 0 Then 'se agrega la cuenta de retencion de servicios
                    If glngctaProvServClientes = 0 Or glngctaRetenServClientes = 0 Then
                        'No se encuentran registradas las cuentas contables de retención y provisión de servicios de clientes en los parámetros de contabilidad.
                        MsgBox SIHOMsg(1573), vbCritical, "Mensaje"
                        Exit Sub
                    Else
                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngctaProvServClientes, CDbl(Format(txtRetenionServ.Text, "")), True, _
                        "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                    End If
                End If
                '----------------------------------------------------'
                ' Cálculo del IVA que se pudiera ir a IVA no cobrado '
                '----------------------------------------------------'
                If vgintEmpresa <> llngCveEmpresaPCE Then
                'Si no es PCE
                    If Val(Format(txtFEIVA.Text, "")) > 0 Then
                        dblProporcionIVA = aFormasPago(vlintcontador).vldblCantidad / (CDbl(Format(txtFETotalFactura.Text, "")) - CDbl(Format(txtRetenionServ.Text, "")))
                        vldblTotalIVACredito = CDbl(Format(txtFEIVA.Text, "")) * dblProporcionIVA
                    ElseIf intIVATasaHospi = 1 And dblExcedenteDeIVA > 0 Then
                    'Si el IVA se desglosa a la tasa del hospital y se cobró IVA mayor a la cuenta
                        vldblTotalIVACredito = ldblIVACargosSelConvenio
                    End If
                Else
                'PCE
                    If Val(Format(txtFEIVA.Text, "")) > 0 And UBound(aFormasPago) > 0 Then
                        vldblTotalIVACredito = dblIVACredito
                    Else
                        vldblTotalIVACredito = CDbl(Format(dblIVAPolizaPCE, "############.00"))
                    End If
                End If
                
                rsDatosCliente.Close
            Else ' Osea que la forma de pago --NO es credito--
                vlblnCredito = False
                '--------------------------------------------------------------------'
                ' Se genera un Cargo de acuerdo a la forma de pago que NO es credito '
                '--------------------------------------------------------------------'
                'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aFormasPago(vlintcontador).vllngCuentaContable, aFormasPago(vlintcontador).vldblCantidad, True
                pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aFormasPago(vlintcontador).vllngCuentaContable, aFormasPago(vlintcontador).vldblCantidad, True, _
                "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA", aFormasPago(vlintcontador).vlbolEsCredito, aFormasPago(vlintcontador).vlstrRFC, aFormasPago(vlintcontador).vlstrBancoSAT, aFormasPago(vlintcontador).vlstrBancoExtranjero, aFormasPago(vlintcontador).vlstrCuentaBancaria, aFormasPago(vlintcontador).vldtmFecha
                
                ' Agregado para caso 8741
                ' Si la forma de pago es de tipo tarjeta se registran los movimientos contables referente a la comision bancaria
                If aFormasPago(vlintcontador).vllngCuentaComisionBancaria <> 0 And aFormasPago(vlintcontador).vldblCantidadComisionBancaria <> 0 Then
                     ' Se genera un cargo de acuerdo la comisión bancaria que corresponde a la forma de pago
                     pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aFormasPago(vlintcontador).vllngCuentaComisionBancaria, aFormasPago(vlintcontador).vldblCantidadComisionBancaria, True, _
                                             "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA", , , , , , , "CBA"
                     If aFormasPago(vlintcontador).vldblIvaComisionBancaria <> 0 Then
                         ' Movimiento contable por el IVA pagado que corresponde de la comisión bancaria
                         pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngCtaIVAPagado, aFormasPago(vlintcontador).vldblIvaComisionBancaria, True, _
                                                 "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA", , , , , , , "CBA"
                     End If
                     ' Se genera un abono por la cantidad de la comisión bancaria y su iva que corresponde a la forma de pago
                     pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aFormasPago(vlintcontador).vllngCuentaContable, (aFormasPago(vlintcontador).vldblCantidadComisionBancaria + aFormasPago(vlintcontador).vldblIvaComisionBancaria), False, _
                                             "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA", , , , , , , "CBA"
                 End If
                 
                 If CDbl(Format(txtRetenionServ.Text, "")) > 0 Then 'se agrega la cuenta de retencion de servicios
                    If glngctaProvServClientes = 0 Or glngctaRetenServClientes = 0 Then
                        'No se encuentran registradas las cuentas contables de retención y provisión de servicios de clientes en los parámetros de contabilidad.
                        MsgBox SIHOMsg(1573), vbCritical, "Mensaje"
                        Exit Sub
                    Else
                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngctaRetenServClientes, CDbl(Format(txtRetenionServ.Text, "")), True, _
                        "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                    End If
                End If
                
                If vgintEmpresa <> llngCveEmpresaPCE Then
                'Si no es PCE
                    dblretencion = Val(Format(txtRetenionServ.Text, ""))
                    dblTotalFactura = Val(Format(txtFETotalFactura.Text, "")) - dblretencion
                    dblDedCoaseguro = Val(Format(txtFEDedyCoa, ""))
                Else
                'Si es PCE
                    If Val(Format(txtFEIVA.Text, "")) > 0 Then
                    'Si no se factura IVA, la cuenta por cobrar no debe tener IVA
'                        If UBound(aFormasPago) > 0 Then
'                            dblretencion = Val(Format(txtRetenionServ.Text, ""))
'                            dblSubtotalPCE = IIf(optPesos(1).Value, Val(Format(txtFETotalFactura.Text, "")), dblTotalFacturaP) - IIf(optPesos(1).Value, ldblIVACargosSelConvenio - dblIVAPaciente, dblIVAP) - dblretencion
'                            dblIVAFactura = CDbl(Format(dblIVAPolizaPCE, "############.00"))
'                            'dblPorcentaje = aFormasPago(vlintContador).vldblCantidad / (dblSubtotalPCE + dblIVAFactura)
'                        Else
'                            dblIVACredito = IIf(optPesos(1).Value, ldblIVACargosSelConvenio - dblIVAPaciente, dblIVAP)
'                            dblSubtotalCredito = aFormasPago(vlintContador).vldblCantidad - dblIVACredito
'                        End If
                        
                        
                        dblretencion = Val(Format(txtRetenionServ.Text, ""))
                        dblSubtotalPCE = IIf(optPesos(1).Value, Val(Format(txtFETotalFactura.Text, "")), dblTotalFacturaP) - IIf(optPesos(1).Value, ldblIVACargosSelConvenio - dblIVAPaciente, dblIVAP) - dblretencion
                        dblIVAFactura = CDbl(Format(dblIVAPolizaPCE, "############.00"))
                        dblPorcentaje = 0
                        dblIVACredito = 0
                        dblSubtotalCredito = 0
                    Else
                        dblSubtotalCredito = aFormasPago(vlintcontador).vldblCantidad  'dblSubtotalPCE
                    End If
                End If
                dblTotalContado = dblTotalContado + aFormasPago(vlintcontador).vldblCantidad
            End If
        Next vlintcontador
        If dblTotalContado > 0 Then
            If vgintEmpresa <> llngCveEmpresaPCE Then
                dblPorcentajeContado = dblTotalContado / ((dblTotalFactura - dblDedCoaseguro) * IIf(optPesos(1).Value, 1, vldblTipoCambio))
            Else
                dblPorcentajeContado = dblTotalContado / (dblSubtotalPCE + dblIVAFactura)
            End If
        Else
            dblPorcentajeContado = 0
        End If
    End If

    '---------------------------------------------------------------'
    ' Actualiza la fecha de facturación en caso de que sea un grupo '
    '---------------------------------------------------------------'
    If optGrupoCuenta(0).Value Then
        vlstrSentencia = "Update PvFacturacionConsolidada Set chrFolioFactura = '" & vlstrFolioDocumento & "' WHERE INTCVEGRUPO = " & txtMovimientoPaciente.Text
        pEjecutaSentencia vlstrSentencia
    End If
    
    '-------------------------------------'
    ' Guardar en la factura y su detallín '
    '-------------------------------------'
    'Si es socio, se consultando los datos del Socio en lugar de los de la empresa
    If vgSocio = True Then
    '****************************************************************************************************
    '****************************************************************************************************
    '****************************************************************************************************
        If OptTipoPaciente(0).Value Then
            'Paciente Interno
            vlstrSentencia = "SELECT rtrim(adPaciente.vchApellidoPaterno) || ' ' || rtrim(adPaciente.vchApellidoMaterno) || ' ' || rtrim(adPaciente.vchNombre) VCHRAZONSOCIAL, " & _
                             " adPaciente.chrRfc chrRfcEmpresa, ADPACIENTE.vchCallePart as chrCalle, ADPACIENTE.VCHNUMEROEXTERIOR, AdPaciente.VchNumeroInterior, adPaciente.vchTelefonoPart chrTelefonoEmpresa, " & _
                             " VCHCOLONIAPART vchcolonia, INTCIUDADPART intCveCiudad, VCHCODPOSTALPART vchcodigopostal, adpaciente.vchNumeroExterior, adPaciente.vchNumeroInterior " & _
                             " FROM adPaciente " & _
                             " INNER JOIN adadmision ON adpaciente.numcvepaciente = adadmision.numcvepaciente " & _
                             " WHERE adadmision.numnumcuenta = " & Trim(txtMovimientoPaciente)
            Set rsDatosEmpresa = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)

        ElseIf OptTipoPaciente(1).Value Then
            'Paciente Externo
            vlstrSentencia = "SELECT rtrim(Externo.chrApePaterno) || ' ' || rtrim(Externo.chrApeMaterno) || ' ' || rtrim(Externo.chrNombre) VCHRAZONSOCIAL, " & _
                             " Externo.chrRFC chrRfcEmpresa, EXTERNO.CHRCALLE, EXTERNO.VCHNUMEROEXTERIOR, EXTERNO.VchNumeroInterior, Externo.chrTelefono chrTelefonoEmpresa, " & _
                             " VCHCOLONIA vchcolonia, INTCIUDAD intCveCiudad, VCHCODPOSTAL vchcodigopostal " & _
                             " FROM Externo " & _
                             " INNER JOIN registroexterno ON externo.intnumpaciente = registroexterno.intnumpaciente " & _
                             " WHERE registroexterno.intnumcuenta = " & Trim(txtMovimientoPaciente)
            Set rsDatosEmpresa = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
        End If
    '****************************************************************************************************
    '****************************************************************************************************
    '****************************************************************************************************
    Else
        vlstrSentencia = "SELECT * FROM CcEmpresa WHERE intCveEmpresa = " & Trim(str(vgintEmpresa))
        Set rsDatosEmpresa = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
    End If
    
    vlstrSentencia = "SELECT * FROM PVFactura WHERE intConsecutivo = -1"
    Set rsFactura = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
    
    '-----------------------------------------------------'
    ' Definir cual será la fecha de ingreso de la factura '
    '-----------------------------------------------------'
    'No se usara más DTMFECHAINGRESO
'    vgstrParametrosSP = CStr(txtMovimientoPaciente.Text) & "|" & "E" & "|" & IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E"))
'    Set rsFechaIngreso = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelFechaingreso")
'    If rsFechaIngreso.RecordCount > 0 Then
'        dtmfecha = rsFechaIngreso!dtmfechaingreso
'    End If
    
    With rsFactura
        .AddNew
        !chrfoliofactura = vlstrFolioDocumento
        !dtmFechahora = vldtmFechaHoy + vldtmHoraHoy
        If vlBitExtranjero = 1 Then
            !CHRRFC = "XEXX010101000"
        Else
            !CHRRFC = IIf(Len(IIf(chkOtrosDatosFiscales.Value = 0, fStrRFCValido(rsDatosEmpresa!chrRFCempresa), fStrRFCValido(vlstrRFC))) < 12 Or Len(IIf(chkOtrosDatosFiscales.Value = 0, fStrRFCValido(rsDatosEmpresa!chrRFCempresa), fStrRFCValido(vlstrRFC))) > 13, "XAXX010101000", Trim(IIf(chkOtrosDatosFiscales.Value = 0, fStrRFCValido(rsDatosEmpresa!chrRFCempresa), fStrRFCValido(vlstrRFC))))
        End If
        !CHRNOMBRE = IIf(chkOtrosDatosFiscales.Value = 0, Trim(rsDatosEmpresa!VCHRAZONSOCIAL), Trim(vlstrNombreFactura))
        !chrCalle = IIf(chkOtrosDatosFiscales.Value = 0, Trim(rsDatosEmpresa!chrCalle), Trim(vlstrDireccion))
        !VCHNUMEROEXTERIOR = IIf(chkOtrosDatosFiscales.Value = 0, Trim(rsDatosEmpresa!VCHNUMEROEXTERIOR), Trim(vlstrNumeroExterior))
        !VCHNUMEROINTERIOR = IIf(chkOtrosDatosFiscales.Value = 0, Trim(rsDatosEmpresa!VCHNUMEROINTERIOR), Trim(vlstrNumeroInterior))
        !chrTelefono = IIf(chkOtrosDatosFiscales.Value = 0, Trim(rsDatosEmpresa!chrTelefonoEmpresa), Trim(vlstrTelefono))
        If dblExcedenteDeIVA > 0 Then
        'Si se cobró IVA de más al paciente, a la aseguradora no se le debe de cobrar IVA
            !smyIVA = 0
        Else
            If dblDescuentoEspecial = 0 Then
               !smyIVA = Round(IIf(optPesos(1).Value, ldblIVACargosSelConvenio - dblIVAPaciente, dblIVAP / vldblTipoCambio), 2)
            Else
               !smyIVA = Round(IIf(optPesos(1).Value, ldblIVACargosSelConvenio, dblIVAP / vldblTipoCambio), 2)
            End If
        End If
        !MNYDESCUENTO = Round((Round(ldblDescuentosFactura, 2) + Round(dblDescuentoEspecial, 2)), 2) 'sumamos el descuento especial
        
        !chrEstatus = " "
        !INTMOVPACIENTE = txtMovimientoPaciente.Text
        !CHRTIPOPACIENTE = IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E"))
        !SMIDEPARTAMENTO = vgintNumeroDepartamento
        !intCveEmpleado = vllngPersonaGraba
        !intNumCorte = vllngNumeroCorte
        !mnyAnticipo = Val(Format(txtFEPagos.Text, ""))
        '!mnyTotalFactura = CDbl(Format((IIf(optPesos(1).Value, Val(Format(txtFETotalFactura.Text, "")), dblTotalFacturaP / vldblTipoCambio)), "$ ###,###,###,###.00"))
        !mnyTotalFactura = Val(Format(txtFETotalFactura.Text, "")) - Val(Format(txtRetenionServ.Text, ""))
        !BITPESOS = IIf(optPesos(1).Value, 1, 0)
        !mnytipocambio = IIf(optPesos(1).Value, 0, vldblTipoCambio)
        !chrTipoFactura = "E"
        !intNumCliente = vllngNumCliente
        !intCveVentaPublico = 0
        'No se usara más DTMFECHAINGRESO
'        !dtmfechaingreso = IIf(rsFechaIngreso.RecordCount > 0, dtmfecha, !dtmFechaHora)
        !intCveCiudad = IIf(chkOtrosDatosFiscales.Value = 0, Trim(rsDatosEmpresa!intCveCiudad), lngCveCiudad)
        !intcveempresa = vgintEmpresa
        !mnyTotalPagar = Val(Format(txtFETotalPagar.Text, ""))
        !VCHCOLONIA = IIf(chkOtrosDatosFiscales.Value = 0, Trim(IIf(IsNull(rsDatosEmpresa!VCHCOLONIA), " ", rsDatosEmpresa!VCHCOLONIA)), strColonia)
        !VCHCODIGOPOSTAL = IIf(chkOtrosDatosFiscales.Value = 0, Trim(IIf(IsNull(rsDatosEmpresa!VCHCODIGOPOSTAL), " ", rsDatosEmpresa!VCHCODIGOPOSTAL)), strCodigoPostal)
        !vchSerie = strSerie
        !INTFOLIO = strFolio
        !MNYDESCUENTOESPECIAL = dblDescuentoEspecial 'agregamos el descuento especial
        !intTipoDetalleFactura = IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3))
        If cboUsoCFDI(1).ListIndex > -1 Then
            !intCveUsoCFDI = cboUsoCFDI(1).ItemData(cboUsoCFDI(1).ListIndex)
        End If
        !NUMPORCENTDESCUENTOESPECIAL = dblDescuentoEspecialPorcentaje
        !chrIncluirConceptosSeguro = vlchrIncluirConceptosSeguro
        !INTDESGLOSECONCEPTOSVICFDI = vlintDesgloseConceptosVICFDI
        !MNYRETENSERVICIOS = vldblImporteRetencionServ / IIf(optPesos(1).Value, 1, vldblTipoCambio) 'Val(Format(txtRetenionServ.Text, ""))
        !CHROBSERVACIONES = IIf(TxtObservacionesE = "", "", TxtObservacionesE.Text)
        !VCHREGIMENFISCALRECEPTOR = IIf(chkOtrosDatosFiscales.Value = 0, Trim(IIf(IsNull(rsDatosEmpresa!VCHREGIMENFISCAL), " ", rsDatosEmpresa!VCHREGIMENFISCAL)), vlstrDFRegimenFiscal)
        If claveCarta > 0 Then !intCveCarta = claveCarta
        .Update
        vlRFCTemp = Trim(!CHRRFC) 'Se guarda el RFC para posible envío de CFD/CFDi
    End With
    
    vldblIvaDescuento = 0
    vllngConsecutivoFactura = flngObtieneIdentity("SEC_PvFactura", rsFactura!intConsecutivo)
    
'    -----------------------------------------'
'     Asocia la factura cancelada y la creada '
'    -----------------------------------------'
    If chkFacturaSustitutaFE.Value = 1 And lstFacturaASustituirFE.ListCount > 0 Then
        For i = 0 To UBound(aFoliosPrevios())
            If aFoliosPrevios(i).chrfoliofactura <> "" Then
                pEjecutaSentencia "INSERT INTO PVREFACTURACION (chrFolioFacturaActivada, chrFolioFacturaCancelada) " & " VALUES ('" & vlstrFolioDocumento & "', '" & aFoliosPrevios(i).chrfoliofactura & "')"
            End If
        Next i
    End If
    
    vlstrSentencia = "SELECT * FROM PVDetalleFactura WHERE chrFolioFactura = ''"
    Set rsDetalleFactura = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
    With rsDetalleFactura
        For vlintcontador = 1 To grdFacturaEmpresa.Rows - 1
            .AddNew
            !chrfoliofactura = vlstrFolioDocumento
            !smicveconcepto = grdFacturaEmpresa.RowData(vlintcontador)
            !chrTipo = grdFacturaEmpresa.TextMatrix(vlintcontador, 6) 'Tipo de concepto (Ver llenaFactura)
            If !chrTipo = "NO" Or !chrTipo = "OC" Then
                ' la cantidad en la tabla no debe de ir redondeada
                '!mnyCantidad = IIf(optPesos(1).Value, Val(Format(grdFacturaEmpresa.TextMatrix(vlintContador, 9), "")), Val(Format(grdFacturaEmpresa.TextMatrix(vlintContador, 10), "")) / vldblTipoCambio)
                '!mnyCantidad = IIf(optPesos(1).Value, Val(Format(grdFacturaEmpresa.TextMatrix(vlintContador, 2), "")), Val(Format(grdFacturaEmpresa.TextMatrix(vlintContador, 10), "")) / vldblTipoCambio)
                !MNYCantidad = Val(Format(grdFacturaEmpresa.TextMatrix(vlintcontador, 2), ""))
                
            ElseIf !chrTipo = "DE" Or !chrTipo = "OD" Or !chrTipo = "OP" Then
                !MNYCantidad = IIf(optPesos(1).Value, Val(Format(grdFacturaEmpresa.TextMatrix(vlintcontador, 3), "")), Val(Format(grdFacturaEmpresa.TextMatrix(vlintcontador, 11), "")) / vldblTipoCambio)
                If !chrTipo = "OD" Then 'Descuentos por conceptos de seguro, identificar el importe gravado
                    If grdFacturaEmpresa.TextMatrix(vlintcontador, 7) = "EX" Then       'Excedente en suma asegurada
                        !mnyCantidadGravada = ldblExcedenteGrava
                    ElseIf grdFacturaEmpresa.TextMatrix(vlintcontador, 7) = "DE" Then   'Deducible
                        !mnyCantidadGravada = ldblDeducibleGrava
                    ElseIf grdFacturaEmpresa.TextMatrix(vlintcontador, 7) = "CO" Then   'Coaseguro
                        !mnyCantidadGravada = ldblCoaseguroGrava
                    ElseIf grdFacturaEmpresa.TextMatrix(vlintcontador, 7) = "CM" Then   'Coaseguro
                        !mnyCantidadGravada = ldblCoaseguroMedicoGrava
                    ElseIf grdFacturaEmpresa.TextMatrix(vlintcontador, 7) = "CA" Then   'Coaseguro adicional
                        !mnyCantidadGravada = ldblCoaseguroAdicionalGrava
                    ElseIf grdFacturaEmpresa.TextMatrix(vlintcontador, 7) = "CP" Then   'Copago
                        !mnyCantidadGravada = ldblCopagoGrava
                    ElseIf grdFacturaEmpresa.TextMatrix(vlintcontador, 7) = "EI" Then   'Excedente de IVA
                        !mnyCantidadGravada = 0
                    End If
                End If
            End If
            !MNYIVA = Val(grdFacturaEmpresa.TextMatrix(vlintcontador, 4))
            '!MNYDESCUENTO = Val(Format(FormatCurrency(Val(grdFacturaEmpresa.TextMatrix(vlintContador, 5)), 2), ""))
            !MNYDESCUENTO = Val(Format(grdFacturaEmpresa.TextMatrix(vlintcontador, 5), ""))
            If Trim(!chrTipo) <> "OD" Then
                If !MNYIVA <> 0 Then
'                   vldblIvaDescuento = vldblIvaDescuento + (!MNYDESCUENTO * (vgdblCantidadIvaGeneral / 100))
                    vldblIvaDescuento = vldblIvaDescuento + (!MNYDESCUENTO * (!MNYIVA / (!MNYCantidad - !MNYDESCUENTO)))
                End If
                
                If !MNYIVA <> 0 And !mnyIVAConcepto = 0 Then
'                   !mnyIVAConcepto = !mnyCantidad * (vgdblCantidadIvaGeneral / 100)
                    !mnyIVAConcepto = !MNYCantidad * (!MNYIVA / (!MNYCantidad - !MNYDESCUENTO))
                                        
                    !MNYRETSERVCONCEPTO = Val(Format(grdFacturaEmpresa.TextMatrix(vlintcontador, 14), ""))
                End If
                                        
                If Trim(!chrTipo) = "DE" Then
                    !mnyIVAConcepto = vldblIvaDescuento
                End If
            End If
            If dblDescuentoEspecial > 0 Then !MNYDESCUENTOESPECIAL = Val(Format(grdFacturaEmpresa.TextMatrix(vlintcontador, 15), ""))
            .Update
        Next vlintcontador
    End With
    rsDetalleFactura.Close
    rsFactura.Close
    
    '-----------------------------------------------------------------------------------------------------------'
    ' AGREGADO: Guardar información de la forma de pago en tabla intermedia para ingresarlos al libro de bancos '
    ' (Se requiere el consecutivo de la factura, por eso se guarda después de hacer el movimiento en PvFactura) '
    '-----------------------------------------------------------------------------------------------------------'
    If Val(Format(txtFETotalPagar.Text, "")) > 0 Then
        For vlintcontador = 0 To UBound(aFormasPago(), 1)
            If Not aFormasPago(vlintcontador).vlbolEsCredito Then 'Formas de pago distintas a Crédito
                vgstrParametrosSP = vllngNumeroCorte & "|" & fstrFechaSQL(Format(vldtmFechaHoy, "dd/mm/yyyy"), Format(vldtmHoraHoy, "hh:mm:ss")) & "|" & aFormasPago(vlintcontador).vlintNumFormaPago & "|" & aFormasPago(vlintcontador).lngIdBanco & "|" & _
                                    IIf(aFormasPago(vlintcontador).vldblTipoCambio = 0, aFormasPago(vlintcontador).vldblCantidad, aFormasPago(vlintcontador).vldblDolares) & "|" & IIf(aFormasPago(vlintcontador).vldblTipoCambio = 0, 1, 0) & "|" & aFormasPago(vlintcontador).vldblTipoCambio & "|" & _
                                    fstrTipoMovimientoForma(aFormasPago(vlintcontador).vlintNumFormaPago) & "|" & "FA" & "|" & vllngConsecutivoFactura & "|" & vllngPersonaGraba & "|" & vgintNumeroDepartamento & "|" & fstrFechaSQL(Format(vldtmFechaHoy, "dd/mm/yyyy"), Format(vldtmHoraHoy, "hh:mm:ss")) & "|" & "1" & "|" & cgstrModulo
                frsEjecuta_SP vgstrParametrosSP, "Sp_PvInsMovimientoBancoForma"
            
                ' Agregado para caso 8741
                ' Si la forma de pago es de tipo tarjeta se registra la disminución de la cantidad referente a la comision bancaria
                vldblComisionIvaBancaria = 0
                If aFormasPago(vlintcontador).vllngCuentaComisionBancaria <> 0 And aFormasPago(vlintcontador).vldblCantidadComisionBancaria <> 0 Then
                    If aFormasPago(vlintcontador).vldblTipoCambio = 0 Then
                         vldblComisionIvaBancaria = (aFormasPago(vlintcontador).vldblCantidadComisionBancaria + aFormasPago(vlintcontador).vldblIvaComisionBancaria) * -1
                    Else
                         vldblComisionIvaBancaria = (aFormasPago(vlintcontador).vldblCantidadComisionBancaria + aFormasPago(vlintcontador).vldblIvaComisionBancaria) / aFormasPago(vlintcontador).vldblTipoCambio * -1
                    End If
                    vgstrParametrosSP = vllngNumeroCorte & "|" & fstrFechaSQL(Format(vldtmFechaHoy, "dd/mm/yyyy"), Format(vldtmHoraHoy, "hh:mm:ss")) & "|" & aFormasPago(vlintcontador).vlintNumFormaPago & "|" & aFormasPago(vlintcontador).lngIdBanco & "|" & _
                                        vldblComisionIvaBancaria & "|" & IIf(aFormasPago(vlintcontador).vldblTipoCambio = 0, 1, 0) & "|" & aFormasPago(vlintcontador).vldblTipoCambio & "|" & _
                                        "CBA" & "|" & "FA" & "|" & vllngConsecutivoFactura & "|" & vllngPersonaGraba & "|" & vgintNumeroDepartamento & "|" & fstrFechaSQL(Format(vldtmFechaHoy, "dd/mm/yyyy"), Format(vldtmHoraHoy, "hh:mm:ss")) & "|" & "1" & "|" & cgstrModulo
                    frsEjecuta_SP vgstrParametrosSP, "Sp_PvInsMovimientoBancoForma"
                End If
            End If
        Next vlintcontador
    End If
    '-----------------------------------------------------------------------------------------------------------'
    
    'Inserta en PvFacturaImporte
    If dblExcedenteDeIVA = 0 Then
        vgstrParametrosSP = str(vllngConsecutivoFactura) & "|" & str(vldblsubtotalgravadoSinRound) & "|" & str(ldblImporteNoGravaSelConvenio) _
                            & "|" & str(vldbldescuentogravado) & "|" & str(Format((vldbldescuentototal - vldbldescuentogravado - vldbldescuentoexento), "###############.00")) & "|" & str(ldblImporteExentoSelConvenio) & "|" & str(vldbldescuentoexento)
    Else
        vgstrParametrosSP = str(vllngConsecutivoFactura) & "|0|" & str(Val(Format(txtFETotalFactura, ""))) _
                            & "|" & str(vldbldescuentogravado) & "|" & str(Format((vldbldescuentototal - vldbldescuentogravado - vldbldescuentoexento), "###############.00")) & "|" & str(ldblImporteExentoSelConvenio) & "|" & str(vldbldescuentoexento)
    End If
    frsEjecuta_SP vgstrParametrosSP, "SP_PVINSFACTURAIMPORTE"
    
    '-------------------------------------------------------------------'
    ' Agregar movimientos a póliza de los INGRESOS, su IVA y DESCUENTOS '
    '-------------------------------------------------------------------'
    pCuadreIngresosDescuentos False

    For vlintcontador = 0 To UBound(aCPCargosPoliza) - 1
        'Cambio para caso 8736
        'Si las cuentas de ingreso y descuento son iguales y el bitSaldarCuentas = 1
        'agrega un sólo movimiento a la póliza con el ingreso menos el descuento
        vlblnCuentaIngresoSaldada = False
        If aCPCargosPoliza(vlintcontador).lngCuentaIngreso = aCPCargosPoliza(vlintcontador).lngCuentaDescuento Then
            'Verifica bit pvConceptoFacturacion.bitSaldarCuentas
            vlintBitSaldarCuentas = 1
            frsEjecuta_SP CStr(aCPCargosPoliza(vlintcontador).lngConceptoFacturacion), "FN_PVSELBITSALDARCUENTAS", True, vlintBitSaldarCuentas
            If vlintBitSaldarCuentas = 1 Then
                '-----------------------------------'
                ' Abono para el Ingreso - Descuento '
                '-----------------------------------'
                If (aCPCargosPoliza(vlintcontador).dblCantidadIngreso - aCPCargosPoliza(vlintcontador).dblCantidadDescuento) > 0 Then
                    'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, (aCPCargosPoliza(vlintcontador).dblCantidadIngreso - aCPCargosPoliza(vlintcontador).dblCantidadDescuento), False
                    pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, (aCPCargosPoliza(vlintcontador).dblCantidadIngreso - aCPCargosPoliza(vlintcontador).dblCantidadDescuento), False, _
                    "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                    vlblnCuentaIngresoSaldada = True
                ElseIf (aCPCargosPoliza(vlintcontador).dblCantidadIngreso - aCPCargosPoliza(vlintcontador).dblCantidadDescuento) < 0 Then
                    vlblnCuentaIngresoSaldada = False   'no inserta movimiento porque es mayor el descuento que el ingreso
                ElseIf (aCPCargosPoliza(vlintcontador).dblCantidadIngreso - aCPCargosPoliza(vlintcontador).dblCantidadDescuento) = 0 Then
                    vlblnCuentaIngresoSaldada = True    'no agrega movimiento en la póliza porque no hay ingreso despues del descuento, por ser iguales las cantidades
                End If
            End If
        End If
        
        If vlblnCuentaIngresoSaldada = False Then                       '(1)
            '-----------------------'
            ' Abono para el Ingreso '
            '-----------------------'
            If aCPCargosPoliza(vlintcontador).dblCantidadIngreso > 0 Then
                'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).dblCantidadIngreso, False
                pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).dblCantidadIngreso, False, _
                "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                
            End If
            '-------------------------'
            ' Cargo para el descuento '
            '-------------------------'
            If aCPCargosPoliza(vlintcontador).dblCantidadDescuento > 0 Then
                'Si es un paciente de seguros y es un concepto de seguro
                'O si es excedente de IVA
                If sstFacturacion.TabEnabled(2) Then
                    'Si el concepto de seguro fue facturado al paciente:
                    'se carga la cuenta de ingresos del concepto, si no, se carga la de descuentos
                    If aCPCargosPoliza(vlintcontador).lngConceptoFacturacion = rsConceptosSeguro!CveExcedente And Not IsNull(rsControlSeguro!CHRFOLIOFACTURAEXCEDENTE) Then
                    'Excedente
                        'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True
                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", IIf(vlchrIncluirConceptosSeguro = "I", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).lngCuentaDescuento), aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True, _
                        "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                    
                    ElseIf aCPCargosPoliza(vlintcontador).lngConceptoFacturacion = rsConceptosSeguro!CveDeducible And Not IsNull(rsControlSeguro!CHRFOLIOFACTURADEDUCIBLE) Then
                    'Deducible
                        'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True
                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", IIf(vlchrIncluirConceptosSeguro = "I", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).lngCuentaDescuento), aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True, _
                        "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                            
                    ElseIf aCPCargosPoliza(vlintcontador).lngConceptoFacturacion = rsConceptosSeguro!CveCoaseguro And Not IsNull(rsControlSeguro!CHRFOLIOFACTURACOASEGURO) Then
                    'Coaseguro
                        'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True
                         pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", IIf(vlchrIncluirConceptosSeguro = "I", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).lngCuentaDescuento), aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True, _
                         "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                         
                    ElseIf aCPCargosPoliza(vlintcontador).lngConceptoFacturacion = rsConceptosSeguro!CveCoaseguroAdicional And Not IsNull(rsControlSeguro!CHRFOLIOFACTURACOASEGUROADICI) Then
                    'Coaseguro adicional
                        'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True
                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", IIf(vlchrIncluirConceptosSeguro = "I", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).lngCuentaDescuento), aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True, _
                        "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                    ElseIf aCPCargosPoliza(vlintcontador).lngConceptoFacturacion = rsConceptosSeguro!CveCopago And Not IsNull(rsControlSeguro!CHRFOLIOFACTURACOPAGO) Then
                    'Copago
                        'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True
                         pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", IIf(vlchrIncluirConceptosSeguro = "I", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).lngCuentaDescuento), aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True, _
                        "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                    ElseIf aCPCargosPoliza(vlintcontador).lngConceptoFacturacion = rsConceptosSeguro!CveCoaseguroMedico And Not IsNull(rsControlSeguro!CHRFOLIOFACTURACOASEGUROMED) Then
                    'Coaseguro médico
                        'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True
                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", IIf(vlchrIncluirConceptosSeguro = "I", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).lngCuentaDescuento), aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True, _
                        "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                    ElseIf aCPCargosPoliza(vlintcontador).lngConceptoFacturacion = rsConceptosSeguro!CveExcedenteDeIVA Then
                    'Excedente de IVA
                       'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True
                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", IIf(vlchrIncluirConceptosSeguro = "I", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).lngCuentaDescuento), aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True, _
                        "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                    Else
                        'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaDescuento, aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True
                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaDescuento, aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True, _
                        "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                    End If
                Else
                    'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaDescuento, aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True
                    pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaDescuento, aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True, _
                    "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                End If
            End If
        End If                                                          '(1)
    Next vlintcontador
    
    '----------------------------------------------------'
    ' Insertar las facturas parciales que se descontaron '
    '----------------------------------------------------'
    If UBound(alngFacturasParciales) > 0 Then
        vlstrSentencia = "SELECT * FROM PvFacturaParcialEmpresa WHERE intFacturaParcial = -1"
        Set rsFacturaParcialEmpresa = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
        With rsFacturaParcialEmpresa
            For vlintcontador = 1 To UBound(alngFacturasParciales)
                .AddNew
                !intFacturaEmpresa = vllngConsecutivoFactura
                !intFacturaParcial = alngFacturasParciales(vlintcontador)
                !intcveempresa = vgintEmpresa
                !INTMOVPACIENTE = CLng(txtMovimientoPaciente.Text)
                !CHRTIPOPACIENTE = IIf(OptTipoPaciente(0).Value, "I", "E")
                .Update
            Next vlintcontador
        End With
    End If
    
    '----------------------------------------------------'
    ' Movimientos contables por IVA cobrado y no cobrado '
    '----------------------------------------------------'
    If vldblTotalIVACredito > 0 Then
       'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", glngCtaIVANoCobrado, vldblTotalIVACredito, False
       pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngCtaIVANoCobrado, vldblTotalIVACredito, False, _
       "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
    End If
    
    If llngCveEmpresaPCE <> vgintEmpresa Then
    'No es PCE
        If CDbl(Val(Format(txtFEIVA.Text, ""))) - vldblTotalIVACredito > 0 Then
            'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", glngCtaIVACobrado, CDbl(Format(txtFEIVA.Text, "")) - vldblTotalIVACredito, False
            pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngCtaIVACobrado, CDbl(Format(txtFEIVA.Text, "")) - vldblTotalIVACredito, False, _
            "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
            
        ElseIf intIVATasaHospi = 1 And dblExcedenteDeIVA > 0 Then
        'Si se desglosa el IVA a la tasa del hospi y se cobró IVA mayor al de la cuenta
            'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", glngCtaIVACobrado, dblExcedenteDeIVA, False
            pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngCtaIVACobrado, dblExcedenteDeIVA, False, _
            "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
            'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", glngCtaIVACobrado, vldblTotalIVACredito + dblExcedenteDeIVA, True
            pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngCtaIVACobrado, vldblTotalIVACredito + dblExcedenteDeIVA, True, _
            "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
        End If
    Else
    'PCE
        If (dblIVAPolizaPCE - vldblTotalIVACredito) > 0 Then
            'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", glngCtaIVACobrado, dblIVAPolizaPCE - vldblTotalIVACredito, False
            pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngCtaIVACobrado, dblIVAPolizaPCE - vldblTotalIVACredito, False, _
            "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
        End If
            
        '----------------------------------------------'
        ' PCE Movimiento para los Gastos no deducibles '
        '----------------------------------------------'
        If optPesos(1).Value Then
            If dblIVAPolizaPCE <> (ldblIVACargosSelConvenio - dblIVAPaciente) Then
                'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", lngCuentaGastosNoDeducibles, dblIVAPolizaPCE - (ldblIVACargosSelConvenio - dblIVAPaciente), True
                pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", lngCuentaGastosNoDeducibles, dblIVAPolizaPCE - (ldblIVACargosSelConvenio - dblIVAPaciente), True, _
                "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
            End If
        Else
            If dblIVAPolizaPCE <> dblIVAP Then
                'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", lngCuentaGastosNoDeducibles, dblIVAPolizaPCE - dblIVAP, True
                pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", lngCuentaGastosNoDeducibles, dblIVAPolizaPCE - dblIVAP, True, _
                "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
            End If
        End If
    End If
    
    '---------------------------------------------------------'
    '          Verificar si los cargos cambiaron              '
    '---------------------------------------------------------'
    If fblnValidarCargos Then
        'Los cargos de la cuenta han sido modificados, consulte de nuevo.
         MsgBox SIHOMsg(1152), vbExclamation, "Mensaje"
         EntornoSIHO.ConeccionSIHO.RollbackTrans
         Unload Me
         Exit Sub
    End If
    
    '------------------------------------------'
    ' Poner el número de factura en los CARGOS '
    '------------------------------------------'
    frmFacturacion.Refresh
    pgbBarra.Value = 0
    freBarra.Top = 1500
    lblTextoBarra.Caption = "Facturando cargos, por favor espere..."
    freBarra.Visible = True
    freBarra.Refresh

    '------------------------------------------'
    ' Poner el número de factura en los CARGOS '
    '------------------------------------------'
    vlstrAux = ""
    vlstrSentencia = " Update PvCargo set chrFolioFactura = '" & Trim(vlstrFolioDocumento) & "'" & _
                     " Where intNumCargo IN ("
    For vlintcontador = 1 To grdCargos.Rows - 1
        If grdCargos.TextMatrix(vlintcontador, 0) = "*" _
            And (grdCargos.TextMatrix(vlintcontador, 18) = "" Or optTipoFacturacion(0).Value) Then
            vlstrSentencia = vlstrSentencia & Trim(str(grdCargos.RowData(vlintcontador)))
            vlstrAux = vlstrAux & "," & Trim(str(grdCargos.RowData(vlintcontador)))
            If vlintcontador < grdCargos.Rows - 1 Then
                vlstrSentencia = vlstrSentencia & ", "
            End If
        End If
        
        If vlintcontador Mod 50 = 0 And vlstrAux <> "" Then
            vlstrSentencia = Trim(vlstrSentencia)
            If Mid(vlstrSentencia, Len(vlstrSentencia), 1) = "," Then
                vlstrSentencia = Mid(vlstrSentencia, 1, Len(vlstrSentencia) - 1) & ") "
            Else
                vlstrSentencia = vlstrSentencia & ")"
            End If
            pEjecutaSentencia (vlstrSentencia)
            vlstrSentencia = ""
            vlstrSentencia = vlstrSentencia & " Update PvCargo set chrFolioFactura = '" & Trim(vlstrFolioDocumento) & "'" & _
                             " Where intNumCargo IN ("
            vlstrAux = ""
        End If
    
        ' Poner el concepto de factura configurado por la empresa en el cargo '
        vlstrSentenciaCargoEmp = " Update PvCargo set smicveconceptoempresa = " & _
                                                "(select cccatalogopce.smicveconcepto " & _
                                                " From cccatalogopce " & _
                                                " Where cccatalogopce.intcveempresa = " & Trim(str(vgintEmpresa)) & _
                                                " and trim(cccatalogopce.chrcvecargo) = " & Trim(grdCargos.TextMatrix(vlintcontador, 17)) & _
                                                " and cccatalogopce.chrtipocargo = '" & Trim(grdCargos.TextMatrix(vlintcontador, 1)) & "')" & _
                                 " Where intNumCargo = " & Trim(str(grdCargos.RowData(vlintcontador)))
        pEjecutaSentencia (vlstrSentenciaCargoEmp)
    
    Next vlintcontador
    
    vlintcontador = vlintcontador - 1
    If vlintcontador Mod 50 <> 0 And vlstrAux <> "" Then
        vlstrSentencia = Trim(vlstrSentencia)
        If Mid(vlstrSentencia, Len(vlstrSentencia), 1) = "," Then
            vlstrSentencia = Mid(vlstrSentencia, 1, Len(vlstrSentencia) - 1) & ") "
        Else
            vlstrSentencia = vlstrSentencia & ")"
        End If
        pEjecutaSentencia (vlstrSentencia)
    End If
            
    vlblnFaltaCtaCosto = False
    pContabilizaCostoHonorariosMedicos vlstrFolioDocumento, vllngNumeroCorte, dblPorcentaje, dblPorcentajeContado
    If vlblnFaltaCtaCosto = True Then
        EntornoSIHO.ConeccionSIHO.RollbackTrans
        freBarra.Visible = False
        Exit Sub
    End If
    
    '------------------ Agrega honorarios a pvhonorario cuando se pago de contado -------
    'Crea el honorario por pagar
    'If vlblnCredito Then
        'If Not fblnCreaHonorarioPorPagar(vlstrFolioDocumento, IIf(vlblnCredito, vlDblTotalCredito, dblTotalContado), vgintNumeroDepartamento, vllngPersonaGraba, vlblnCredito) Then
        If Not fblnCreaHonorarioPorPagar(vlstrFolioDocumento, IIf(vlblnCredito, vlDblTotalCredito, dblTotalContado), vgintNumeroDepartamento, vllngPersonaGraba, vlblnCredito, (CDbl(Format(txtFETotalFactura.Text, "")) - CDbl(Format(txtRetenionServ.Text, "")))) Then
            EntornoSIHO.ConeccionSIHO.RollbackTrans
            freBarra.Visible = False
            Exit Sub
        End If
    'End If
    '------------------------------------------------------------------------------------
    vlblnFaltaCtaCosto = False
    pContabilizaCostoServiciosSubrogado vlstrFolioDocumento, vllngNumeroCorte
    If vlblnFaltaCtaCosto = True Then
        EntornoSIHO.ConeccionSIHO.RollbackTrans
        freBarra.Visible = False
        Exit Sub
    End If
            
    '------ Se cambió la inserción de paquete facturado a esta parte para poder tomarlo como referencia al momento de generar el XML para AXA :P
    'Inserta en PvPaquetePacienteFacturado
    strParametros = txtMovimientoPaciente.Text & "|" & IIf(optGrupoCuenta(0).Value, "'G'", IIf(OptTipoPaciente(0).Value, "'I'", "'E'")) & "|" & Trim(vlstrFolioDocumento)
    frsEjecuta_SP strParametros, "SP_PVINSPAQUETESFACTURADOS"
    '################################# ARCHIVO XML REQUEST PARA WS AXA ##################################
    If vglngCveInterfazWS <> 0 Then
        'Se genera el archivo request XML para el WS de AXA
        vgstrParametrosSP = Trim(vlstrFolioDocumento) & "|" & Trim(vgstrContratoAXA) & "|" & Trim(txtMovimientoPaciente.Text) & "|" & Trim(vgstrProveedorAXA) & "|" & Trim(vgstrFolioReceta) & "|" & Trim(vgstrNumAutorizacionGralXML) & "|" & Trim(vgstrNumControlXML) & "|" & Trim(lblPaciente.Caption) & "|" & Trim(vgstrICDXML) & "|" & vgintNumeroModulo & "|" & vglngCveTipoIngresoXML & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & vgstrIP & "|" & vgstrEquipo & "|" & vglngNumPacienteXML & "|" & vllngPersonaGraba
        
        'BORRAMEEEEEEEEEEEEEEEEEEE!!!!!!!!!!!!
'        vgstrParametrosSP = Trim(vlstrFolioDocumento) & "|" & Trim(vgstrContratoAXA) & "|" & Trim("35") & "|" & Trim(vgstrProveedorAXA) & "|" & Trim(vgstrFolioReceta) & "|" & Trim(vgstrNumAutorizacionGralXML) & "|" & Trim(vgstrNumControlXML) & "|" & Trim(lblPaciente.Caption) & "|" & Trim(vgstrICDXML) & "|" & vgintNumeroModulo & "|" & vglngCveTipoIngresoXML & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & vgstrIP & "|" & vgstrEquipo & "|" & vglngNumPacienteXML & "|" & vllngPersonaGraba
        
        frsEjecuta_SP vgstrParametrosSP, "SP_GNINSXMLREQUESTFACTURAAXA", True
        
        'Se obtiene el consecutivo del log que se acaba de guardar
        vglngFolioFacturaLogAXA = flngObtieneIdentity("SEC_GNLOGINTERFAZAXA", 0)
        
        If Not fblnValidacionWSAXA(Trim(vlstrFolioDocumento), vglngFolioFacturaLogAXA, vglngCveTipoIngresoXML, Trim(txtMovimientoPaciente.Text), vglngNumPacienteXML, IIf(OptTipoPaciente(0).Value, "I", "E"), vllngPersonaGraba) Then
            On Error Resume Next
            EntornoSIHO.ConeccionSIHO.RollbackTrans

            'Se almacena en el log de transacciones de la interfaz de AXA después de una conexión fallida
            pCargaArreglo vlaryParametrosSalida, "|" & adDouble 'adBSTR 'adVarChar1
            vgstrParametrosSP = Trim(vlstrFolioDocumento) & "|" & vgintNumeroModulo & "|" & vglngCveTipoIngresoXML & "|" & Trim(txtMovimientoPaciente.Text) & "|" & vglngNumPacienteXML & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & Trim(vgstrIP) & "|" & "FA" & "|NO|" & strRequestXML & "|" & strResponseXML & "|" & Trim(vgstrEquipo) & "|" & vllngPersonaGraba & "|0|" & Trim(vgstrFolioReceta)
            frsEjecuta_SP vgstrParametrosSP, "sp_GNINSloginterfazaxa", , , vlaryParametrosSalida
            pObtieneValores vlaryParametrosSalida, 0
            
            MsgBox "No se pudo validar la factura con el web service de AXA, se cancelará la transacción.", vbCritical, "Mensaje"
            freBarra.Visible = False
            Exit Sub
        End If
    End If
    '#################################################################################################
            
    '---------------------------------------------------------'
    ' Cierra las cuentas del grupo y las pone como facturadas '
    '---------------------------------------------------------'
    If optGrupoCuenta(0).Value Then
        vlstrSentencia = txtMovimientoPaciente.Text
        frsEjecuta_SP vlstrSentencia, "Sp_PvUpdEstadoCuentasGpoFact"
    End If
    freBarra.Visible = False

    '------------------------------------------------------------------------------'
    ' (PEMEX)Se consulta los datos de la factura para saber el número de registros '
    '------------------------------------------------------------------------------'
    blnFacturaMultiple = False
    If fblnObtieneDatosFormatoProc(lngCveFormato, vllngConsecutivoFactura, lngRenglonesDetalle, lngTotalDocumentos, rsDatosFactura) Then
        blnFacturaMultiple = True
    End If
    
    If blnFacturaMultiple Then
        blnCancelarFacturacion = False
        blnFoliosOK = False
        lngInicial = 0
        lngFinal = 0
        strIdentificador = ""
        Do
            ReDim arrFolios(1)
            arrFolios(1) = vlstrFolioDocumento
            lngIndexFolios = 1
            blnFoliosOK = True
            If lngTotalDocumentos > 1 Then
                Set rsFolios = frsEjecuta_SP("FA|" & vgintNumeroDepartamento & "|" & lngTotalDocumentos - 1 & "|1|" & strIdentificador & "|" & lngInicial & "|" & lngFinal & "|0", "sp_GNSelFoliosFactMult")
                Do Until rsFolios.EOF
                    lngIndexFolios = lngIndexFolios + 1
                    ReDim Preserve arrFolios(lngIndexFolios)
                    If Not IsNull(rsFolios!vchFolio) Then
                       arrFolios(lngIndexFolios) = rsFolios!vchFolio
                    Else
                        blnFoliosOK = False
                    End If
                    rsFolios.MoveNext
                Loop
                rsFolios.Close
            End If
            
            If Not blnFoliosOK Then
                If fmsgNuevaSerieFolios("FA", vgintNumeroDepartamento, strIdentificador, lngInicial, lngFinal) = vbCancel Then
                    blnCancelarFacturacion = True
                End If
            End If
        Loop Until blnCancelarFacturacion Or blnFoliosOK
        
        If blnCancelarFacturacion Then
            EntornoSIHO.ConeccionSIHO.RollbackTrans
            Exit Sub
        End If
        
        'Registro de folios
        For lngContador = 2 To lngIndexFolios
            pEjecutaSentencia "insert into PVFacturaFolios(chrFolioFactura, chrFolioRelacionado, smiCveDepartamento, intnumDocumento) values('" & vlstrFolioDocumento & "', '" & arrFolios(lngContador) & "', " & vgintNumeroDepartamento & ", " & lngContador & ")"
        Next
    End If

'    pLiberaCorte vllngNumeroCorte
'    pLiberaCuenta

    '---------------------------------------------'
    ' Que se actualice el CONTROL DE ASEGURADORAS '
    '---------------------------------------------'
    If gintAseguradora = 1 Then
        vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & _
                            "|" & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & _
                            "|" & str(vgintEmpresa) & _
                            "|" & vlstrFolioDocumento
        frsEjecuta_SP vgstrParametrosSP, "Sp_PvUpdControlAseguradoraEmp"
    End If
    
    vlstrSentencia = "Delete From PvTipoPacienteProceso Where PvTipoPacienteProceso.intNumeroLogin = " & vglngNumeroLogin & _
                     " and PvTipoPacienteProceso.intproceso = " & enmTipoProceso.Facturacion
    pEjecutaSentencia vlstrSentencia
    
    vlstrSentencia = "Insert Into PvTipoPacienteProceso (intnumerologin, intproceso, chrtipopaciente) Values(" & vglngNumeroLogin & "," & enmTipoProceso.Facturacion & "," & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & ")"
    pEjecutaSentencia vlstrSentencia
    
    If optGrupoCuenta(0).Value Then
       vlstrSentencia = "SELECT intmovpaciente " & _
                         "     , chrtipopaciente " & _
                         " FROM PVDETALLEFACTURACONSOLID " & _
                         " WHERE PVDETALLEFACTURACONSOLID.intCveGrupo = " & txtMovimientoPaciente.Text
        Set rsCuentas = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
        Do Until rsCuentas.EOF
            pEstadoCuenta rsCuentas!INTMOVPACIENTE, rsCuentas!CHRTIPOPACIENTE, True
            rsCuentas.MoveNext
        Loop
    Else
        pEstadoCuenta CLng(txtMovimientoPaciente), IIf(OptTipoPaciente(0).Value, "I", "E"), False
    End If
    
    Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGraba, Me.Caption, Trim(vlstrFolioDocumento))
    
    '-------------------
    'Se libera la cuenta
    '-------------------
    pLiberaCuenta
        
    '---------------------------------------------------------------------------------------
    'Se agregan los movimientos de la factura base ó de la factura base y la nota de crédito(se abre y se cierra el corte)
    '---------------------------------------------------------------------------------------
    vllngCorteUsado = fRegistrarMovArregloCorte(vllngNumeroCorte, True)
    If vllngCorteUsado = 0 Then
       EntornoSIHO.ConeccionSIHO.RollbackTrans
       'No se pudieron agregar los movimientos de la operación al corte, intente de nuevo.
       MsgBox SIHOMsg(1320), vbExclamation, "Mensaje"
       Exit Sub
    Else
       If vllngCorteUsado <> vllngNumeroCorte Then
          'actualizamos el corte en el que se registró la factura, esto es por si hay un cambio de corte al momento de hacer el registro d ela información de la factura
          pEjecutaSentencia "Update pvfactura set INTNUMCORTE = " & vllngCorteUsado & " where intConsecutivo = " & vllngConsecutivoFactura
       End If
    End If
     
    '-------------------------------------------------------------------------------------------------
    'VALIDACIÓN DE LOS DATOS ANTES DE INSERTAR EN GNCOMPROBANTEFISCLADIGITAL EN EL PROCESO DE TIMBRADO
    '-------------------------------------------------------------------------------------------------
    If intTipoEmisionComprobante = 2 Then
       If Not fblnValidaDatosCFDCFDi(vllngConsecutivoFactura, "FA", IIf(intTipoCFDFactura = 1, True, False), CInt(strAnoAprobacion), strNumeroAprobacion) Then
          EntornoSIHO.ConeccionSIHO.RollbackTrans
          Exit Sub
       End If
    End If
        
    '-------------------------------------------
    'Se guarda el LOG y COMMIT a la transacción
    '-------------------------------------------
    Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGraba, Me.Caption, Trim(vlstrFolioDocumento))
    EntornoSIHO.ConeccionSIHO.CommitTrans 'cerramos la transacción de la factura
         
    '---------------------'
    ' Facturación digital '
    '---------------------'
    If intTipoEmisionComprobante = 2 Then
    '|  Genera el comprobante fiscal digital para la factura
        'Barra de progreso CFD
        pgbBarraCFD.Value = 100
        freBarraCFD.Top = 3200
        Screen.MousePointer = vbHourglass
        lblTextoBarraCFD.Caption = "Generando el Comprobante Fiscal Digital para la factura, por favor espere..."
        freBarraCFD.Visible = True
        freBarraCFD.Refresh
        frmFacturacion.Enabled = False
        blnNOMensajeErrorPAC = False
        If intTipoCFDFactura = 1 Then
           pLogTimbrado 2
           pMarcarPendienteTimbre vllngConsecutivoFactura, "FA", vgintNumeroDepartamento 'factura pendiente de timbre fiscal
        End If
        EntornoSIHO.ConeccionSIHO.BeginTrans 'inicia el proceso de timbrado de la factura
        If Not fblnGeneraComprobanteDigital(vllngConsecutivoFactura, "FA", IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), CInt(strAnoAprobacion), strNumeroAprobacion, IIf(intTipoCFDFactura = 1, True, False), , IIf(((vglngCveAddenda <> 0 And vgblnPaqueteAddenda = True And vglngPaqueteAddenda <> 0) Or (vglngCveAddenda <> 0 And vgblnPaqueteAddenda = False)), vglngCveAddenda, 0)) Then
           On Error Resume Next
           EntornoSIHO.ConeccionSIHO.CommitTrans
           If intTipoCFDFactura = 1 Then pLogTimbrado 1
           If vgIntBanderaTImbradoPendiente = 1 Then
              'El comprobante se realizó de manera correcta, sin embargo no fue posible confirmar el timbre fiscal
              MsgBox Replace(SIHOMsg(1306), "El comprobante", "La factura"), vbInformation + vbOKOnly, "Mensaje"
           ElseIf vgIntBanderaTImbradoPendiente = 2 Or vgIntBanderaTImbradoPendiente = 3 Then
                   '1338, 'La factura no pudo ser timbrada, será cancelada en el sistema.
                   MsgBox SIHOMsg(1338), vbCritical + vbOKOnly, "Mensaje"
                   pCancelarFactura Trim(vlstrFolioDocumento), vllngPersonaGraba, "frmFacturacion", True
                  
                   'Actualiza PDF al cancelar facturas
                   If Not fblnGeneraComprobanteDigital(vllngConsecutivoFactura, "FA", 1, 0, "", False, True, -1) Then
                          On Error Resume Next
                   End If
                   
                   'imprimimos la factura cancelada
                   fblnImprimeComprobanteDigital vllngConsecutivoFactura, "FA", "I", vllngFormatoaUsar, IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), "", True, "", -1, txtImpresionesFP(1).Text
                   Screen.MousePointer = vbDefault
                   freBarraCFD.Visible = False
                   frmFacturacion.Enabled = True
                   Unload Me
                   Exit Sub
           End If
        Else ' timbrado correcto
            EntornoSIHO.ConeccionSIHO.CommitTrans
            If intTipoCFDFactura = 1 Then
               pLogTimbrado 1
               pEliminaPendientesTimbre vllngConsecutivoFactura, "FA" 'quitamos la factur de pendientes de timbre fiscal
            End If
        End If
           
        'Barra de progreso CFD
        pBarraAlCien
    End If
    
    ' Impresión de la factura:
    MsgBox SIHOMsg(343), vbInformation, "Mensaje"
    
    '|  Facturación electrónica
    If intTipoEmisionComprobante = 2 Then
        If Not fblnImprimeComprobanteDigital(vllngConsecutivoFactura, "FA", "I", vllngFormatoaUsar, IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), "", True, "", -1, txtImpresionesFP(1).Text) Then
            pIniciaChkFacturaBase
            Unload Me
            Exit Sub
        End If
        
       
        ''***** SE COMENTAREÓ EL ENVÍO DE CFD POR CORREO PARA EMPRESAS POR SI SE REQUIERE AGREGAR POSTERIORMENTE *****'
        '        'Verifica el parámetro de envío de CFDs por correo
        '        If fblnRevisaEnvioCorreo(vgintClaveEmpresaContable) Then
        '            If MsgBox(SIHOMsg(1090), vbYesNo + vbQuestion, "Mensaje") = vbYes Then
        '                pEnviarCFD "FA", vllngConsecutivoFactura, CLng(vgintClaveEmpresaContable), Trim(vlRFCTemp), vllngPersonaGraba
        '            End If
        '        End If
        '
        '        vlRFCTemp = "" 'Se restaura el valor de la variable
        ''************************************************************************************************************'

    Else
        '(PEMEX)
        If blnFacturaMultiple Then
            pImprimeFormatoProc vllngFormatoaUsar, lngRenglonesDetalle, lngTotalDocumentos, rsDatosFactura, arrFolios
        Else
            pImprimeFormato vllngFormatoaUsar, vllngConsecutivoFactura
        End If
    End If
    pImprimirValesHonorarios vlstrFolioDocumento, vllngPersonaGraba
    
    
    Unload Me

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":cmdGrabarFacturaEmpresa_Click"))
End Sub

Private Sub pEstadoCuenta(intCveCuenta As Long, strTipoCuenta As String, blnCierraCuenta As Boolean, Optional blnFuePostergada As Boolean = False)
    Dim rsCuenta As New ADODB.Recordset
    Dim rs As New ADODB.Recordset
    Dim vlintEstadoFacturado As Integer
    Dim vlstrEstadoCerrada As String
    Dim vlstrSentencia As String
    
    ' Verifica el estado de la carta
    pEstadoCarta intCveCuenta, strTipoCuenta, blnCierraCuenta, blnFuePostergada
    
    '-----------------------------------------------------------'
    ' Contabilizar el numero de cargos sin factura en la cuenta '
    '-----------------------------------------------------------'
    vlstrSentencia = "SELECT Count(intNumcargo) Cargos FROM PvCargo " & _
                     " WHERE intMovPaciente = " & intCveCuenta & _
                     " AND chrTipoPaciente = '" & strTipoCuenta & "'" & _
                     " AND chrFolioFactura Is Null "
    Set rsTemp = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
    If rsTemp!Cargos = 0 Then
        vlintEstadoFacturado = 1
    Else
        vlintEstadoFacturado = 0
    End If
    
    If gintAseguradora = 1 And vlintEstadoFacturado = 1 Then
        'Si falta de facturar algún concepto de seguro, la cuenta no se pone como facturada
        pConsultaControl
        
        If rsControlSeguro.RecordCount > 0 Then
            If (dblExcedenteFacturado < (rsControlSeguro!MNYEXCEDENTESUMAASEGURADA - rsControlSeguro!MNYDESCUENTOEXCEDENTE)) Or _
               (dblDeducibleFacturado < (rsControlSeguro!MNYCANTIDADDEDUCIBLE - rsControlSeguro!MNYDESCUENTODEDUCIBLE) And rsControlSeguro!BITFACTURADEDUCIBLE = 1) Or _
               (dblCoaseguroFacturado < (rsControlSeguro!MNYCANTIDADCOASEGURO - rsControlSeguro!MNYDESCUENTOCOASEGURO) And rsControlSeguro!BITFACTURACOASEGURO = 1) Or _
               (dblCoaseguroMFacturado < (rsControlSeguro!MNYCANTIDADCOASEGUROMEDICO - rsControlSeguro!MNYDESCUENTOCOASEGUROMEDICO) And rsControlSeguro!BITFACTURACOASEGUROMEDICO = 1) Or _
               (dblCoaseguroAFacturado < (rsControlSeguro!MNYCANTIDADCOASEGUROADICIONAL - rsControlSeguro!MNYDESCUENTOCOASEGUROADICIONAL) And rsControlSeguro!bitFacturaCoaseguroAdicional = 1) Or _
               (dblCopagoFacturado < (rsControlSeguro!MNYCANTIDADCOPAGO - rsControlSeguro!MNYDESCUENTOCOPAGO) And rsControlSeguro!BITFACTURACOPAGO = 1) Or _
               rsPostergado!BITPOSTERGADA = 1 Then
                vlintEstadoFacturado = 0
            End If
        End If
    End If

    '-----------------------------------'
    ' Actualizar el estado de la cuenta '
    '-----------------------------------'
    If strTipoCuenta = "I" Then
        vlstrSentencia = "SELECT AdAdmision.* FROM AdAdmision WHERE AdAdmision.numNumCuenta = " & intCveCuenta
    Else
        vlstrSentencia = "SELECT RegistroExterno.* FROM RegistroExterno WHERE RegistroExterno.intNumCuenta = " & intCveCuenta
    End If
    
    Set rsCuenta = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
    If rsCuenta.RecordCount <> 0 Then
        frsEjecuta_SP intCveCuenta & "|" & Trim(strTipoCuenta) & "|" & vlintEstadoFacturado, "SP_PVUPDCUENTAFACTURADA"
        If rsCuenta!bitCuentaCerrada = 0 Or blnFuePostergada = True Then
            If chkFacturaBase Then
                If Not blnCierraCuenta Then
                    '|  ¿Desea cerrar la cuenta?
                    If MsgBox(SIHOMsg(432), vbQuestion + vbYesNo, "Mensaje") = vbYes Then blnCierraCuenta = True
                End If
                
                If blnCierraCuenta Then
                    vgstrParametrosSP = intCveCuenta & "|" & _
                                        Trim(strTipoCuenta) & "|1|" & _
                                        IIf(Trim(strTipoCuenta) = "E", fstrFechaSQL(fdtmServerFecha, fdtmServerHora), Null)
                    frsEjecuta_SP vgstrParametrosSP, "SP_EXUPDCERRARABRIRCUENTA"
                    
                    If Trim(strTipoCuenta) = "E" And vlblnDesactivarExterno Then
                        'El paciente es externo y está prendido el parámetro para desactivarlo al facturarle y cerrar su cuenta
                        
                        vlstrSentencia = "SELECT DTMFECHAHORAEGRESO FROM EXPACIENTEINGRESO WHERE intnumcuenta = " & str(intCveCuenta) & " AND DTMFECHAHORAEGRESO IS NULL"
                        Set rs = frsRegresaRs(vlstrSentencia)
                        If rs.RecordCount <> 0 Then
                            If IsNull(rs!DTMFECHAHORAEGRESO) Then
                                frsEjecuta_SP str(intCveCuenta), "Sp_GnEgresaExterno"
                            End If
                        End If

                        vlstrSentencia = "UPDATE EXEXTERNOACTIVADO SET chrEstatus = 'I', DTMFECHAHORASALIDA = getdate()" & _
                                         " WHERE intMovPaciente = " & intCveCuenta & " and chrEstatus = 'A'"
                        pEjecutaSentencia vlstrSentencia
                    End If
                    
                    pEjecutaSentencia "UPDATE PVCARGOPROGRAMADO SET chrestado = 'S' WHERE intnumcuenta = " & intCveCuenta & " AND chrtipoingreso = '" & Trim(strTipoCuenta) & "'"
                ElseIf blnFuePostergada = True Then
                    vgstrParametrosSP = intCveCuenta & "|" & _
                                        Trim(strTipoCuenta) & "|" & IIf(blnCierraCuenta = True, 1, 0) & "|" & _
                                        IIf(Trim(strTipoCuenta) = "E", fstrFechaSQL(fdtmServerFecha, fdtmServerHora), Null)
                    frsEjecuta_SP vgstrParametrosSP, "SP_EXUPDCERRARABRIRCUENTA"
                    
                    If Trim(strTipoCuenta) = "E" And vlblnDesactivarExterno Then
                        'El paciente es externo y está prendido el parámetro para desactivarlo al facturarle y cerrar su cuenta
                        
                        vlstrSentencia = "SELECT DTMFECHAHORAEGRESO FROM EXPACIENTEINGRESO WHERE intnumcuenta = " & str(intCveCuenta) & " AND DTMFECHAHORAEGRESO IS NULL"
                        Set rs = frsRegresaRs(vlstrSentencia)
                        If rs.RecordCount <> 0 Then
                            If IsNull(rs!DTMFECHAHORAEGRESO) Then
                                frsEjecuta_SP str(intCveCuenta), "Sp_GnEgresaExterno"
                            End If
                        End If

                        vlstrSentencia = "UPDATE EXEXTERNOACTIVADO SET chrEstatus = 'I', DTMFECHAHORASALIDA = getdate()" & _
                                         " WHERE intMovPaciente = " & intCveCuenta & " and chrEstatus = 'A'"
                        pEjecutaSentencia vlstrSentencia
                    End If
                    
                    pEjecutaSentencia "UPDATE PVCARGOPROGRAMADO SET chrestado = 'S' WHERE intnumcuenta = " & intCveCuenta & " AND chrtipoingreso = '" & Trim(strTipoCuenta) & "'"
                End If
                
                
            End If
        Else
            If Trim(strTipoCuenta) = "E" And vlblnDesactivarExterno Then
                'El paciente es externo y está prendido el parámetro para desactivarlo al facturarle y cerrar su cuenta
                vlstrSentencia = "SELECT DTMFECHAHORAEGRESO FROM EXPACIENTEINGRESO WHERE intnumcuenta = " & str(intCveCuenta) & " AND DTMFECHAHORAEGRESO IS NULL"
                Set rs = frsRegresaRs(vlstrSentencia)
                If rs.RecordCount <> 0 Then
                    If IsNull(rs!DTMFECHAHORAEGRESO) Then
                        frsEjecuta_SP str(intCveCuenta), "Sp_GnEgresaExterno"
                    End If
                End If
                
                vlstrSentencia = "UPDATE EXEXTERNOACTIVADO SET chrEstatus = 'I', DTMFECHAHORASALIDA = getdate()" & _
                                 " WHERE intMovPaciente = " & intCveCuenta & " and chrEstatus = 'A'"
                pEjecutaSentencia vlstrSentencia
            End If
        End If
    End If
    rsCuenta.Close
End Sub

Private Sub pConsultaFacturas(vlstrFolioFactura As String, vlintIndice As Integer)
    '-----------------------------------------------------------------------
    ' Este procedure nos muestra una factura en el grid de facturas cuando
    ' se esta consultando.
    ' El indice indica si es 0 = Paciente 1 = Empresa
    '-----------------------------------------------------------------------
    Dim rsdf As New ADODB.Recordset 'RS para el detalle de la factura
    Dim vlstrSentencia As String
    Dim grdConsultaFactura As MSHFlexGrid
        
    vlstrSentencia = "SELECT pvDetalleFactura.*, PVConceptoFacturacion.chrDescripcion Concepto FROM PVDetalleFactura " & _
                    " INNER JOIN PVConceptoFacturacion ON PVDetalleFactura.smiCveConcepto = PVConceptoFacturacion.smiCveConcepto " & _
                    " WHERE chrFolioFactura = '" & Trim(vlstrFolioFactura) & "'"
    Set rsdf = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
    If rsdf.RecordCount > 0 Then
        If vlintIndice = 0 Then         'Si se esta consultando la factura del paciente
            Set grdConsultaFactura = grdFacturaPaciente
            pLimpiaGrid grdConsultaFactura
            pConfiguraGridFacturaPaciente
        Else                            ' Esta sería la de la empresa
            Set grdConsultaFactura = grdFacturaEmpresa
            pLimpiaGrid grdConsultaFactura
            pConfiguraGridFacturaPaciente
        End If
        
        With grdConsultaFactura
            .Row = 1
            Do While Not rsdf.EOF
                If rsdf!chrTipo <> "DE" And rsdf!chrTipo <> "OD" Then
                    If .RowData(1) <> -1 Then
                       .Rows = .Rows + 1
                    End If
                    .Row = .Rows - 1
                    .RowData(.Row) = 1
                    .TextMatrix(.Row, 1) = rsdf!Concepto
                    .TextMatrix(.Row, 2) = Format(rsdf!MNYCantidad, "$ ###,###,###,###.00")
                End If
                rsdf.MoveNext
            Loop
            
            If rsConsultaFacturas!MNYDESCUENTO > 0 Then
                .Rows = .Rows + 1
                .Row = .Rows - 1
                .RowData(.Row) = -1
                .TextMatrix(.Row, 1) = "DESCUENTOS"
                .TextMatrix(.Row, 3) = Format(rsConsultaFacturas!MNYDESCUENTO, "$ ###,###,###,###.00")
            End If
            
            With rsConsultaFacturas
                If vlintIndice = 0 Then         'Totales de la factura del paciente
                    txtFPSubtotal.Text = Format(!mnyTotalFactura - !smyIVA, "$ ###,###,###,##0.00")
                    txtFPDescuentos.Text = Format(!MNYDESCUENTO, "$ ###,###,###,##0.00")
                    txtFPIVA.Text = Format(!smyIVA, "$ ###,###,###,##0.00")
                    txtFPTotalFactura.Text = Format(!mnyTotalFactura, "$ ###,###,###,##0.00")
                    txtFPNotasCredito.Text = Format(!mnyTotalNotasCredito, "$ ###,###,###,##0.00")
                    txtFPTotalPagar.Text = Format(Val(Format(txtFPTotalFactura.Text, "")) - Val(Format(txtFPNotasCredito.Text, "")), "$ ###,###,###,##0.00")
                Else                            'Totales de la empresa
                    txtFESubtotal.Text = Format(!mnyTotalFactura - !smyIVA, "$ ###,###,###,##0.00")
                    txtFEDescuentos.Text = Format(!MNYDESCUENTO, "$ ###,###,###,##0.00")
                    txtFEIVA.Text = Format(!smyIVA, "$ ###,###,###,##0.00")
                    txtFETotalFactura.Text = Format(!mnyTotalFactura, "$ ###,###,###,##0.00")
                    txtFETotalPagar.Text = Format(!mnyTotalFactura, "$ ###,###,###,##0.00")
                End If
                
                lblFechaFactura(vlintIndice).Caption = Format(!dtmFechahora, "Long Date")
                If !chrEstatus = "C" Then
                    lblCancelada(vlintIndice).Visible = True
                Else
                    lblCancelada(vlintIndice).Visible = False
                End If
                txtFacturasEncontradas(vlintIndice).Caption = .Bookmark & " de " & Trim(str(.RecordCount)) & " Facturas encontradas" & _
                                    Chr(13) & "Folio de factura : " & Trim(!chrfoliofactura)
                lblFechaFactura(vlintIndice).Caption = Format(!dtmFechahora, "Long Date")
                If !chrEstatus = "C" Then
                    lblCancelada(vlintIndice).Visible = True
                Else
                    lblCancelada(vlintIndice).Visible = False
                End If
                txtFacturasEncontradas(vlintIndice).Caption = .Bookmark & " de " & Trim(str(.RecordCount)) & " Facturas encontradas" & _
                                    Chr(13) & "Folio de factura : " & Trim(!chrfoliofactura)
            End With
        End With
    End If
    rsdf.Close
End Sub

Private Sub cmdAnteriorFactura_Click(Index As Integer)
    With rsConsultaFacturas
        If .State = 1 Then
            If Not .BOF Then
                .MovePrevious
                If .BOF Then
                    .MoveNext
                Else
                    pConsultaFacturas !chrfoliofactura, Index
                End If
            End If
        End If
    End With
End Sub

Private Sub cmdSiguienteFactura_Click(Index As Integer)
    With rsConsultaFacturas
        If .State = 1 Then
            If Not .EOF Then
                .MoveNext
                If .EOF Then
                    .MovePrevious
                Else
                    pConsultaFacturas !chrfoliofactura, Index
                End If
            End If
        End If
    End With
End Sub

Private Function fblnDatosValidosPaciente() As Boolean
    'Para validar si se cuenta con lo necesario para facturar al paciente
    Dim vlstrSentencia As String
    Dim vPrinter As Printer
    Dim lngContador As Long
    Dim dblTipoCambio As Double
    Dim dblIVA As Double
    Dim vlintcontador As Integer

    fblnDatosValidosPaciente = True
    
    dblTipoCambio = fdblTipoCambio(fdtmServerFecha, "V")

    'Permisos:
    fblnDatosValidosPaciente = fblnRevisaPermiso(vglngNumeroLogin, vllngNumeroOpcion, "E")
    
    'Formatos de factura:
    If fblnDatosValidosPaciente And vllngFormatoaUsar = 0 Then
        fblnDatosValidosPaciente = False
        'No se encontró un formato válido de factura, por favor de uno de alta.
        MsgBox SIHOMsg(373), vbCritical, "Mensaje"
    End If
    
    'Cuentas de IVA cobrado y no cobrado
    If fblnDatosValidosPaciente And (glngCtaIVACobrado = 0 Or glngCtaIVANoCobrado = 0) Then
        fblnDatosValidosPaciente = False
        'No se encuentran registradas las cuentas de IVA cobrado y no cobrado en los parámetros generales del sistema.
        MsgBox SIHOMsg(729), vbCritical, "Mensaje"
    End If
    
    'Cuenta bloqueada:
    If fblnDatosValidosPaciente And vgblnCuentaBloqueada Then
        fblnDatosValidosPaciente = False
        'No se puede realizar ésta operación. La cuenta se encuentra bloqueada por trabajo social.
        MsgBox SIHOMsg(662), vbCritical, "Mensaje"
    End If
    
    'Conceptos para facturar:
    If fblnDatosValidosPaciente And grdFacturaPaciente.RowData(1) = -1 Then
        fblnDatosValidosPaciente = False
        'No existen conceptos para facturar.
        MsgBox SIHOMsg(372), vbCritical, "Mensaje"
    End If
    
    'Impresora:
    If fblnDatosValidosPaciente Then
        If rsImpresoras.RecordCount > 0 Then
            For Each vPrinter In Printers
                If UCase(Trim(vPrinter.DeviceName)) = UCase(Trim(rsImpresoras!Impresora)) Then
                    Set Printer = vPrinter
                End If
            Next
        Else
            fblnDatosValidosPaciente = False
            'No se tiene asignada una impresora en la cual imprimir las facturas
            MsgBox SIHOMsg(492), vbCritical, "Mensaje"
        End If
    End If
    
    'Control de aseguradora, si el paciente es de seguros:
    If fblnDatosValidosPaciente And sstFacturacion.TabEnabled(2) Then
        If rsControlSeguro.RecordCount = 0 Then
            fblnDatosValidosPaciente = False
            'Que no tiene el control de la aseguradora capturado
            MsgBox SIHOMsg(370), vbCritical, "Mensaje"
            sstFacturacion.Tab = 2
            cboParentesco.SetFocus
        End If
    End If
    
    'Cuentas contables para los conceptos de seguro:
    If fblnDatosValidosPaciente Then
        For lngContador = 0 To UBound(aCPCargosPoliza) - 1
            Set rsTemp = frsRegresaRs("SELECT * FROM PvConceptoFacturacion WHERE smiCveConcepto = " & aCPCargosPoliza(lngContador).lngConceptoFacturacion, adLockReadOnly, adOpenForwardOnly)
            If (aCPCargosPoliza(lngContador).dblCantidadIngreso > 0 And aCPCargosPoliza(lngContador).lngCuentaIngreso = 0) Or _
               (aCPCargosPoliza(lngContador).dblCantidadDescuento > 0 And aCPCargosPoliza(lngContador).lngCuentaDescuento = 0) Then
                fblnDatosValidosPaciente = False
                'No existe cuenta contable para el concepto de facturación:
                MsgBox SIHOMsg(907) + " " + rsTemp!chrDescripcion, vbInformation + vbOKOnly, "Mensaje"
            End If
        Next lngContador
    End If
    
    'Ciudad o razón social, para los datos fiscales del paciente:
    If fblnDatosValidosPaciente And cboCiudad.ListIndex = -1 Or Trim(txtNombreFactura.Text) = "" Then
        fblnDatosValidosPaciente = False
        'Registre los datos fiscales del paciente.
        MsgBox SIHOMsg(939), vbOKOnly + vbInformation, "Mensaje"
    End If
    
    'Datos fiscales del paciente
    'Si la version de CFDI es 4.0, es obligatoria la captura del régimen fiscal
    If fblnDatosValidosPaciente And vgstrVersionCFDI = "4.0" Then
        If cboRegimenFiscal.ListIndex = 0 Then
            fblnDatosValidosPaciente = False
            'Dato no válido, seleccione el régimen fiscal en los datos del paciente.
            MsgBox "Dato no válido, seleccione el régimen fiscal en los datos del paciente.", vbExclamation + vbOKOnly, "Mensaje"
            'If cboRegimenFiscal.Enabled Then cboRegimenFiscal.SetFocus
        End If
    End If
    
    'Si la version de CFDI es 4.0, es obligatoria la captura del código postal a 5 dígitos
    If fblnDatosValidosPaciente Then
        If vgstrVersionCFDI = "4.0" Then
            If Trim(txtCPFactura.Text) = "" Or Len(txtCPFactura.Text) < 5 Then
                fblnDatosValidosPaciente = False
                '¡Dato no válido, el código postal debe ser de 5 dígitos!
                MsgBox SIHOMsg(1181) & Chr(13) & "Verifique los datos fiscales del paciente.", vbExclamation + vbOKOnly, "Mensaje"
            End If
        Else
            If Trim(txtCPFactura.Text) <> "" And Len(txtCPFactura.Text) <> 5 Then ' el código postal puede ser null o de 5 dígitos
                fblnDatosValidosPaciente = False
                '¡Dato no válido, el código postal debe ser de 5 dígitos!
                MsgBox SIHOMsg(1181) & Chr(13) & "Verifique los datos fiscales del paciente.", vbExclamation + vbOKOnly, "Mensaje"
            End If
        End If
    End If
    
    'Cuenta puente para las notas de crédito
    If fblnDatosValidosPaciente And lngCuentaPuenteNotasCredito = 0 And (dblNotasCreditoPaciente + dblNotasCreditoCS > 0) Then
        fblnDatosValidosPaciente = False
        'No se ha registrado la "Cuenta puente para notas de crédito a pacientes"
        MsgBox SIHOMsg(1001), vbOKOnly + vbInformation, "Mensaje"
    End If
    
    'Folio y formato para las notas de crédito
    If fblnDatosValidosPaciente And dblNotasCreditoCS > 0 Then
        If blnErrorManejoFolio Then
            fblnDatosValidosPaciente = False
            MsgBox SIHOMsg(383) & " Manejo de la serie de folios de notas.", vbOKOnly + vbExclamation, "Mensaje"
        End If
        If fblnDatosValidosPaciente And lngNumeroTipoFormatoNotas = 0 Then
            fblnDatosValidosPaciente = False
            MsgBox SIHOMsg(383) & " Formato para impresión de nota.", vbOKOnly + vbExclamation, "Mensaje"
        End If
        If fblnDatosValidosPaciente And Trim(strImpresoraNotas) = "" Then
            fblnDatosValidosPaciente = False
            'No se tiene asignada una impresora en la cual imprimir las notas
            MsgBox SIHOMsg(993), vbOKOnly + vbExclamation, "Mensaje"
        End If
    End If
    
    'Total a pagar, subtotal o IVA negativo
    If fblnDatosValidosPaciente And Val(Format(txtFPTotalPagar.Text, "")) < 0 Then
        fblnDatosValidosPaciente = False
        'No se puede generar la factura, el total a pagar es negativo
        MsgBox SIHOMsg(996), vbOKOnly + vbInformation, "Mensaje"
    End If
    
    'Subtotal o IVA negativos
    If Val(Format(txtFPSubtotal.Text, "")) < 0 Or Val(Format(txtFPIVA, "")) < 0 Then
        fblnDatosValidosPaciente = False
        '¡No se puede generar la factura con importes negativos!
        MsgBox SIHOMsg(1084), vbOKOnly + vbInformation, "Mensaje"
    End If
    
'   Se comentó la siguiente validación por el caso HMG Caso 15829 E, PV Mensaje de IVA no corresponde al importe gravado
'    If fblnDatosValidosPaciente Then
'    'Si el IVA no corresponde al importe gravado
'        dblIVA = Format(IIf(vgintEmpresa = 0, (vldblsubtotalgravado * vgdblCantidadIvaGeneral / 100), IIf(optPesos(0).Value, dblIVAPaciente, dblIVAP / dblTipoCambio)), "###############.00")
'
'        If Format(Abs(Format(vldblsubtotalgravado * (vgdblCantidadIvaGeneral / 100), "############.00") - dblIVA), "############.00") > 0.03 Then
'            fblnDatosValidosPaciente = False
'            '¡El IVA no corresponde al importe gravado!
'            MsgBox SIHOMsg(1085), vbCritical, "Mensaje"
'        End If
'    End If
'   ----------------------------------------------------
                   
    'Cuenta contable para excedentes por conceptos de seguro mayores a la cuenta
    If fblnDatosValidosPaciente And blnExcedenteHonorarios Then
        If lngCuentaExcedenteHonorarios = 0 Then
            fblnDatosValidosPaciente = False
            'No se ha registrado la cuenta contable de la empresa para excedentes por conceptos de seguro mayores a la cuenta
            MsgBox SIHOMsg(998), vbOKOnly + vbInformation, "Mensaje"
        Else
            'Que la cuenta acepte movimientos
            Set rsTemp = frsEjecuta_SP(CStr(lngCuentaExcedenteHonorarios), "Sp_CnSelCuentaContable")
            If rsTemp.RecordCount > 0 Then
                If IsNull(rsTemp!Bitestatusmovimientos) Or rsTemp!Bitestatusmovimientos = 0 Then
                    fblnDatosValidosPaciente = False
                    'La cuenta contable para excedentes por conceptos de seguro no acepta movimientos
                    MsgBox SIHOMsg(1002), vbOKOnly + vbInformation, "Mensaje"
                End If
            End If
        End If
    End If
    
    If fblnDatosValidosPaciente And dblExcedenteDeIVA > 0 Then
        'El IVA de los conceptos de seguro es mayor al IVA de la cuenta. ¿Desea facturar?
        
        'Se comenta pregunta si desea facturar debido a que ya no es válida la funcionalidad de excedente en IVA por validaciones en la facturación 3.3
        '----------------------------------------------------------------------
        'If MsgBox(SIHOMsg(1068), vbYesNo + vbQuestion, "Mensaje") = vbNo Then
        '    fblnDatosValidosPaciente = False
        'Else
        '    If Not blnConceptoExcedenteDeIVA Then
        '        'No existe concepto de facturación para el
        '        MsgBox SIHOMsg(1061) & " Excedente de IVA", vbExclamation + vbOKOnly, "Mensaje"
        '        fblnDatosValidosPaciente = False
        '    End If
        'End If
        '----------------------------------------------------------------------
        
        MsgBox Replace(SIHOMsg(1068), "¿Desea facturar?", ""), vbOKOnly + vbQuestion, "Mensaje"
        fblnDatosValidosPaciente = False
    End If
    
    'Si existen cargos sin facturar, se muestra mensaje
    If fblnDatosValidosPaciente And blnCargosSinFacturar Then
        'Existen cargos que no serán facturados, desea continuar?
        If MsgBox(SIHOMsg(1077), vbYesNo + vbQuestion, "Mensaje") = vbNo Then
            fblnDatosValidosPaciente = False
        End If
    End If
    
    'Conceptos de factura en negativo
    If fblnDatosValidosPaciente Then
        For vlintcontador = 1 To grdFacturaPaciente.Rows - 1
            If Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 3), "")) < 0 Or Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 9), "")) < 0 Then
                fblnDatosValidosPaciente = False
                '¡No se puede generar la factura con importes negativos!
                MsgBox SIHOMsg(1084), vbOKOnly + vbInformation, "Mensaje"
                Exit For
            End If
        Next
    End If
    
End Function
Public Function fblnValidarCargos() As Boolean
On Error GoTo NotificaError
    Dim rsCargosVer As New ADODB.Recordset
    Dim rsConcepto As New ADODB.Recordset
    Dim rsCompletaDescripcion As New ADODB.Recordset
    Dim vlstrPacientesSinCodigo As String
    Dim vlintCompleta As Integer
    Dim vlstrSentencia As String
    Dim llngCargosGrid As Long
        
    Dim vlintseq As Integer
       
    Dim vldblContarCargos As Double
    Dim vldblIVA As Double

    fblnValidarCargos = False
    vldblContarCargos = 0
     '18084
    claveCarta = 0
    If cboCartaAutorizacion.ListIndex > 0 Then
         claveCarta = cboCartaAutorizacion.ItemData(cboCartaAutorizacion.ListIndex)
    End If
    
    If optGrupoCuenta(0).Value Then
        vgstrParametrosSP = txtMovimientoPaciente.Text & "|X|" & IIf(chkIncluyeCargosFacturados.Value = 1, 2, 0) & "|-1|" & IIf(optGrupoCuenta(0).Value, "G", "C") & IIf(optGrupoCuenta(0).Value, "|S", "|N") & "|" & IIf(lblnCambiaNombreCargos, 1, 0) '& "|" & claveCarta
    Else
        vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & IIf(chkIncluyeCargosFacturados.Value = 1, 2, 0) & "|-1|C|N|" & IIf(lblnCambiaNombreCargos, 1, 0) '& "|" & claveCarta
    End If
    Set rsCargosVer = frsEjecuta_SP(vgstrParametrosSP, "SP_PVSELCARGOSPACIENTE")
    
    grdCargos.Row = 0
    With rsCargosVer
        If optOrdenCargos(1).Value Then
            .Sort = "ConceptoSoloPVCARGO"  '"Concepto"
        ElseIf optOrdenCargos(2).Value Then
            .Sort = "NombreDepartamento"               '''' Acomodar el rs ''''
        ElseIf optOrdenCargos(0).Value Then
            .Sort = "dtmFechaHora"
        ElseIf optOrdenCargos(6).Value Then
            .Sort = "DescripcionCargosSoloPVCARGO" '"DescripcionCargo"
        End If
        
        Do While Not .EOF
            If !cveCarta = claveCarta Or (claveCarta = 0) Then ''18084
                If optMuestraCargos(0).Value Or (IIf(IsNull(!Excluido), "", !Excluido) = "X" And optMuestraCargos(2).Value) Or (IIf(IsNull(!Excluido), "", !Excluido) <> "X" And optMuestraCargos(1).Value) Then vldblContarCargos = vldblContarCargos + 1
            End If
            .MoveNext
        Loop
        'Diferencia en numero de filas a resultados del RS
        llngCargosGrid = grdCargos.Rows - 1
        If llngCargosGrid = 1 Then  'esto cuando no hay cargos (se facturan conceptos de seguro,fac pac), se muestra un renglon vacio en el grid
            If grdCargos.TextMatrix(1, 1) = "" Then llngCargosGrid = 0
        End If
        If vldblContarCargos <> llngCargosGrid Then
            fblnValidarCargos = True
        Else
        'Si son iguales verificar numero de cargo, IVA y descuento
            If .RecordCount <> 0 Then .MoveFirst
            Do While Not .EOF
                If grdCargos.Row + 1 < grdCargos.Rows Then
                    If !cveCarta = claveCarta Or (claveCarta = 0) Then ''18084
                        vldblIVA = IIf(IsNull(!MontoIVA), 0, !MontoIVA)
                        If IsNull(!Concepto) Then
                            If IsNull(!ConceptoSoloPVCARGO) Then
                                If optGrupoCuenta(0).Value Then
                                    vlstrPacientesSinCodigo = "G" & txtMovimientoPaciente.Text
                                Else
                                    vlstrPacientesSinCodigo = IIf(OptTipoPaciente(0).Value, "I", "E") & txtMovimientoPaciente.Text
                                End If
            
                                Set rsInformacionFaltantePCE = frsEjecuta_SP(vlstrPacientesSinCodigo & "|" & vllngEmpresaManejaCargos, "Sp_Ccverificarinfofaltantepce")
                                Set rsInformacionFaltantePCE = frsUltimoRecordset(rsInformacionFaltantePCE)
                                If rsInformacionFaltantePCE.RecordCount > 0 Then
                                    For vlintseq = 0 To rsInformacionFaltantePCE.RecordCount - 1
                                        Set rsCompletaDescripcion = frsEjecuta_SP(vlstrPacientesSinCodigo & "|" & vllngEmpresaManejaCargos, "Sp_CcverificaCargoPCE")
                                        Set rsCompletaDescripcion = frsUltimoRecordset(rsCompletaDescripcion)
                                        If rsInformacionFaltantePCE.RecordCount > 0 Then
                                            For vlintCompleta = 0 To rsInformacionFaltantePCE.RecordCount - 1
                                                If Trim(!CHRCVECARGO) = Trim(rsCompletaDescripcion!ClaveCargo) Then
                                                    vlstrSentencia = "Select * FROM PVCONCEPTOFACTURACION Where smiCveConcepto= " & Trim(rsCompletaDescripcion!smicveconcepto)
                                                    Set rsConcepto = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
                                                    If rsConcepto.RecordCount > 0 Then
                                                        'IVA
                                                        vldblIVA = ((!MNYCantidad * !mnyPrecio) - !MNYDESCUENTO) * (rsConcepto!smyIVA / 100)
                                                    End If
                                                End If
                                                rsCompletaDescripcion.MoveNext
                                            Next
                                        End If
                                        rsInformacionFaltantePCE.MoveNext
                                    Next
                                End If
                            Else
                                vldblIVA = IIf(IsNull(!MontoIVASoloPVCARGO), 0, !MontoIVASoloPVCARGO)
                            End If
                        End If

                        If optMuestraCargos(0).Value Or (IIf(IsNull(!Excluido), "", !Excluido) = "X" And _
                           optMuestraCargos(2).Value) Or (IIf(IsNull(!Excluido), "", !Excluido) <> "X" And _
                           optMuestraCargos(1).Value) Then
                           grdCargos.Row = grdCargos.Row + 1
                                         ' (0) Todos (2) Excluidos (3) No excluidos
                            If (grdCargos.RowData(grdCargos.Row) <> !IntNumCargo) Or _
                               (IIf(CDbl(grdCargos.TextMatrix(grdCargos.Row, 8)) > IIf(IsNull(vldblIVA), 0, vldblIVA), CDbl(grdCargos.TextMatrix(grdCargos.Row, 8)) - IIf(IsNull(vldblIVA), 0, vldblIVA), IIf(IsNull(vldblIVA), 0, vldblIVA) - CDbl(grdCargos.TextMatrix(grdCargos.Row, 8))) > 0.01) Or _
                               (IIf(CDbl(grdCargos.TextMatrix(grdCargos.Row, 6)) > !MNYDESCUENTO, CDbl(grdCargos.TextMatrix(grdCargos.Row, 6)) - !MNYDESCUENTO, !MNYDESCUENTO - CDbl(grdCargos.TextMatrix(grdCargos.Row, 6))) > 0.01) Or _
                               (grdCargos.TextMatrix(grdCargos.Row, 3) <> Format(!mnyPrecio, "$ ###,###,###,###.00####")) Then
                               
'                               (grdCargos.TextMatrix(grdCargos.Row, 8) <> Format((IIf(IsNull(vldblIVA), 0, vldblIVA)), "$ ###,###,###,###.00####")) Or _
'                               (grdCargos.TextMatrix(grdCargos.Row, 6) <> Format(!MNYDESCUENTO, "$ ###,###,###,###.00####")) Or _

                                fblnValidarCargos = True
                            End If
                                         '  Paquetes
                            If (grdCargos.TextMatrix(grdCargos.Row, 30) <> IIf(IsNull(!ClavePaquete), 0, !ClavePaquete)) Or _
                               (grdCargos.TextMatrix(grdCargos.Row, 31) <> IIf(IsNull(!CantidadPaquete) Or !PaquetesAsignados = 0, "", IIf(!CantidadPaquete = 0, 0, !CantidadPaquete))) Or _
                               (grdCargos.TextMatrix(grdCargos.Row, 32) <> IIf(IsNull(!CantidadExtraPaquete) Or !PaquetesAsignados = 0, "", IIf(!CantidadExtraPaquete = 0, 0, !CantidadExtraPaquete))) Or _
                               (grdCargos.TextMatrix(grdCargos.Row, 54) <> IIf(!PaquetesAsignados = 0, "", Val(grdCargos.TextMatrix(grdCargos.Row, 4)) - (Val(grdCargos.TextMatrix(grdCargos.Row, 31)) + Val(grdCargos.TextMatrix(grdCargos.Row, 32))))) Then
                               fblnValidarCargos = True
                            End If
                        End If
                    End If
                Else
                    'fblnValidarCargos = True
                End If
                    .MoveNext
                Loop
            End If
            .Close
        End With
        
         
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":fblnValidarCargos"))
End Function
Public Function fblnValidarPagos() As Boolean
On Error GoTo NotificaError
   '' se usa el mismo inicio que el procedimiento pllenapagos
    Dim vlstrSentencia As String
    Dim rs As New ADODB.Recordset
    Dim vldblTotalPagos As Double
    Dim vldblCantidad As Double
    Dim vlintContadorI As Integer
    Dim vlblnbandera As Boolean 'utilizada para indicar si coinciden los registros
        
    fblnValidarPagos = False
    ''misma consulta que busca los pagos en el procedimiento pllenapagos
    vlstrSentencia = "Select intNumPago " & _
                     "     , pvpago.intNumConcepto " & _
                     "     , chrDescripcion Concepto " & _
                     "     , dtmFecha Fecha" & _
                     "     , chrFolioRecibo Recibo" & _
                     "     , mnyCantidad Cantidad " & _
                     "     , Case bitPesos when 1 then 'Pesos' Else 'Dolares' end as Moneda " & _
                     "     , mnyTipoCambio TipoCambio" & _
                     "     , chrTipo TipoPago " & _
                     "     , isnull(chrFolioFactura,'') Factura" & _
                     "     , 'E' EntradaSalida " & _
                     "     , intNumCorte Corte " & _
                     "     , pvconceptopagoempresa.intnumerocuenta CuentaConcepto " & _
                     "  From pvpago " & _
                     "       inner join pvConceptoPago on pvPago.intNumConcepto = pvConceptoPago.intNumConcepto " & _
                     "       inner join pvconceptopagoempresa on pvconceptopago.intnumconcepto = pvconceptopagoempresa.intnumconcepto " & _
                     " Where pvconceptopagoempresa.intcveempresa = " & vgintClaveEmpresaContable
    If optGrupoCuenta(0).Value Then
        vlstrSentencia = vlstrSentencia & _
                         " and (PVPAGO.intmovpaciente, PVPAGO.chrtipopaciente) " & _
                         "       In (Select Distinct INTMOVPACIENTE, CHRTIPOPACIENTE From PVDETALLEFACTURACONSOLID Where INTCVEGRUPO = " & Trim(txtMovimientoPaciente.Text) & ")"
    Else
        vlstrSentencia = vlstrSentencia & _
                         " and chrTipoPaciente = " & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & _
                         "   and intMovPaciente = " & Trim(txtMovimientoPaciente.Text)
    End If
    vlstrSentencia = vlstrSentencia & _
                     IIf(chkIncluyePagosFacturados.Value, " and not (bitCancelado = 1 and chrFolioFactura is null)", " and bitCancelado = 0")
    vlstrSentencia = vlstrSentencia & " UNION Select intNumSalida, pvSalidaDinero.intNumConcepto, " & _
                    " chrDescripcion Concepto, dtmFecha Fecha, chrFolioRecibo Recibo, " & _
                    " mnyCantidad*-1 Cantidad, " & _
                    " Case bitPesos when 1 then 'Pesos' Else 'Dolares' end as Moneda, " & _
                    " mnyTipoCambio TipoCambio, 'SD' TipoPago, " & _
                    " isnull(chrFolioFactura,'') Factura, " & _
                    " 'S' EntradaSalida, " & _
                    " intNumCorte Corte, " & _
                    " pvconceptopagoempresa.intnumerocuenta CuentaConcepto " & _
                    " From pvSalidaDinero " & _
                    " inner join pvConceptoPago on pvSalidaDinero.intNumConcepto = pvConceptoPago.intNumConcepto " & _
                    " inner join pvconceptopagoempresa on pvconceptopago.intnumconcepto = pvconceptopagoempresa.intnumconcepto " & _
                    " where pvconceptopagoempresa.intcveempresa = " & vgintClaveEmpresaContable
    If optGrupoCuenta(0).Value Then
        vlstrSentencia = vlstrSentencia & _
                         " and (pvSalidaDinero.intmovpaciente, pvSalidaDinero.chrtipopaciente) " & _
                         "       In (Select Distinct INTMOVPACIENTE, CHRTIPOPACIENTE From PVDETALLEFACTURACONSOLID Where INTCVEGRUPO = " & Trim(txtMovimientoPaciente.Text) & ")"
    Else
        vlstrSentencia = vlstrSentencia & _
                         " and chrTipoPaciente = " & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & _
                         "   and intMovPaciente = " & Trim(txtMovimientoPaciente.Text)
    End If
    vlstrSentencia = vlstrSentencia & _
                     IIf(chkIncluyePagosFacturados.Value, " and not (bitCancelado = 1 and chrFolioFactura is null)", " and bitCancelado = 0")

    Set rs = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
    
    With rs
    If .RecordCount = 0 Then ' no hay pagos en la base
      If grdPagos.Rows - IIf(grdPagos.TextMatrix(1, 1) = "", 2, 1) > 0 Then
         '' si hay pagos en el  grid
         fblnValidarPagos = True
         Exit Function
      End If
    Else
      '' revisar contra el grid pagos en cantidad de registros
        If .RecordCount <> grdPagos.Rows - IIf(grdPagos.TextMatrix(1, 1) = "", 2, 1) Then
            fblnValidarPagos = True
            Exit Function
        Else
            rs.MoveFirst
            Do While Not .EOF
                vlblnbandera = False
                For vlintContadorI = 1 To grdPagos.Rows - 1
                    If grdPagos.TextMatrix(vlintContadorI, 1) = !Concepto And grdPagos.TextMatrix(vlintContadorI, 2) = !fecha And _
                       grdPagos.TextMatrix(vlintContadorI, 3) = Format(rs!cantidad, "$ ###,###,###,###.00") And grdPagos.TextMatrix(vlintContadorI, 4) = Trim(rs!Recibo) And _
                       grdPagos.TextMatrix(vlintContadorI, 6) = IIf(IsNull(rs!Factura), "", rs!Factura) Then
                       vlblnbandera = True
                       Exit For
                    End If
                Next vlintContadorI
                
                If Not vlblnbandera Then ' si no encontro el pago, o el pago cambió
                      fblnValidarPagos = True
                      Exit Function
                End If
               rs.MoveNext
            Loop
        End If
     End If
    End With

Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":fblnValidarPagos"))
End Function

Private Function fblnFPPendientesTimbre(Optional Tipofacturas As Integer = 0) As Boolean
'Función que permite consultar facturas y verificar si alguna de ellas esta pendiente de timbre fiscal
'Tipofacturas = 0 busca facturas parciales para poder hacer la factura base
'Tipofacturas = 1 busca facturas de pacientes para poder hacer la factura de la empresa
'tipofacturas = 2 busca notas de crédito para poder hacer la factura del paciente
    Dim ObjRS As New ADODB.Recordset
    Dim objSTR As String
    Dim Objmensaje As String
    
    fblnFPPendientesTimbre = False
    
    objSTR = IIf(Tipofacturas <> 2, "Select count(*) from GNPENDIENTESTIMBREFISCAL " & _
                                   "where CHRTIPOCOMPROBANTE = 'FA' AND INTCOMPROBANTE in", _
                                   "Select count(*) from GNPENDIENTESTIMBREFISCAL " & _
                                   "where CHRTIPOCOMPROBANTE = 'CR' AND INTCOMPROBANTE in")
    
    
    
    If Tipofacturas = 0 Then
       objSTR = objSTR & " (SELECT INTFACTURAPARCIAL FROM PvFacturasParciales WHERE INTMOVPACIENTE = " & txtMovimientoPaciente.Text & _
                                                                              " AND CHRTIPOPACIENTE = '" & IIf(Me.optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")) & "')"
    ElseIf Tipofacturas = 1 Then
       objSTR = objSTR & " (SELECT INTCONSECUTIVO FROM PVFACTURA WHERE INTMOVPACIENTE = " & txtMovimientoPaciente.Text & _
                                                                   "AND CHRTIPOPACIENTE ='" & IIf(Me.optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")) & "' " & _
                                                                   "AND CHRESTATUS<> 'C' AND CHRTIPOFACTURA ='P')"
    Else
 
       objSTR = objSTR & "(Select CcNota.intConsecutivo From CcNota Inner Join CcNotaFactura On CcNota.intConsecutivo = CcNotaFactura.intconsecutivo" & _
                                                                         " And chrTipoFolio = 'FA' Where CcNota.INTMOVPACIENTE = " & txtMovimientoPaciente.Text & _
                                                                         " And CcNota.chrTipopaciente = '" & IIf(OptTipoPaciente(0).Value, "I", "E") & "'" & _
                                                                         " And CcNota.chrTipo = 'CR' And CcNota.chrEstatus = 'A' And CcNota.chrNotaDirigida = 'P' And CcNota.bitAutomatica <> 1)"
    
    End If
    Set ObjRS = frsRegresaRs(objSTR, adLockOptimistic)
    If ObjRS.RecordCount > 0 Then
       If ObjRS.Fields(0) > 0 Then
          fblnFPPendientesTimbre = True
          
          If Tipofacturas = 2 Then
             '¡No se puede realizar la factura base! Existen notas de crédito pendientes de timbre fiscal.
             MsgBox Replace(SIHOMsg(1303), "facturas parciales", "notas de crédito"), vbExclamation + vbOKOnly, "Mensaje"
          Else
             '¡No se puede realizar la factura base! Existen facturas parciales pendientes de timbre fiscal.
             '¡No se puede realizar la factura de la empresa! Existen facturas de paciente pendientes de timbre fiscal.
             MsgBox SIHOMsg(IIf(Tipofacturas = 0, 1303, 1312)), vbExclamation + vbOKOnly, "Mensaje"
          End If
       End If
    End If
End Function
Private Sub pActualizaDatosFiscales()

    vgstrParametrosSP = fStrRFCValido(txtRFCFactura.Text) & "|" & _
                            Trim(txtNombreFactura.Text) & "|" & _
                            Trim(txtDireccionFactura(0).Text) & "|" & _
                            Trim(txtTelefonoFactura.Text) & "|" & _
                            IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & _
                            CLng(txtMovimientoPaciente.Text) & "|" & _
                            cboCiudad.ItemData(cboCiudad.ListIndex) & "|" & _
                            Trim(txtColoniaFactura.Text) & "|" & _
                            Trim(txtCPFactura.Text) & "|" & _
                            Trim(txtFacturaNumExterior.Text) & "|" & _
                            Trim(txtFacturaNumInterior.Text) & "|" & _
                            IIf((chkExtranjero.Value = vbChecked), 1, 0) & "|" & _
                            Trim(txtDireccionFactura(1).Text) & "|" & _
                            IIf(cboRegimenFiscal.ItemData(cboRegimenFiscal.ListIndex) = 0, "", cboRegimenFiscal.ItemData(cboRegimenFiscal.ListIndex))
                            
    frsEjecuta_SP vgstrParametrosSP, "Sp_Pvinsinsdatofiscal"
    
End Sub


Private Sub cmdGrabarFacturaPaciente_Click()

On Error GoTo NotificaError

    Dim vlintcontador As Long                       'Para los ciclos
    Dim rsFormasPagos As New ADODB.Recordset        'Sólo para traer las formas de pago de cada pago
    Dim rsPvDetalleCorte As New ADODB.Recordset     'Aqui añado los registros del detalle del corte
    Dim rsFactura As New ADODB.Recordset            'RS tipo tabla para guardar la fractura
    Dim rsDetalleFactura As New ADODB.Recordset     'RS tipo tabla para el Detalle de la FACTURA
    Dim rsDatosCliente As New ADODB.Recordset       'RS para los datos de cliente
    Dim rsTipoPaciente As New ADODB.Recordset       'RS para el Tipo de paciente en crédito
    Dim rsFacturaPacConcepto As New ADODB.Recordset 'Para guardar en PvFacturaPacienteConcepto
    Dim RsComprobante As New ADODB.Recordset     'Para actualizar la tabla GNCOMPROBANTEFISCALDIGITAL y saber si se mostrar o no informacion del paciente en BITEXCLUIRNOMBREPACIENTE
    
    Dim vlstrSentencia As String                    'Sirve pa TODOS los RS's
    Dim vllngNumeroCorte As Long                    'Trae el numero de corte actual
    Dim vldblTipoCambio As Double                   'Trae el tipo de cambio utilizado en la pantalla de Formas de pago
    Dim vlblnbandera As Boolean                     'Bandera para control de flujo
    
    Dim vlstrFolioDocumento As String               'Este es el numero de factura a utilizar
    Dim vlstrFolioFactura As String                 'cuando hay factura parcial y nota de crédito almacena el folio de la factura
    Dim vllngConsecutivoFactura As Long             '
    Dim vlstrTipoPacienteCredito As String          'Sería 'PI' 'PE' 'EM' 'CO' 'ME'
    Dim vllngCveClienteCredito As Long              'Clave del empledo o del médico
    Dim vlstrTipoPacienteCredito2 As String         'Sería 'PI' 'PE' se usa para los que son empleados
    Dim vllngPersonaGraba As Long                   'Persona que esta generando la factura
    Dim vllngNumCliente As Long                     'Numero de cliente en caso de que sea a acredito
    Dim vldtmFechaHoy As Date                       'Varible con la Fecha actual
    Dim vldtmHoraHoy As Date                        'Varible con la Hora actual
    Dim vllngFoliosFaltantes As Long                'Nomas para controlar los folios faltantes de las facturas
    Dim vllngCorteGrabando As Long                  'Banderita para hacer que el corte ponga el estatus de Grabando
    Dim vldblTotalIVACredito As Double              'IVA Total que no se ha cobrado aún, osea que se va a la cuenta de IVA no cobrado
    
    Dim vldblFacturaDeducible As Double             'Monto del deducible a facturar
    Dim vldblFacturaCoaseguro As Double             'Monto del coaseguro a facturar
    Dim vldblFacturaCoaseguroMedico As Double       'Monto del coaseguro médico a facturar
    Dim vldblFacturaCoaseguroAdicional As Double    'Monto del coaseguro adicional a facturar
    Dim vldblFacturaCopago As Double                'Monto del copago a facturar
    Dim vldblFacturaExcedente As Double             'Monto del Excedente a facturar
    Dim vlintContFacturas As Long                   'Sirve para contar las facturas (Base y parciales)
    Dim vldblFacturaCoaseguroMedicoPorCobrar As Double    'Monto del coaseguro médico que quedaría pendiente de cobrar al momento de facturar
    
    Dim vlfpaFormaPago As clsFormaPago              'Para poder obtener los objetos de la clase Formas de pago y llenar el arreglo aFormasPago
    Dim vllngMovimientoCredito As Long              'Para la impresión del pagaré y guarda el Movimiento de crédito en caso de que exista uno.
    Dim vlstrAux As String                          'string auxliar para grabar folio de factura en cargos
    
    'Variables para obtener los datos fiscales
    Dim vlstrDFRFC As String
    Dim vlstrDFNombre As String
    Dim vlstrDFDireccion As String
    Dim vlstrDFNumExterior As String
    Dim vlstrDFNumInterior As String
    Dim vlBitDFExtranjero As Integer
    Dim lngCveCiudad As Long                        'Clave de la ciudad del domicilio fiscal
    Dim vlstrDFTelefono As String
    Dim vlstrDFColonia As String
    Dim vlstrDFCodigoPostal As String
    Dim vlstrDFRegimenFiscal As String
    
    'Datos de la factura
    Dim vldblIVA As Double
    Dim vldblIvaDescuento As Double
    Dim vldblDescuento As Double
    Dim vldblAnticipo As Double
    Dim vldblTotalFactura As Double
    Dim vlintBitPesos As Integer
    Dim vlintNumCliente As Integer
    Dim vlcolFacturasParcialesAux As Collection
    Dim vlaryConsecutivosFacturas() As typFacturas
    Dim vlblnFacturaBase As Boolean
    Dim vlblnDescuentoParcial As Boolean
    Dim vlintFacturasGrabadas As Long
    Dim vlrsResultado As New ADODB.Recordset
    Dim dblTotalPagar As Double                     'Total a pagar de la factura
    Dim dblPorcentajeCredito As Double              'Para calcular qué porcentaje es el pago en crédito respecto al total de la factura
    Dim dblPorcentajeContado As Double              'Para calcular qué porcentaje es el pago de contado respecto al total de la factura
    Dim dblSubtotalCredito As Double                'Para guardar el subtotal en el movimiento de crédito
    Dim dblTotalContado As Double                   'Para acumular el importe de los movimientos de contado
    Dim dblIVACredito As Double                     'Para guardar el IVA en el movimiento de crédito
    Dim dblProporcionIVA As Double                  'Para extraer el porcentaje que corresponde a IVA no cobrado
    Dim rsgrupo As New ADODB.Recordset              'Para tener las cuentas del grupo
    Dim rsPvDatosFiscales As New ADODB.Recordset    'Datos fiscales del paciente
    
    Dim strParametros As String
    
    Dim strFolioNota As String
    Dim lngIDnota As Long
    Dim intContadorNotas As Integer
    Dim rsNota As New ADODB.Recordset
    Dim rsCcNota As New ADODB.Recordset
    Dim rsCcNotaFactura As New ADODB.Recordset
    Dim rsCcNotaDetalle As New ADODB.Recordset
    Dim strFolio As String
    Dim strSerie As String
    Dim strNumeroAprobacion As String
    Dim strAnoAprobacion As String
    Dim intTipoEmisionComprobanteNota As Integer
    
    Dim strAnoAprobacionNota As String
    Dim strNumeroAprobacionNota As String
    Dim strSerieNota As String
    Dim strFolioSoloNota As String
    
    Dim intPaquetes As Integer
    Dim strSql As String
    Dim rsAux As New ADODB.Recordset
    Dim rsCargoExcedente As New ADODB.Recordset
    Dim vlExisteConcepto As Boolean
    
    Dim blnImprimirNotaCredito As Boolean
    Dim MensajeFactParciales As String 'cuando hay pendientes de timbrar
    Dim MensajeFactParcialesCanceladas As String
    Dim vllngCorteUsado As Long
    Dim vlintEstadoTimbradoFBase As Integer
    Dim vlintEstadoTimbradoNota As Integer
    Dim vlblnPagoAutomaticoporCancelacion As Boolean
    Dim vlRFCTemp As String
    Dim rsMovimientosRecibo As ADODB.Recordset
    Dim lngConsecutivoCorte As Long
    
    Dim blnImprieParciales As Boolean
    Dim vlintFolio As Long
    
    Dim strSentencia As String
    Dim intCveUsoCFDINota As Long
    Dim rsAplAnt As ADODB.Recordset
    Dim intAnticiposConCFDI As Integer
    Dim lngCveAplAnt As Long
    Dim blnImprimirAplAnt As Boolean
    Dim vldblTotalIngresos As Double
    Dim vldblTotalDescuentos As Double
    
    Dim i As Long
    Dim lngCveFormato As Long
    
    Dim vlblnCredito As Boolean
    
    Dim vl_RegFisc As Integer
    
    blnImprieParciales = False
    pIniciaVar vldblFacturaExcedente, vldblFacturaDeducible, vldblFacturaCopago, vldblFacturaCoaseguro, vldblFacturaCoaseguroMedico, vldblFacturaCoaseguroAdicional
    
    vlintFacturasGrabadas = 0
    '(PEMEX)Se busca el tipo de formato que se va a utilizar
    
    lngCveFormato = 1
    frsEjecuta_SP vgintNumeroDepartamento & "|0|" & vgintTipoPaciente & "|" & IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")), "fn_PVSelFormatoFactura2", True, lngCveFormato
    vllngFormatoaUsar = lngCveFormato
    
    vldblTotalIngresos = 0
    vldblTotalDescuentos = 0

    If Not fblnValidaCuentaPuenteBanco(vgintClaveEmpresaContable) Then Exit Sub
    
    If Not fblnDatosValidosPaciente() Then Exit Sub
    If Not fblnCuentaCompartidaValida() Then Exit Sub
    
    If optGrupoCuenta(0).Value Then
        Set rsgrupo = frsRegresaRs("SELECT intmovpaciente, chrtipopaciente FROM PVDETALLEFACTURACONSOLID WHERE intCveGrupo = " & txtMovimientoPaciente.Text, adLockReadOnly, adOpenForwardOnly)
    End If
    
    vldtmFechaHoy = fdtmServerFecha
    vldtmHoraHoy = fdtmServerHora

    '-------------------------------'
    ' Tipo de cambio de los DOLARES '
    '-------------------------------'
    vldblTipoCambio = fdblTipoCambio(vldtmFechaHoy, "V") 'Tipo de cambio a la Venta
    If vldblTipoCambio = 0 Then
        MsgBox SIHOMsg(231), vbCritical, "Mensaje"
        Exit Sub
    End If
    
    '----------------------------------------------------------------'
    ' Verificar requisiciones y devoluciones pendientes de la cuenta '
    '----------------------------------------------------------------'
    
    If Not fblnVerificaReqDevPend(rsgrupo) Then Exit Sub

    '***********************************************************'
    '       VALIDACION DE FORMATO/FOLIO (FISICO, DIGITAL)       '
    '***********************************************************'

    pIdentificaFormato
    
    'Se valida en caso de no haber formato activo mostrar mensaje y cancelar transacción
    If vllngFormatoaUsar = 0 Then
        'No se encontró un formato válido de factura.
        MsgBox SIHOMsg(373), vbCritical, "Mensaje"
        pCancelar
        Exit Sub
    End If

    'Se compara el tipo de folio con el tipo de formato a utilizar con la fn "fintTipoEmisionComprobante"
    '(intTipoEmisionComprobante: 0 = Error, 1 = Físico, 2 = Digital)
    intTipoEmisionComprobante = fintTipoEmisionComprobante("FA", vllngFormatoaUsar)
    If intTipoEmisionComprobante = 0 Then Exit Sub
   
    If intTipoEmisionComprobante = 2 Then
        'Se revisa el tipo de CFD de la Factura (0 = CFD, 1 = CFDi, 2 = Físico, 3 = Error)
        intTipoCFDFactura = fintTipoCFD("FA", vllngFormatoaUsar)
        
        'Si aparece un error terminar la transacción
        If intTipoCFDFactura = 3 Then Exit Sub
    End If
    
    'Validar uso del comprobante, claves de productos/servicios y unidades
    If Not fblnValidaSAT("P") Then Exit Sub
    
    '---------------------'
    '- Persona que graba -'
    '---------------------'
    vllngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
    If vllngPersonaGraba = 0 Then Exit Sub
    
    '---------------------------'
    '- Número del corte actual -'
    '---------------------------'
    vllngNumeroCorte = flngNumeroCorte(vgintNumeroDepartamento, vglngNumeroEmpleado, "P")
    vlblnFacturaBase = chkFacturaBase.Value
    
    '-------------------------------'
    '- Inicialización de Variables -'
    '-------------------------------'
    vllngMovimientoCredito = -1 'Variable para subir el movimiento de crédito
    
    'se reinicia el arreglo de los movimientos del corte, solo importa el úlitmo 0 en los parametros para hacer el reinicio
    pAgregarMovArregloCorte 0, 0, "NA", "NA", 0, 0, False, "NA", 0, 0, "NA", 0, 0, "NA", "NA"
        
    blnImprimirNotaCredito = False
    blnImprimirAplAnt = False
        
    '========================================================================
    ' Factura de asistencia Social
    '========================================================================
    vlblnAplicoFacturaAsistenciaSocial = False
    If Not optGrupoCuenta(0).Value And CDbl(txtFPDescuentos.Text) <> 0 Then
        If fblnAplicaFacturaAsistenciaSocial(IIf(vgintEmpresa = 0, vgintTipoPaciente, vgintEmpresa), IIf(vgintEmpresa = 0, 0, 1)) Then
            If fblnSoloFaltaFacturaBenefactor Then
                vlblnAplicoFacturaAsistenciaSocial = True
            Else
                'El tipo de paciente o convenio está configurado para generar factura de asistencia social, ¿Desea generar dicha factura?
                If MsgBox(SIHOMsg(1597), vbQuestion + vbYesNo, "Mensaje") = vbYes Then
                    If Not fblnValidacionesFacturaAsistenciaSocial Then Exit Sub
        
                    If Not fBlnFacturaAsistenciaSocial(vllngPersonaGraba, vllngNumeroCorte) Then
                        Exit Sub
                    Else
                        vlblnAplicoFacturaAsistenciaSocial = True
                    End If
                End If
            End If
        End If
    End If
    
    If vlblnFacturaBase Then
    '========================================================================
    ' FACTURA BASE                                                         ||
    '========================================================================
            
        If fblnFPPendientesTimbre Then Exit Sub 'Primero revisamos si existen facturas parciales que esten pendientes de timbre fiscal, si existen no podemos continua *
        If fblnFPPendientesTimbre(2) Then Exit Sub
                
        vl_RegFisc = cboRegimenFiscal.ItemData(cboRegimenFiscal.ListIndex)
                
        '-----------------------------'
        ' Datos fiscales del paciente '
        '-----------------------------'
        pDatosFacturaPaciente
        
        vlstrDFRFC = ""
        vlstrDFNombre = ""

        '-----------------------------------------
        'Variables para obtener los datos fiscales
        '-----------------------------------------
        If vlblnAplicoFacturaAsistenciaSocial Then
            Load frmDatosFiscales
            frmDatosFiscales.sstDatos.Tab = 1
            frmDatosFiscales.Show vbModal
            
            frmDatosFiscales.sstDatos.Tab = 1
            With frmDatosFiscales
                vlstrDFRFC = fStrRFCValido(.vgstrRFC)
                vlstrDFNombre = .vgstrNombre
                vlstrDFDireccion = .vgstrDireccion
                vlstrDFNumExterior = .vgstrNumExterior
                vlstrDFNumInterior = .vgstrNumInterior
                vlBitDFExtranjero = .vgBitExtranjero
                lngCveCiudad = .llngCveCiudad
                vlstrDFTelefono = .vgstrTelefono
                vlstrDFColonia = .vgstrColonia
                vlstrDFCodigoPostal = .vgstrCP
                vlstrDFRegimenFiscal = .vlstrRegimenFiscal
            End With
            
            Unload frmDatosFiscales
            Set frmDatosFiscales = Nothing
            If Trim(vlstrDFRFC) = "" Or Trim(vlstrDFNombre) = "" Then Exit Sub
        Else
            vlstrDFRFC = fStrRFCValido(txtRFCFactura.Text)
            vlstrDFNombre = Trim(txtNombreFactura.Text)
            vlstrDFDireccion = Trim(txtDireccionFactura(0).Text)
            vlstrDFNumExterior = Trim(txtFacturaNumExterior.Text)
            vlstrDFNumInterior = Trim(txtFacturaNumInterior.Text)
            vlBitDFExtranjero = IIf(chkExtranjero.Value = vbChecked, 1, 0)
            lngCveCiudad = cboCiudad.ItemData(cboCiudad.ListIndex)
            vlstrDFTelefono = Trim(txtTelefonoFactura.Text)
            vlstrDFColonia = Trim(txtColoniaFactura.Text)
            vlstrDFCodigoPostal = Trim(txtCPFactura.Text)
            
            'vlstrDFRegimenFiscal = cboRegimenFiscal.ItemData(cboRegimenFiscal.ListIndex)
            vlstrDFRegimenFiscal = IIf(cboRegimenFiscal.ListIndex = 0, vl_RegFisc, cboRegimenFiscal.ItemData(cboRegimenFiscal.ListIndex))
            
        End If
                
        If optTipoCliente(0).Value = False And optTipoCliente(1).Value = False Then pActualizaDatosFiscales
                
        blnImprimirNotaCredito = False 'indica si se debe de imprimir o no la nota de crédito
                 
        '-----------------------------------------------------------'
        ' Las formas de pago y consulta de crédito para el paciente '
        '-----------------------------------------------------------'
        vlblnbandera = False
        ' (Si el total de la factura es mayor a cero O (El total de la factura es igual a cero Y el subtotal sea mayor a cero)) Y el total a pagar sea mayor o igual a cero
        If (Val(Format(txtFPTotalFactura.Text, "")) > 0 Or (Val(Format(txtFPTotalFactura.Text, "")) = 0 And grdCargos.RowData(1) <> -1)) And Not (CDbl(txtFPTotalPagar.Text) < 0) Then
          If optTipoCliente(0).Value Or lstFPBuscaCliente.ListCount = 0 Then 'El mismo cliente que el de la nota
             If optGrupoCuenta(1).Value Then
                Set rsTipoPaciente = frsRegresaRs("Select chrTipo From AdTipoPaciente Where tnyCveTipoPaciente = " & Trim(str(vgintTipoPaciente)), adLockReadOnly, adOpenForwardOnly)
                
                vlstrTipoPacienteCredito = IIf(rsTipoPaciente!chrTipo = "CO", "PA", rsTipoPaciente!chrTipo)
                            
                If vlstrTipoPacienteCredito = "PA" Then
                   vlstrTipoPacienteCredito = IIf(OptTipoPaciente(0).Value, "PI", "PE")
                   vllngCveClienteCredito = CLng(txtMovimientoPaciente.Text) 'Igual que la cuenta del paciente
                Else
                   vllngCveClienteCredito = vgintCveExtra
                End If
             End If
          Else
             If optTipoCliente(1).Value Then
                vlstrTipoPacienteCredito = "CO"
             ElseIf optTipoCliente(2).Value Then
                vlstrTipoPacienteCredito = "EM"
             ElseIf optTipoCliente(3).Value Then
                vlstrTipoPacienteCredito = "ME"
             ElseIf optTipoCliente(4).Value Then
                vlstrTipoPacienteCredito = "PI"
             ElseIf optTipoCliente(5).Value Then
                vlstrTipoPacienteCredito = "PE"
             End If
                vllngCveClienteCredito = lstFPBuscaCliente.ItemData(lstFPBuscaCliente.ListIndex)
             End If
                    
             vlblnbandera = True
             If Val(Format(txtFPTotalPagar.Text, "")) > 0 Then
                vlblnbandera = fblnFormasPagoPos(aFormasPago(), IIf(optPesos(0).Value, Val(Format(txtFPTotalPagar.Text, "")), Val(Format(txtFPTotalPagar.Text, "")) * vldblTipoCambio), True, vldblTipoCambio, True, vllngCveClienteCredito, vlstrTipoPacienteCredito, Trim(Replace(Replace(Replace(vlstrDFRFC, "-", ""), "_", ""), " ", "")), False, False, True, "frmFacturacion")
             End If
        Else
            '¡No se puede facturar si la cantidad es cero o menor que cero¡
            MsgBox SIHOMsg(429), vbExclamation, "Mensaje"
            Exit Sub
        End If

        If Not (vlblnbandera) Then Exit Sub 'Para que ya no haga nada si le di un esqueich (<ESC>) a las formas de pago

        If fnEncuentraHonorarios(True) Then     'verifica la configuracion de ISR y del uso de cfdi para honorarios, tambien la cuenta costo
            'si en los cargos hay algún honorario y no estan configuradas las cuentas de ISR provisionado y retenido
            If glngctaISRprovisHonorario = 0 Or glngctaISRretenHonorario = 0 Then
                'No se encuentran registradas las cuentas de ISR retenido y provisionado para honorarios en los parámetros de contabilidad.
                MsgBox SIHOMsg(1564), vbCritical, "Mensaje"
                Exit Sub
            End If
        Else
            Exit Sub
        End If
                        
        '-------------------'
        'Datos de la factura'
        '-------------------'
        vldblIVA = Format(IIf(vgintEmpresa = 0, (vldblsubtotalgravado * (fdblTasaIVAEmpresa(vgintEmpresa) / 100)), IIf(optPesos(0).Value, dblIVAPaciente, dblIVAP / vldblTipoCambio)), "###############.00")
        vldblDescuento = IIf(vlblnAplicoFacturaAsistenciaSocial, 0, Val(Format(txtFPDescuentos.Text, "")))
        vldblAnticipo = Val(Format(txtFPPagos.Text, ""))
        vldblTotalFactura = Val(Format(txtFPTotalFactura.Text, ""))
        dblTotalPagar = Val(Format(txtFPTotalPagar.Text, ""))
        vlintBitPesos = IIf(optPesos(0).Value, 1, 0)
        vlintNumCliente = vllngNumCliente
                 
        '-----------------'
        'Revisión de pagos'
        '-----------------'
        If fblnValidarPagos Then
           'Los PAGOS/Devoluciones de $$ de la cuenta han sido modificados, consulte de nuevo.
           MsgBox SIHOMsg(1178), vbExclamation, "Mensaje"
           Unload Me
           Exit Sub
        End If
                             
        '-----------------------------------------------------------'
        'Revisión del control de aseguradora cuando aplica
        '-----------------------------------------------------------'
        If Not fblnVcontrolAseguradora Then
           '¡No es posible facturar! El control de aseguradora ha cambiado, consulte de nuevo.'
           MsgBox SIHOMsg(1242), vbExclamation, "Mensaje"
           Unload Me
           Exit Sub
        End If
                                                                                  
        '--------------------------'
        'Inicio de la transacción '
        '--------------------------'
        EntornoSIHO.ConeccionSIHO.BeginTrans
        '----------------------------------------------------'
        'Bloqueo de cuenta (Solo cuando es la factura base) '
        '----------------------------------------------------'
        If Not fblnBloqueoCuenta() Then
           EntornoSIHO.ConeccionSIHO.RollbackTrans
           Exit Sub
        End If
        '------------------------'
        '- Folio de la factura -'
        '------------------------'
        vllngFoliosFaltantes = 0
        pCargaArreglo alstrParametrosSalida, vllngFoliosFaltantes & "|" & ADODB.adBSTR & "|" & strFolio & "|" & ADODB.adBSTR & "|" & strSerie & "|" & ADODB.adBSTR & "|" & strNumeroAprobacion & "|" & ADODB.adBSTR & "|" & strAnoAprobacion & "|" & ADODB.adBSTR
        frsEjecuta_SP "FA|" & vgintNumeroDepartamento & "|1", "sp_gnFolios", , , alstrParametrosSalida
        pObtieneValores alstrParametrosSalida, vllngFoliosFaltantes, strFolio, strSerie, strNumeroAprobacion, strAnoAprobacion
        
        '|Si la serie está vacía el SP regresa un espacio en blanco por eso se debe de hacer el TRIM
        vlstrFolioDocumento = Trim(strSerie) & strFolio
                
        If Trim(vlstrFolioDocumento) = "0" Then
           EntornoSIHO.ConeccionSIHO.RollbackTrans
           'No existen folios activos para este documento.
           MsgBox SIHOMsg(291), vbCritical, "Mensaje"
           Exit Sub
        End If

        If Trim(vlstrFolioDocumento) = "" Then
           'No se pudo obtener el folio para este documento, intente de nuevo.
           MsgBox SIHOMsg(1390), vbCritical, "Mensaje"
           EntornoSIHO.ConeccionSIHO.RollbackTrans
           Exit Sub
        End If

        '------------------------------------------'
        '- Número de cliente inicializado en CERO -'
        '------------------------------------------'
        vllngNumCliente = 0
    
        '-------------------------------------------------------------'
        ' Cancelación de pagos                                        '
        '-------------------------------------------------------------'
        If grdPagos.RowData(1) > 0 Then 'Si no esta vacio el grid de Pagos
           For vlintcontador = 1 To grdPagos.Rows - 1
               
               '------------------------------------------------------------------------------------------------------'
               ' Que NO tome en cuenta los que son Honorarios ni los que son Deducible y Coaseguro, sólo los NORMALES '
               '------------------------------------------------------------------------------------------------------'
                If grdPagos.TextMatrix(vlintcontador, 0) = "*" And (grdPagos.TextMatrix(vlintcontador, 7) = "NO" Or grdPagos.TextMatrix(vlintcontador, 7) = "SD") Then
                    
                    '--------------------------------------'
                    ' Cancelo el Pago o Salida de Efectivo '
                    '--------------------------------------'
                    If optGrupoCuenta(0).Value Then
                              vlstrSentencia = "Update " & IIf(grdPagos.TextMatrix(vlintcontador, 9) = "E", "PvPago", "PvSalidaDinero") & _
                                               "   Set bitCancelado = 1, chrFolioFactura = '" & Trim(vlstrFolioDocumento) & "', bitIncluidoenFactura = " & IIf(intBitCuentaPuenteBanco = 1, 1, 0) & _
                                               " Where RTRIM(chrFolioRecibo) = '" & Trim(grdPagos.TextMatrix(vlintcontador, 4)) & "'" & _
                                               "   And (intMovPaciente, chrTipoPaciente) In (Select intMovPaciente " & _
                                               "                                                  , chrTipoPaciente " & _
                                               "                                             From PVDETALLEFACTURACONSOLID " & _
                                               "                                              Where PVDETALLEFACTURACONSOLID.INTCVEGRUPO = " & txtMovimientoPaciente.Text & " )"
                    Else
                              vlstrSentencia = "Update " & _
                                               IIf(grdPagos.TextMatrix(vlintcontador, 9) = "E", "PvPago", "PvSalidaDinero") & _
                                               " Set bitCancelado = 1, chrFolioFactura = '" & Trim(vlstrFolioDocumento) & "', bitIncluidoenFactura = " & IIf(intBitCuentaPuenteBanco = 1, 1, 0) & _
                                               " Where RTrim(chrFolioRecibo) = '" & Trim(grdPagos.TextMatrix(vlintcontador, 4)) & "'" & _
                                               " And intMovPaciente = '" & Trim(txtMovimientoPaciente.Text) & "'" & _
                                               " And chrTipoPaciente = " & IIf(OptTipoPaciente(0).Value, "'I'", "'E'")
                    End If
                    pEjecutaSentencia (vlstrSentencia)
                    
                    If grdPagos.TextMatrix(vlintcontador, 9) = "S" Then
                        vlstrSentencia = "Update PVPAGODEVOLUCIONPACIENTE Set chrFolioFactura = '" & Trim(vlstrFolioDocumento) & "'" & _
                                         " where intNumSalida = (select intNumSalida from PvSalidaDinero " & _
                                                " Where RTrim(chrFolioRecibo) = '" & Trim(grdPagos.TextMatrix(vlintcontador, 4)) & "'" & _
                                                " And intMovPaciente = '" & Trim(txtMovimientoPaciente.Text) & "'" & _
                                                " And chrTipoPaciente = " & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & ")"
                    End If
                    pEjecutaSentencia (vlstrSentencia)
                    '------------------------------------------------------'
                    ' Registrar las formas del Pago o Salida en la factura '
                    '------------------------------------------------------'
                      
                    '----------------------------------------------------------------
                    'Agregado para caso 8758
                    'Se agregó este código para registrar el movimiento contable referente al pago por cancelación de factura
                    'a la cuenta puente para no afectar las cuentas de bancos
                    vlblnPagoAutomaticoporCancelacion = False
                    If intBitCuentaPuenteBanco = 1 Then
                        Set rsEsPagoporCancelacion = frsRegresaRs("select * from pvpago, pvconceptopago where trim(pvpago.chrfoliorecibo) = '" & Trim(grdPagos.TextMatrix(vlintcontador, 4)) & "' and pvpago.intnumconcepto = pvconceptopago.intnumconcepto and pvconceptopago.bitpagocancelafactura = 1", adLockReadOnly, adOpenForwardOnly)
                        
                        If rsEsPagoporCancelacion.EOF = False Then
                            Do While Not rsEsPagoporCancelacion.EOF
                                pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", lngCuentaPuenteBanco, rsEsPagoporCancelacion!MNYCantidad, True, "NA", 0, 0, 0, 0, 2, vlstrFolioDocumento, "FA"
                                vlblnPagoAutomaticoporCancelacion = True
                                rsEsPagoporCancelacion.MoveNext
                            Loop
                        End If
                        rsEsPagoporCancelacion.Close
                    End If
                    '----------------------------------------------------------------
                    
                    'If intBitCuentaPuenteBanco = 0 Or (intBitCuentaPuenteBanco = 1 And Val(grdPagos.TextMatrix(vlintContador, 12)) = 0) Then
                        Set rsFormasPagos = frsEjecuta_SP(Trim(grdPagos.TextMatrix(vlintcontador, 4)) & "|" & IIf(grdPagos.TextMatrix(vlintcontador, 9) = "E", "RE", "SD") & "|" & grdPagos.TextMatrix(vlintcontador, 10), "sp_PvSelFormaDoctoCorte")
                        Do While Not rsFormasPagos.EOF

                            If rsFormasPagos!intFormaPago <> -1 Then
                                  pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, _
                                                          "FA", 0, _
                                                          rsFormasPagos!mnyCantidadPagada * IIf(Trim(rsFormasPagos!chrTipoDocumento) = "SD", -1, 1), _
                                                          False, fstrFechaSQL(Format(vldtmFechaHoy, "dd/mm/yyyy"), Format(vldtmHoraHoy, "hh:mm:ss")), _
                                                          rsFormasPagos!intFormaPago, _
                                                          rsFormasPagos!mnytipocambio, _
                                                          rsFormasPagos!intfoliocheque, _
                                                          vllngNumeroCorte, 1, vlstrFolioDocumento, "FA"
                            End If
                                  'Movimiento de cargo a la cuenta de la forma de pago del recibo, pero como factura:

                            If vlblnPagoAutomaticoporCancelacion = False Then
                                If Trim(rsFormasPagos!chrTipoDocumento) = "SD" Then
                                    'Agregado por caso 8832, verifica si la cuenta se encuentra relacionada con un banco
                                    'para registrar el movimiento contable a la cuenta puente para no afectar la cuenta de banco
                                    vlintFolio = 0
                                    If fblnCuentaRelacionadaConBancos(rsFormasPagos!INTCUENTACONTABLE) Then
                                        vlintFolio = 1
                                        frsEjecuta_SP Trim(grdPagos.TextMatrix(vlintcontador, 4)) & "|" & rsFormasPagos!INTCUENTACONTABLE & "|" & IIf(rsFormasPagos!mnytipocambio = 0, rsFormasPagos!mnyCantidadPagada, rsFormasPagos!mnyCantidadPagada * rsFormasPagos!mnytipocambio) & "|" & "SD", "fn_pvCuentaRelacionadaConBanco", True, vlintFolio
                                    End If
                                    pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, _
                                                            "FA", IIf(vlintFolio = 1, lngCuentaPuenteBanco, rsFormasPagos!INTCUENTACONTABLE), _
                                                            IIf(rsFormasPagos!mnytipocambio = 0, rsFormasPagos!mnyCantidadPagada, rsFormasPagos!mnyCantidadPagada * rsFormasPagos!mnytipocambio), _
                                                            IIf(Trim(rsFormasPagos!chrTipoDocumento) = "SD", False, True), _
                                                            "NA", 0, 0, 0, 0, 2, vlstrFolioDocumento, "FA"
                                End If
                            End If
                                      
                            rsFormasPagos.MoveNext
                        Loop
                        rsFormasPagos.Close
                    'End If
                    ' Se agregó este código debido al caso 8741 que registra movimientos contables en pagos de tipo "RE",
                    ' de comisión bancaria, su iva y abono a la cuenta de banco afectada y estos movimientos también deben
                    ' incluirse en la factura
                    If grdPagos.TextMatrix(vlintcontador, 9) = "E" And vlblnPagoAutomaticoporCancelacion = False Then
                        vlstrSentencia = "select " & _
                                             "case when " & intBitCuentaPuenteBanco & " = 1  then " & _
                                                " case when fn_pvCuentaRelacionadaConBanco (trim(chrfoliodocumento), intnumcuenta, mnycantidad, trim(chrtipodocumento)) = 1 then " & _
                                                    lngCuentaPuenteBanco & " else INTNUMCUENTA end " & _
                                             "else INTNUMCUENTA end  intnumcuenta " & _
                                         ", mnyCantidad, bitcargo, intconsecutivo " & _
                                          "from pvcortepoliza " & _
                                         "where trim(chrfoliodocumento) = '" & Trim(grdPagos.TextMatrix(vlintcontador, 4)) & "'" & _
                                          " and trim(chrtipodocumento) = trim('RE')" & _
                                          " and intnumcorte = " & grdPagos.TextMatrix(vlintcontador, 10) & _
                                          " and chrtipomovimiento = 'REC' " & _
                                          " and intnumcuenta not in  ( (select pvconceptopagoempresa.intnumerocuenta " & _
                                                                        " from pvpago ,pvconceptopagoempresa " & _
                                                                        "where trim(pvpago.chrfoliorecibo) = '" & Trim(grdPagos.TextMatrix(vlintcontador, 4)) & "'" & _
                                                                         " and pvpago.intnumconcepto =  pvconceptopagoempresa.intnumconcepto " & _
                                                                         " and pvconceptopagoempresa.intcveempresa = " & vgintClaveEmpresaContable & ") " & _
                                                                     ", (select vchvalor " & _
                                                                          "From siparametro " & _
                                                                         "where vchnombre = 'INTCTAIVACOBRADO' " & _
                                                                           "and intcveempresacontable = " & vgintClaveEmpresaContable & ")) " & _
                                        "order by intconsecutivo"
                        Set rsMovimientosRecibo = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
                        'lngConsecutivoCorte = 0
                        Do While Not rsMovimientosRecibo.EOF
                            pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", rsMovimientosRecibo!intNumCuenta, rsMovimientosRecibo!MNYCantidad, rsMovimientosRecibo!bitcargo, "NA", 0, 0, 0, 0, 2, vlstrFolioDocumento, "FA"

                            rsMovimientosRecibo.MoveNext
                        Loop
                    End If
                    
                    '----------------------------------------------------------------'
                    ' Cancelar el Pago o Salida en el corte y su movimiento contable '
                    '----------------------------------------------------------------'
                     
                    pAgregarMovArregloCorte vllngNumeroCorte, _
                                            vllngPersonaGraba, _
                                            Trim(grdPagos.TextMatrix(vlintcontador, 4)), _
                                            IIf(grdPagos.TextMatrix(vlintcontador, 9) = "E", IIf(vlblnPagoAutomaticoporCancelacion = False, IIf(Val(grdPagos.TextMatrix(vlintcontador, 12)) = 0, "RE", "RCO"), IIf(Val(grdPagos.TextMatrix(vlintcontador, 12)) = 0, "REC", "RAC")), IIf(Val(grdPagos.TextMatrix(vlintcontador, 12)) = 0, "SDC", "SCO")), _
                                            0, 0, False, "NA", 0, 0, "NA", _
                                            grdPagos.TextMatrix(vlintcontador, 10), 3, vlstrFolioDocumento, "FA"
               End If                                        'Que no es Honorarios ni Ded y Coa
           Next vlintcontador                                'El FOR del grid de pagos
        End If
          
        '-----------------------
        'FORMAS DE PAGO AL CORTE
        '-----------------------
        If Val(Format(txtFPTotalPagar.Text, "")) > 0 Then
        
            '-------------------------------'
            ' Afecta corte (PvDetalleCorte) '
            '-------------------------------'
            For vlintcontador = 0 To UBound(aFormasPago(), 1)
                
                pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", 0, _
                                        IIf(aFormasPago(vlintcontador).vldblTipoCambio = 0, aFormasPago(vlintcontador).vldblCantidad, aFormasPago(vlintcontador).vldblDolares), _
                                        False, CStr(vldtmFechaHoy + vldtmHoraHoy), _
                                        CLng(aFormasPago(vlintcontador).vlintNumFormaPago), _
                                        aFormasPago(vlintcontador).vldblTipoCambio, _
                                        IIf(Trim(aFormasPago(vlintcontador).vlstrFolio) = "", "0", Trim(aFormasPago(vlintcontador).vlstrFolio)), _
                                        vllngNumeroCorte, 1, vlstrFolioDocumento, "FA", aFormasPago(vlintcontador).vlbolEsCredito, aFormasPago(vlintcontador).vlstrRFC, aFormasPago(vlintcontador).vlstrBancoSAT, aFormasPago(vlintcontador).vlstrBancoExtranjero, aFormasPago(vlintcontador).vlstrCuentaBancaria, aFormasPago(vlintcontador).vldtmFecha
          
                '------------------------------'
                ' Generar movimiento a CREDITO '
                '------------------------------'
                If aFormasPago(vlintcontador).vlbolEsCredito Then
                    vlblnCredito = True
                   '-------------------------------------------------'
                   ' Para ver que número de cliente es este paciente '
                   '-------------------------------------------------'
                    Set rsDatosCliente = frsRegresaRs("SELECT * FROM CcCliente " & _
                            " INNER JOIN NoDepartamento ON CcCliente.smiCveDepartamento = NoDepartamento.smiCveDepartamento " & _
                            " WHERE intNumReferencia = " & Trim(str(vllngCveClienteCredito)) & _
                            " AND chrTipoCliente = '" & vlstrTipoPacienteCredito & "'" & _
                            " AND NoDepartamento.tnyClaveEmpresa = " & vgintClaveEmpresaContable, adLockReadOnly, adOpenForwardOnly)
                    If rsDatosCliente.RecordCount = 0 Then
                        EntornoSIHO.ConeccionSIHO.RollbackTrans
                        rsDatosCliente.Close
                        MsgBox SIHOMsg(367), vbCritical, "Mensaje"
                        Exit Sub
                    Else
                        vllngNumCliente = rsDatosCliente!intNumCliente
                    End If
                        
                   'Crear el movimiento de crédito
                   dblPorcentajeCredito = aFormasPago(vlintcontador).vldblCantidad / ((vldblTotalFactura) * IIf(optPesos(0).Value, 1, vldblTipoCambio))
                   dblSubtotalCredito = Format(((vldblTotalFactura - vldblIVA) * IIf(optPesos(0).Value, 1, vldblTipoCambio)) * dblPorcentajeCredito, "###############.00")
                   dblIVACredito = Format(((vldblIVA) * IIf(optPesos(0).Value, 1, vldblTipoCambio)) * dblPorcentajeCredito, "###############.00")
                                           
                   vllngMovimientoCredito = 1
                   frsEjecuta_SP fstrFechaSQL(Format(vldtmFechaHoy, "dd/mm/yyyy")) & "|" & vllngNumCliente & "|" & rsDatosCliente!INTNUMCUENTACONTABLE & "|" & vlstrFolioDocumento & "|" & "FA" & "|" & aFormasPago(vlintcontador).vldblCantidad & "|" & str(vgintNumeroDepartamento) & "|" & str(vllngPersonaGraba) & "|" & " " & "|" & "0" & "|" & dblSubtotalCredito & "|" & dblIVACredito, "SP_GNINSCREDITO", True, vllngMovimientoCredito
                        
                   '--------------------------------------------'
                   ' Se genera un Cargo a clientes en la poliza '
                   '--------------------------------------------'
                   'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", rsDatosCliente!intNumCuentaContable, aFormasPago(vlintContador).vldblCantidad, True
                   
                   pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", rsDatosCliente!INTNUMCUENTACONTABLE, aFormasPago(vlintcontador).vldblCantidad, True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
  
                   '----------------------------------------------------'
                   ' Cálculo del IVA que se pudiera ir a IVA no cobrado '
                   '----------------------------------------------------'
                   If Val(Format(txtFPIVA.Text, "")) > 0 Then
                      dblProporcionIVA = aFormasPago(vlintcontador).vldblCantidad / CDbl(Format(dblTotalFacturaP, "############.00"))
                      vldblTotalIVACredito = CDbl(Format(dblIVAP, "############.00")) * dblProporcionIVA
                   End If
                   
                   rsDatosCliente.Close
                Else ' Osea que la forma de pago --NO es credito--
                    vlblnCredito = False
                   '--------------------------------------------------------------------'
                   ' Se genera un Cargo de acuerdo a la forma de pago que NO es credito '
                   '--------------------------------------------------------------------'
                   'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aFormasPago(vlintContador).vllngCuentaContable, aFormasPago(vlintContador).vldblCantidad, True
                   pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aFormasPago(vlintcontador).vllngCuentaContable, aFormasPago(vlintcontador).vldblCantidad, True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA", aFormasPago(vlintcontador).vlbolEsCredito, aFormasPago(vlintcontador).vlstrRFC, aFormasPago(vlintcontador).vlstrBancoSAT, aFormasPago(vlintcontador).vlstrBancoExtranjero, aFormasPago(vlintcontador).vlstrCuentaBancaria, aFormasPago(vlintcontador).vldtmFecha
                
                   ' Agregado para caso 8741
                   ' Si la forma de pago es de tipo tarjeta se registran los movimientos contables referente a la comision bancaria
                   If aFormasPago(vlintcontador).vllngCuentaComisionBancaria <> 0 And aFormasPago(vlintcontador).vldblCantidadComisionBancaria <> 0 Then
                        ' Se genera un cargo de acuerdo la comisión bancaria que corresponde a la forma de pago
                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aFormasPago(vlintcontador).vllngCuentaComisionBancaria, aFormasPago(vlintcontador).vldblCantidadComisionBancaria, True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA", , , , , , , "CBA"
                        If aFormasPago(vlintcontador).vldblIvaComisionBancaria <> 0 Then
                            ' Movimiento contable por el IVA pagado que corresponde de la comisión bancaria
                            pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngCtaIVAPagado, aFormasPago(vlintcontador).vldblIvaComisionBancaria, True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA", , , , , , , "CBA"
                        End If
                        ' Se genera un abono por la cantidad de la comisión bancaria y su iva que corresponde a la forma de pago
                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aFormasPago(vlintcontador).vllngCuentaContable, (aFormasPago(vlintcontador).vldblCantidadComisionBancaria + aFormasPago(vlintcontador).vldblIvaComisionBancaria), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA", , , , , , , "CBA"
                    End If
                    dblTotalContado = dblTotalContado + aFormasPago(vlintcontador).vldblCantidad
                End If
            Next vlintcontador
            dblTotalContado = dblTotalContado + (Val(Format(txtFPPagos.Text, "")) * IIf(optPesos(0).Value, 1, vldblTipoCambio))  'Total de contado mas pagos
            dblPorcentajeContado = dblTotalContado / ((vldblTotalFactura) * IIf(optPesos(0).Value, 1, vldblTipoCambio))
        Else
            dblTotalContado = (vldblTotalFactura) * IIf(optPesos(0).Value, 1, vldblTipoCambio)
            dblPorcentajeContado = 1
        End If
                        
        Set rsPvDatosFiscales = frsRegresaRs("SELECT * FROM PvDatosFiscales WHERE chrTipoPaciente = '" & IIf(OptTipoPaciente(0).Value, "I", "E") & "' and intNumCuenta = " & str(txtMovimientoPaciente.Text), adLockOptimistic, adOpenDynamic)
        '------------------------------------'
        ' Guardar maestro de la factura      '
        '------------------------------------'
        Set rsFactura = frsRegresaRs("SELECT * FROM PVFactura WHERE intConsecutivo = -1", adLockOptimistic, adOpenDynamic)
        With rsFactura
             .AddNew
             !chrfoliofactura = vlstrFolioDocumento
             !dtmFechahora = vldtmFechaHoy + vldtmHoraHoy
             If chkExtranjero Then
                !CHRRFC = "XEXX010101000"
             Else
                !CHRRFC = IIf(Len(fStrRFCValido(vlstrDFRFC)) < 12 Or Len(fStrRFCValido(vlstrDFRFC)) > 13, "XAXX010101000", fStrRFCValido(vlstrDFRFC))
             End If
             !CHRNOMBRE = IIf(Trim(vlstrDFNombre) = "", " ", Trim(vlstrDFNombre))
             !chrCalle = Trim(vlstrDFDireccion)
             !VCHNUMEROEXTERIOR = Trim(vlstrDFNumExterior)
             !VCHNUMEROINTERIOR = Trim(vlstrDFNumInterior)
             !chrTelefono = Trim(vlstrDFTelefono)
             !VCHCOLONIA = Trim(vlstrDFColonia)
             !VCHCODIGOPOSTAL = Trim(vlstrDFCodigoPostal)
             !smyIVA = vldblIVA
             !MNYDESCUENTO = vldblDescuento
             !chrEstatus = " "
             !INTMOVPACIENTE = txtMovimientoPaciente.Text
             !CHRTIPOPACIENTE = IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E"))
             !SMIDEPARTAMENTO = vgintNumeroDepartamento
             !intCveEmpleado = vllngPersonaGraba
             !intNumCorte = vllngNumeroCorte
             !mnyAnticipo = vldblAnticipo
             !mnyTotalFactura = vldblTotalFactura 'IIf(optPesos(0).Value, vldblTotalFactura, vldblTotalFactura / vldblTipoCambio) 'ya esta en dlls
             !BITPESOS = vlintBitPesos
             !mnytipocambio = IIf(optPesos(0).Value, 0, vldblTipoCambio)
             !chrTipoFactura = "P"
             !intNumCliente = vlintNumCliente
             !intCveVentaPublico = 0
             !intCveCiudad = lngCveCiudad
             !intcveempresa = 0
             !mnyHonorariosFacturados = IIf(blnCalcularEnBaseACargos, ldblHonorariosAFacturar, 0)
             !mnyTotalPagar = dblTotalPagar
             !mnyTotalNotasCredito = Val(Format(txtFPNotasCredito.Text, ""))
             !vchSerie = strSerie
             !INTFOLIO = strFolio
             !intTipoDetalleFactura = IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3))
             If cboUsoCFDI(0).ListIndex > -1 Then !intCveUsoCFDI = cboUsoCFDI(0).ItemData(cboUsoCFDI(0).ListIndex)
             !BITFACTURAASISTENCIASOCIAL = IIf(vlblnAplicoFacturaAsistenciaSocial, 2, 0)
             !CHROBSERVACIONES = IIf(TxtObservacionesP = "", "", TxtObservacionesP.Text)
             !VCHREGIMENFISCALRECEPTOR = vlstrDFRegimenFiscal
             If claveCarta > 0 Then !intCveCarta = claveCarta
             .Update
             vlRFCTemp = Trim(!CHRRFC) 'Se graba el valor del RFC para posible envío de CFD/CFDi
        End With
          
        vllngConsecutivoFactura = flngObtieneIdentity("SEC_PvFactura", rsFactura!intConsecutivo)
        vlstrFolioFactura = vlstrFolioDocumento
        
    '    -----------------------------------------'
    '     Asocia la factura cancelada y la creada '
    '    -----------------------------------------'
        If chkFacturaSustitutaFP(0).Value = 1 And lstFacturaASustituirFP.ListCount > 0 Then
            For i = 0 To UBound(aFoliosPrevios())
                If aFoliosPrevios(i).chrfoliofactura <> "" Then
                    pEjecutaSentencia "INSERT INTO PVREFACTURACION (chrFolioFacturaActivada, chrFolioFacturaCancelada) " & " VALUES ('" & vlstrFolioDocumento & "', '" & aFoliosPrevios(i).chrfoliofactura & "')"
                End If
            Next i
        End If
        
        '---------------------------------------------------------
        'Variables para ver lo que se graba en la factura --------
        vldblIvaDescuento = 0
        vlblnDescuentoParcial = False
        '------------------------------------'
        ' Guardar detalle de la factura      '
        '------------------------------------'
        Set rsDetalleFactura = frsRegresaRs("SELECT * FROM PVDetalleFactura WHERE chrFolioFactura = '' ", adLockOptimistic, adOpenDynamic)
        With rsDetalleFactura
             ' Variables para ver lo que se graba en la factura
            pIniciaVar vldblFacturaExcedente, vldblFacturaDeducible, vldblFacturaCopago, vldblFacturaCoaseguro, vldblFacturaCoaseguroMedico, vldblFacturaCoaseguroAdicional
                    
             For vlintcontador = 1 To grdFacturaPaciente.Rows - 1
                If vlblnAplicoFacturaAsistenciaSocial And grdFacturaPaciente.TextMatrix(vlintcontador, 6) = "DE" Then
                
                Else
                    .AddNew
                    !chrfoliofactura = vlstrFolioDocumento
                    !smicveconcepto = grdFacturaPaciente.RowData(vlintcontador)
                    !chrTipo = grdFacturaPaciente.TextMatrix(vlintcontador, 6)  'Tipo de concepto (ver llenaFacturas)
                    If grdFacturaPaciente.TextMatrix(vlintcontador, 6) = "NO" Or grdFacturaPaciente.TextMatrix(vlintcontador, 6) = "OC" Then
                       '!mnyCantidad = IIf(optPesos(0).Value, Format(Val(grdFacturaPaciente.TextMatrix(vlintContador, 9)), "###############.00"), Val(grdFacturaPaciente.TextMatrix(vlintContador, 10)) / vldblTipoCambio)
                       !MNYCantidad = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 9), ""))
                       
                       'Cuando el Tipo sea Otros Cargos, hay que saber cual es, para actualizar la cantidad de acuerdo al tipo de Otros Cargos
                       If grdFacturaPaciente.TextMatrix(vlintcontador, 6) = "OC" Then
                          If grdFacturaPaciente.TextMatrix(vlintcontador, 7) = "EX" Then 'Excedente en suma asegurada
                             vldblFacturaExcedente = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 2), ""))
                             !mnyCantidadGravada = ldblExcedenteGrava
                             !mnyIVAConcepto = dblIVAExcedente
                          ElseIf grdFacturaPaciente.TextMatrix(vlintcontador, 7) = "DE" Then 'Deducible
                                 vldblFacturaDeducible = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 2), ""))
                                 !mnyCantidadGravada = ldblDeducibleGrava
                                 !mnyIVAConcepto = dblIVADeducible
                                 If blnDeducibleSinIVA Then
                                    If Abs((vldblFacturaDeducible + dblIVADeducible) - Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 5), ""))) <= 0.02 Then
                                        !mnyCantidadGravada = 0
                                        !mnyIVAConcepto = 0
                                    End If
                                 End If
                          ElseIf grdFacturaPaciente.TextMatrix(vlintcontador, 7) = "CO" Then 'Coaseguro
                                 vldblFacturaCoaseguro = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 2), ""))
                                 !mnyCantidadGravada = ldblCoaseguroGrava
                                 !mnyIVAConcepto = dblIVACoaseguro
                          ElseIf grdFacturaPaciente.TextMatrix(vlintcontador, 7) = "CM" Then 'Coaseguro médico
                                 vldblFacturaCoaseguroMedico = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 2), ""))
                                 !mnyCantidadGravada = ldblCoaseguroMedicoGrava
                                 !mnyIVAConcepto = dblIVACoaseguroMedico
                          ElseIf grdFacturaPaciente.TextMatrix(vlintcontador, 7) = "CA" Then 'Coaseguro adicional
                                 vldblFacturaCoaseguroAdicional = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 2), ""))
                                 !mnyCantidadGravada = ldblCoaseguroAdicionalGrava
                                 !mnyIVAConcepto = dblIVACoaseguroAdicional
                          ElseIf grdFacturaPaciente.TextMatrix(vlintcontador, 7) = "CP" Then 'Copago
                                 vldblFacturaCopago = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 2), ""))
                                 !mnyCantidadGravada = ldblCopagoGrava
                                 !mnyIVAConcepto = dblIVACopago
                          End If
                               
                          If Trim(grdFacturaPaciente.TextMatrix(vlintcontador, 7)) <> "" Then
                             'Llenar PvFacturaPacienteConcepto
                             Set rsFacturaPacConcepto = frsRegresaRs("SELECT * FROM PvFacturaPacienteConcepto WHERE chrFolioFactura = '' ", adLockOptimistic, adOpenDynamic)
                             With rsFacturaPacConcepto
                                  .AddNew
                                  !INTMOVPACIENTE = CLng(txtMovimientoPaciente.Text)
                                  !CHRTIPOPACIENTE = IIf(OptTipoPaciente(0).Value, "I", "E")
                                  !chrfoliofactura = vlstrFolioDocumento
                                  !chrTipo = grdFacturaPaciente.TextMatrix(vlintcontador, 7)
                                  !intcveempresa = vgintEmpresa
                                  .Update
                             End With
                          End If
                       End If
                    Else  'Puede ser: !chrTipo = "DE" Or !chrTipo = "OD" Or !chrTipo = "OP"
                       '!mnyCantidad = IIf(optPesos(0).Value, Val(Format(grdFacturaPaciente.TextMatrix(vlintContador, 3), "")), Val(grdFacturaPaciente.TextMatrix(vlintContador, 11)) / vldblTipoCambio)
                       !MNYCantidad = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 3), ""))
                    End If
                    
                    !MNYIVA = Val(grdFacturaPaciente.TextMatrix(vlintcontador, 4))
                    !MNYDESCUENTO = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 5), ""))
                    If blnDeducibleSinIVA Then
                        If Abs((vldblFacturaDeducible + dblIVADeducible) - Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 5), ""))) <= 0.02 Then
                            !MNYDESCUENTO = Val(Format(grdFacturaPaciente.TextMatrix(vlintcontador, 5), "")) - dblIVADeducible
                        End If
                    End If
                    If !MNYIVA <> 0 And Trim(!chrTipo) <> "OC" Then
                       vldblIvaDescuento = vldblIvaDescuento + (!MNYDESCUENTO * (!MNYIVA / (!MNYCantidad - !MNYDESCUENTO)))
                       
                       If !mnyIVAConcepto = 0 Then
                          !mnyIVAConcepto = !MNYCantidad * (!MNYIVA / (!MNYCantidad - !MNYDESCUENTO))
                       End If
                    End If
                                            
                    If Trim(!chrTipo) = "DE" Then
                       If vlblnDescuentoParcial Then 'Despues de una vuelta los demas descuentos seran por facturas parciales
                          !mnyIVAConcepto = IIf(!MNYIVA < 0, !MNYIVA * -1, !MNYIVA)
                       Else
                          !mnyIVAConcepto = vldblIvaDescuento
                          vlblnDescuentoParcial = True
                       End If
                    End If
                    
                    If vlblnAplicoFacturaAsistenciaSocial Then
                       !MNYCantidad = !MNYCantidad - !MNYDESCUENTO
                       !mnyIVAConcepto = !MNYIVA
                       !MNYDESCUENTO = 0
                    End If
                End If
                                                
                If !MNYCantidad = 0 And !MNYDESCUENTO = 0 And !MNYIVA = 0 Then
                    'No hay importes a guardar así que no hagas nada
                    .CancelUpdate
                Else
                    .Update
                End If
             Next vlintcontador
             
             rsDetalleFactura.Close
                                 
'             frsEjecuta_SP Str(vllngConsecutivoFactura) & "|" & Str(vldblsubtotalgravado) & "|" & Str((vldblsubtotalNogravado) - (vldblsubtotalExento)) & "|" & Str(IIf(vlblnAplicoFacturaAsistenciaSocial, 0, vldbldescuentogravado)) & "|" & Str(Format((IIf(vlblnAplicoFacturaAsistenciaSocial, 0, vldbldescuentototal - vldbldescuentogravado - vldbldescuentoexento)), "###############.00")) & "|" & Str(vldblsubtotalExento) & "|" & Str(IIf(vlblnAplicoFacturaAsistenciaSocial, 0, vldbldescuentoexento)), "SP_PVINSFACTURAIMPORTE"
             frsEjecuta_SP str(vllngConsecutivoFactura) & "|" & str(vldblsubtotalgravadoSinRound) & "|" & str((vldblsubtotalNogravado) - (vldblsubtotalExento)) & "|" & str(IIf(vlblnAplicoFacturaAsistenciaSocial, 0, vldbldescuentogravado)) & "|" & str(Format((IIf(vlblnAplicoFacturaAsistenciaSocial, 0, vldbldescuentototal - vldbldescuentogravado - vldbldescuentoexento)), "###############.00")) & "|" & str(vldblsubtotalExento) & "|" & str(IIf(vlblnAplicoFacturaAsistenciaSocial, 0, vldbldescuentoexento)), "SP_PVINSFACTURAIMPORTE"
        End With
        
        ' (CR) - CASO 6894 - Guardar en el kárdex del banco si hubo pago por medio de transferencias bancarias      '
        ' (Se requiere el consecutivo de la factura, por eso se guarda después de hacer el movimiento en PvFactura) '
        If Val(Format(txtFPTotalPagar.Text, "")) > 0 Then
            For vlintcontador = 0 To UBound(aFormasPago(), 1)
                If Not aFormasPago(vlintcontador).vlbolEsCredito Then 'Formas de pago distintas a Crédito
                    '----- Guardar información de la forma de pago en tabla intermedia -----'
                    vgstrParametrosSP = vllngNumeroCorte & "|" & fstrFechaSQL(Format(vldtmFechaHoy, "dd/mm/yyyy"), Format(vldtmHoraHoy, "hh:mm:ss")) & "|" & aFormasPago(vlintcontador).vlintNumFormaPago & "|" & aFormasPago(vlintcontador).lngIdBanco & "|" & _
                                        IIf(aFormasPago(vlintcontador).vldblTipoCambio = 0, aFormasPago(vlintcontador).vldblCantidad, aFormasPago(vlintcontador).vldblDolares) & "|" & IIf(aFormasPago(vlintcontador).vldblTipoCambio = 0, 1, 0) & "|" & aFormasPago(vlintcontador).vldblTipoCambio & "|" & _
                                        fstrTipoMovimientoForma(aFormasPago(vlintcontador).vlintNumFormaPago) & "|" & "FA" & "|" & vllngConsecutivoFactura & "|" & vllngPersonaGraba & "|" & vgintNumeroDepartamento & "|" & fstrFechaSQL(Format(vldtmFechaHoy, "dd/mm/yyyy"), Format(vldtmHoraHoy, "hh:mm:ss")) & "|" & "1" & "|" & cgstrModulo
                    frsEjecuta_SP vgstrParametrosSP, "Sp_PvInsMovimientoBancoForma"
                
                    ' Agregado para caso 8741
                    ' Si la forma de pago es de tipo tarjeta se registra la disminución de la cantidad referente a la comision bancaria
                    vldblComisionIvaBancaria = 0
                    If aFormasPago(vlintcontador).vllngCuentaComisionBancaria <> 0 And aFormasPago(vlintcontador).vldblCantidadComisionBancaria <> 0 Then
                        If aFormasPago(vlintcontador).vldblTipoCambio = 0 Then
                             vldblComisionIvaBancaria = (aFormasPago(vlintcontador).vldblCantidadComisionBancaria + aFormasPago(vlintcontador).vldblIvaComisionBancaria) * -1
                        Else
                             vldblComisionIvaBancaria = (aFormasPago(vlintcontador).vldblCantidadComisionBancaria + aFormasPago(vlintcontador).vldblIvaComisionBancaria) / aFormasPago(vlintcontador).vldblTipoCambio * -1
                        End If
                        vgstrParametrosSP = vllngNumeroCorte & "|" & fstrFechaSQL(Format(vldtmFechaHoy, "dd/mm/yyyy"), Format(vldtmHoraHoy, "hh:mm:ss")) & "|" & aFormasPago(vlintcontador).vlintNumFormaPago & "|" & aFormasPago(vlintcontador).lngIdBanco & "|" & _
                                            vldblComisionIvaBancaria & "|" & IIf(aFormasPago(vlintcontador).vldblTipoCambio = 0, 1, 0) & "|" & aFormasPago(vlintcontador).vldblTipoCambio & "|" & _
                                            "CBA" & "|" & "FA" & "|" & vllngConsecutivoFactura & "|" & vllngPersonaGraba & "|" & vgintNumeroDepartamento & "|" & fstrFechaSQL(Format(vldtmFechaHoy, "dd/mm/yyyy"), Format(vldtmHoraHoy, "hh:mm:ss")) & "|" & "1" & "|" & cgstrModulo
                        frsEjecuta_SP vgstrParametrosSP, "Sp_PvInsMovimientoBancoForma"
                    End If
                End If
            Next vlintcontador
        End If
        
        '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        '||  Actualiza las facturas parciales con el número de factura base  ||'
        '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
         pUpdateParciales vllngConsecutivoFactura
         
         '-------------------------------------------------------------------'
         ' Agregar movimientos a póliza de los INGRESOS, su IVA y DESCUENTOS '
         '-------------------------------------------------------------------'
         pCuadreIngresosDescuentos vlblnAplicoFacturaAsistenciaSocial
         For vlintcontador = 0 To UBound(aCPCargosPoliza) - 1
            'Cambio para caso 8736
            'Si las cuentas de ingreso y descuento son iguales y el bitSaldarCuentas = 1
            'agrega un sólo movimiento a la póliza con el ingreso menos el descuento
            vlblnCuentaIngresoSaldada = False
            
            If Not vlblnAplicoFacturaAsistenciaSocial Then
                If aCPCargosPoliza(vlintcontador).lngCuentaIngreso = aCPCargosPoliza(vlintcontador).lngCuentaDescuento Then
                    'Verifica bit pvConceptoFacturacion.bitSaldarCuentas
                    vlintBitSaldarCuentas = 1
                    frsEjecuta_SP CStr(aCPCargosPoliza(vlintcontador).lngConceptoFacturacion), "FN_PVSELBITSALDARCUENTAS", True, vlintBitSaldarCuentas
                    If vlintBitSaldarCuentas = 1 Then
                        '-----------------------------------'
                        ' Abono para el Ingreso - Descuento '
                        '-----------------------------------'
                        If (aCPCargosPoliza(vlintcontador).dblCantidadIngreso - aCPCargosPoliza(vlintcontador).dblCantidadDescuento) > 0 Then
                            pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, (aCPCargosPoliza(vlintcontador).dblCantidadIngreso - aCPCargosPoliza(vlintcontador).dblCantidadDescuento), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                            vlblnCuentaIngresoSaldada = True
                        ElseIf (aCPCargosPoliza(vlintcontador).dblCantidadIngreso - aCPCargosPoliza(vlintcontador).dblCantidadDescuento) < 0 Then
                            vlblnCuentaIngresoSaldada = False   'movimientos de descuentos de factura parcial ((ingreso = 0) - (descuento > 0))
                        ElseIf (aCPCargosPoliza(vlintcontador).dblCantidadIngreso - aCPCargosPoliza(vlintcontador).dblCantidadDescuento) = 0 Then
                            vlblnCuentaIngresoSaldada = True    'no agrega movimiento en la póliza porque no hay ingreso despues del descuento, por ser iguales las cantidades
                        End If
                    End If
                End If
            End If
            
            vldblTotalIngresos = vldblTotalIngresos + Round(aCPCargosPoliza(vlintcontador).dblCantidadIngreso, 2) - IIf(vlblnAplicoFacturaAsistenciaSocial, Round(aCPCargosPoliza(vlintcontador).dblCantidadDescuento, 2), 0)
            vldblTotalDescuentos = vldblTotalDescuentos + IIf(vlblnAplicoFacturaAsistenciaSocial, 0, Round(aCPCargosPoliza(vlintcontador).dblCantidadDescuento, 2))
            
            If vlblnCuentaIngresoSaldada = False Then
                '-----------------------'
                ' Abono para el Ingreso '
                '-----------------------'
                If vlblnAplicoFacturaAsistenciaSocial Then
                    If aCPCargosPoliza(vlintcontador).dblCantidadIngreso - aCPCargosPoliza(vlintcontador).dblCantidadDescuento <> 0 Then
                        'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintContador).lngCuentaIngreso, aCPCargosPoliza(vlintContador).dblCantidadIngreso, False
                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).dblCantidadIngreso - aCPCargosPoliza(vlintcontador).dblCantidadDescuento, False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                    End If
                Else
                    If aCPCargosPoliza(vlintcontador).dblCantidadIngreso <> 0 Then
                        'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintContador).lngCuentaIngreso, aCPCargosPoliza(vlintContador).dblCantidadIngreso, False
                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).dblCantidadIngreso, False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                    End If
                    
                    '-------------------------'
                    ' Cargo para el descuento '
                    '-------------------------'
                    If aCPCargosPoliza(vlintcontador).dblCantidadDescuento > 0 Then
                        'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintContador).lngCuentaDescuento, aCPCargosPoliza(vlintContador).dblCantidadDescuento, True
                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaDescuento, aCPCargosPoliza(vlintcontador).dblCantidadDescuento, True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                    End If
                End If
            End If
         Next vlintcontador
            
         '----------------------------------------------------'
         ' Movimientos contables por IVA cobrado y no cobrado '
         '----------------------------------------------------'
         If vldblTotalIVACredito > 0 Then
            'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", glngCtaIVANoCobrado, Format(vldblTotalIVACredito, "############.00"), False
            pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngCtaIVANoCobrado, Format(vldblTotalIVACredito, "############.00"), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
         End If
            
         If Format(dblIVAP, "###############.00") - Format(vldblTotalIVACredito, "############.00") > 0.01 Then
            'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", glngCtaIVACobrado, Format(dblIVAP, "###############.00") - Format(vldblTotalIVACredito, "############.00"), False
            pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngCtaIVACobrado, Format(dblIVAP, "############.00") - Format(vldblTotalIVACredito, "############.00"), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
         End If
            
         '---------------------------------------------------------'
         'Verificar si los cargos cambiaron                        '
         '---------------------------------------------------------'
         If fblnValidarCargos Then
            'Los cargos de la cuenta han sido modificados, consulte de nuevo.
            MsgBox SIHOMsg(1152), vbExclamation, "Mensaje"
            EntornoSIHO.ConeccionSIHO.RollbackTrans
            Unload Me
            Exit Sub
         End If
            
         '------------------------------------------'
         ' Poner el número de factura en los CARGOS '
         '------------------------------------------'
         vlstrSentencia = " Update PVCargo Set chrFolioFactura = '" & Trim(vlstrFolioDocumento) & "'" & " Where intNumCargo IN ("
          
         For vlintcontador = 1 To grdCargos.Rows - 1
                'Se agrega el folio de factura únicamente a los cargos del paciente cuando es un socio
                 If grdCargos.TextMatrix(vlintcontador, 0) = "*" And ((((vgintEmpresa = 0 And vgSocio = False) Or (vgSocio = True And grdCargos.TextMatrix(vlintcontador, 18) = "X") Or (grdCargos.TextMatrix(vlintcontador, 18) = "X")))) Then
                    vlstrSentencia = vlstrSentencia & Trim(str(grdCargos.RowData(vlintcontador)))
                    vlstrAux = vlstrAux & "," & Trim(str(grdCargos.RowData(vlintcontador)))
                    If vlintcontador < grdCargos.Rows - 1 Then
                       vlstrSentencia = vlstrSentencia & ", "
                    End If
                 End If

                 If vlintcontador Mod 50 = 0 And vlstrAux <> "" Then
                    vlstrSentencia = Trim(vlstrSentencia)
                    If Mid(vlstrSentencia, Len(vlstrSentencia), 1) = "," Then
                           vlstrSentencia = Mid(vlstrSentencia, 1, Len(vlstrSentencia) - 1) & ") "
                    Else
                           vlstrSentencia = vlstrSentencia & ")"
                    End If
                    pEjecutaSentencia (vlstrSentencia)
                    pCambiaSentLlenaAux vlstrSentencia, vlstrAux, vlstrFolioDocumento
                 End If
              
         Next vlintcontador
         
          vlintcontador = vlintcontador - 1
          If vlintcontador Mod 50 <> 0 And vlstrAux <> "" Then
             vlstrSentencia = Trim(vlstrSentencia)
             If Mid(vlstrSentencia, Len(vlstrSentencia), 1) = "," Then
                    vlstrSentencia = Mid(vlstrSentencia, 1, Len(vlstrSentencia) - 1) & ") "
             Else
                     vlstrSentencia = vlstrSentencia & ")"
             End If
             pEjecutaSentencia (vlstrSentencia)
          End If
          
         vlblnFaltaCtaCosto = False
         pContabilizaCostoHonorariosMedicos vlstrFolioDocumento, vllngNumeroCorte, dblPorcentajeCredito, dblPorcentajeContado
         If vlblnFaltaCtaCosto = True Then
            EntornoSIHO.ConeccionSIHO.RollbackTrans
            Exit Sub
         End If
                  
         'Crea el honorario por pagar
         'If Not fblnCreaHonorarioPorPagar(vlstrFolioDocumento, dblTotalContado, vgintNumeroDepartamento, vllngPersonaGraba, vlblnCredito) Then
         If Not fblnCreaHonorarioPorPagar(vlstrFolioDocumento, dblTotalContado, vgintNumeroDepartamento, vllngPersonaGraba, vlblnCredito, vldblTotalFactura) Then
            EntornoSIHO.ConeccionSIHO.RollbackTrans
            Exit Sub
         End If
         
         vlblnFaltaCtaCosto = False
         pContabilizaCostoServiciosSubrogado vlstrFolioDocumento, vllngNumeroCorte
         If vlblnFaltaCtaCosto = True Then
            EntornoSIHO.ConeccionSIHO.RollbackTrans
            Exit Sub
         End If
         
          For vlintcontador = 1 To grdCargos.Rows - 1
               If grdCargos.TextMatrix(vlintcontador, 0) = "*" Then
                  Set rsCargoExcedente = frsRegresaRs("SELECT * FROM PVCARGOEXCEDENTE WHERE intNumCargo = " & grdCargos.RowData(vlintcontador), adLockOptimistic, adOpenDynamic)
                  If rsCargoExcedente.RecordCount = 0 Then
                     If Not rsExcedentes.EOF Then
                            rsExcedentes.MoveFirst
                           vlExisteConcepto = False
                           Do While Not rsExcedentes.EOF
                              If rsExcedentes!IntNumCargo = grdCargos.RowData(vlintcontador) Then
                                 pEjecutaSentencia "INSERT INTO PVCARGOEXCEDENTE (intnumcargo, chrfoliofactura, intnumpaquete, intcvegrupo, mnyexcedente) values(" & rsExcedentes!IntNumCargo & ",'" & Trim(vlstrFolioDocumento) & "'," & rsExcedentes!intnumpaquete & "," & rsExcedentes!intCveGrupo & "," & rsExcedentes!mnyexcedente & ")"
                                 vlExisteConcepto = True
                              End If
                              rsExcedentes.MoveNext
                           Loop
                           If vlExisteConcepto = False Then
                              pEjecutaSentencia "INSERT INTO PVCARGOEXCEDENTE (intnumcargo, chrfoliofactura, intnumpaquete, intcvegrupo, mnyexcedente) values(" & grdCargos.RowData(vlintcontador) & ",'" & Trim(vlstrFolioDocumento) & "',0,0,0)"
                           End If
                           rsExcedentes.MoveFirst
                     End If
                  End If
               End If
          Next vlintcontador
  
          If gintAseguradora = 1 Then
             '--------------------------------------
             'Actualizar el control de aseguradoras:
             '--------------------------------------
             vldblFacturaCoaseguroMedicoPorCobrar = 0
             If blnCalcularEnBaseACargos Then
                vldblFacturaCoaseguroMedicoPorCobrar = Val(Format(txtTotalCoaseguroMedico.Text, "")) - dblCoaseguroMedicoCargos - dblCoaseguroMFacturado
             End If
             
             vgstrParametrosSP = str(vldblFacturaExcedente) & "|" & str(vldblFacturaDeducible) & "|" & str(vldblFacturaCoaseguro) & "|" & str(vldblFacturaCoaseguroMedico) & "|" & str(vldblFacturaCoaseguroAdicional) _
                            & "|" & str(vldblFacturaCopago) & "|" & vlstrFolioDocumento & "|" & txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") _
                            & "|" & str(vgintEmpresa) & "|" & CStr(dblExcedenteH) & "|" & CStr(dblDeducibleH) & "|" & CStr(dblCoaseguroH) & "|" & CStr(dblCoaseguroMH) & "|" & CStr(dblCoaseguroAH) & "|" & CStr(dblCopagoH) _
                            & "|" & str(ldblHonorariosAFacturar + ldblHonorariosFacturadosPac) & "|0|" & vldblFacturaCoaseguroMedicoPorCobrar & "|" & IIf(intCoaseguroPorFactura = 0, Val(Format(txtCantidadMaximaCO.Text, "")), 0) _
                            & "|" & IIf(dblExcedenteDeIVA > 0, str(dblExcedenteDeIVA), 0)
             frsEjecuta_SP vgstrParametrosSP, "SP_PVUPDCONTROLASEGURADORAPACI"
        
             '-------------------------------------------------------------
             'Si se factura en base a los cargos seleccionados
             'Marca los cargos poniendo el folio de la factura del paciente
             ' Y la cantidad de paquetes que se tomaron en cuenta
             '-------------------------------------------------------------
             If blnCalcularEnBaseACargos Then
                ReDim aryPaquetesPaciente(0)
                vlstrAux = ""
            
                'Actualizar PvCargo.chrFolioFacturaPaciente
                vlstrSentencia = "Update PvCargo Set chrFolioFacturaPaciente = '" & Trim(vlstrFolioDocumento) & "'" & " Where intNumCargo In ("
                
                For vlintcontador = 1 To grdCargos.Rows - 1
                    If grdCargos.TextMatrix(vlintcontador, 0) = "*" And _
                       grdCargos.TextMatrix(vlintcontador, clbytColumnaExclusion) <> "X" And _
                       grdCargos.TextMatrix(vlintcontador, cintColMarcadoParaFacturar) <> "1" Then
                   
                       vlstrSentencia = vlstrSentencia & Trim(str(grdCargos.RowData(vlintcontador)))
                       vlstrAux = vlstrAux & "," & Trim(str(grdCargos.RowData(vlintcontador)))
                       If vlintcontador < grdCargos.Rows - 1 Then vlstrSentencia = vlstrSentencia & ", "
                    
                       If Val(grdCargos.TextMatrix(vlintcontador, 30)) > 0 Then
                          If Not fblnExistePaquetePaciente(aryPaquetesPaciente, Val(grdCargos.TextMatrix(vlintcontador, 30))) Then
                                 intPaquetes = UBound(aryPaquetesPaciente) + 1
                                 ReDim Preserve aryPaquetesPaciente(intPaquetes)
                                 aryPaquetesPaciente(intPaquetes).lngPaquete = Val(grdCargos.TextMatrix(vlintcontador, 30))
                                 aryPaquetesPaciente(intPaquetes).intCantidad = Val(grdCargos.TextMatrix(vlintcontador, cintColCantidadPaquete))
                          End If
                       End If
                    End If
                
                    If vlintcontador Mod 50 = 0 And vlstrAux <> "" Then
                       vlstrSentencia = Trim(vlstrSentencia)
                       If Mid(vlstrSentencia, Len(vlstrSentencia), 1) = "," Then
                          vlstrSentencia = Mid(vlstrSentencia, 1, Len(vlstrSentencia) - 1) & ") "
                       Else
                          vlstrSentencia = vlstrSentencia & ")"
                       End If
                    
                       pEjecutaSentencia (vlstrSentencia)
                    
                       vlstrSentencia = "Update PvCargo Set chrFolioFacturaPaciente = '" & Trim(vlstrFolioDocumento) & "'" & " Where intNumCargo In ("
                       vlstrAux = ""
                    End If
                Next vlintcontador
                vlintcontador = vlintcontador - 1
            
                If vlintcontador Mod 50 <> 0 And vlstrAux <> "" Then
                   vlstrSentencia = Trim(vlstrSentencia)
                   If Mid(vlstrSentencia, Len(vlstrSentencia), 1) = "," Then
                      vlstrSentencia = Mid(vlstrSentencia, 1, Len(vlstrSentencia) - 1) & ") "
                   Else
                      vlstrSentencia = vlstrSentencia & ")"
                   End If
                   pEjecutaSentencia (vlstrSentencia)
                End If
            
                For vlintcontador = 1 To UBound(aryPaquetesPaciente)
                    'Checar si esto va a aplicar
                    'Guarda la cantidad de los paquetes que se tomaron en cuenta para hacer los cálculos
                    vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & _
                                        IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & _
                                        aryPaquetesPaciente(vlintcontador).lngPaquete & "|" & _
                                        aryPaquetesPaciente(vlintcontador).intCantidad & "|" & _
                                        Trim(vlstrFolioDocumento)
                    frsEjecuta_SP vgstrParametrosSP, "Sp_PvUpdPaquetesFacturaPacient"
                Next vlintcontador
        
                For vlintcontador = 1 To grdCargos.Rows - 1
                    If grdCargos.TextMatrix(vlintcontador, 0) = "*" Then
                       Set rsCargoExcedente = frsRegresaRs("SELECT * FROM PVCARGOEXCEDENTE WHERE intnumcargo = " & grdCargos.RowData(vlintcontador), adLockOptimistic, adOpenDynamic)
                       If rsCargoExcedente.RecordCount = 0 Then
                          If Not rsExcedentes.EOF Then
                             rsExcedentes.MoveFirst
                             vlExisteConcepto = False
                             Do While Not rsExcedentes.EOF
                                If rsExcedentes!IntNumCargo = grdCargos.RowData(vlintcontador) Then
                                    pEjecutaSentencia "INSERT INTO PVCARGOEXCEDENTE (intnumcargo, chrfoliofactura, intnumpaquete, intcvegrupo, mnyexcedente) values(" & rsExcedentes!IntNumCargo & ",'" & Trim(vlstrFolioDocumento) & "'," & rsExcedentes!intnumpaquete & "," & rsExcedentes!intCveGrupo & "," & rsExcedentes!mnyexcedente & ")"
                                    vlExisteConcepto = True
                                End If
                                rsExcedentes.MoveNext
                             Loop
                             If vlExisteConcepto = False Then
                                pEjecutaSentencia "INSERT INTO PVCARGOEXCEDENTE (intnumcargo, chrfoliofactura, intnumpaquete, intcvegrupo, mnyexcedente) values(" & grdCargos.RowData(vlintcontador) & ",'" & Trim(vlstrFolioDocumento) & "',0,0,0)"
                            End If
                            rsExcedentes.MoveFirst
                          End If
                       End If
                    End If
                Next vlintcontador
             End If
          End If
            
          'Si es un grupo actualiza la facturacion consolidada con el folio y la fecha de la factura:
          If optGrupoCuenta(0).Value Then
             pActualizaFacturacionConsolidada Trim(vlstrFolioDocumento), txtMovimientoPaciente.Text
          End If
    
           pInsPaquetesFacturados Trim(vlstrFolioDocumento), rsgrupo
    
           pGrabarConceptosDesgloce
                      
           '-----------------------------------------------------------------------
           'Que se guarde la configuración de Internos y Externos según el Proceso:
           '-----------------------------------------------------------------------
           pEjecutaSentencia "Delete From PvTipoPacienteProceso Where PvTipoPacienteProceso.intNumeroLogin = " & vglngNumeroLogin & " And PvTipoPacienteProceso.intProceso = " & enmTipoProceso.Facturacion
           pEjecutaSentencia "Insert Into PvTipoPacienteProceso (intnumerologin, intproceso, chrtipopaciente) Values(" & vglngNumeroLogin & "," & enmTipoProceso.Facturacion & "," & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & ")"
                              
          '------------------'
          ' Notas de crédito '
          '------------------'
          
          '----------------------------
          'Notas de crédito a pacientes
          '----------------------------
          If dblNotasCreditoPaciente > 0 Then
                'Actualiza las notas para que queden como aplicadas y pone el folio de la factura
                For intContadorNotas = 1 To UBound(alngNotasPaciente)
                    
                    'CcNota
                    pEjecutaSentencia ("Update CcNota Set chrEstatus = 'P', vchFacturaImpresion = '" & vlstrFolioDocumento & "' Where intConsecutivo = " & CStr(alngNotasPaciente(intContadorNotas)))
                    
                    'CcNotaDetalle
                    pEjecutaSentencia ("Update CcNotaDetalle Set chrFolioFactura = '" & Trim(vlstrFolioDocumento) & "' Where intConsecutivo = " & CStr(alngNotasPaciente(intContadorNotas)))
                    
                    'CcNotaFactura
                    pEjecutaSentencia ("Update CcNotaFactura Set chrFolioFactura = '" & Trim(vlstrFolioDocumento) & "' Where intConsecutivo = " & CStr(alngNotasPaciente(intContadorNotas)))
                    
                Next intContadorNotas

                '----------------------------------------------
                'Cargo a la cuenta puenta para notas de crédito
                '----------------------------------------------
                 pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", lngCuentaPuenteNotasCredito, dblNotasCreditoPaciente, True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
          End If
             
          '---------------------------------------------------------------------------------------
          'Notas de crédito automáticas por conceptos de seguro (sólo cuando la factura se timbró)
          '---------------------------------------------------------------------------------------
          If dblNotasCreditoCS > 0 Then
             '---------------------------------------
             'Graba las notas por conceptos de seguro
             'Se compara el tipo de folio con el tipo de formato a utilizar con la fn "fintTipoEmisionComprobante"
             '¿(intTipoEmisionComprobante: 0 = Error, 1 = Físico, 2 = Digital)
             '---------------------------------------------------------------
             intTipoEmisionComprobanteNota = fintTipoEmisionComprobante("NC", lngNumeroTipoFormatoNotas, intFolioUnico)
             If intTipoEmisionComprobanteNota = 0 Then
                EntornoSIHO.ConeccionSIHO.RollbackTrans
                Exit Sub
             End If
               
             If intTipoEmisionComprobanteNota = 2 Then
                'Se revisa el tipo de CFD para la Nota de credito (0 = CFD, 1 = CFDi, 2 = Físico, 3 = Error)
                intTipoCFDNota = fintTipoCFD("NC", lngNumeroTipoFormatoNotas, intFolioUnico)
                           
                'Si aparece un error terminar la transacción
                If intTipoCFDNota = 3 Then   'ERROR
                   'Si es error, se cancela la transacción
                    EntornoSIHO.ConeccionSIHO.RollbackTrans
                    Exit Sub
                End If
             End If
               
             'Cargar el folio de la nota
             strFolioNota = fstrFolioNota(1, strSerieNota, strFolioSoloNota, strNumeroAprobacionNota, strAnoAprobacionNota)
             If Trim(strFolioNota) = "0" Then
                EntornoSIHO.ConeccionSIHO.RollbackTrans
               '¡No existen folios activos para las notas de crédito!
                MsgBox SIHOMsg(1004), vbCritical, "Mensaje"
                Exit Sub
             End If
             
            pCargaUsoNota intCveUsoCFDINota
             
             If Not intCveUsoCFDINota > 0 Then
                'G02 Devoluciones, descuentos o bonificaciones
                intCveUsoCFDINota = 44
             End If
               
             'CcNota  ---Se cambio un procedimiento pGuardarNota para ahorrar lineas de codigo
             pGuardarNota strFolioNota, vldtmFechaHoy, vlstrFolioDocumento, strFolioSoloNota, strSerieNota, intCveUsoCFDINota, vllngPersonaGraba
'                Set rsCcNota = frsRegresaRs("Select * From CcNota Where intConsecutivo = -1", adLockOptimistic, adOpenDynamic)
'                With rsCcNota
'                         .AddNew
'                         !chrFolioNota = Trim(strFolioNota)
'                         !dtmfecha = vldtmFechaHoy
'                         !chrTipo = "CR"
'                         !MNYSUBTOTAL = dblNotasCreditoCS
'                         !MNYIVA = dblIVANotasCreditoCS
'                         !chrestatus = "P"
'                         !intPersonaGraba = vllngPersonaGraba
'                         !intPersonaBorra = 0
'                         !smicvedepartamento = vgintNumeroDepartamento
'                         !dtmFechaRegistro = vldtmFechaHoy
'                         !intNumPolizaCancelacion = 0
'                         !vchPacienteImpresion = Mid(lblPaciente.Caption, 1, 100)
'                         !vchFacturaImpresion = Mid(vlstrFolioDocumento, 1, 20)
'                         !CHRTIPOPACIENTE = IIf(OptTipoPaciente(0).Value, "I", "E")
'                         !INTMOVPACIENTE = CLng(txtMovimientoPaciente.Text)
'                         !chrnotadirigida = "P"
'                         !bitAutomatica = 1
'                         !chrfolio = strFolioSoloNota
'                         !chrSerie = strSerieNota
'                         !dtmFechahora = vldtmFechaHoy + fdtmServerHora
'                         !chrmotivonota = "O"
'                         !intCveUsoCFDI = intCveUsoCFDINota
'                         .Update
'                          lngIDnota = flngObtieneIdentity("SEC_CCNOTA", rsCcNota!intConsecutivo)
'                End With
                lngIDnota = lngIDnotaGlobal
                '-------------
                'CcNotaDetalle
                '-------------
                Set rsCcNotaDetalle = frsRegresaRs("Select * From CcNotaDetalle Where intConsecutivo = -1", adLockOptimistic, adOpenDynamic)
                With rsCcNotaDetalle
                For intContadorNotas = 1 To UBound(aNotasCredito)
                    .AddNew
                    !intConsecutivo = lngIDnota
                    !MNYCantidad = aNotasCredito(intContadorNotas).dblSubTotal
                    !MNYIVA = aNotasCredito(intContadorNotas).dblIVA
                    !intConcepto = aNotasCredito(intContadorNotas).lngCveConcepto
                    !intCuentaDescuento = aNotasCredito(intContadorNotas).lngCuentaDescuento
                    !intCuentaIngreso = lngCuentaPuenteNotasCredito
                    !intCuentaIVA = glngCtaIVACobrado
                    !chrfoliofactura = vlstrFolioDocumento
                    !chrTipoCargo = "CF"
                    !chrTipoNota = "FA"
                    If fblnConceptoAseguradora(!intConcepto) And vgintEmpresa <> 0 Then
                        !numImporteGravado = fdblImGrav1(aNotasCredito(intContadorNotas).dblSubTotal, aNotasCredito(intContadorNotas).dblIVA, 0, aNotasCredito(intContadorNotas).lngCveConcepto)
                    Else
                        !numImporteGravado = fdblImGrav1(aNotasCredito(intContadorNotas).dblSubTotal, aNotasCredito(intContadorNotas).dblIVA, 1, aNotasCredito(intContadorNotas).lngCveConcepto)
                    End If
                    .Update

                    '------------------------------
                    'Cargo a la cuenta de descuento
                    '------------------------------
                    'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aNotasCredito(intContadorNotas).lngCuentaDescuento, aNotasCredito(intContadorNotas).dblsubtotal, True
                    pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aNotasCredito(intContadorNotas).lngCuentaDescuento, aNotasCredito(intContadorNotas).dblSubTotal, True, "NA", 0, 0, "NA", 0, 2, strFolioNota, "CR"
                    
                    '------------------------
                    'Cargo a la cuenta de IVA
                    '------------------------
                    If aNotasCredito(intContadorNotas).dblIVA > 0 Then
                       'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", glngCtaIVACobrado, aNotasCredito(intContadorNotas).dblIVA, True
                       pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngCtaIVACobrado, aNotasCredito(intContadorNotas).dblIVA, True, "NA", 0, 0, "NA", 0, 2, strFolioNota, "CR"
                    End If
                    
                    '------------------------
                    'Abono a la cuenta puente
                    '------------------------
                    'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", lngCuentaPuenteNotasCredito, aNotasCredito(intContadorNotas).dblsubtotal + aNotasCredito(intContadorNotas).dblIVA, False
                    pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", lngCuentaPuenteNotasCredito, aNotasCredito(intContadorNotas).dblSubTotal + aNotasCredito(intContadorNotas).dblIVA, False, "NA", 0, 0, "NA", 0, 2, strFolioNota, "CR"
                Next intContadorNotas
                End With
                 
                '-------------
                'CcNotaFactura
                '-------------
                Set rsCcNotaFactura = frsRegresaRs("Select * From CcNotaFactura Where intConsecutivo = -1", adLockOptimistic, adOpenDynamic)
                With rsCcNotaFactura
                     .AddNew
                     !intConsecutivo = lngIDnota
                     !chrfoliofactura = vlstrFolioDocumento
                     !MNYSUBTOTAL = dblNotasCreditoCS
                     !MNYDESCUENTO = 0
                     !MNYIVA = dblIVANotasCreditoCS
                     !intNumMovimientoCredito = 0
                     !chrTipoFolio = "FA"
                     .Update
                End With
                
                '----------------------------------------------
                'Cargo a la cuenta puente para notas de crédito
                '----------------------------------------------
                'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", lngCuentaPuenteNotasCredito, dblNotasCreditoCS + dblIVANotasCreditoCS, True
                pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", lngCuentaPuenteNotasCredito, dblNotasCreditoCS + dblIVANotasCreditoCS, True, "NA", 0, 0, "NA", 0, 2, strFolioNota, "CR"
                
                '------------------------
                'Excedente por honorarios
                '------------------------
                If gintAseguradora = 1 And blnExcedenteHonorarios Then
                
                   '--------------------------------------------------------------------------------------
                   'Abono a la cuenta contable para excedentes por conceptos de seguro mayores a la cuenta
                   '--------------------------------------------------------------------------------------
                   'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", lngCuentaExcedenteHonorarios, dblExcedenteHonorarios, False
                   pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", lngCuentaExcedenteHonorarios, dblExcedenteHonorarios, False, "NA", 0, 0, "NA", 0, 2, strFolioNota, "CR"
                End If
                        
          End If 'dblNotasCreditoCS > 0 And vgIntBanderaTImbradoPendiente = 0
                    
          '------------------------------------------------------------------------
          'Se registran los puntos acumulados y los puntos utilizados en la factura
          '------------------------------------------------------------------------
          pControlPuntos vllngConsecutivoFactura, vlstrFolioDocumento, vldtmFechaHoy, vldtmHoraHoy
                    
          '-------------------
          'Se libera la cuenta
          '-------------------
          pLiberaCuenta
           
          '---------------------------------------------------------------------------------------
          'Se agregan los movimientos de la factura base ó de la factura base y la nota de crédito(se abre y se cierra el corte)
          '---------------------------------------------------------------------------------------
          vllngCorteUsado = fRegistrarMovArregloCorte(vllngNumeroCorte, True)
          
          If vllngCorteUsado = 0 Then
             EntornoSIHO.ConeccionSIHO.RollbackTrans
             'No se pudieron agregar los movimientos de la operación al corte, intente de nuevo.
             MsgBox SIHOMsg(1320), vbExclamation, "Mensaje"
             Exit Sub
          Else
                   
            If vllngCorteUsado <> vllngNumeroCorte Then
               'actualizamos el corte en el que se registró la factura, esto es por si hay un cambio de corte al momento de hacer el registro d ela información de la factura
                pEjecutaSentencia "Update pvfactura set INTNUMCORTE = " & vllngCorteUsado & " where intConsecutivo = " & vllngConsecutivoFactura
            End If
          End If
         
          '------------------------------------------
          'Se guarda el LOG y COMMIT a la transacción
          '------------------------------------------
          Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGraba, Me.Caption, Trim(vlstrFolioDocumento))
          
          '-------------------------------------------------------------------------------------------------
          'VALIDACIÓN DE LOS DATOS ANTES DE INSERTAR EN GNCOMPROBANTEFISCLADIGITAL EN EL PROCESO DE TIMBRADO
          '-------------------------------------------------------------------------------------------------
          If intTipoEmisionComprobante = 2 Then
             If Not fblnValidaDatosCFDCFDi(vllngConsecutivoFactura, "FA", IIf(intTipoCFDFactura = 1, True, False), CInt(strAnoAprobacion), strNumeroAprobacion) Then
                EntornoSIHO.ConeccionSIHO.RollbackTrans
                Exit Sub
             End If
             If lngIDnota > 0 Then 'hay nota de crédito
                 If intTipoEmisionComprobanteNota = 2 Then
                    If Not fblnValidaDatosCFDCFDi(lngIDnota, "CR", IIf(intTipoCFDNota = 1, True, False), CInt(strAnoAprobacionNota), strNumeroAprobacionNota) Then
                       EntornoSIHO.ConeccionSIHO.RollbackTrans
                       Exit Sub
                    End If
                 End If
             End If
          End If
            
          EntornoSIHO.ConeccionSIHO.CommitTrans '*se cierra la transacción para que la factura quede registrada en el SiHO
                                                
          'TIMBRES****************************************************************************************************************************
          '------------------------------
          'TIMBRADO FISCAL DE LA FACTURA
          '------------------------------
                If intTipoEmisionComprobante = 2 Then
1            If intTipoCFDFactura = 1 Then
1000            pMarcarPendienteTimbre vllngConsecutivoFactura, "FA", vgintNumeroDepartamento 'si es CFDi
1001            pLogTimbrado 2
             End If
2            EntornoSIHO.ConeccionSIHO.BeginTrans 'transacción del timbrado

             pBarraAlSetenta 'Barra de progreso al 70

9            frmFacturacion.Enabled = False
10           vlintEstadoTimbradoFBase = 0
             vlblnExcluirPaciente = IIf(chkFacturaSustitutaFP(1) = 1, 1, 0)
             vlblnUsarRazonSocial = IIf(chkRazonSocial = 1, 1, 0)
12           If Not fblnGeneraComprobanteDigital(vllngConsecutivoFactura, "FA", IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), CInt(strAnoAprobacion), strNumeroAprobacion, IIf(intTipoCFDFactura = 1, True, False)) Then
                On Error Resume Next
13              EntornoSIHO.ConeccionSIHO.CommitTrans
                'caso 17997 guardar en la tabla GNCOMPROBANTEFISCALDIGITAL si vamos a mostrar los datos del paciente en facturacion
                pMostrarDatosPacienteFactura vllngConsecutivoFactura, "FA"
                    
14              If intTipoCFDFactura = 1 Then pLogTimbrado 1 'si es CFDi
15              vlintEstadoTimbradoFBase = vgIntBanderaTImbradoPendiente
                '-----------------------------------------------------------------------------------------------------------------------------------------------------
16              If vgIntBanderaTImbradoPendiente = 1 Then 'timbre pendiente
                   '--------------------------------------------------------------------------------------------------------------------------------------------------
17                 If lngIDnota > 0 Then 'hay nota de crédito, se cancela todo
                      'debemos ingresar la nota de crédito a GNCOMPROBANTEFISCALDIGITAL para cancelarla e imprimirla
                      pInsDN lngIDnota, vlstrDFCodigoPostal, vlstrDFRegimenFiscal
                      
18                    fblnGeneraComprobanteDigital lngIDnota, "CR", 1, CInt(strAnoAprobacionNota), strNumeroAprobacionNota, IIf(intTipoCFDNota = 1, True, False), , , False
                      pQuitDN
19                    If intTipoCFDNota = 1 Then
                          intcontadorCFDiPendienteCancelar = 0
20                        ReDim vlArrCFDiPendienteCancelar(0)
21                        pCFDiPendienteCancelar vllngConsecutivoFactura, "FA", 0
22                        pCFDiPendienteCancelar 0, 0, 1
                      End If
                      '(33)   ¡No se pueden guardar los datos!
                      '(1319) El proceso ha quedado incompleto.
                      '(1307) La factura será cancelada en el sistema, será necesario confirmar el timbre fiscal y realizar la cancelación ante el SAT.
24                    MsgBox Replace(SIHOMsg(1306), "El comprobante", "La factura") & vbNewLine & _
                             SIHOMsg(1319) & vbNewLine & _
                             Replace(Replace(SIHOMsg(1307), "La factura será cancelada", "La factura y la nota de crédito serán canceladas"), ".", " de la factura."), vbCritical + vbOKOnly, "Mensaje"
25                    pCancelarFactura Trim(vlstrFolioFactura), vllngPersonaGraba, "frmFacturacion", False
                      'se imprimen FACTURA Y NOTA
26                    fblnImprimeComprobanteDigital vllngConsecutivoFactura, "FA", "I", vllngFormatoaUsar, IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), "", True, "", -1, txtImpresionesFP(0).Text
27                    fblnImprimeComprobanteDigital lngIDnota, "CR", "I", lngNumeroTipoFormatoNotas, 1
                      
                      pBarraAlCien
                      
                      'se reinicia la pantalla*
36                    vlRFCTemp = ""
                      pIniciaChkFacturaBase
39                    Unload Me
40                    Exit Sub
                   Else 'no hay nota de crédito
                      'El comprobante se realizó de manera correcta, sin embargo no fue posible confirmar el timbre fiscal
42                    MsgBox Replace(SIHOMsg(1306), "El comprobante", "La factura"), vbInformation + vbOKOnly, "Mensaje"
                      'continua el proceso
                      
                      pBarraAlCien
                   End If
                    
                   'Comprobante de cancelación de los anticipos
                   vlblnAnticipoPendiente = True
                   pCancelaAnticipos vlstrFolioDocumento, False, blnImprimirAplAnt, lngCveAplAnt
                    
                    
                   '--------------------------------------------------------------------------------------------------------------------------------------------------
51                ElseIf vgIntBanderaTImbradoPendiente = 2 Or vgIntBanderaTImbradoPendiente = 3 Then 'errores controlados por el PAC o en el proceso, 100% seguro de que no se timbró
52                 If intTipoCFDFactura = 1 Then pLogTimbrado 1
                   '--------------------------------------------------------------------------------------------------------------------------------------------------
53                 If lngIDnota > 0 Then
                      'debemos ingresar la nota de crédito a GNCOMPROBANTEFISCALDIGITAL para cancelarla e imprimirla
                        pInsDN lngIDnota, vlstrDFCodigoPostal, vlstrDFRegimenFiscal
54                    fblnGeneraComprobanteDigital lngIDnota, "CR", 1, CInt(strAnoAprobacionNota), strNumeroAprobacionNota, IIf(intTipoCFDNota = 1, True, False), , , False
                      pQuitDN
                      '(33)   ¡No se pueden guardar los datos!
                      '(1319) El proceso ha quedado incompleto.
                      '(1307) La factura será cancelada en el sistema, será necesario confirmar el timbre fiscal y realizar la cancelación ante el SAT.
55                    MsgBox SIHOMsg(33) & vbNewLine & _
                                SIHOMsg(1319) & vbNewLine & _
                                Replace(Replace(SIHOMsg(1307), "La factura será cancelada", "La factura y la nota de crédito serán canceladas"), ", será necesario confirmar el timbre fiscal y realizar la cancelación ante el SAT", ""), vbCritical + vbOKOnly, "Mensaje"
                   Else
                  
                  
                      '1338, 'La factura no pudo ser timbrada, será cancelada en el sistema.
56                    MsgBox SIHOMsg(1338), vbCritical + vbOKOnly, "Mensaje"
                   End If
                   '--------------------------------------------------------------------------------------------------------------------------------------------------
57                 pCancelarFactura Trim(vlstrFolioFactura), vllngPersonaGraba, "frmFacturacion", True, False

                   'Actualiza PDF al cancelar facturas
                   If Not fblnGeneraComprobanteDigital(vllngConsecutivoFactura, "FA", 1, 0, "", False, True, -1) Then
                        On Error Resume Next
                   End If

59                 fblnImprimeComprobanteDigital vllngConsecutivoFactura, "FA", "I", vllngFormatoaUsar, IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), "", True, "", -1, txtImpresionesFP(0).Text
60                 If lngIDnota > 0 Then
61                    fblnImprimeComprobanteDigital lngIDnota, "CR", "I", lngNumeroTipoFormatoNotas, 1
                   End If

                   pBarraAlCien

                   'se reinicia la pantalla
91                 vlRFCTemp = ""
                   pIniciaChkFacturaBase
94                 Unload Me
95                 Exit Sub
                End If

             Else ' se timbró correctamente la factura
955             EntornoSIHO.ConeccionSIHO.CommitTrans
                'caso 17997 guardar en la tabla GNCOMPROBANTEFISCALDIGITAL si vamos a mostrar los datos del paciente en facturacion
                pMostrarDatosPacienteFactura vllngConsecutivoFactura, "FA"
                
96              If intTipoCFDFactura = 1 Then
97                 pEliminaPendientesTimbre vllngConsecutivoFactura, "FA" 'quitamos la factur de pendientes de timbre fiscal
977                pLogTimbrado 1
988             End If
966             Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGraba, Me.Caption, Trim(vlstrFolioDocumento))
98              'Barra de progreso CFD

                pBarraAlCien

107             If lngIDnota > 0 Then 'hay nota de crédito
108                  If intTipoEmisionComprobanteNota = 2 Then
109                     If intTipoCFDNota = 1 Then pMarcarPendienteTimbre lngIDnota, "CR", vgintNumeroDepartamento
110                     EntornoSIHO.ConeccionSIHO.BeginTrans 'transacción del timbrado de la NOTA
                        
                        pBarraAlTreintaycinco
                        
118                     If intTipoCFDNota = 1 Then pLogTimbrado 2

                        pInsDN lngIDnota, vlstrDFCodigoPostal, vlstrDFRegimenFiscal

119                     If Not fblnGeneraComprobanteDigital(lngIDnota, "CR", 1, CInt(strAnoAprobacionNota), strNumeroAprobacionNota, IIf(intTipoCFDNota = 1, True, False)) Then

                        pQuitDN

120                        On Error Resume Next
142                        EntornoSIHO.ConeccionSIHO.CommitTrans
                           If intTipoCFDNota = 1 Then pLogTimbrado 1
121                        If vgIntBanderaTImbradoPendiente = 1 Then
                              If intTipoCFDNota = 1 Then
123                               intcontadorCFDiPendienteCancelar = 0
124                               ReDim vlArrCFDiPendienteCancelar(0)
125                               pCFDiPendienteCancelar vllngConsecutivoFactura, "FA", 0 'Factura pendiente de cancelar en el SAT
126                               pCFDiPendienteCancelar lngIDnota, "CR", 0 'nota pendiente de cancelar en el SAT
127                               pCFDiPendienteCancelar 0, 0, 1 'guardamos
128                               pCancelarFactura Trim(vlstrFolioFactura), vllngPersonaGraba, "frmFacturacion", False, False 'cancelamos factura y nota
129                           End If
                              blnImprimirNotaCredito = True
                              '(1306) El comprobante se realizó de manera correcta, sin embargo no fue posible confirmar el timbre fiscal.
                              '(1319) El proceso ha quedado incompleto.
                              '(1307) La factura será cancelada en el sistema, será necesario confirmar el timbre fiscal y realizar la cancelación ante el SAT.
130                           MsgBox Replace(SIHOMsg(1306), "El comprobante", "La nota de crédito") & vbNewLine & _
                                       SIHOMsg(1319) & vbNewLine & _
                                       Replace(Replace(Replace(SIHOMsg(1307), "La factura será cancelada", "La factura y la nota de crédito se cancelarán"), "fiscal", "fiscal de la nota"), ".", " de ambos documentos.") _
                                       , vbCritical + vbOKOnly, "Mensaje"
131                        ElseIf vgIntBanderaTImbradoPendiente = 2 Or vgIntBanderaTImbradoPendiente = 3 Then
                              If intTipoCFDNota = 1 Then
132                              intcontadorCFDiPendienteCancelar = 0
133                              ReDim vlArrCFDiPendienteCancelar(0)
134                              pCFDiPendienteCancelar vllngConsecutivoFactura, "FA", 0 'Factura pendiente de cancelar en el SAT
135                              pCFDiPendienteCancelar 0, 0, 1 'guardamos
                              End If
                              '(33)   ¡No se pueden guardar los datos!
                              '(1319) El proceso ha quedado incompleto.
                              '(1307) La factura será cancelada en el sistema, será necesario confirmar el timbre fiscal y realizar la cancelación ante el SAT.
136                           MsgBox SIHOMsg(33) & vbNewLine & _
                                     SIHOMsg(1319) & vbNewLine & _
                                     Replace(Replace(SIHOMsg(1307), "La factura será cancelada", "La factura y la nota de crédito se cancelarán"), "confirmar el timbre fiscal y realizar la cancelación ante el SAT", "cancelar la factura ante el SAT") _
                                     , vbCritical + vbOKOnly, "Mensaje"
137                           pCancelarFactura Trim(vlstrFolioFactura), vllngPersonaGraba, "frmFacturacion", False 'cancelamos factura y nota
138                           frsEjecuta_SP CFDilngNumError & "|" & Left(CFDistrDescripError, 200) & "|" & cgstrModulo & "|" & Left(CFDistrProcesoError, 50) & "|Linea:" & CFDiintLineaError, "SP_GNINSREGISTROERRORES", True
139                        End If
                           'imprimimos ambos documentos en estado cancelado.
140                        fblnImprimeComprobanteDigital vllngConsecutivoFactura, "FA", "I", vllngFormatoaUsar, IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), "", True, "", -1, txtImpresionesFP(0).Text
141                        fblnImprimeComprobanteDigital lngIDnota, "CR", "I", lngNumeroTipoFormatoNotas, 1

160                        vlRFCTemp = ""

                           pIniciaValores
163                        Unload Me
164                        Exit Sub
                        Else
                        
                        pQuitDN
                           EntornoSIHO.ConeccionSIHO.CommitTrans 'commit al timbrado de la nota de crédito
                           If intTipoCFDNota = 1 Then
165                           pLogTimbrado 1
166                           pEliminaPendientesTimbre lngIDnota, "CR" 'quitamos la nota de pendientes de timbre
167                        End If
                           blnImprimirNotaCredito = True
169                        'Barra de progreso CFD

                           pBarraAlCien

178                     End If
179                      End If
180                  End If
181             End If
               
                'Comprobante de cancelación de los anticipos
                If vlblnAnticipoPendiente = False Then
                    pCancelaAnticipos vlstrFolioDocumento, True, blnImprimirAplAnt, lngCveAplAnt
                Else
                    vlblnAnticipoPendiente = False
                End If
                Screen.MousePointer = vbDefault
        End If
    Else
    '========================================================================
    ' FACTURAS PARCIALES                                                   ||
    '========================================================================
        
        '-------------
        'Valida Cargos
        '-------------
        'If fblnValidarCargos Then
        '     'Los cargos de la cuenta han sido modificados, consulte de nuevo.
        '     MsgBox SIHOMsg(1152), vbExclamation, "Mensaje"
        '     Unload Me
        '     Exit Sub
        'End If
        
        '------------
        'Valida pagos
        '------------
        If fblnValidarPagos Then
             'Los PAGOS/Devoluciones de $$ de la cuenta han sido modificados, consulte de nuevo.
              MsgBox SIHOMsg(1178), vbExclamation, "Mensaje"
              Unload Me
              Exit Sub
        End If
                      
        '-------------------------
        ' Inicio de la transacción
        '-------------------------
        EntornoSIHO.ConeccionSIHO.BeginTrans
                
        '----------------------------------------------------'
        ' Bloqueo de cuenta (Solo cuando es la factura base) '
        '----------------------------------------------------'
        If Not fblnBloqueoCuenta() Then
            EntornoSIHO.ConeccionSIHO.RollbackTrans
            Exit Sub
        End If
        
        For vlintContFacturas = 1 To MSFGFacturasParciales.Rows - 1
            If MSFGFacturasParciales.TextMatrix(vlintContFacturas, 11) = "0" Then  'sólo si no esta facturada
             
               EntornoSIHO.ConeccionSIHO.Execute "SAVEPOINT FACTURA" & vlintContFacturas '--SAVE POINT
             
               ReDim aFormasPago(0)
               vlintcontador = 0
                
               '------------------------------------------------------------------------------
               'Ciclo para cargar el arreglo a FormasPago con la forma de pago de la coleccion
               '------------------------------------------------------------------------------
               For Each vlfpaFormaPago In fcolLocalizaFacturaParcial(MSFGFacturasParciales.RowData(vlintContFacturas)).colFormasPago
                   ReDim Preserve aFormasPago(vlintcontador)
                   With aFormasPago(vlintcontador)
                        .vlbolEsCredito = vlfpaFormaPago.bolEsCredito
                        .vldblCantidad = vlfpaFormaPago.dblCantidad
                        .vldblDolares = vlfpaFormaPago.dblDolares
                        .vldblTipoCambio = vlfpaFormaPago.dblTipoCambio
                        .vlintNumFormaPago = vlfpaFormaPago.intNumFormaPago
                        .vllngCuentaContable = vlfpaFormaPago.lngCuentaContable
                        .vlstrFolio = vlfpaFormaPago.strFolio
                        .lngIdBanco = vlfpaFormaPago.lngIdBanco 'Agregado para transferencias
                        .vllngCuentaComisionBancaria = vlfpaFormaPago.lngCuentaComisionBancaria
                        .vldblCantidadComisionBancaria = vlfpaFormaPago.dblCantidadComisionBancaria
                        .vldblIvaComisionBancaria = vlfpaFormaPago.dblIvaComisionBancaria
                   End With
                   vlintcontador = vlintcontador + 1
               Next
                
               ReDim aCPCargosPoliza(1)
               With aCPCargosPoliza(0)
                    .lngConceptoFacturacion = CLng(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 12))
                    .lngDepartamento = vgintNumeroDepartamento
                    .lngCuentaIngreso = flngCuentaConceptoDepartamento(CLng(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 12)), vgintNumeroDepartamento, "INGRESO")          'La cuenta del concepto del Deducible, Coaseguro o Copago segun sea el caso  'vglngCtaingresoFactParc
                    .lngCuentaDescuento = flngCuentaConceptoDepartamento(CLng(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 12)), vgintNumeroDepartamento, "DESCUENTO")      'vglngCtaDescuentoFactParc
                    .dblCantidadIngreso = Round(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 6), 2)
                    .dblCantidadDescuento = 0
                    .dblIVADescuento = 0
               End With

               vllngCveClienteCredito = vgcolFacturasParciales.Item("K" & MSFGFacturasParciales.RowData(vlintContFacturas) & "_0").intCveClienteCredito
               vlstrTipoPacienteCredito = vgcolFacturasParciales.Item("K" & MSFGFacturasParciales.RowData(vlintContFacturas) & "_0").strTipoClienteCredito
                
               '-----------------------------------------
               'Variables para obtener los datos fiscales
               '-----------------------------------------
                pLlenaDatosFiscales vlstrDFRFC, vlstrDFNombre, vlstrDFDireccion, vlstrDFNumExterior, _
                vlstrDFNumInterior, lngCveCiudad, vlstrDFTelefono, vlstrDFColonia, vlstrDFCodigoPostal, vlintContFacturas
                
               '-------------------
               'Datos de la factura
               '-------------------
               vldblIVA = CDbl(Val(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 7)))
               vldblDescuento = 0
               vldblAnticipo = 0
               vldblTotalFactura = CDbl(Format(IIf(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 9) = "x", MSFGFacturasParciales.TextMatrix(vlintContFacturas, 10) / vldblTipoCambio, MSFGFacturasParciales.TextMatrix(vlintContFacturas, 10)), "###############.00"))
               dblTotalPagar = CDbl(Format(IIf(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 9) = "x", MSFGFacturasParciales.TextMatrix(vlintContFacturas, 10) / vldblTipoCambio, MSFGFacturasParciales.TextMatrix(vlintContFacturas, 10)), "###############.00"))

               vlintBitPesos = IIf(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 9) = "x", 0, 1)

               vlstrSentencia = "SELECT INTNUMCLIENTE FROM CcCliente " & _
                                 " INNER JOIN NODEPARTAMENTO ON CCcLIENTE.SMICVEDEPARTAMENTO = NODEPARTAMENTO.SMICVEDEPARTAMENTO " & _
                                 " WHERE CcCliente.INTNUMREFERENCIA = " & vllngCveClienteCredito & " AND CcCliente.CHRTIPOCLIENTE = '" & vlstrTipoPacienteCredito & "'" & _
                                 " AND NODEPARTAMENTO.TNYCLAVEEMPRESA = " & vgintClaveEmpresaContable
               Set rsTemp = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
                
               vlintNumCliente = IIf(rsTemp.RecordCount = 0, 0, rsTemp!intNumCliente)
                               
               '------------------------'
               '- Número de la factura -'
               '------------------------'
               vllngFoliosFaltantes = 0
               pCargaArreglo alstrParametrosSalida, vllngFoliosFaltantes & "|" & ADODB.adBSTR & "|" & strFolio & "|" & ADODB.adBSTR & "|" & strSerie & "|" & ADODB.adBSTR & "|" & strNumeroAprobacion & "|" & ADODB.adBSTR & "|" & strAnoAprobacion & "|" & ADODB.adBSTR
               frsEjecuta_SP "FA|" & vgintNumeroDepartamento & "|1", "sp_gnFolios", , , alstrParametrosSalida
               pObtieneValores alstrParametrosSalida, vllngFoliosFaltantes, strFolio, strSerie, strNumeroAprobacion, strAnoAprobacion
               '|  Si la serie está vacía el SP regresa un espacio en blanco por eso se debe de hacer el TRIM
               vlstrFolioDocumento = Trim(strSerie) & strFolio
               If Trim(vlstrFolioDocumento) = "0" Then
                  EntornoSIHO.ConeccionSIHO.RollbackTrans
                  'No existen folios activos para este documento.
                  MsgBox SIHOMsg(291), vbCritical, "Mensaje"
                  Exit Sub
               End If
               
               '---------------------
               'número de cliente = 0
               '---------------------
               vllngNumCliente = 0
                            
               '------------------------------------------------------------
               'Las facturas parciales pueden exceder el total de los cargos
               '------------------------------------------------------------
               If Val(Format(txtFPTotalPagar.Text, "")) >= 0 Then  'Se agregó "=" para los casos donde las facturas parciales cubren el total de los cargos (caso 10076)
                  '-------------------------------'
                  ' Afecta corte (PvDetalleCorte) '
                  '-------------------------------'
                  For vlintcontador = 0 To UBound(aFormasPago(), 1)
                        
                      pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", 0, _
                                        IIf(aFormasPago(vlintcontador).vldblTipoCambio = 0, aFormasPago(vlintcontador).vldblCantidad, aFormasPago(vlintcontador).vldblDolares), _
                                        False, CStr(vldtmFechaHoy + vldtmHoraHoy), _
                                        CLng(aFormasPago(vlintcontador).vlintNumFormaPago), _
                                        aFormasPago(vlintcontador).vldblTipoCambio, _
                                        IIf(Trim(aFormasPago(vlintcontador).vlstrFolio) = "", "0", Trim(aFormasPago(vlintcontador).vlstrFolio)), _
                                        vllngNumeroCorte, 1, vlstrFolioDocumento, "FA", aFormasPago(vlintcontador).vlbolEsCredito, aFormasPago(vlintcontador).vlstrRFC, aFormasPago(vlintcontador).vlstrBancoSAT, aFormasPago(vlintcontador).vlstrBancoExtranjero, aFormasPago(vlintcontador).vlstrCuentaBancaria, aFormasPago(vlintcontador).vldtmFecha

                      '------------------------------'
                      ' Generar movimiento a CREDITO '
                      '------------------------------'
                      If aFormasPago(vlintcontador).vlbolEsCredito Then
                         '-------------------------------------------------'
                         ' Para ver que número de cliente es este paciente '
                         '-------------------------------------------------'
                         Set rsDatosCliente = frsRegresaRs("SELECT * FROM CcCliente " & _
                                        " INNER JOIN NoDepartamento ON CcCliente.smiCveDepartamento = NoDepartamento.smiCveDepartamento " & _
                                        " WHERE intNumReferencia = " & Trim(str(vllngCveClienteCredito)) & _
                                        " AND chrTipoCliente = '" & vlstrTipoPacienteCredito & "'" & _
                                        " AND NoDepartamento.tnyClaveEmpresa = " & vgintClaveEmpresaContable, adLockReadOnly, adOpenForwardOnly)
                         If rsDatosCliente.RecordCount = 0 Then
                            EntornoSIHO.ConeccionSIHO.RollbackTrans
                            rsDatosCliente.Close
                            MsgBox SIHOMsg(367), vbCritical, "Mensaje"
                            Exit Sub
                         Else
                            vllngNumCliente = rsDatosCliente!intNumCliente
                         End If
                        
                        'Crear el movimiento de crédito
                        dblPorcentajeCredito = aFormasPago(vlintcontador).vldblCantidad / ((vldblTotalFactura) * IIf(optPesos(0).Value, 1, vldblTipoCambio))
                        dblSubtotalCredito = Format(((vldblTotalFactura - vldblIVA) * IIf(optPesos(0).Value, 1, vldblTipoCambio)) * dblPorcentajeCredito, "###############.00")
                        dblIVACredito = Format(((vldblIVA) * IIf(optPesos(0).Value, 1, vldblTipoCambio)) * dblPorcentajeCredito, "###############.00")
                                                
                        vllngMovimientoCredito = 1
                        frsEjecuta_SP fstrFechaSQL(Format(vldtmFechaHoy, "dd/mm/yyyy")) & "|" & vllngNumCliente & "|" & rsDatosCliente!INTNUMCUENTACONTABLE & "|" & vlstrFolioDocumento & "|" & "FA" & "|" & aFormasPago(vlintcontador).vldblCantidad & "|" & str(vgintNumeroDepartamento) & "|" & str(vllngPersonaGraba) & "|" & " " & "|" & "0" & "|" & dblSubtotalCredito & "|" & dblIVACredito, "SP_GNINSCREDITO", True, vllngMovimientoCredito
                        
                        '--------------------------------------------'
                        ' Se genera un Cargo a clientes en la poliza '
                        '--------------------------------------------'
                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", rsDatosCliente!INTNUMCUENTACONTABLE, aFormasPago(vlintcontador).vldblCantidad, True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                                
                        '----------------------------------------------------'
                        ' Cálculo del IVA que se pudiera ir a IVA no cobrado '
                        '----------------------------------------------------'
                        If Val(Format(txtFPIVA.Text, "")) > 0 Then
                            dblProporcionIVA = aFormasPago(vlintcontador).vldblCantidad / CDbl(Format(dblTotalFacturaP, "############.00"))
                            vldblTotalIVACredito = CDbl(Format(dblIVAP, "############.00")) * dblProporcionIVA
                        End If
                        
                        rsDatosCliente.Close
                      Else ' Osea que la forma de pago --NO es credito--
                        '--------------------------------------------------------------------'
                        ' Se genera un Cargo de acuerdo a la forma de pago que NO es credito '
                        '--------------------------------------------------------------------'
                        'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aFormasPago(vlintContador).vllngCuentaContable, aFormasPago(vlintContador).vldblCantidad, True
                         pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aFormasPago(vlintcontador).vllngCuentaContable, aFormasPago(vlintcontador).vldblCantidad, True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA", aFormasPago(vlintcontador).vlbolEsCredito, aFormasPago(vlintcontador).vlstrRFC, aFormasPago(vlintcontador).vlstrBancoSAT, aFormasPago(vlintcontador).vlstrBancoExtranjero, aFormasPago(vlintcontador).vlstrCuentaBancaria, aFormasPago(vlintcontador).vldtmFecha
                    
                        ' Agregado para caso 8741
                        ' Si la forma de pago es de tipo tarjeta se registran los movimientos contables referente a la comision bancaria
                        If aFormasPago(vlintcontador).vllngCuentaComisionBancaria <> 0 And aFormasPago(vlintcontador).vldblCantidadComisionBancaria <> 0 Then
                             ' Se genera un cargo de acuerdo la comisión bancaria que corresponde a la forma de pago
                             pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aFormasPago(vlintcontador).vllngCuentaComisionBancaria, aFormasPago(vlintcontador).vldblCantidadComisionBancaria, True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA", , , , , , , "CBA"
                             If aFormasPago(vlintcontador).vldblIvaComisionBancaria <> 0 Then
                                 ' Movimiento contable por el IVA pagado que corresponde de la comisión bancaria
                                 pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngCtaIVAPagado, aFormasPago(vlintcontador).vldblIvaComisionBancaria, True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA", , , , , , , "CBA"
                             End If
                             ' Se genera un abono por la cantidad de la comisión bancaria y su iva que corresponde a la forma de pago
                             pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aFormasPago(vlintcontador).vllngCuentaContable, (aFormasPago(vlintcontador).vldblCantidadComisionBancaria + aFormasPago(vlintcontador).vldblIvaComisionBancaria), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA", , , , , , , "CBA"
                         End If
                      End If
                  Next vlintcontador
               End If
                                   
               Set rsPvDatosFiscales = frsRegresaRs("SELECT * FROM PvDatosFiscales WHERE chrTipoPaciente = '" & IIf(OptTipoPaciente(0).Value, "I", "E") & "' and intNumCuenta = " & str(txtMovimientoPaciente.Text), adLockOptimistic, adOpenDynamic)
        
               '------------------------------------'
               ' Guardar maestro de la factura
               '------------------------------------'
               Set rsFactura = frsRegresaRs("SELECT * FROM PVFactura WHERE intConsecutivo = -1", adLockOptimistic, adOpenDynamic)
               With rsFactura
                    .AddNew
                    !chrfoliofactura = vlstrFolioDocumento
                    !dtmFechahora = vldtmFechaHoy + vldtmHoraHoy
                    If chkExtranjero Then
                       !CHRRFC = "XEXX010101000"
                    Else
                       !CHRRFC = IIf(Len(fStrRFCValido(vlstrDFRFC)) < 12 Or Len(fStrRFCValido(vlstrDFRFC)) > 13, "XAXX010101000", fStrRFCValido(vlstrDFRFC))
                    End If
                    !CHRNOMBRE = IIf(Trim(vlstrDFNombre) = "", " ", Trim(vlstrDFNombre))
                    !chrCalle = Trim(vlstrDFDireccion)
                    !VCHNUMEROEXTERIOR = Trim(vlstrDFNumExterior)
                    !VCHNUMEROINTERIOR = Trim(vlstrDFNumInterior)
                    !chrTelefono = Trim(vlstrDFTelefono)
                    !VCHCOLONIA = Trim(vlstrDFColonia)
                    !VCHCODIGOPOSTAL = Trim(vlstrDFCodigoPostal)
                    !smyIVA = vldblIVA
                    !MNYDESCUENTO = vldblDescuento
                    !chrEstatus = " "
                    !INTMOVPACIENTE = txtMovimientoPaciente.Text
                    !CHRTIPOPACIENTE = IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E"))
                    !SMIDEPARTAMENTO = vgintNumeroDepartamento
                    !intCveEmpleado = vllngPersonaGraba
                    !intNumCorte = vllngNumeroCorte
                    !mnyAnticipo = vldblAnticipo
                    !mnyTotalFactura = vldblTotalFactura
                    !BITPESOS = vlintBitPesos
                    !mnytipocambio = IIf(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 9) = "x", vldblTipoCambio, 0)
                    !chrTipoFactura = "P"
                    !intNumCliente = vlintNumCliente
                    !intCveVentaPublico = 0
                    !intCveCiudad = lngCveCiudad
                    !intcveempresa = 0
                    !mnyHonorariosFacturados = IIf(blnCalcularEnBaseACargos, ldblHonorariosAFacturar, 0)
                    !mnyTotalPagar = dblTotalPagar
                    !mnyTotalNotasCredito = 0
                    !vchSerie = strSerie
                    !INTFOLIO = strFolio
                    !intTipoDetalleFactura = 1
                    If cboUsoCFDI(0).ListIndex > -1 Then
                        !intCveUsoCFDI = cboUsoCFDI(0).ItemData(cboUsoCFDI(0).ListIndex)
                    End If
                    If claveCarta > 0 Then !intCveCarta = claveCarta
                    .Update
                    vlRFCTemp = Trim(!CHRRFC) 'Se graba el valor del RFC para posible envío de CFD/CFDi
               End With
               vllngConsecutivoFactura = flngObtieneIdentity("SEC_PvFactura", rsFactura!intConsecutivo)
            
            '    -----------------------------------------'
            '     Asocia la factura cancelada y la creada '
            '    -----------------------------------------'
                If chkFacturaSustitutaFP(0).Value = 1 And lstFacturaASustituirFP.ListCount > 0 Then
                    For i = 0 To UBound(aFoliosPrevios())
                        If aFoliosPrevios(i).chrfoliofactura <> "" Then
                            pEjecutaSentencia "INSERT INTO PVREFACTURACION (chrFolioFacturaActivada, chrFolioFacturaCancelada) " & " VALUES ('" & vlstrFolioDocumento & "', '" & aFoliosPrevios(i).chrfoliofactura & "')"
                        End If
                    Next i
                End If
            
               '------------------------------------------------
               'Variables para ver lo que se graba en la factura
'               vldblIvaDescuento = 0
'               vlblnDescuentoParcial = False
               '------------------------------------------------
               Set rsDetalleFactura = frsRegresaRs("SELECT * FROM PVDetalleFactura WHERE chrFolioFactura = '' ", adLockOptimistic, adOpenDynamic)
               With rsDetalleFactura
                 .AddNew
                 !chrfoliofactura = vlstrFolioDocumento
                 !smicveconcepto = MSFGFacturasParciales.TextMatrix(vlintContFacturas, 12)
                 !chrTipo = IIf(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 18) = "X", "NO", "OC")
                 !MNYCantidad = MSFGFacturasParciales.TextMatrix(vlintContFacturas, 6)
                 !MNYIVA = Val(Format(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 7), "###############.00"))
                 'Si es un concepto de seguro se guarda el importe que grava
                 If Trim(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 18)) <> "X" Then
                    !mnyCantidadGravada = CDbl(Val(Format(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 16), "###############.00")))
                    !mnyIVAConcepto = Val(Format(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 7), "###############.00"))
                 End If
                    
                 If !MNYIVA <> 0 Then
                    !mnyIVAConcepto = !MNYIVA
                 End If
                    
                 !MNYDESCUENTO = 0
                 .Update
                 rsDetalleFactura.Close
                                     
                 frsEjecuta_SP str(vllngConsecutivoFactura) & "|" & str(Format(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 16), "###############.00")) & "|" & str(Format(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 17), "###############.00")) & "|0|0", "SP_PVINSFACTURAIMPORTE"
               End With
               
               '-----------------------------------------------------------------------------------------------------------'
               ' (CR) - CASO 6894 - Guardar en el kárdex del banco si hubo pago por medio de transferencias bancarias      '
               ' (Se requiere el consecutivo de la factura, por eso se guarda después de hacer el movimiento en PvFactura) '
               '-----------------------------------------------------------------------------------------------------------'
               If Val(Format(txtFPTotalPagar.Text, "")) >= 0 Then   'Se agregó "=" para los casos donde las facturas parciales cubren el total de los cargos (caso 10076)
                For vlintcontador = 0 To UBound(aFormasPago(), 1)
                   If Not aFormasPago(vlintcontador).vlbolEsCredito Then 'Formas de pago distintas a Crédito
                        '----- Guardar información de la forma de pago en tabla intermedia -----'
                        vgstrParametrosSP = vllngNumeroCorte & "|" & fstrFechaSQL(Format(vldtmFechaHoy, "dd/mm/yyyy"), Format(vldtmHoraHoy, "hh:mm:ss")) & "|" & aFormasPago(vlintcontador).vlintNumFormaPago & "|" & aFormasPago(vlintcontador).lngIdBanco & "|" & _
                                            IIf(aFormasPago(vlintcontador).vldblTipoCambio = 0, aFormasPago(vlintcontador).vldblCantidad, aFormasPago(vlintcontador).vldblDolares) & "|" & IIf(aFormasPago(vlintcontador).vldblTipoCambio = 0, 1, 0) & "|" & aFormasPago(vlintcontador).vldblTipoCambio & "|" & _
                                            fstrTipoMovimientoForma(aFormasPago(vlintcontador).vlintNumFormaPago) & "|" & "FA" & "|" & vllngConsecutivoFactura & "|" & vllngPersonaGraba & "|" & vgintNumeroDepartamento & "|" & fstrFechaSQL(Format(vldtmFechaHoy, "dd/mm/yyyy"), Format(vldtmHoraHoy, "hh:mm:ss")) & "|" & "1" & "|" & cgstrModulo
                        frsEjecuta_SP vgstrParametrosSP, "Sp_PvInsMovimientoBancoForma"
                        
                        ' Agregado para caso 8741
                        ' Si la forma de pago es de tipo tarjeta se registra la disminución de la cantidad referente a la comision bancaria
                        vldblComisionIvaBancaria = 0
                        If aFormasPago(vlintcontador).vllngCuentaComisionBancaria <> 0 And aFormasPago(vlintcontador).vldblCantidadComisionBancaria <> 0 Then
                            If aFormasPago(vlintcontador).vldblTipoCambio = 0 Then
                                 vldblComisionIvaBancaria = (aFormasPago(vlintcontador).vldblCantidadComisionBancaria + aFormasPago(vlintcontador).vldblIvaComisionBancaria) * -1
                            Else
                                 vldblComisionIvaBancaria = (aFormasPago(vlintcontador).vldblCantidadComisionBancaria + aFormasPago(vlintcontador).vldblIvaComisionBancaria) / aFormasPago(vlintcontador).vldblTipoCambio * -1
                            End If
                            vgstrParametrosSP = vllngNumeroCorte & "|" & fstrFechaSQL(Format(vldtmFechaHoy, "dd/mm/yyyy"), Format(vldtmHoraHoy, "hh:mm:ss")) & "|" & aFormasPago(vlintcontador).vlintNumFormaPago & "|" & aFormasPago(vlintcontador).lngIdBanco & "|" & _
                                                vldblComisionIvaBancaria & "|" & IIf(aFormasPago(vlintcontador).vldblTipoCambio = 0, 1, 0) & "|" & aFormasPago(vlintcontador).vldblTipoCambio & "|" & _
                                                "CBA" & "|" & "FA" & "|" & vllngConsecutivoFactura & "|" & vllngPersonaGraba & "|" & vgintNumeroDepartamento & "|" & fstrFechaSQL(Format(vldtmFechaHoy, "dd/mm/yyyy"), Format(vldtmHoraHoy, "hh:mm:ss")) & "|" & "1" & "|" & cgstrModulo
                            frsEjecuta_SP vgstrParametrosSP, "Sp_PvInsMovimientoBancoForma"
                        End If
                    End If
                Next vlintcontador
               End If
               '-------------------------------
               'Se graba en PvFacturasParciales
               '-------------------------------
                vlstrSentencia = " INSERT INTO PvFacturasParciales (INTFACTURAPARCIAL, INTFACTURABASE, CHRTIPOPACIENTE, INTMOVPACIENTE, "
                vlstrSentencia = vlstrSentencia & " NUMIVA, NUMTOTAL, SMITIPOCAMBIO, vchfacturadoa, SMICONCEPTOFACTURACION ) "
                vlstrSentencia = vlstrSentencia & " VALUES (" & vllngConsecutivoFactura & ", " & "Null" & ", '" & IIf(OptTipoPaciente(0).Value, "I", "E") & "', " & txtMovimientoPaciente.Text & ", " & _
                                                            vldblIVA & ", " & vldblTotalFactura & ", " & IIf(MSFGFacturasParciales.TextMatrix(vlintContFacturas, 9) = "x", 1, 0) & ", '" & MSFGFacturasParciales.TextMatrix(vlintContFacturas, 2) & "', " & MSFGFacturasParciales.TextMatrix(vlintContFacturas, 12) & ")"
                pEjecutaSentencia vlstrSentencia
       
                '-------------------------------------------------------------------'
                ' Agregar movimientos a póliza de los INGRESOS, su IVA y DESCUENTOS '
                '-------------------------------------------------------------------'
                For vlintcontador = 0 To UBound(aCPCargosPoliza) - 1
                    'Cambio para caso 8736
                    'Si las cuentas de ingreso y descuento son iguales y el bitSaldarCuentas = 1
                    'agrega un sólo movimiento a la póliza con el ingreso menos el descuento
                    vlblnCuentaIngresoSaldada = False
                    If aCPCargosPoliza(vlintcontador).lngCuentaIngreso = aCPCargosPoliza(vlintcontador).lngCuentaDescuento Then
                        'Verifica bit pvConceptoFacturacion.bitSaldarCuentas
                        vlintBitSaldarCuentas = 1
                        frsEjecuta_SP CStr(aCPCargosPoliza(vlintcontador).lngConceptoFacturacion), "FN_PVSELBITSALDARCUENTAS", True, vlintBitSaldarCuentas
                        If vlintBitSaldarCuentas = 1 Then
                            '-----------------------------------'
                            ' Abono para el Ingreso - Descuento '
                            '-----------------------------------'
                            If (aCPCargosPoliza(vlintcontador).dblCantidadIngreso - aCPCargosPoliza(vlintcontador).dblCantidadDescuento) > 0 Then
                                pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, (aCPCargosPoliza(vlintcontador).dblCantidadIngreso - aCPCargosPoliza(vlintcontador).dblCantidadDescuento) * IIf(vlintBitPesos = 1, 1, vldblTipoCambio), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                vlblnCuentaIngresoSaldada = True
                            ElseIf (aCPCargosPoliza(vlintcontador).dblCantidadIngreso - aCPCargosPoliza(vlintcontador).dblCantidadDescuento) < 0 Then
                                vlblnCuentaIngresoSaldada = False   'movimientos de descuentos de factura parcial ((ingreso = 0) - (descuento > 0))
                            ElseIf (aCPCargosPoliza(vlintcontador).dblCantidadIngreso - aCPCargosPoliza(vlintcontador).dblCantidadDescuento) = 0 Then
                                vlblnCuentaIngresoSaldada = True    'no agrega movimiento en la póliza porque no hay ingreso despues del descuento, por ser iguales las cantidades
                            End If
                        End If
                    End If
                    
                    If vlblnCuentaIngresoSaldada = False Then
                       '-----------------------'
                       ' Abono para el Ingreso '
                       '-----------------------'
                       If aCPCargosPoliza(vlintcontador).dblCantidadIngreso <> 0 Then
                           'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintContador).lngCuentaIngreso, aCPCargosPoliza(vlintContador).dblCantidadIngreso, False
                           pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaIngreso, aCPCargosPoliza(vlintcontador).dblCantidadIngreso * IIf(vlintBitPesos = 1, 1, vldblTipoCambio), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                       End If
                       
                       '-------------------------'
                       ' Cargo para el descuento '
                       '-------------------------'
                       If aCPCargosPoliza(vlintcontador).dblCantidadDescuento > 0 Then
                           'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintContador).lngCuentaDescuento, aCPCargosPoliza(vlintContador).dblCantidadDescuento, True
                           pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aCPCargosPoliza(vlintcontador).lngCuentaDescuento, aCPCargosPoliza(vlintcontador).dblCantidadDescuento * IIf(vlintBitPesos = 1, 1, vldblTipoCambio), True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                       End If
                    End If
                Next vlintcontador
                   
                '----------------------------------------------------'
                ' Movimientos contables por IVA cobrado y no cobrado '
                '----------------------------------------------------'
                If vldblTotalIVACredito > 0 Then
                   'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", glngCtaIVANoCobrado, Format(vldblTotalIVACredito, "############.00"), False
                   pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngCtaIVANoCobrado, Format(vldblTotalIVACredito, "############.00"), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                End If
                   
                If Format(vldblIVA * IIf(vlintBitPesos = 1, 1, vldblTipoCambio), "##########.00") - Format(vldblTotalIVACredito, "##########.00") > 0.01 Then
                    'pInsCortePoliza vllngNumeroCorte, vlstrFolioDocumento, "FA", glngCtaIVACobrado, Round(vldblIVA - vldblTotalIVACredito, 2), False
                    pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngCtaIVACobrado, Format(vldblIVA * IIf(vlintBitPesos = 1, 1, vldblTipoCambio), "##########.00") - Format(vldblTotalIVACredito, "##########.00"), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                End If
                       
                '-----------------------------------------------------------------------
                'Que se guarde la configuración de Internos y Externos según el Proceso:
                '-----------------------------------------------------------------------
                pActualizaConfiguracionIntExt
            
                '-------------------------------------------------------------------------------------------------
                'VALIDACIÓN DE LOS DATOS ANTES DE INSERTAR EN GNCOMPROBANTEFISCLADIGITAL EN EL PROCESO DE TIMBRADO
                '-------------------------------------------------------------------------------------------------
                If intTipoEmisionComprobante = 2 Then
                   If Not fblnValidaDatosCFDCFDi(vllngConsecutivoFactura, "FA", IIf(intTipoCFDFactura = 1, True, False), CInt(strAnoAprobacion), strNumeroAprobacion) Then
                      EntornoSIHO.ConeccionSIHO.Execute "ROLLBACK TO SAVEPOINT FACTURA" & vlintContFacturas
                      'se deben exlcluir los movimientos del arreglo del corte
                      pExcluirMovArregloCorte vlstrFolioDocumento, "FA"
                   Else
                      ReDim Preserve vlaryConsecutivosFacturas(vlintFacturasGrabadas)
                      vlaryConsecutivosFacturas(vlintFacturasGrabadas).strFolioFactura = vlstrFolioDocumento
                      vlaryConsecutivosFacturas(vlintFacturasGrabadas).lngidfactura = vllngConsecutivoFactura
                      vlaryConsecutivosFacturas(vlintFacturasGrabadas).strTipoFactura = IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E"))
                      vlaryConsecutivosFacturas(vlintFacturasGrabadas).strRFCTemp = vlRFCTemp
                      vlaryConsecutivosFacturas(vlintFacturasGrabadas).intEdoTimbre = 0 'como si estuviera timbrada(abusado compa)
                      vlintFacturasGrabadas = vlintFacturasGrabadas + 1
                   End If
                End If
                '-------------------------------------------------------------------------------------------------
            End If
        Next vlintContFacturas
                     
        '-------------------
        'Se libera la cuenta
        '-------------------
        pLiberaCuenta
        
        If vlintFacturasGrabadas = 0 Then ' si no hay facturas grabadas terminamos el proceso
           EntornoSIHO.ConeccionSIHO.RollbackTrans
           Exit Sub
        End If
        
        '------------------------------------------
        'Se agregan los movimientos de las facturas al corte
        '------------------------------------------
        vllngCorteUsado = fRegistrarMovArregloCorte(vllngNumeroCorte, True)
        
        If vllngCorteUsado = 0 Then 'esto es por si algo en el corte no quedo bien, entonces se cancela todo.
           EntornoSIHO.ConeccionSIHO.RollbackTrans
           
           'No se pudieron agregar los movimientos de la operación al corte, intente de nuevo.
           MsgBox SIHOMsg(1320), vbExclamation, "Mensaje"
           Exit Sub
        Else
           If vllngCorteUsado <> vllngNumeroCorte Then
              For vlintcontador = 0 To UBound(vlaryConsecutivosFacturas)
                  'actualizamos el corte en el que se registró la factura, esto es por si hay un cambio de corte al momento de hacer el registro d ela información de la factura
                   pEjecutaSentencia "Update pvfactura set INTNUMCORTE = " & vllngCorteUsado & " where intConsecutivo = " & vlaryConsecutivosFacturas(vlintcontador).lngidfactura
              Next vlintcontador
           End If
        End If
        '-----------------------
        'COMMIT a la transacción
        '-----------------------
        EntornoSIHO.ConeccionSIHO.CommitTrans  ' hasta aqui las facturas quedan registradas en el SiHO
        '-----------------------------------------
        'TIMBRADO FISCAL DE LAS FACTURAS PARCIALES
        '-----------------------------------------
184        If intTipoEmisionComprobante = 2 Then
186           pLogTimbrado 2 'preparamos log de timbrado
187           For vlintcontador = 0 To UBound(vlaryConsecutivosFacturas)
188               If intTipoCFDFactura = 1 Then pMarcarPendienteTimbre vlaryConsecutivosFacturas(vlintcontador).lngidfactura, "FA", vgintNumeroDepartamento 'Pendiente de timbre fiscal
189               EntornoSIHO.ConeccionSIHO.BeginTrans 'abrimos transacción del timbrado

                  pBarraAlSetenta 'Barra de progreso al 70

196               If Not fblnGeneraComprobanteDigital(vlaryConsecutivosFacturas(vlintcontador).lngidfactura, "FA", 1, CInt(strAnoAprobacion), strNumeroAprobacion, IIf(intTipoCFDFactura = 1, True, False)) Then
197                  On Error Resume Next
198                  EntornoSIHO.ConeccionSIHO.CommitTrans 'se debe de guardar para poderse imprimir
199                  If vgIntBanderaTImbradoPendiente = 1 Then
200                     If Not blnImprieParciales Then blnImprieParciales = True
201                  ElseIf vgIntBanderaTImbradoPendiente = 2 Or vgIntBanderaTImbradoPendiente = 3 Then 'No se realizó el timbrado, cancelamos la factura
202                     pCancelarFactura Trim(vlaryConsecutivosFacturas(vlintcontador).strFolioFactura), vllngPersonaGraba, "frmFacturacion", True, False 'cancelamos la factura
203                  End If
204               Else 'se timbra correctamento la factura
205                    If Not blnImprieParciales Then blnImprieParciales = True
206                    If intTipoCFDFactura = 1 Then pEliminaPendientesTimbre vlaryConsecutivosFacturas(vlintcontador).lngidfactura, "FA" 'quitamos la factura de pendientes de timbre
207                    Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGraba, Me.Caption, Trim(vlaryConsecutivosFacturas(vlintcontador).strFolioFactura))
208                    EntornoSIHO.ConeccionSIHO.CommitTrans 'commit al timbrado de la factura
209               End If
210               vlaryConsecutivosFacturas(vlintcontador).intEdoTimbre = vgIntBanderaTImbradoPendiente '1 ó 2 ó 3
211               If intTipoCFDFactura = 1 Then pLogTimbrado 1
               'Barra de progreso CFD
                pBarraAlCien
217           Next vlintcontador
            End If
        End If '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
'Se comentan las siguientes lineas por que la facturación parcial ya no se usa y esta subrutina ya alcanzó su maxima de lineas
'220    If Not vlblnFacturaBase Then
'221       For vlintContador = 0 To UBound(vlaryConsecutivosFacturas)
'222           If vlaryConsecutivosFacturas(vlintContador).intEdoTimbre = 1 Then
'223              If MensajeFactParciales = "" Then
'224                 MensajeFactParciales = vlaryConsecutivosFacturas(vlintContador).strFolioFactura
'225              Else
'226                 MensajeFactParciales = MensajeFactParciales & vbNewLine & vlaryConsecutivosFacturas(vlintContador).strFolioFactura
'227              End If
'228           ElseIf vlaryConsecutivosFacturas(vlintContador).intEdoTimbre = 2 Or vlaryConsecutivosFacturas(vlintContador).intEdoTimbre = 3 Then
'229              If MensajeFactParcialesCanceladas = "" Then
'230                 MensajeFactParcialesCanceladas = vlaryConsecutivosFacturas(vlintContador).strFolioFactura
'231              Else
'232                 MensajeFactParcialesCanceladas = MensajeFactParcialesCanceladas & vbNewLine & vlaryConsecutivosFacturas(vlintContador).strFolioFactura
'233              End If
'234           End If
'235       Next vlintContador
'
'236       If MensajeFactParciales <> "" Then MsgBox SIHOMsg(1308) & vbNewLine & MensajeFactParciales, vbInformation + vbOKOnly, "Mensaje"
'
'239       If MensajeFactParcialesCanceladas <> "" Then MsgBox SIHOMsg(1339) & vbNewLine & MensajeFactParcialesCanceladas, vbInformation + vbOKOnly, "Mensaje"
'242    End If
'Fin de las lineas comentadas por que la facturación parcial ya no se usa y esta subrutina ya alcanzó su maxima de lineas
    '--------------------------------------
    'Se realizan las impresiones necesarias
    '--------------------------------------
    '-------------------------'
    ' Impresiones
    '-------------------------'
'243    If vlblnFacturaBase Then
244       MsgBox SIHOMsg(343), vbInformation, "Mensaje"
'245    Else
'246       If blnImprieParciales Then MsgBox SIHOMsg(343), vbInformation, "Mensaje"
'249    End If
250    If vlblnFacturaBase Then
       '-------------------------
       'Impresión de factura base
       '-------------------------
251       If intTipoEmisionComprobante = 2 Then
252          If Not fblnImprimeComprobanteDigital(vllngConsecutivoFactura, "FA", "I", vllngFormatoaUsar, IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), "", True, "", -1, txtImpresionesFP(0).Text) Then
253                chkFacturaBase.Value = 3
254                chkFacturaBase.Enabled = False
255                Unload Me
256                Exit Sub
257          End If
          '---------------------------------
          'ENVÍO DEL CFD DE LA(S) FACTURA(S)
          '---------------------------------
          'Verifica el parámetro de envío de CFDs por correo
258          If fblnRevisaEnvioCorreo(vgintClaveEmpresaContable) And optTipoCliente(1).Value = False And vlintEstadoTimbradoFBase = 0 Then
                '¿Desea enviar por e-mail la información del comprobante fiscal digital?
259                If MsgBox(SIHOMsg(1090), vbYesNo + vbQuestion, "Mensaje") = vbYes Then
260                    pEnviarCFD "FA", vllngConsecutivoFactura, CLng(vgintClaveEmpresaContable), Trim(vlRFCTemp), vllngPersonaGraba, Me
261                End If
262          End If
263       Else
264          pImprimeFormato vllngFormatoaUsar, vllngConsecutivoFactura
265       End If
       '----------------
       'impresión pagaré
       '----------------
       If vllngMovimientoCredito <> -1 Then
          If MsgBox(SIHOMsg(642), vbYesNo + vbQuestion, "Mensaje") = vbYes Then
             pInstanciaReporte vgrptReporte, "rptPVPagare.rpt"
             Set vlrsResultado = frsEjecuta_SP(CStr(Val(vllngMovimientoCredito)) & "|" & Trim(vgstrNombreHospitalCH) & "|" & Trim(vgstrEstadoCH) & "|" & Trim(vgstrCiudadCH), "SP_PVSELDATOSPAGARE")
             If vlrsResultado.RecordCount > 0 Then
                vgrptReporte.DiscardSavedData
                pImprimeReporte vgrptReporte, vlrsResultado, "I", ""
             Else
                'No existe información!
                MsgBox SIHOMsg(13), vbInformation + vbOKOnly, "Mensaje"
             End If
             vlrsResultado.Close
          End If
       End If
       '----------------------------
       'Impresión de nota de crédito
       '----------------------------
       If dblNotasCreditoCS > 0 And blnImprimirNotaCredito Then
          If intTipoEmisionComprobanteNota = 2 Then
              If Not fblnImprimeComprobanteDigital(lngIDnota, "CR", "I", lngNumeroTipoFormatoNotas, 1, "", True, "", -1, txtImpresionesFP(0).Text) Then
                     pIniciaChkFacturaBase
                     Unload Me
                     Exit Sub
              End If
              '-----------------------------------
              'ENVÍO DE CFD DE LA NOTA DE CRÉDITO
              '-----------------------------------
              'Verifica el parámetro de envío de CFDs por correo
              If fblnRevisaEnvioCorreo(vgintClaveEmpresaContable) And optTipoCliente(1).Value = False And vlintEstadoTimbradoNota = 0 Then
                 '¿Desea enviar por e-mail la información del comprobante fiscal digital?
                 If MsgBox(SIHOMsg(1090), vbYesNo + vbQuestion, "Mensaje") = vbYes Then
                    pEnviarCFD "CR", lngIDnota, CLng(vgintClaveEmpresaContable), Trim(vlRFCTemp), vllngPersonaGraba, Me
                 End If
              End If
          Else
              If strImpresoraNotas = strImpresoraFacturas Then
                 'Cambie el papael para imprimir la nota de crédito
                 MsgBox SIHOMsg(997), vbInformation + vbOKOnly, "Mensaje"
              End If
              Set rsNota = frsEjecuta_SP(lngIDnota & "|" & fstrNumeroenLetras(CDbl(Format(dblNotasCreditoCS + dblIVANotasCreditoCS, "#############.00")), "pesos", "M.N.") & "|" & Format(vldtmFechaHoy, "Long Date") & "|P", "sp_CcRptNota")
              pImpFormato rsNota, cintTipoDocumento, lngNumeroTipoFormatoNotas
          End If
        End If
        If blnImprimirAplAnt Then
             PImprimeAnt lngCveAplAnt, lngCveFormato, vlstrDFRFC
        End If
       pImprimirValesHonorarios vlstrFolioDocumento, vllngPersonaGraba
    Else
'Se comentan las siguientes lineas por que la facturación parcial ya no se usa y esta subrutina ya alcanzó su maxima de lineas
'        '-------------------------------
'        'Impresión de facturas parciales
'        '-------------------------------
'        For vlintContador = 0 To UBound(vlaryConsecutivosFacturas)
'             If intTipoEmisionComprobante = 2 Then
'                   If Not fblnImprimeComprobanteDigital(vlaryConsecutivosFacturas(vlintContador).lngidfactura, "FA", "I", vllngFormatoaUsar, 1, "", True, "", -1, txtImpresionesFP(0).Text) Then
'                     'aqui nada ?????
'                   Else
'                     '---------------------------------
'                     'ENVÍO DEL CFD DE LA(S) FACTURA(S)
'                     '---------------------------------
'                     'Verifica el parámetro de envío de CFDs por correo
'                     If fblnRevisaEnvioCorreo(vgintClaveEmpresaContable) And optTipoCliente(1).Value = False And vlaryConsecutivosFacturas(vlintContador).intEdoTimbre = 0 Then
'                        '¿Desea enviar por e-mail la información del comprobante fiscal digital?
'                        If MsgBox(SIHOMsg(1090), vbYesNo + vbQuestion, "Mensaje") = vbYes Then
'                           pEnviarCFD "FA", vllngConsecutivoFactura, CLng(vgintClaveEmpresaContable), Trim(vlRFCTemp), vllngPersonaGraba, Me
'                        End If
'                     End If
'                   End If
'             Else
'                pImprimeFormato vllngFormatoaUsar, vllngConsecutivoFactura
'             End If
'        Next vlintContador
'Fin de las lineas comentadas por que la facturación parcial ya no se usa y esta subrutina ya alcanzó su maxima de lineas
    End If
    pCodigoFinalFact vlRFCTemp
    vlblnExcluirPaciente = False
    vlblnUsarRazonSocial = False
Exit Sub
NotificaError:
    If Err.Description <> "No hay ninguna transacción activa." Then Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":cmdGrabarFacturaPaciente_Click" & Erl()))
End Sub

Private Sub pLlenaDatosFiscales(ByRef vlstrDFRFC As String, ByRef vlstrDFNombre As String, _
    ByRef vlstrDFDireccion As String, ByRef vlstrDFNumExterior As String, ByRef vlstrDFNumInterior As String, _
    ByRef lngCveCiudad As Long, ByRef vlstrDFTelefono As String, ByRef vlstrDFColonia As String, _
    ByRef vlstrDFCodigoPostal As String, ByRef vlintContFacturas As Long)
    vlstrDFRFC = fStrRFCValido(vgcolFacturasParciales.Item("K" & MSFGFacturasParciales.RowData(vlintContFacturas) & "_0").strDFRFC)
    vlstrDFNombre = vgcolFacturasParciales.Item("K" & MSFGFacturasParciales.RowData(vlintContFacturas) & "_0").strDFNombre
    vlstrDFDireccion = vgcolFacturasParciales.Item("K" & MSFGFacturasParciales.RowData(vlintContFacturas) & "_0").strDFDireccion
    vlstrDFNumExterior = vgcolFacturasParciales.Item("K" & MSFGFacturasParciales.RowData(vlintContFacturas) & "_0").strDFNumeroExterior
    vlstrDFNumInterior = vgcolFacturasParciales.Item("K" & MSFGFacturasParciales.RowData(vlintContFacturas) & "_0").strDFNumeroInterior
    lngCveCiudad = vgcolFacturasParciales.Item("K" & MSFGFacturasParciales.RowData(vlintContFacturas) & "_0").llngCveCiudad
    vlstrDFTelefono = vgcolFacturasParciales.Item("K" & MSFGFacturasParciales.RowData(vlintContFacturas) & "_0").strDFTelefono
    vlstrDFColonia = vgcolFacturasParciales.Item("K" & MSFGFacturasParciales.RowData(vlintContFacturas) & "_0").strDFColonia
    vlstrDFCodigoPostal = vgcolFacturasParciales.Item("K" & MSFGFacturasParciales.RowData(vlintContFacturas) & "_0").strDFCP


End Sub

Private Sub pCargaUsoNota(ByRef intCveUsoCFDINota As Long)

    If vgstrVersionCFDI = "3.3" Then
        intCveUsoCFDINota = flngCatalogoSATIdByNombreTipo("c_UsoCFDI", CLng(vgintTipoPaciente), "TP", 2)
    Else
        intCveUsoCFDINota = cboUsoCFDI(0).ItemData(cboUsoCFDI(0).ListIndex)
    End If

End Sub

Private Sub pCambiaSentLlenaAux(ByRef vlstrSentencia As String, ByRef vlstrAux As String, ByRef vlstrFolioDocumento As String)

    vlstrSentencia = ""
    vlstrSentencia = vlstrSentencia & "  Update PVCargo Set chrFolioFactura = '" & Trim(vlstrFolioDocumento) & "'" & _
                    " Where intNumCargo IN ("
    vlstrAux = ""

End Sub

Private Sub pCodigoFinalFact(ByRef vlRFCTemp As String)
    pEjecutaSentencia "DELETE FROM PVCARGOPOSTERGADO WHERE PVCARGOPOSTERGADO.INTMOVPACIENTE = " & txtMovimientoPaciente.Text
    pEjecutaSentencia "DELETE FROM PVCONTROLASEGURADORAPOSTERGADO WHERE PVCONTROLASEGURADORAPOSTERGADO.INTMOVPACIENTE = " & txtMovimientoPaciente.Text
    pEjecutaSentencia "DELETE FROM PVDESCUENTOPOSTERGADO WHERE INTCVEAFECTADA = " & txtMovimientoPaciente.Text
    vlRFCTemp = ""
    pIniciaChkFacturaBase
    cmdDescuentoPuntos.Caption = "Puntos de cliente leal aplicados"
    Unload Me
End Sub


Private Sub pInsDN(lngIDnota As Long, vlstrDFCodigoPostal As String, vlstrDFRegimenFiscal As String)
    If vgstrVersionCFDI = "4.0" Then
      vgstrTipoNotaSig = "CR"
      vglngIdComprobanteSig = lngIDnota
      vgstrCodigoPostalSig = Trim(vlstrDFCodigoPostal)
      vgstrRegimenFiscalSig = Trim(vlstrDFRegimenFiscal)
    End If
End Sub

Private Function fdblImGrav1(dblSubTotal As Double, dblIVA As Double, intCalc As Integer, lngCveConcepto As Long) As Double
    If intCalc = 0 Then
        fdblImGrav1 = Format(dblIVA / dblSubTotal, "############.00")
        fdblImGrav1 = Format((fdblImGrav1 * dblSubTotal) / (fdblTasaIVAEmpresa(vgintEmpresa) / 100), "############.00")
    Else
        fdblImGrav1 = Format(dblIVA / dblSubTotal, "############.00")
        fdblImGrav1 = Format((fdblImGrav1 * dblSubTotal) / (fdblIVAConcepto(lngCveConcepto, "CF") / 100), "############.00")
    End If
End Function

Private Sub pIniciaVar(ByRef vldblFacturaExcedente As Double, ByRef vldblFacturaDeducible As Double, ByRef vldblFacturaCopago As Double, ByRef vldblFacturaCoaseguro As Double, ByRef vldblFacturaCoaseguroMedico As Double, ByRef vldblFacturaCoaseguroAdicional As Double)
    vldblFacturaExcedente = 0
    vldblFacturaDeducible = 0
    vldblFacturaCopago = 0
    vldblFacturaCoaseguro = 0
    vldblFacturaCoaseguroMedico = 0
    vldblFacturaCoaseguroAdicional = 0
End Sub


Private Sub pQuitDN()
    If vgstrVersionCFDI = "4.0" Then
      vgstrTipoNotaSig = ""
      vglngIdComprobanteSig = 0
      vgstrCodigoPostalSig = ""
      vgstrRegimenFiscalSig = ""
    End If
End Sub

Private Sub pIniciaChkFacturaBase()
    chkFacturaBase.Value = 1
    chkFacturaBase.Enabled = False
End Sub

Private Function fblnCreaHonorarioPorPagar(strFolioDocumento As String, dblTotalContado As Double, intNumeroDepartamento As Integer, lngPersonaGraba As Long, intCredito As Boolean, dblTotalFactura As Double) As Boolean
    Dim strSentencia As String
    Dim intResultado As Long
    Dim strMensaje As String
    Dim vlstrsql As String
    Dim rs As New ADODB.Recordset
    
    fblnCreaHonorarioPorPagar = True
    On Error GoTo NotificaError
        
    intResultado = 1
    
    vlstrsql = "SELECT INTCVEBASEHONORARIOMEDICO " & _
                    "From PVBASEHONORARIOMEDICO " & _
                        "INNER JOIN PVCARGO ON PVBASEHONORARIOMEDICO.INTNUMCARGO = PVCARGO.INTNUMCARGO " & _
                    "WHERE TRIM(PVCARGO.CHRFOLIOFACTURA) = '" & Trim(strFolioDocumento) & "'"
    Set rs = frsRegresaRs(vlstrsql, adLockReadOnly, adOpenForwardOnly)
    If rs.RecordCount = 0 Then Exit Function
    
    'strSentencia = strFolioDocumento & "|" & dblTotalContado & "|" & vgintNumeroDepartamento & "|" & lngPersonaGraba & "|" & vlstrCveUsoCFDI & "|" & IIf(intCredito, 1, 0)
    strSentencia = strFolioDocumento & "|" & dblTotalFactura & "|" & vgintNumeroDepartamento & "|" & lngPersonaGraba & "|" & vlstrCveUsoCFDI & "|" & IIf(intCredito, 1, 0)
    frsEjecuta_SP strSentencia, "FN_PVINSHONORARIOMEDICOCONTADO", 1, intResultado
    
    If intResultado <> 0 Then
        Select Case intResultado
            Case 1
                strMensaje = "No se ha configurado tarifa de ISR"
            Case 2
                strMensaje = "No se encontró la factura"
            Case 3
                strMensaje = "El médico no tiene configurada una cuenta contable."
            Case 4
                strMensaje = "No se ha configurado tarifa de la comisión"
            Case 5
                strMensaje = "No se encuentra configurada la cuenta de honorarios por pagar en los parámetros de contabilidad."
        End Select
        MsgBox strMensaje, vbCritical, "Mensaje"
        fblnCreaHonorarioPorPagar = False
        Exit Function
    End If
    
Exit Function
NotificaError:
    pRegistraError Err.Number, Err.Description, cgstrModulo, (Me.Name & ":fblnCreaHonorarioPorPagar" & Erl()), strFolioDocumento & "|" & dblTotalContado & "|" & vgintNumeroDepartamento & "|" & lngPersonaGraba, False
End Function
        
Private Sub pActualizaConfiguracionIntExt()
Dim vlstrSentencia As String
    pEjecutaSentencia "Delete From PvTipoPacienteProceso Where PvTipoPacienteProceso.intNumeroLogin = " & vglngNumeroLogin & " And PvTipoPacienteProceso.intProceso = " & enmTipoProceso.Facturacion
    vlstrSentencia = "Insert Into PvTipoPacienteProceso (intnumerologin, intproceso, chrtipopaciente) Values(" & vglngNumeroLogin & "," & enmTipoProceso.Facturacion & "," & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & ")"
    pEjecutaSentencia vlstrSentencia
End Sub

Private Sub pIdentificaFormato()
    Dim lngCveFormato As Long

    lngCveFormato = 1
    frsEjecuta_SP vgintNumeroDepartamento & "|" & vgintEmpresa & "|" & vgintTipoPaciente & "|" & IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")), "fn_PVSelFormatoFactura2", True, lngCveFormato
    vllngFormatoaUsar = lngCveFormato

End Sub

Private Sub pActualizaFacturacionConsolidada(vlstrFolioDocumento As String, strMovPac As String)
Dim vlstrSentencia As String
    vlstrSentencia = "Update PVFACTURACIONCONSOLIDADA " & _
                              "   Set PVFACTURACIONCONSOLIDADA.CHRFOLIOFACTURA = '" & Trim(vlstrFolioDocumento) & "'" & _
                              "     , PVFACTURACIONCONSOLIDADA.dtmfechafacturacion = SYSDATE " & _
                              " Where PVFACTURACIONCONSOLIDADA.intCveGrupo = " & strMovPac
    pEjecutaSentencia vlstrSentencia
End Sub

Private Sub pGrabarConceptosDesgloce()
    Dim vllngPersonaGraba As Long
    Dim vlstrSentencia As String
    Dim rsConceptosFacturaSeg As New ADODB.Recordset
    
    
    If vgintEmpresa <> 0 And gintAseguradora <> 0 Then
            
            Set rsConceptosFacturaSeg = frsEjecuta_SP(CStr(vgintClaveEmpresaContable), "Sp_PvSelConceptoFacturaSeguro")
            ldblDesctoExcedente = 0
            ldblDesctoDeducible = 0
            ldblDesctoCoaseguro = 0
            ldblDesctoCoaseguroMedico = 0
            ldblDesctoCoaseguroAdicional = 0
            ldblDesctoCopago = 0
            
            If Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")) > 0 Then
                ldblDesctoExcedente = Format(fdblDescuentoConceptoSeguro(rsConceptosFacturaSeg!excedente, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtExcedenteSumaAsegurada.Text, "###############.00")) - dblExcedenteH, "EX"), "###############.00")
            End If
            
            If chkFacturaDeducible.Value Then
                ldblDesctoDeducible = Format(fdblDescuentoConceptoSeguro(rsConceptosFacturaSeg!Deducible, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtDeducible.Text, "###############.00")) - dblDeducibleH, "DE"), "###############.00")
            End If
            
            If chkFacturaCoaseguro.Value Then
                ldblDesctoCoaseguro = Format(fdblDescuentoConceptoSeguro(rsConceptosFacturaSeg!Coaseguro, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtCoaseguro.Text, "###############.00")) - dblCoaseguroH, "CO"), "###############.00")
                ' ldblDesctoCoaseguro = Format(fdblDescuentoConceptoSeguro(rsConceptosFacturaSeg!Coaseguro, Val(txtMovimientoPaciente.Text), IIf(optTipoPaciente(0).Value, "I", "E"), IIf(intCoaseguroPorFactura = 1, Val(Format(txtCantidadMaximaCO.Text, "###############.00")), Val(Format(txtCoaseguro.Text, "###############.00"))) - dblCoaseguroH, "CO"), "###############.00")
            End If
            
            If Val(Format(txtCoaseguroMedico.Text, "###############.00")) > 0 Then
                ldblDesctoCoaseguroMedico = Format(fdblDescuentoConceptoSeguro(rsConceptosFacturaSeg!CoaseguroMedico, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtCoaseguroMedico.Text, "###############.00")) - dblCoaseguroMH, "CM"), "###############.00")
            End If
            
            If chkFacturaCoaseguroAdicional Then
                ldblDesctoCoaseguroAdicional = Format(fdblDescuentoConceptoSeguro(rsConceptosFacturaSeg!CoaseguroAdicional, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtCoaseguroAdicional.Text, "###############.00")) - dblCoaseguroAH, "CA"), "###############.00")
            End If
            
            If chkFacturaCopago.Value Then
                ldblDesctoCopago = Format(fdblDescuentoConceptoSeguro(rsConceptosFacturaSeg!Copago, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtCopago.Text, "###############.00")) - dblCopagoH, "CP"), "###############.00")
            End If
           
           
                pEjecutaSentencia ("UPDATE PVCONTROLASEGURADORA SET " & _
                                     "BITCALCULARENBASEACARGOS = " & IIf(blnCalcularEnBaseACargosTemp, 1, 0) & " " & _
                                    ",INTDESGLOSARIVAEXCEDENTE = " & lintDesglosaIVAExcedenteTemp & " ,INTDESGLOSARIVADEDUCIBLE = " & lintDesglosaIVADeducibleTemp & " " & _
                                    ",INTDESGLOSARIVACOASEGURO = " & lintDesglosaIVACoaseguroTemp & " ,INTDESGLOSARIVACOASEGUROMEDICO = " & lintDesglosaIVACoaseguroMedicoTemp & " " & _
                                    ",INTDESGLOSARIVACOASEGUROADICIO = " & lintDesglosaIVACoaseguroAdicionalTemp & " ,INTDESGLOSARIVACOPAGO = " & lintDesglosaIVACopagoTemp & " " & _
                                    ",INTDESGLOSAREXCEDENTE = " & lintDesglosaExcedenteTemp & " ,INTDESGLOSARDEDUCIBLE = " & lintDesglosaDeducibleTemp & " " & _
                                    ",INTDESGLOSARCOASEGURO = " & lintDesglosaCoaseguroTemp & " ,INTDESGLOSARCOASEGUROMEDICO = " & lintDesglosaCoaseguroMedicoTemp & " " & _
                                    ",INTDESGLOSARCOASEGUROADICIONAL = " & lintDesglosaCoaseguroAdicionalTemp & " ,INTDESGLOSARCOPAGO = " & lintDesglosaCopagoTemp & " " & _
                                    ",SMYPORCENTEXCEDENTENOTA = " & dblPorcentajeEXNotaTemp & " ,MNYCANTIDADLIMITEEXCEDENTE = " & dblLimiteNotaEXTemp & " " & _
                                    ",SMYPORCENTDEDUCIBLENOTA = " & dblPorcentajeDENotaTemp & " ,MNYCANTIDADLIMITEDEDUCIBLE = " & dblLimiteNotaDETemp & " " & _
                                    ",SMYPORCENTCOASEGURONOTA = " & dblPorcentajeCONotaTemp & " ,MNYCANTIDADLIMITECOASEGURO = " & dblLimiteNotaCOTemp & " " & _
                                    ",SMYPORCENTCOASEGUROMEDICONOTA = " & dblPorcentajeCMNotaTemp & " ,MNYCANTIDADLIMITECOASEGUROMED = " & dblLimiteNotaCMTemp & " " & _
                                    ",SMYPORCENTCOASADICIONALNOTA = " & dblPorcentajeCANotaTemp & " ,MNYCANTIDADLIMITECOASADICIONAL = " & dblLimiteNotaCATemp & " " & _
                                    ",SMYPORCENTCOPAGONOTA = " & dblPorcentajeCPNotaTemp & " ,MNYCANTIDADLIMITECOPAGO = " & dblLimiteNotaCPTemp & " " & _
                                    ",BITDESGLOSAIVATASAHOSPICONCEP = " & intIVATasaHospiTemp & " " & ",BITCAPTURARCOASEGUROPORFACTURA = " & intCoaseguroPorFacturaTemp & " " & _
                                    ", chrTipoDesctoNotaExcedente = '" & strTipoDesctoNotaExcedenteTemp & "' " & _
                                    ", chrTipoDesctoNotaDeducible = '" & strTipoDesctoNotaDeducibleTemp & "' " & _
                                    ", chrTipoDesctoNotaCoaseguro = '" & strTipoDesctoNotaCoaseguroTemp & "' " & _
                                    ", chrTipoDesctoNotaCoaseguroMedi = '" & strTipoDesctoNotaCoaMedicoTemp & "' " & _
                                    ", chrTipoDesctoNotaCoaseguroAdic = '" & strTipoDesctoNotaCoaAdicionalTemp & "' " & _
                                    ", chrTipoDesctoNotaCopago = '" & strTipoDesctoNotaCopagoTemp & "' " & _
                                    "WHERE intMovPaciente = " & txtMovimientoPaciente.Text & " " & _
                                        "AND chrTipoPaciente = '" & IIf(OptTipoPaciente(0).Value, "I", "E") & "' " & _
                                        "AND intCveEmpresa = " & str(vgintEmpresa))


            vlstrSentencia = "delete from PvTipoPacienteProceso where PvTipoPacienteProceso.intnumerologin = " & vglngNumeroLogin & _
                            "and PvTipoPacienteProceso.intproceso = " & enmTipoProceso.Facturacion
            pEjecutaSentencia vlstrSentencia
            
            vlstrSentencia = "insert into PvTipoPacienteProceso (intnumerologin, intproceso, chrtipopaciente) values(" & vglngNumeroLogin & "," & enmTipoProceso.Facturacion & "," & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & ")"
            pEjecutaSentencia vlstrSentencia
      
    End If
End Sub

Private Sub grdBuscaFacturas_DblClick()
    If Trim(grdBuscaFacturas.TextMatrix(1, 1)) <> "" Then
        If grdBuscaFacturas.TextMatrix(grdBuscaFacturas.Row, 12) <> "2" And grdBuscaFacturas.TextMatrix(grdBuscaFacturas.Row, 12) <> "XX" Then
            Set frmConsultaFactura.vgfrmFacturas = frmFacturacion
            frmConsultaFactura.pConsultaFacturas grdBuscaFacturas.TextMatrix(grdBuscaFacturas.Row, 11), True
            pCargaBusqueda IIf(optTipoPacienteBusqueda(2).Value, "A", IIf(optTipoPacienteBusqueda(0).Value, "I", "E")), IIf(optTipoBusqueda(0).Value Or optTipoBusqueda(2).Value, -1, vllngCuentaBusqueda)
            grdBuscaFacturas.SetFocus
        Else
            'Este comprobante procede de un proceso incompleto en el sistema por lo que no puede ser consultado.
             MsgBox SIHOMsg(1277), vbOKOnly + vbExclamation, "Mensaje"
        End If
    End If
End Sub

Private Sub lstFPBuscaCliente_DblClick()
    lstFPBuscaCliente_KeyDown vbKeyReturn, 0
End Sub

Private Sub lstFPBuscaCliente_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        pDatosFacturaPaciente
        If cmdGrabarFacturaPaciente.Enabled = True Then
            cmdGrabarFacturaPaciente.SetFocus
        End If
        pValidaBloqueoRegimen
    End If
End Sub

Private Sub lstUrgencias_LostFocus()
    freListaUrgencias.Visible = False
End Sub

Private Sub MSFGFacturasParciales_Click()
    If MSFGFacturasParciales.Col = 9 And MSFGFacturasParciales.RowData(1) <> -1 And MSFGFacturasParciales.TextMatrix(MSFGFacturasParciales.Row, 11) <> "1" Then 'Celda 11 <> 1 significa que la factura parcial aun no se ha grabado
        vgblnPesos = Not vgblnPesos
        If MSFGFacturasParciales.TextMatrix(MSFGFacturasParciales.Row, 9) = "x" Then
            MSFGFacturasParciales.TextMatrix(MSFGFacturasParciales.Row, 9) = ""
        Else
            MSFGFacturasParciales.TextMatrix(MSFGFacturasParciales.Row, 9) = "x"
            MSFGFacturasParciales.CellFontBold = True
        End If
        pCalculaPrecios
    End If
    
    If MSFGFacturasParciales.RowData(1) <> -1 And MSFGFacturasParciales.TextMatrix(MSFGFacturasParciales.Row, 11) = "1" Or MSFGFacturasParciales.TextMatrix(MSFGFacturasParciales.Row, 11) = "" Then 'Celda 11 = 1 significa que la factura parcial ya está grabada
        cmdEliminaDonativo.Enabled = False
    Else
        cmdEliminaDonativo.Enabled = True
    End If
End Sub

Private Sub mskFechaFinal_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = 13 Then
        pCargaBusqueda IIf(optTipoPacienteBusqueda(2).Value, "A", IIf(optTipoPacienteBusqueda(0).Value, "I", "E")), -1
        grdBuscaFacturas.SetFocus
    End If
End Sub
Private Sub mskFechaInicial_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        pEnfocaMkTexto mskFechaFinal
    End If
End Sub

Private Sub optGrupoCuenta_Click(Index As Integer)
    If optGrupoCuenta(0).Value Then 'Grupo
        OptTipoPaciente(0).Enabled = False
        OptTipoPaciente(1).Enabled = False
        lblCuenta(0).Caption = "Clave"
        lblCuenta(0).ToolTipText = "Clave del grupo"
    Else 'Cuenta
        OptTipoPaciente(0).Enabled = True
        OptTipoPaciente(1).Enabled = True
        lblCuenta(0).Caption = "Número"
        lblCuenta(0).ToolTipText = "Número de cuenta"
    End If
    pEnfocaTextBox txtMovimientoPaciente
End Sub

Private Sub Option1_Click(Index As Integer)
    txtCoaseguroMedico.Enabled = Index = 0
    txtPorcentajeCoaseguroMed.Enabled = Index = 1
    lblPorcentajeDeducible(1).Enabled = Index = 1
        
    If Not txtCoaseguroMedico.Enabled Then
        txtCoaseguroMedico.Text = FormatCurrency(0, 2)
    End If
    
    If Not txtPorcentajeCoaseguroMed.Enabled Then
        txtPorcentajeCoaseguroMed.Text = ""
    End If
End Sub

Private Sub pFiltrosBusqueda(blnHabilita As Boolean)
   optTipoPacienteBusqueda(0).Enabled = blnHabilita
   optTipoPacienteBusqueda(1).Enabled = blnHabilita
   optTipoPacienteBusqueda(2).Enabled = blnHabilita
   optTipoBusqueda(0).Enabled = blnHabilita
   optTipoBusqueda(1).Enabled = blnHabilita
   optTipoBusqueda(2).Enabled = blnHabilita
   mskFechaInicial.Enabled = blnHabilita
   mskFechaFinal.Enabled = blnHabilita
   TxtFolio.Enabled = blnHabilita


End Sub

Private Sub optMostrarSolo_Click(Index As Integer)
    Select Case Index
        Case 0 '| Mostrar todo
            pFiltrosBusqueda True
        Case 1, 2, 3, 4 '| Mostrar solo pendientes de timbre fiscal
            pFiltrosBusqueda False
    End Select
    pCargaBusqueda IIf(optTipoPacienteBusqueda(2).Value, "A", IIf(optTipoPacienteBusqueda(0).Value, "I", "E")), -1
    If grdBuscaFacturas.Enabled = True Then grdBuscaFacturas.SetFocus
End Sub

Private Sub optTipoBusqueda_Click(Index As Integer)
    fraRangoFechas.Enabled = optTipoBusqueda(0).Value
    
    mskFechaInicial.Mask = ""
    mskFechaFinal.Mask = ""
   
    If optTipoBusqueda(0).Value Then
        fraRangoFechas.Enabled = optTipoBusqueda(0).Value
        fraRangoFechas.Caption = "Rango de fechas"
        mskFechaInicial.Enabled = True
        mskFechaFinal.Enabled = True
        mskFechaInicial.Visible = True
        mskFechaFinal.Visible = True
        Label72.Visible = True
        TxtFolio.Enabled = False
        TxtFolio.Visible = False
        mskFechaInicial.Text = fdtmServerFecha
        mskFechaFinal.Text = fdtmServerFecha
    Else
        If optTipoBusqueda(2).Value Then
            fraRangoFechas.Enabled = optTipoBusqueda(2).Value
            fraRangoFechas.Caption = "Folio factura"
            mskFechaInicial.Enabled = False
            mskFechaFinal.Enabled = False
            mskFechaInicial.Visible = False
            mskFechaFinal.Visible = False
            Label72.Visible = False
            TxtFolio.Text = ""
            TxtFolio.Enabled = True
            TxtFolio.Visible = True
            TxtFolio.SetFocus
        End If
        mskFechaInicial.Text = ""
        mskFechaFinal.Text = ""
    End If
    
    mskFechaInicial.Mask = "##/##/####"
    mskFechaFinal.Mask = "##/##/####"
     
    vllngCuentaBusqueda = -1
    
End Sub

Private Sub optTipoBusqueda_KeyPress(Index As Integer, KeyAscii As Integer)
    vllngCuentaBusqueda = -1

    If KeyAscii = 13 Then
        If optTipoBusqueda(0).Value Then
            mskFechaInicial.SetFocus
        Else
            If optTipoBusqueda(1).Value Then
                With FrmBusquedaPacientes
                    .vgblnPideClave = False
                    .vgIntMaxRecords = 100
                    .vgstrMovCve = "M"
                    .optSinFacturar.Value = False
                    .optSinFacturar.Enabled = False
                    .optSoloActivos.Enabled = False
                    .optTodos.Value = True
                    .optTodos.Enabled = False
                    If optTipoPacienteBusqueda(1).Value Then 'Externos
                        .vgStrOtrosCampos = ", SiTipoIngreso.vchNombre as Tipo, ExPacienteIngreso.dtmFechaHoraIngreso as ""Fecha"", isnull(CCempresa.vchDescripcion, adTipoPaciente.vchDescripcion) as Empresa "
                        .vgstrTamanoCampo = "800,3400,1500,1750,4100"
                        .vgstrTipoPaciente = "E"
                        .Caption = .Caption & " Externos"
                    Else
                        .vgStrOtrosCampos = ", SiTipoIngreso.vchNombre as Tipo, ExPacienteIngreso.dtmFechaHoraIngreso as ""Fecha ing."", ExPacienteIngreso.dtmFechaHoraEgreso as ""Fecha egr."", isnull(CCempresa.vchDescripcion, adTipoPaciente.vchDescripcion) as Empresa "
                        .vgstrTamanoCampo = "800,3400,2200,1050,1050,4100"
                        .vgstrTipoPaciente = "I"
                        .Caption = .Caption & " Internos"
                    End If
        
                    vllngCuentaBusqueda = .flngRegresaPaciente()
                End With
                
                If vllngCuentaBusqueda > 0 Then pCargaBusqueda IIf(optTipoPacienteBusqueda(1), "E", "I"), vllngCuentaBusqueda
                
                grdBuscaFacturas.SetFocus
            Else
                TxtFolio.SetFocus
            End If
        End If
    End If
End Sub

Private Sub optTipoCoaseguro_Click(Index As Integer)
    txtCoaseguro.Enabled = Index = 0
    If intCoaseguroPorFactura = 1 Then txtCoaseguro.Enabled = False
    
    txtPorcentajeCoaseguro.Enabled = Index = 1 And intCoaseguroPorFactura = 0
    
    lblPorcentajeDeducible(2).Enabled = Index = 1
    
    If Index = 0 And intCoaseguroPorFactura = 0 Then
        txtCantidadMaximaCO.Enabled = False
        txtCantidadMaximaCO.Text = FormatCurrency(0, 2)
    Else
        txtCantidadMaximaCO.Enabled = True
        If intCoaseguroPorFactura = 1 And Val(Format(txtCantidadMaximaCO.Text, "")) = 0 Then txtCantidadMaximaCO.Text = FormatCurrency(0, 2)
    End If
    
    If intCoaseguroPorFactura = 1 Then
        txtCoaseguro.Text = FormatCurrency(dblCoaseguroFacturado + Val(Format(txtCantidadMaximaCO, "")), 2)
    Else
        If Not txtCoaseguro.Enabled Then txtCoaseguro.Text = FormatCurrency(0, 2)
    End If

    If Not txtPorcentajeCoaseguro.Enabled Then txtPorcentajeCoaseguro.Text = ""
End Sub

Private Sub optTipoCoaseguro_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If Index = 0 Then
            txtCoaseguro.SetFocus
        Else
            txtPorcentajeCoaseguro.SetFocus
        End If
    End If
End Sub

Private Sub optTipoCoaseguroAdicional_Click(Index As Integer)
    txtCoaseguroAdicional.Enabled = Index = 0
    txtPorcentajeCoaseguroAdicional.Enabled = Index = 1 And intCoaseguroPorFactura = 0
    lblPorcentajeDeducible(3).Enabled = Index = 1
        
    If Not txtCoaseguroAdicional.Enabled Then txtCoaseguroAdicional.Text = FormatCurrency(0, 2)
    
    If Not txtPorcentajeCoaseguroAdicional.Enabled Then txtPorcentajeCoaseguroAdicional.Text = ""
End Sub

Private Sub optTipoCoaseguroAdicional_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If Index = 0 Then
            txtCoaseguroAdicional.SetFocus
        Else
            txtPorcentajeCoaseguroAdicional.SetFocus
        End If
    End If
End Sub

Private Sub optTipoCoaseguroMedico_Click(Index As Integer)
    'Si se calcula en base a cargos y ya no hay cargos para los cálculos entonces se deshabilitan porque ya no se debe poder facturar al paciente
    lblPorcentajeDeducible(17).Enabled = IIf(blnCalcularEnBaseACargos And Not blnCargosSinFacturarPaciente, False, Index = 1)
    txtHonorariosAFacturar.Enabled = IIf(blnCalcularEnBaseACargos And Not blnCargosSinFacturarPaciente, False, Index = 1)
    lblPorcentajeDeducible(27).Enabled = IIf(blnCalcularEnBaseACargos And Not blnCargosSinFacturarPaciente, False, Index = 0)
    txtCoaseguroMedico.Enabled = IIf(blnCalcularEnBaseACargos And Not blnCargosSinFacturarPaciente, False, Index = 0)
    
    txtPorcentajeCoaseguroMed.Enabled = Index = 1
    lblPorcentajeDeducible(1).Enabled = Index = 1
    
    If Not txtCoaseguroMedico.Enabled Then txtCoaseguroMedico.Text = FormatCurrency(0, 2)

    If Not txtPorcentajeCoaseguroMed.Enabled Then
        txtPorcentajeCoaseguroMed.Text = ""
        txtHonorariosAFacturar.Text = ""
    End If
End Sub

Private Sub optTipoCoaseguroMedico_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If Index = 0 Then
            txtCoaseguroMedico.SetFocus
        Else
            txtPorcentajeCoaseguroMed.SetFocus
        End If
    End If
End Sub

Private Sub optTipoCopago_Click(Index As Integer)
    txtCopago.Enabled = Index = 0
    txtPorcentajeCopago.Enabled = Index = 1 And intCoaseguroPorFactura = 0
    lblPorcentajeDeducible(4).Enabled = Index = 1
        
    If Not txtCopago.Enabled Then txtCopago.Text = FormatCurrency(0, 2)
    If Not txtPorcentajeCopago.Enabled Then txtPorcentajeCopago.Text = ""
End Sub

Private Sub optTipoCopago_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If Index = 0 Then
            txtCopago.SetFocus
        Else
            txtPorcentajeCopago.SetFocus
        End If
    End If
End Sub

Private Sub optTipoDeducible_Click(Index As Integer)
    txtDeducible.Enabled = Index = 0
    txtPorcentajeDeducible.Enabled = Index = 1
    lblPorcentajeDeducible(0).Enabled = Index = 1
        
    If Not txtDeducible.Enabled Then txtDeducible.Text = FormatCurrency(0, 2)
    
    If Not txtPorcentajeDeducible.Enabled Then txtPorcentajeDeducible.Text = ""
End Sub

Private Sub optTipoDeducible_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If Index = 0 Then
            txtDeducible.SetFocus
        Else
            txtPorcentajeDeducible.SetFocus
        End If
    End If
End Sub

Private Sub optTipoFacturacion_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    Dim vlstrSentencia As String
    Dim rs As New ADODB.Recordset
    ' Osea que si es aseguradora
    If sstFacturacion.TabEnabled(2) Then
                                
        vlstrSentencia = "Select * from pvControlAseguradora " & _
                        " where intMovPaciente = " & Trim(txtMovimientoPaciente.Text) & _
                        " and chrTipoPaciente = " & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & _
                        " and intCveEmpresa = " & str(vgintEmpresa)
        Set rs = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
        If rs.RecordCount = 0 Then 'Que no se encuentra
            'Recuerde grabar el control de la aseguradora con la nueva configuración.
            MsgBox SIHOMsg(512), vbInformation, "Mensaje"
        Else
            rs!CHRFORMAFACTURACION = IIf(optTipoFacturacion(1).Value, "FFS", "RFS")
            rs.Update
        End If
        rs.Close
    End If
End Sub

Private Sub optTipoPaciente_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    pEnfocaTextBox txtMovimientoPaciente
End Sub

Private Sub optTipoPacienteBusqueda_Click(Index As Integer)
    If optTipoPacienteBusqueda(2).Value Then
        optTipoBusqueda(0).Value = True
        optTipoBusqueda(1).Value = False
        optTipoBusqueda(1).Enabled = True
    Else
        optTipoBusqueda(1).Enabled = True
    End If
    vllngCuentaBusqueda = -1
End Sub

Private Sub optTipoPacienteBusqueda_KeyPress(Index As Integer, KeyAscii As Integer)
    If KeyAscii = 13 Then
        If optTipoBusqueda(0).Value Then
            optTipoBusqueda(0).SetFocus
        Else
            optTipoBusqueda(1).SetFocus
        End If
    End If
End Sub

Private Sub sstFacturacion_GotFocus()
    If fraParametrosFP.Visible Then
        cboCFParaFacturaParcial.SetFocus
        Exit Sub
    End If
End Sub

Private Sub sstFacturacion_Mouseup(Button As Integer, Shift As Integer, X As Single, Y As Single)
    If sstFacturacion.Tab = 0 Then
        If vgstrEstadoManto = "F" Then
            pEnfocaTextBox txtNombreFactura
        Else
            pCancelar
        End If
    ElseIf sstFacturacion.Tab = 1 Then
        grdCargos.Row = 1
        grdCargos.Col = 3
        grdCargos.SetFocus
    End If
End Sub

Private Sub Text1_KeyPress(KeyAscii As Integer)
    KeyAscii = Asc(UCase(Chr(KeyAscii)))
End Sub

Private Sub txtCantidadFP_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim ldblTipoCambio As Double
    Dim vllngCveClienteCredito As Long
    Dim vlstrTipoPacienteCredito As String
    Dim vlblnFormaPago As Boolean
    Dim vldblPorcentajeProrrateado As Double
    Dim vldblCantidadTecleada As Double 'Cantidad que intenta introducir el usuario
    Static vllngidFact As Long ' Sirve para tener un id del grid MSFGFacturasParciales
    Dim vlIntCont As Integer
    
    Dim rsConceptosFacturaSeg As New ADODB.Recordset
    Dim rsDatosFacturaSeg As New ADODB.Recordset
    Dim rsParcialesNormal As New ADODB.Recordset
    Dim rsIVACuenta As New ADODB.Recordset
    
    Dim dblIVAExcluidosNoFacturado As Double
    Dim dblIVAParcialesNormal As Double
    
    Dim dblSTExcluidosNoFacturado As Double
    Dim dblSTParcialesNormal As Double
    
    Dim strConceptoSeguro As String
    Dim dblIVAFacturado As Double
    Dim dblImporteConcepto As Double
    Dim dblFactorIVA As Double
    Dim dblDescuentoConcepto As Double
    Dim dblIVAConcepto As Double
    Dim dblimportegravado As Double
    Dim dblImporteNoFacturado As Double
    Dim dblImporteSeguro As Double
    Dim ldblTotalFacturaPesos As Double
         
    ldblTipoCambio = fdblTipoCambio(fdtmServerFecha, "V")
    
    If KeyCode = 13 Then
        If CDbl(txtCantidadFP.Text) <= 0 Or Val(Format(txtFPTotalFactura.Text, "")) <= 0 Then
            'No se puede realizar la operación con cantidad cero o menor que cero
            MsgBox SIHOMsg(651), vbExclamation, "Mensaje"
            Exit Sub
        End If
        
        With MSFGFacturasParciales
            .Row = .Rows - 1
            
            Load frmDatosFiscales
            frmDatosFiscales.sstDatos.Tab = 1
            frmDatosFiscales.Show vbModal
            If frmDatosFiscales.vgblnModalResult Then
                vllngCveClienteCredito = frmDatosFiscales.vglngNumRef
                vlstrTipoPacienteCredito = frmDatosFiscales.vgstrTipo
                ldblTipoCambio = fdblTipoCambio(fdtmServerFecha, "V") 'Tipo de cambio a la Venta
                
                If ldblTipoCambio = 0 Then
                    'No está registrado el tipo de cambio del día.
                    MsgBox SIHOMsg(231), vbCritical, "Mensaje"
                    Exit Sub
                End If
                
                '***** MODIFICADO PARA CASO 6894 *****'
                'vlblnFormaPago = fblnFormasPagoPos(aFormasPago(), CDbl(txtCantidadFP.Text), True, ldblTipoCambio, True, vllngCveClienteCredito, vlstrTipoPacienteCredito, True, False)
                vlblnFormaPago = fblnFormasPagoPos(aFormasPago(), CDbl(txtCantidadFP.Text), True, ldblTipoCambio, True, vllngCveClienteCredito, vlstrTipoPacienteCredito, Trim(Replace(Replace(Replace(frmDatosFiscales.vgstrRFC, "-", ""), "_", ""), " ", "")), True, False, True, "frmFacturacion")
                '*************************************'
                If vlblnFormaPago Then 'Se salio de la forma con el botón Aceptar
                    vldblCantidadTecleada = fdblCantidadPagada(aFormasPago)
                        
                    strConceptoSeguro = "X"
                    dblIVAFacturado = 0
                    ldblIVACargosSelConvenio = 0
                    dblImporteConcepto = 0
                    dblimportegravado = 0
                    dblImporteNoFacturado = 0
                    ldblIVACargosSelConvenioExDE = 0
                    
                    'Revisa si es un concepto de seguro y valida que solo se puedan seleccionar cuando son cuentas de convenio con aseguradoras
                    Set rsConceptosFacturaSeg = frsEjecuta_SP(CStr(vgintClaveEmpresaContable), "Sp_PvSelConceptoFacturaSeguro")
                    If rsConceptosFacturaSeg.RecordCount > 0 Then
                        
                        If cboCFParaFacturaParcial.ItemData(cboCFParaFacturaParcial.ListIndex) = rsConceptosFacturaSeg!excedente Then
                            strConceptoSeguro = "EX"
                        ElseIf cboCFParaFacturaParcial.ItemData(cboCFParaFacturaParcial.ListIndex) = rsConceptosFacturaSeg!Deducible Then
                            strConceptoSeguro = "DE"
                        ElseIf cboCFParaFacturaParcial.ItemData(cboCFParaFacturaParcial.ListIndex) = rsConceptosFacturaSeg!Coaseguro Then
                            strConceptoSeguro = "CO"
                        ElseIf cboCFParaFacturaParcial.ItemData(cboCFParaFacturaParcial.ListIndex) = rsConceptosFacturaSeg!CoaseguroAdicional Then
                            strConceptoSeguro = "CA"
                        ElseIf cboCFParaFacturaParcial.ItemData(cboCFParaFacturaParcial.ListIndex) = rsConceptosFacturaSeg!Copago Then
                            strConceptoSeguro = "CP"
                        End If
                        
                        'Si es concepto de seguro
                        If strConceptoSeguro <> "X" Then
                            'No es convenio con aseguradora y se seleccionó un concepto de seguro
                            If gintAseguradora = 0 Then
                                'No se pueden facturar conceptos de seguro a cuentas particulares
                                MsgBox SIHOMsg(982), vbCritical, "Mensaje"
                                Exit Sub
                            Else
                            'Si la cuenta es de convenio con aseguradora
                                 
                                Select Case strConceptoSeguro
                                    Case "EX"
                                        dblImporteConcepto = Val(Format(txtExcedenteSumaAsegurada.Text, "############.00"))
                                        dblImporteNoFacturado = Val(Format(txtExcedenteNoFacturado.Text, "############.00")) - Format(fdblDescuentoConceptoSeguro(cboCFParaFacturaParcial.ItemData(cboCFParaFacturaParcial.ListIndex), Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), dblImporteConcepto, strConceptoSeguro), "###############.00")
                                    Case "DE"
                                        dblImporteConcepto = Val(Format(txtDeducible.Text, "############.00"))
                                        dblImporteNoFacturado = Val(Format(txtDeducibleNoFacturado.Text, "############.00")) - Format(fdblDescuentoConceptoSeguro(cboCFParaFacturaParcial.ItemData(cboCFParaFacturaParcial.ListIndex), Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), dblImporteConcepto, strConceptoSeguro), "###############.00")
                                    Case "CO"
                                        dblImporteConcepto = Val(Format(txtCoaseguro.Text, "############.00"))
                                        'dblImporteConcepto = Val(Format(IIf(intCoaseguroPorFactura = 1, txtCantidadMaximaCO.Text, txtCoaseguro.Text), "############.00"))
                                        dblImporteNoFacturado = Val(Format(txtCoaseguroNoFacturado.Text, "############.00")) - Format(fdblDescuentoConceptoSeguro(cboCFParaFacturaParcial.ItemData(cboCFParaFacturaParcial.ListIndex), Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), dblImporteConcepto, strConceptoSeguro), "###############.00")
                                    Case "CA"
                                        dblImporteConcepto = Val(Format(txtCoaseguroAdicional.Text, "############.00"))
                                        dblImporteNoFacturado = Val(Format(txtCoaseguroANoFacturado.Text, "############.00")) - Format(fdblDescuentoConceptoSeguro(cboCFParaFacturaParcial.ItemData(cboCFParaFacturaParcial.ListIndex), Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), dblImporteConcepto, strConceptoSeguro), "###############.00")
                                    Case "CP"
                                        dblImporteConcepto = Val(Format(txtCopago.Text, "############.00"))
                                        dblImporteNoFacturado = Val(Format(txtCopagoNoFacturado.Text, "############.00")) - Format(fdblDescuentoConceptoSeguro(cboCFParaFacturaParcial.ItemData(cboCFParaFacturaParcial.ListIndex), Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), dblImporteConcepto, strConceptoSeguro), "###############.00")
                                End Select
                                
                                'Que no se pueda facturar mas del importe del concepto que falta por facturar
                                If dblImporteNoFacturado < vldblCantidadTecleada Then
                                    Select Case strConceptoSeguro
                                        Case "EX"
                                                'La cantidad a facturar excede el importe restante del Excedente
                                                MsgBox SIHOMsg(977) & " Excedente", vbExclamation, "Mensaje"
                                        Case "DE"
                                                'La cantidad a facturar excede el importe restante del Deducible
                                                MsgBox SIHOMsg(977) & " Deducible", vbExclamation, "Mensaje"
                                        Case "CO"
                                                'La cantidad a facturar excede el importe restante del Coaseguro
                                                MsgBox SIHOMsg(977) & " Coaseguro", vbExclamation, "Mensaje"
                                        Case "CA"
                                                'La cantidad a facturar excede el importe restante del Coaseguro adicional
                                                MsgBox SIHOMsg(977) & " Coaseguro adicional", vbExclamation, "Mensaje"
                                        Case "CP"
                                                'La cantidad a facturar excede el importe restante del Copago
                                                MsgBox SIHOMsg(977) & " Copago", vbExclamation, "Mensaje"
                                    End Select
                                    
                                    Unload frmDatosFiscales
                                    Set frmDatosFiscales = Nothing
                                    Exit Sub
                                    
                                End If 'Cantidad a facturar > cantidad pendiente de facturar
                            End If 'Convenio con aseguradora
                        End If 'Es concepto de seguro
                    End If 'rsConceptosFaturaSeg
                    
                    vllngidFact = vllngidFact + 1
                    If .RowData(.Row) <> -1 Then
                        .Rows = .Rows + 1
                        .Row = .Rows - 1
                    End If
                    .RowData(.Row) = vllngidFact 'El RowData contendrá el id generado del grid
                    
                    With frmDatosFiscales
                        pAgregaColeccion aFormasPago, vllngidFact, .vglngNumRef, .vgstrTipo, .vglngCveDatosFiscales, .vgstrNombre, .vgstrDireccion, .vgstrNumExterior, .vgstrNumInterior, .vgstrTelefono, .vgstrRFC, .llngCveCiudad, .vgstrColonia, .vgstrCP
                    End With
                    
                    .Row = .Rows - 1
                    For vlIntCont = 3 To .Cols - 1
                        .Col = vlIntCont
                        MSFGFacturasParciales.CellForeColor = &H0      'Azul
                        .CellFontBold = False
                    Next vlIntCont
                    
                    .TextMatrix(.Row, 0) = vllngCveClienteCredito        ' Numero de cuenta del paciente
                    .TextMatrix(.Row, 1) = vlstrTipoPacienteCredito      ' Tipo de paciente
                    .TextMatrix(.Row, 2) = frmDatosFiscales.vgstrNombre  ' Facturado a
                    
                    'Si es un concepto de seguro
                    If strConceptoSeguro <> "X" And gintAseguradora = 1 Then
                        'Si se desglosa el IVA del concepto
                        If (strConceptoSeguro = "EX" And lintDesglosaIVAExcedente = 1) _
                        Or (strConceptoSeguro = "DE" And lintDesglosaIVADeducible = 1) _
                        Or (strConceptoSeguro = "CO" And lintDesglosaIVACoaseguro = 1) _
                        Or (strConceptoSeguro = "CA" And lintDesglosaIVACoaseguroAdicional = 1) _
                        Or (strConceptoSeguro = "CP" And lintDesglosaIVACopago = 1) Then
                            
                            'Si se desglosa el IVA del concepto a la tasa del hospital y se le factura IVA al paciente
                            If intIVATasaHospi = 1 And intDesglosaIVAPaciente = 1 Then
                                If optPesos(0).Value Then
                                    .TextMatrix(.Row, 4) = FormatCurrency(vldblCantidadTecleada - (vldblCantidadTecleada / (1 + vgdblCantidadIvaGeneral / 100)), 2)
                                    .TextMatrix(.Row, 7) = vldblCantidadTecleada - (vldblCantidadTecleada / (1 + vgdblCantidadIvaGeneral / 100))
                                Else
                                    .TextMatrix(.Row, 4) = FormatCurrency(vldblCantidadTecleada - (vldblCantidadTecleada / (1 + vgdblCantidadIvaGeneral / 100)), 2)
                                    .TextMatrix(.Row, 7) = vldblCantidadTecleada - (vldblCantidadTecleada / (1 + vgdblCantidadIvaGeneral / 100))
                                End If
                                
                                'Importe gravado = ST facturado del concepto
                                dblimportegravado = vldblCantidadTecleada - CDbl(Val(Format(.TextMatrix(.Row, 4), "###############.00")))
                                 
                            ElseIf intIVATasaHospi = 0 Then
                            'El IVA se desglosa prorrateado
                                dblImporteSeguro = fdblImportesSeguro
                                'dblFactorIVA = IIf(blnExcedenteHonorarios, 1, dblImporteSeguro / (Val(Format(txtTotalSinExcluidos.Text, "")) - Val(Format(txtHonorarios.Text, ""))))
                                ldblTotalCargosSINExcluidos = Val(Format(Val(Format(txtHonorarios.Text, "")) + ldblTotalCargosHospital, "")) - ldblTotalCargosExcluidos
                                dblFactorIVA = IIf(blnExcedenteHonorarios, 1, dblImporteSeguro / (ldblTotalCargosSINExcluidos - Val(Format(txtHonorarios.Text, ""))))
                                dblDescuentoConcepto = Format(fdblDescuentoConceptoSeguro(cboCFParaFacturaParcial.ItemData(cboCFParaFacturaParcial.ListIndex), Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(dblImporteConcepto, "###############.00"), strConceptoSeguro), "###############.00")
                                dblIVAConcepto = dblIVACargosConvenio * dblFactorIVA * ((dblImporteConcepto - dblDescuentoConcepto) / IIf(Val(Format(txtTotalDedCoaCop.Text, "")) = 0, 1, CDbl(Val(Format(txtTotalDedCoaCop.Text, "")))))
                                
                                If optPesos(0).Value Then
                                    .TextMatrix(.Row, 4) = FormatCurrency(dblIVAConcepto * (vldblCantidadTecleada / (dblImporteConcepto - dblDescuentoConcepto)), 2)
                                    .TextMatrix(.Row, 7) = dblIVAConcepto * (vldblCantidadTecleada / (dblImporteConcepto - dblDescuentoConcepto))
                                Else
                                    .TextMatrix(.Row, 4) = FormatCurrency((dblIVAConcepto * ((vldblCantidadTecleada * ldblTipoCambio) / (dblImporteConcepto - dblDescuentoConcepto))) / ldblTipoCambio, 2)
                                    .TextMatrix(.Row, 7) = (dblIVAConcepto * ((vldblCantidadTecleada * ldblTipoCambio) / (dblImporteConcepto - dblDescuentoConcepto))) / ldblTipoCambio
                                End If
                                    dblimportegravado = Format(Val(.TextMatrix(.Row, 7)) / (vgdblCantidadIvaGeneral / 100), "############.00")
                                    '-----------------------------------------------------
                                    'Aqui falta parchecillo pa no perder centavos en el IG?
                                    '-----------------------------------------------------
                            Else
                            'No se desglosa IVA
                                .TextMatrix(.Row, 4) = "$ 0.00"
                                .TextMatrix(.Row, 7) = "0.00"
                            End If
                        Else
                            'No desglosa el IVa del concepto
                            .TextMatrix(.Row, 4) = "$ 0.00"
                            .TextMatrix(.Row, 7) = "0.00"
                        End If
                    Else
                    'Si no es un concepto de seguro
                        'Si es convenio con aseguradora
                        If gintAseguradora = 1 Then
                            'El IVA se prorratea solo con el IVA no facturado de los cargos excluídos
                            'si no hay, entonces no debe haber IVA en la parcial
                            dblIVAParcialesNormal = 0
                            dblSTParcialesNormal = 0
                            
                            vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & "|" & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & "|" & CStr(vgintClaveEmpresaContable)
                            Set rsParcialesNormal = frsEjecuta_SP(vgstrParametrosSP, "Sp_PvSelFacturasParcialesNorma")
                            
                            If rsParcialesNormal.RecordCount > 0 Then
                                dblIVAParcialesNormal = rsParcialesNormal!IVA
                                dblSTParcialesNormal = rsParcialesNormal!st
                            End If
                            rsParcialesNormal.Close
                            
                            'IVA Excluidos No Facturado = IVA Excluídos - IVA Facturas Parciales de conceptos Normales
                            dblIVAExcluidosNoFacturado = Val(Format(txtExcluidosIVA.Text, "")) - dblIVAParcialesNormal
                            dblSTExcluidosNoFacturado = Val(Format(txtExcluidosHospital.Text, "")) - dblSTParcialesNormal
                            
                            If Val(Format(dblSTExcluidosNoFacturado + dblIVAExcluidosNoFacturado, "############.00")) > 0 Then
                                vldblPorcentajeProrrateado = vldblCantidadTecleada / Val(Format(dblSTExcluidosNoFacturado + dblIVAExcluidosNoFacturado, "############.00"))
                            Else
                                vldblPorcentajeProrrateado = 0
                            End If
                            
                            'IVA
                            If vldblPorcentajeProrrateado <= 0 Or vldblPorcentajeProrrateado > 1 Then
                                .TextMatrix(.Row, 4) = "$ 0.00"
                                .TextMatrix(.Row, 7) = "0.00"
                                dblimportegravado = 0
                            Else
                                If optPesos(0).Value Then
                                'Factura base en pesos
                                    .TextMatrix(.Row, 4) = Format(CDbl(Format(dblIVAExcluidosNoFacturado, "############.00")) / IIf(.TextMatrix(.Row, 9) = "", 1, ldblTipoCambio) * vldblPorcentajeProrrateado, "$ ###,###,###,###.00")
                                    .TextMatrix(.Row, 7) = Format(CDbl(Format(dblIVAExcluidosNoFacturado, "############.00")) / IIf(.TextMatrix(.Row, 9) = "", 1, ldblTipoCambio) * vldblPorcentajeProrrateado, "###########0.00")
                                Else
                                'Factura base en dólares
                                    .TextMatrix(.Row, 4) = Format(CDbl(Format(dblIVAExcluidosNoFacturado, "############.00")) * IIf(.TextMatrix(.Row, 9) = "", ldblTipoCambio, 1) * vldblPorcentajeProrrateado, "$ ###,###,###,##0.00")
                                    .TextMatrix(.Row, 7) = Format(CDbl(Format(dblIVAExcluidosNoFacturado, "############.00")) * IIf(.TextMatrix(.Row, 9) = "", ldblTipoCambio, 1) * vldblPorcentajeProrrateado, "###########0.00")
                                End If
                            End If
                        Else
                        'Si no es cuenta de convenio con aseguradora
                            'Aqui como estaba antes
                            ldblTotalFacturaPesos = Val(Format(txtFPTotalFactura.Text, "")) * IIf(optPesos(0).Value, 1, ldblTipoCambio)
                            vldblPorcentajeProrrateado = vldblCantidadTecleada / IIf(ldblTotalFacturaPesos = 0, vldblCantidadTecleada, ldblTotalFacturaPesos)
                            'IVA
                            If vldblPorcentajeProrrateado <= 0 Or vldblPorcentajeProrrateado > 1 Then
                                .TextMatrix(.Row, 4) = "$ 0.00"
                                .TextMatrix(.Row, 7) = "0.00"
                                dblimportegravado = 0
                            Else
                                If optPesos(0).Value Then
                                'Factura base en pesos
                                    .TextMatrix(.Row, 4) = Format((Val(Format(txtFPIVA.Text, "")) / IIf(.TextMatrix(.Row, 9) = "", 1, ldblTipoCambio)) * vldblPorcentajeProrrateado, "$ ###,###,###,###.00")
                                    .TextMatrix(.Row, 7) = Format((Val(Format(txtFPIVA.Text, "")) / IIf(.TextMatrix(.Row, 9) = "", 1, ldblTipoCambio)) * vldblPorcentajeProrrateado, "###########0.00")
                                Else
                                'Factura base en dólares
                                    .TextMatrix(.Row, 4) = Format((Val(Format(txtFPIVA.Text, "")) * IIf(.TextMatrix(.Row, 9) = "", ldblTipoCambio, 1)) * vldblPorcentajeProrrateado, "$ ###,###,###,##0.00")
                                    .TextMatrix(.Row, 7) = Format((Val(Format(txtFPIVA.Text, "")) * IIf(.TextMatrix(.Row, 9) = "", ldblTipoCambio, 1)) * vldblPorcentajeProrrateado, "###########0.00")
                                End If
                            End If
                        End If
                    End If 'Tipo de concepto
                    
                    'Total
                    .TextMatrix(.Row, 5) = Format(vldblCantidadTecleada, "$ ###,###,###,##0.00") ' Total
                    'Subtotal
                    .TextMatrix(.Row, 3) = Format(Val(Format(.TextMatrix(.Row, 5), "")) - Val(Format(.TextMatrix(.Row, 4), "")), "###,###,##0.00")
                    .TextMatrix(.Row, 6) = Val(Format(.TextMatrix(.Row, 5), "")) - Val(Format(.TextMatrix(.Row, 7), "")) 'Subtotal
                    .TextMatrix(.Row, 8) = vldblCantidadTecleada ' Total
                    .TextMatrix(.Row, 10) = vldblCantidadTecleada ' Total
                    .TextMatrix(.Row, 11) = 0 'Está en memoria, no se ha facturado
                    'Clave del concepto de facturación
                    .TextMatrix(.Row, 12) = cboCFParaFacturaParcial.ItemData(cboCFParaFacturaParcial.ListIndex)
                    .TextMatrix(.Row, 13) = "" 'Folio
                    .TextMatrix(.Row, 14) = "" 'Fecha
                    'Descripción del concepto de facturación
                    .TextMatrix(.Row, 15) = cboCFParaFacturaParcial.List(cboCFParaFacturaParcial.ListIndex)
                    
                    If gintAseguradora = 1 And strConceptoSeguro <> "X" Then
                    'Si es convenio con aseguradora y es concepto de seguro
                        'ImporteGravado
                        .TextMatrix(.Row, 16) = dblimportegravado
                        'Importe no gravado
                        'Total - IVA - IG
                        .TextMatrix(.Row, 17) = Format(vldblCantidadTecleada, "###############.00") - CDbl(Val(Format(.TextMatrix(.Row, 4), "###############.00"))) - Format(dblimportegravado, "###############.00")
                    Else    'No es convenio con aseguradora o no es concepto de seguro
                        'ImporteGravado
                        If Val(Format(.TextMatrix(.Row, 4), "############.00")) > 0 Then
                            If strConceptoSeguro = "X" And gintAseguradora <> 1 Then
                                If optPesos(0).Value Then
                                    .TextMatrix(.Row, 16) = Format(((Val(Format(txtFPIVA.Text, "")) / IIf(.TextMatrix(.Row, 9) = "", 1, ldblTipoCambio)) * vldblPorcentajeProrrateado) / (vgdblCantidadIvaGeneral / 100), "############.00")
                                Else
                                    .TextMatrix(.Row, 16) = Format(((Val(Format(txtFPIVA.Text, "")) * IIf(.TextMatrix(.Row, 9) = "", ldblTipoCambio, 1)) * vldblPorcentajeProrrateado) / (vgdblCantidadIvaGeneral / 100), "############.00")
                                End If
                            Else
                                .TextMatrix(.Row, 16) = Format(Val(.TextMatrix(.Row, 7)) / (vgdblCantidadIvaGeneral / 100), "############.00")
                            End If
                            .TextMatrix(.Row, 17) = Format(Val(Format(.TextMatrix(.Row, 3), "############.00")) - Val(Format(.TextMatrix(.Row, 16), "############.00")), "############.00")
                            'Validación para no perder centavos
                            If Abs(Format((Val(Format(.TextMatrix(.Row, 5), "############.00")) - Val(Format(.TextMatrix(.Row, 4), "############.00"))) - Val(Format(.TextMatrix(.Row, 16), "############.00")), "############.00")) <= 0.03 _
                            And Abs(Format((Val(Format(.TextMatrix(.Row, 5), "############.00")) - Val(Format(.TextMatrix(.Row, 4), "############.00"))) - Val(Format(.TextMatrix(.Row, 16), "############.00")), "############.00")) > 0 Then
                            'Todo Grava
                                .TextMatrix(.Row, 16) = Format(Val(Format(.TextMatrix(.Row, 5), "############.00")) - Val(Format(.TextMatrix(.Row, 4), "############.00")), "############.00")
                                .TextMatrix(.Row, 17) = 0
                            End If
                        Else
                        'Nada Grava
                            .TextMatrix(.Row, 16) = 0
                            'Se asigna el subtotal como importe no gravado (para no perder centavos)
                            .TextMatrix(.Row, 17) = Val(Format(.TextMatrix(.Row, 3), "############.00"))
                        End If
                    End If
                    
                    'Tipo de concepto (normal o de seguro)
                    .TextMatrix(.Row, 18) = strConceptoSeguro
                    
                    cmdEliminaDonativo.Enabled = True
                    
                    
                    
                    If vgintEmpresa = 0 Or blnExisteExcedente Then
                        pLlenaFacturasParticulares grdFacturaPaciente
                    Else
                        If gintAseguradora = 0 Then
                            pLlenaFacturasConvenio grdFacturaPaciente
                        Else
                            pLlenaFacturasConvenioAseguradora grdFacturaPaciente
                        End If
                    End If
                    
                    vgblnCancelacionFP = False
                End If
            End If
            
            pReestableceEstadoComponentes
            pHabilitaGrabacionFacturaPaciente
            fraParametrosFP.Visible = False
            .SetFocus
        End With
        
        Unload frmDatosFiscales
        Set frmDatosFiscales = Nothing
    End If
    
    If KeyCode = 27 Then
        pReestableceEstadoComponentes
        fraParametrosFP.Visible = False
        vgblnCancelacionFP = True
    End If
    
End Sub

Private Sub txtCantidadFP_KeyPress(KeyAscii As Integer)
    If Not fblnFormatoCantidad(txtCantidadFP, KeyAscii, 2) Then KeyAscii = 7
End Sub

Private Sub txtCantidadFP_LostFocus()
    txtCantidadFP.Text = Format(txtCantidadFP.Text, "0.00")
End Sub

Private Sub txtCantidadMaximaCO_GotFocus()
    pEnfocaTextBox txtCantidadMaximaCO
End Sub

Private Sub txtCantidadMaximaCO_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim dblCoaseguro As Double
    Dim dblLimiteCO As Double
    Dim dblPorcentaje As Double

    If KeyCode = vbKeyReturn Then
        If intCoaseguroPorFactura = 1 Then
            txtCoaseguro.Text = FormatCurrency(dblCoaseguroFacturado + Val(Format(txtCantidadMaximaCO, "")), 2)
        Else
            If Val(Format(txtCantidadMaximaCO, "")) < dblCoaseguroFacturado And Not cmdBorraControl.Enabled Then
                'La cantidad máxima a cobrar de coaseguro no puede ser modificada por una cantidad menor a lo facturado
                MsgBox SIHOMsg(1058), vbCritical + vbOKOnly, "Mensaje"
                txtCantidadMaximaCO.Text = FormatCurrency(dblCantidadMaximaCO, 2)
            Else
                dblCoaseguro = Val(Format(txtTotalSinDeducible.Text, "")) * Val(txtPorcentajeCoaseguro.Text) / 100
                dblLimiteCO = Val(Format(txtCantidadMaximaCO.Text, ""))
                dblPorcentaje = Val(txtPorcentajeCoaseguro.Text)
                
                If dblLimiteCO > 0 Then
                    dblCoaseguro = IIf(dblCoaseguro > dblLimiteCO, dblLimiteCO, dblCoaseguro)
                Else
                    dblCoaseguro = Val(Format(txtTotalSinDeducible.Text, "")) * dblPorcentaje / 100
                End If
                
                txtCoaseguro.Text = FormatCurrency(dblCoaseguro, 2)
                
                If txtPorcentajeCoaseguroAdicional.Enabled Then
                    txtPorcentajeCoaseguroAdicional.SetFocus
                Else
                    If txtCoaseguroAdicional.Enabled Then txtCoaseguroAdicional.SetFocus
                End If
            End If
        End If
    End If
End Sub

Private Sub txtCantidadMaximaCO_KeyPress(KeyAscii As Integer)
    If Not fblnFormatoCantidad(txtCantidadMaximaCO, KeyAscii, 2) Then KeyAscii = 7
End Sub

Private Sub txtCantidadMaximaCO_LostFocus()
    Dim dblCoaseguro As Double
    Dim dblLimiteCO As Double
    Dim dblPorcentaje As Double

    If intCoaseguroPorFactura = 1 Then
        txtCoaseguro.Text = FormatCurrency(dblCoaseguroFacturado + Val(Format(txtCantidadMaximaCO, "")), 2)
    Else
        If Val(Format(txtCantidadMaximaCO, "")) < dblCoaseguroFacturado And Not cmdBorraControl.Enabled Then
            'La cantidad máxima a cobrar de coaseguro no puede ser modificada por una cantidad menor a lo facturado
            MsgBox SIHOMsg(1058), vbCritical + vbOKOnly, "Mensaje"
            txtCantidadMaximaCO.Text = FormatCurrency(dblCantidadMaximaCO, 2)
        Else
            dblCoaseguro = Val(Format(txtTotalSinDeducible.Text, "")) * Val(txtPorcentajeCoaseguro.Text) / 100
            dblLimiteCO = Val(Format(txtCantidadMaximaCO.Text, ""))
            dblPorcentaje = Val(txtPorcentajeCoaseguro.Text)
            
            If dblLimiteCO > 0 Then
                dblCoaseguro = IIf(dblCoaseguro > dblLimiteCO, dblLimiteCO, dblCoaseguro)
            Else
                dblCoaseguro = Val(Format(txtTotalSinDeducible.Text, "")) * dblPorcentaje / 100
            End If
    
            txtCoaseguro.Text = FormatCurrency(dblCoaseguro, 2)
            txtCantidadMaximaCO.Text = FormatCurrency(Val(Format(txtCantidadMaximaCO.Text, "")), 2)
        End If
    End If
End Sub

Private Sub txtCantidadPaquete_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim intBitValidaPaquetes As Long
            
    'Para verificar que tecla fue presionada en el textbox
    With grdCargos
        Select Case KeyCode
            Case 27   'ESC
                 txtCantidadPaquete.Visible = False
                .SetFocus
            Case 38   'Flecha para arriba
                .SetFocus
                DoEvents
                .Row = IIf(.Row > .FixedRows, .Row - 1, .Row)
            Case 40, 13
                .SetFocus
                DoEvents
                If .Col = 31 Then
                    If .TextMatrix(.Row, 31) <> intCantidadIncluida Then
                        If intCantidadIncluida <= .TextMatrix(.Row, 4) Then
                            ' Regresa bit para validar paquetes
                            intBitValidaPaquetes = 1
                            If Val(.TextMatrix(.Row, 30)) <> 0 Then
                                frsEjecuta_SP Val(.TextMatrix(.Row, 30)), "FN_PVSELVALIDACARGOSPAQUETE", True, intBitValidaPaquetes
                            Else
                                intBitValidaPaquetes = 0
                            End If
                        
                            .TextMatrix(.Row, 32) = IIf(intBitValidaPaquetes = 0, Val(.TextMatrix(.Row, 4)) - intCantidadIncluida, 0)
                            .TextMatrix(.Row, 54) = Val(.TextMatrix(.Row, 4)) - (intCantidadIncluida + Val(.TextMatrix(.Row, 32)))
                        
                            pRegistraCambio intCantidadIncluida, .TextMatrix(.Row, 2), .TextMatrix(.Row, 30)
                        Else
                            'La cantidad total de cargos ya ha sido incluida en un paquete.
                            MsgBox SIHOMsg(623), vbInformation, "Mensaje"
                            Exit Sub
                        End If
                        
                        .TextMatrix(.Row, 31) = intCantidadIncluida
                        .TextMatrix(.Row, 33) = "*" 'Estatus de cambio en la informacion
                        .TextMatrix(.Row, 55) = ""  'Limpia la columna del excedente en grupo de cargo
                        cmdActualizarCargos.Enabled = True
                    End If
                Else
                    If .TextMatrix(.Row, 32) <> intCantidadIncluida Then
                        If intCantidadIncluida + Val(.TextMatrix(.Row, 31)) <= .TextMatrix(.Row, 4) Then
                            .TextMatrix(.Row, 32) = intCantidadIncluida
                            .TextMatrix(.Row, 54) = Val(.TextMatrix(.Row, 4)) - (Val(.TextMatrix(.Row, 31)) + Val(.TextMatrix(.Row, 32)))
                        Else
                            .TextMatrix(.Row, 32) = 0
                            .TextMatrix(.Row, 54) = Val(.TextMatrix(.Row, 4)) - (Val(.TextMatrix(.Row, 31)) + Val(.TextMatrix(.Row, 32)))
                            'La cantidad total de cargos ya ha sido incluida en un paquete.
                            MsgBox SIHOMsg(623), vbInformation, "Mensaje"
                            Exit Sub
                        End If
                        .TextMatrix(.Row, 33) = "*" 'Estatus de cambio en la informacion
                        .TextMatrix(.Row, 55) = ""  'Limpia la columna del excedente en grupo de cargo
                        cmdActualizarCargos.Enabled = True
                        pRegistraCambio intCantidadIncluida, .TextMatrix(.Row, 2), .TextMatrix(.Row, 30)
                    End If
                End If
                
                .Row = IIf(.Row < .Rows - 1, .Row + 1, .Row)
        End Select
    End With
End Sub

Private Sub txtCantidadPaquete_KeyPress(KeyAscii As Integer)
    If Not IsNumeric(Chr(KeyAscii)) And Not KeyAscii = vbKeyBack And Not KeyAscii = vbKeyReturn Then
        KeyAscii = 7
    End If
End Sub

Private Sub txtCargosExcluidos_Change()
    txtTotalSinExcluidos.Text = FormatCurrency(Val(Format(txtTotalCargos.Text, "")) - Val(Format(txtCargosExcluidos.Text, "")), 2)
End Sub

Private Sub txtCargosExcluidosNoFacturados_Change()
    txtTotalNoFacturado.Text = FormatCurrency(Val(Format(txtCargosExcluidosNoFacturados.Text, "")) + Val(Format(txtExcedenteNoFacturado.Text, "")) + Val(Format(txtDeducibleNoFacturado.Text, "")) + Val(Format(txtCoaseguroNoFacturado.Text, "")) + Val(Format(txtCoaseguroMNoFacturado.Text, "")) + Val(Format(txtCoaseguroANoFacturado.Text, "")) + Val(Format(txtCopagoNoFacturado.Text, "")), 2)
End Sub

Private Sub txtCoaseguro_GotFocus()
    pSelTextBox txtCoaseguro
End Sub

Private Sub txtCoaseguro_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If optTipoCoaseguroAdicional(0).Enabled Then
            If optTipoCoaseguroAdicional(0).Value Then
                txtCoaseguroAdicional.SetFocus
            Else
                txtPorcentajeCoaseguroAdicional.SetFocus
            End If
        Else
            cmdGrabarControl.SetFocus
        End If
    End If
End Sub

Private Sub txtCoaseguro_KeyPress(KeyAscii As Integer)
    If Not fblnFormatoCantidad(txtCoaseguro, KeyAscii, 2) Then
        KeyAscii = 7
    End If
End Sub

Private Sub txtCoaseguro_LostFocus()
    txtCoaseguro.Text = FormatCurrency(Val(Format(txtCoaseguro.Text, "")), 2)
End Sub

Private Sub txtCoaseguroAdicional_Change()
    'Total sin coaseguro:
    txtTotalSinCoaseguroAdicional.Text = FormatCurrency(Val(Format(txtTotalSinCoaseguro.Text, "")) - Val(Format(txtCoaseguroAdicional.Text, "")), 2)
    txtCoaseguroANoFacturado.Text = FormatCurrency(IIf(chkFacturaCoaseguroAdicional.Value = 1, Val(Format(txtCoaseguroAdicional.Text, "")) - dblCoaseguroAFacturado, 0), 2)
    
    'Limpiar copago:
    If lblnHacerChange Then
        txtPorcentajeCopago.Text = ""
        If Val(Format(txtCopago.Text, "")) = 0 Then
            txtCopago_Change
        Else
            txtCopago.Text = FormatNumber(0, 2)
        End If
    Else
        txtCopago_Change
    End If
End Sub

Private Sub txtCoaseguroAdicional_GotFocus()
    pSelTextBox txtCoaseguroAdicional
End Sub

Private Sub txtCoaseguroAdicional_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If optTipoCopago(0).Enabled Then
            If optTipoCopago(0).Value Then
                txtCopago.SetFocus
            Else
                txtPorcentajeCopago.SetFocus
            End If
        Else
            cmdGrabarControl.SetFocus
        End If
    End If
End Sub

Private Sub txtCoaseguroAdicional_KeyPress(KeyAscii As Integer)
    If Not fblnFormatoCantidad(txtCoaseguroAdicional, KeyAscii, 2) Then
        KeyAscii = 7
    End If
End Sub

Private Sub txtCoaseguroAdicional_LostFocus()
    txtCoaseguroAdicional.Text = FormatCurrency(Val(Format(txtCoaseguroAdicional.Text, "")), 2)
End Sub

Private Sub txtCoaseguroMedico_Change()
    'Total coaseguro médico
    txtTotalCoaseguroMedico.Text = FormatCurrency(Val(Format(txtCoaseguroMedico.Text, "")) + dblCoaseguroMFacturado, 2)
End Sub

Private Sub txtCoaseguroMedico_GotFocus()
    pEnfocaTextBox txtCoaseguroMedico
End Sub

Private Sub txtCoaseguroMedico_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If fblnCanFocus(cmdGrabarControl) Then cmdGrabarControl.SetFocus
    End If
End Sub

Private Sub txtCoaseguroMedico_KeyPress(KeyAscii As Integer)
    If Not fblnFormatoCantidad(txtCoaseguroMedico, KeyAscii, 2) Or chkFacturaCoaseguroMedico.Value = 0 Then KeyAscii = 7
End Sub

Private Sub txtCoaseguroMedico_LostFocus()
    txtCoaseguroMedico.Text = FormatCurrency(Val(Format(txtCoaseguroMedico.Text, "")), 2)
End Sub

Private Sub txtCoaseguroMNoFacturado_Change()
    txtTotalNoFacturado.Text = FormatCurrency(Val(Format(txtCargosExcluidosNoFacturados.Text, "")) + Val(Format(txtExcedenteNoFacturado.Text, "")) + Val(Format(txtDeducibleNoFacturado.Text, "")) + Val(Format(txtCoaseguroNoFacturado.Text, "")) + Val(Format(txtCoaseguroMNoFacturado.Text, "")) + Val(Format(txtCoaseguroANoFacturado.Text, "")) + Val(Format(txtCopagoNoFacturado.Text, "")), 2)
End Sub

Private Sub txtColoniaFactura_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then pEnfocaTextBox txtCPFactura
End Sub

Private Sub txtColoniaFactura_KeyPress(KeyAscii As Integer)
    KeyAscii = Asc(UCase(Chr(KeyAscii)))
    vgBlnCambioDatosFiscales = True
End Sub


Private Sub txtCPFactura_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then pEnfocaCbo cboCiudad
End Sub

Private Sub txtCPFactura_KeyPress(KeyAscii As Integer)
    On Error GoTo NotificaError

    If Not IsNumeric(Chr(KeyAscii)) And Not KeyAscii = vbKeyBack And Not KeyAscii = vbKeyReturn Then
        KeyAscii = 7
    Else
        vgBlnCambioDatosFiscales = True
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":txtCPFactura_KeyPress"))
End Sub

Private Sub txtCoaseguroANoFacturado_Change()
    txtTotalNoFacturado.Text = FormatCurrency(Val(Format(txtCargosExcluidosNoFacturados.Text, "")) + Val(Format(txtExcedenteNoFacturado.Text, "")) + Val(Format(txtDeducibleNoFacturado.Text, "")) + Val(Format(txtCoaseguroNoFacturado.Text, "")) + Val(Format(txtCoaseguroMNoFacturado.Text, "")) + Val(Format(txtCoaseguroANoFacturado.Text, "")) + Val(Format(txtCopagoNoFacturado.Text, "")), 2)
End Sub

Private Sub txtCoaseguroNoFacturado_Change()
    txtTotalNoFacturado.Text = FormatCurrency(Val(Format(txtCargosExcluidosNoFacturados.Text, "")) + Val(Format(txtExcedenteNoFacturado.Text, "")) + Val(Format(txtDeducibleNoFacturado.Text, "")) + Val(Format(txtCoaseguroNoFacturado.Text, "")) + Val(Format(txtCoaseguroMNoFacturado.Text, "")) + Val(Format(txtCoaseguroANoFacturado.Text, "")) + Val(Format(txtCopagoNoFacturado.Text, "")), 2)
End Sub

Private Sub txtCopagoNoFacturado_Change()
    txtTotalNoFacturado.Text = FormatCurrency(Val(Format(txtCargosExcluidosNoFacturados.Text, "")) + Val(Format(txtExcedenteNoFacturado.Text, "")) + Val(Format(txtDeducibleNoFacturado.Text, "")) + Val(Format(txtCoaseguroNoFacturado.Text, "")) + Val(Format(txtCoaseguroMNoFacturado.Text, "")) + Val(Format(txtCoaseguroANoFacturado.Text, "")) + Val(Format(txtCopagoNoFacturado.Text, "")), 2)
End Sub

Private Sub txtDeducibleNoFacturado_Change()
    txtTotalNoFacturado.Text = FormatCurrency(Val(Format(txtCargosExcluidosNoFacturados.Text, "")) + Val(Format(txtExcedenteNoFacturado.Text, "")) + Val(Format(txtDeducibleNoFacturado.Text, "")) + Val(Format(txtCoaseguroNoFacturado.Text, "")) + Val(Format(txtCoaseguroMNoFacturado.Text, "")) + Val(Format(txtCoaseguroANoFacturado.Text, "")) + Val(Format(txtCopagoNoFacturado.Text, "")), 2)
End Sub

'Private Sub txtDescuento_Change()
' blnText = True
'End Sub

Private Sub txtExcedenteNoFacturado_Change()
    txtTotalNoFacturado.Text = FormatCurrency(Val(Format(txtCargosExcluidosNoFacturados.Text, "")) + Val(Format(txtExcedenteNoFacturado.Text, "")) + Val(Format(txtDeducibleNoFacturado.Text, "")) + Val(Format(txtCoaseguroNoFacturado.Text, "")) + Val(Format(txtCoaseguroMNoFacturado.Text, "")) + Val(Format(txtCoaseguroANoFacturado.Text, "")) + Val(Format(txtCopagoNoFacturado.Text, "")), 2)
End Sub

Private Sub txtExcluidosTotal_Change()
    'Total a pagar:
    txtTotalPagarControl.Text = FormatCurrency(Val(Format(txtExcluidosTotal.Text, "")) - Val(Format(txtExcluidosPagos.Text, "")), 2)
End Sub

Private Sub txtFacturaNumExterior_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then pEnfocaTextBox txtFacturaNumInterior
End Sub

Private Sub txtFacturaNumExterior_KeyPress(KeyAscii As Integer)
    KeyAscii = Asc(UCase(Chr(KeyAscii)))
    vgBlnCambioDatosFiscales = True
End Sub

Private Sub txtFacturaNumInterior_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then pEnfocaTextBox txtColoniaFactura
End Sub

Private Sub txtFacturaNumInterior_KeyPress(KeyAscii As Integer)
    KeyAscii = Asc(UCase(Chr(KeyAscii)))
    vgBlnCambioDatosFiscales = True
End Sub

Private Sub TxtFolio_GotFocus()
    pSelTextBox TxtFolio
End Sub


Private Sub TxtFolio_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = 13 Then
        pCargaBusqueda IIf(optTipoPacienteBusqueda(2).Value, "A", IIf(optTipoPacienteBusqueda(0).Value, "I", "E")), -1
        grdBuscaFacturas.SetFocus
    End If
End Sub


Private Sub TxtFolio_KeyPress(KeyAscii As Integer)
    pMayusculas KeyAscii
End Sub


Private Sub txtHonorarios_LostFocus()
    If dblHonorarios > Val(Format(txtHonorarios.Text, "")) And Not cmdBorraControl.Enabled Then
        'Los honorarios no pueden ser modificados por una cantidad menor
        MsgBox SIHOMsg(980), vbCritical + vbOKOnly, "Mensaje"
        txtHonorarios.Text = FormatCurrency(dblHonorarios, 2)
    Else
        txtHonorarios.Text = FormatCurrency(Val(Format(txtHonorarios.Text, "")), 2)
    End If
End Sub

Private Sub txtHonorariosAFacturar_Change()
    Dim dblCoaseguroMedico As Double

    dblCoaseguroMedico = Val(Format(txtHonorariosAFacturar.Text, "")) * (Val(txtPorcentajeCoaseguroMed.Text) / 100)

    'Coaseguro médico a cobrar
    txtCoaseguroMedico.Text = FormatCurrency(dblCoaseguroMedico, 2)
End Sub

Private Sub txtHonorariosAFacturar_GotFocus()
    pSelTextBox txtHonorariosAFacturar
End Sub

Private Sub txtHonorariosAFacturar_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If fblnCanFocus(cmdGrabarControl) Then cmdGrabarControl.SetFocus
    End If
End Sub

Private Sub txtHonorariosAFacturar_KeyPress(KeyAscii As Integer)
    If KeyAscii = vbKeyReturn And chkFacturaCoaseguroMedico.Value = 1 Then
        If Me.ActiveControl.Name = "txtHonorariosAFacturar" Then
            txtHonorariosAFacturar.Text = FormatCurrency(Val(Format(txtHonorariosAFacturar.Text, "")), 2)
            pEnfocaTextBox txtHonorariosAFacturar
        End If
    Else
        If (Not IsNumeric(Chr(KeyAscii)) And Not KeyAscii = 8 _
        And (Not KeyAscii = 46 Or (KeyAscii = 46 And fblnValidaPunto(txtHonorariosAFacturar.Text)))) _
        Or chkFacturaCoaseguroMedico.Value = 0 Then
            KeyAscii = 8
        End If
    End If
End Sub

Private Sub txtHonorariosAFacturar_LostFocus()
    txtHonorariosAFacturar.Text = FormatCurrency(Val(Format(txtHonorariosAFacturar.Text, "")), 2)
End Sub

Private Sub txtImpresionesFP_GotFocus(Index As Integer)
        pSelTextBox txtImpresionesFP(Index)
End Sub
Private Sub txtImpresionesFP_KeyDown(KeyCode As Integer, Shift As Integer, Index As Integer)
    If KeyCode = vbKeyReturn Then SendKeys vbTab
End Sub

Private Sub txtImpresionesFP_KeyPress(KeyAscii As Integer, Index As Integer)
    On Error GoTo NotificaError
    
    If Not IsNumeric(Chr(KeyAscii)) And Not KeyAscii = vbKeyBack And Not KeyAscii = vbKeyReturn Then
        KeyAscii = 7
    End If

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":txtImpresionesFP(0)_KeyPress"))
End Sub

Private Sub txtImpresionesFP_Validate(Index As Integer, Cancel As Boolean)
    If Index = 0 Then
        If Trim(txtImpresionesFP(0).Text) = "" Then
            txtImpresionesFP(0).Text = fintNumCopiaImpFactPaciente
        End If
    Else
        If txtImpresionesFP(1).Text = "" Then
                txtImpresionesFP(1).Text = fintNumCopiaImpFactEmpresa
        End If
    End If
End Sub

Private Sub txtNombreAsegurado_GotFocus()
    pSelTextBox txtNombreAsegurado
End Sub

Private Sub txtNombreAsegurado_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then txtPersonaAutoriza.SetFocus  'cboTipoPoliza.SetFocus '18084
End Sub

Private Sub txtNombreAsegurado_KeyPress(KeyAscii As Integer)
    KeyAscii = Asc(UCase(Chr(KeyAscii)))
End Sub

Private Sub txtNombreFactura_GotFocus()
    pSelTextBox txtNombreFactura
End Sub

Private Sub txtNumeroControl_Change()
    lblnDatosSeguroModificados = True
End Sub

Private Sub txtNumeroControl_GotFocus()
    pSelTextBox txtNumeroControl
End Sub

Private Sub txtNumeroControl_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then cboParentesco.SetFocus  'txtObservaciones.SetFocus
End Sub

Private Sub txtNumeroControl_KeyPress(KeyAscii As Integer)
    KeyAscii = Asc(UCase(Chr(KeyAscii)))
End Sub

Private Sub txtNumeroPoliza_Change()
    lblnDatosSeguroModificados = True
End Sub

Private Sub txtNumeroPoliza_GotFocus()
    pSelTextBox txtNumeroPoliza
End Sub

Private Sub txtNumeropoliza_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then txtObservaciones.SetFocus  'txtNumeroControl.SetFocus
End Sub

Private Sub txtNumeroPoliza_KeyPress(KeyAscii As Integer)
    KeyAscii = Asc(UCase(Chr(KeyAscii)))
End Sub


Private Sub TxtObservacionesE_KeyPress(KeyAscii As Integer)
    KeyAscii = Asc(UCase(Chr(KeyAscii)))
End Sub

Private Sub TxtObservacionesP_KeyPress(KeyAscii As Integer)
    KeyAscii = Asc(UCase(Chr(KeyAscii)))
End Sub

Private Sub txtPersonaAutoriza_Change()
    lblnDatosSeguroModificados = True
End Sub

Private Sub txtPersonaAutoriza_GotFocus()
    pSelTextBox txtPersonaAutoriza
End Sub

Private Sub txtPorcentajeCoaseguroMed_Change()
    'Coaseguro médico
    txtHonorariosAFacturar_Change
End Sub

Private Sub txtPorcentajeCoaseguroMed_GotFocus()
    pEnfocaTextBox txtPorcentajeCoaseguroMed
End Sub

Private Sub txtPorcentajeCoaseguroMed_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If dblPorcentajeCoaseguroMedico > Val(Format(txtPorcentajeCoaseguroMed.Text, "")) And Not cmdBorraControl.Enabled Then
            'El porcentaje de coaseguro médico no pueden ser modificados por una cantidad menor
            MsgBox SIHOMsg(1056), vbCritical + vbOKOnly, "Mensaje"
            txtPorcentajeCoaseguroMed.Text = dblPorcentajeCoaseguroMedico
        Else
            'Caso 7998: Agregada validación antes de cambiar el foco al text box
            If fblnCanFocus(txtHonorariosAFacturar) Then txtHonorariosAFacturar.SetFocus
        End If
    End If
End Sub

Private Sub txtPorcentajeCoaseguroMed_KeyPress(KeyAscii As Integer)
    If Not IsNumeric(Chr(KeyAscii)) Or chkFacturaCoaseguroMedico.Value = 0 Then
        If KeyAscii = 46 And InStr(txtPorcentajeCoaseguroMed.Text, ".") > 0 Then
            KeyAscii = 7
        End If
    End If
End Sub

Private Sub txtPorcentajeCoaseguroMed_LostFocus()
    If dblPorcentajeCoaseguroMedico > Val(Format(txtPorcentajeCoaseguroMed.Text, "")) And Not cmdBorraControl.Enabled Then
        'El porcentaje de coaseguro médico no puede ser modificados por una cantidad menor
        MsgBox SIHOMsg(1056), vbCritical + vbOKOnly, "Mensaje"
        sstFacturacion.Tab = 2
        txtPorcentajeCoaseguroMed.Text = dblPorcentajeCoaseguroMedico
    End If
End Sub

Private Sub txtRFCFactura_KeyPress(KeyAscii As Integer)
    If Not (KeyAscii >= 48 And KeyAscii <= 57) And Not (KeyAscii >= 65 And KeyAscii <= 90) And Not (KeyAscii >= 97 And KeyAscii <= 122) And Not (KeyAscii = 209 Or KeyAscii = 241 Or KeyAscii = 127 Or KeyAscii = 8 Or KeyAscii = 38) Then
        KeyAscii = 0
    Else
        KeyAscii = Asc(UCase(Chr(KeyAscii)))
        vgBlnCambioDatosFiscales = True
    End If
End Sub

Private Sub txtSumaAsegurada_LostFocus()
    txtSumaAsegurada.Text = FormatCurrency(Val(Format(txtSumaAsegurada.Text, "")), 2)
End Sub

Private Sub txtCopago_GotFocus()
    pSelTextBox txtCopago
End Sub

Private Sub txtCopago_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If optTipoCoaseguroMedico(0).Enabled Then
            If optTipoCoaseguroMedico(0).Value Then
                txtTotalCoaseguroMedico.SetFocus
            Else
                txtPorcentajeCoaseguroMed.SetFocus
            End If
        Else
            cmdGrabarControl.SetFocus
        End If
    End If
End Sub

Private Sub txtCopago_KeyPress(KeyAscii As Integer)
    If Not fblnFormatoCantidad(txtCopago, KeyAscii, 2) Then KeyAscii = 7
End Sub

Private Sub txtCopago_LostFocus()
    txtCopago.Text = FormatCurrency(Val(Format(txtCopago.Text, "")), 2)
End Sub

Private Sub txtDeducible_GotFocus()
    pSelTextBox txtDeducible
End Sub

Private Sub txtDeducible_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If optTipoCoaseguro(0).Enabled Then
            If optTipoCoaseguro(0).Value Then
                txtCoaseguro.SetFocus
            Else
                txtPorcentajeCoaseguro.SetFocus
            End If
        Else
            cmdGrabarControl.SetFocus
        End If
    End If
End Sub

Private Sub txtDeducible_KeyPress(KeyAscii As Integer)
    If Not fblnFormatoCantidad(txtDeducible, KeyAscii, 2) Then KeyAscii = 7
End Sub

Private Sub txtDeducible_LostFocus()
    txtDeducible.Text = FormatCurrency(Val(Format(txtDeducible.Text, "")), 2)
End Sub

Private Sub txtHonorarios_GotFocus()
    pSelTextBox txtHonorarios
End Sub

Private Sub txtHonorarios_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If dblHonorarios < Val(Format(txtHonorarios.Text, "")) And Not cmdBorraControl.Enabled Then
            'Los honorarios no pueden ser modificados por una cantidad menor
            MsgBox SIHOMsg(980), vbCritical + vbOKOnly, "Mensaje"
            txtHonorarios.Text = FormatCurrency(dblHonorarios, 2)
        Else
            If fblnCanFocus(txtSumaAsegurada) Then txtSumaAsegurada.SetFocus
        End If
    End If
End Sub

Private Sub txtHonorarios_KeyPress(KeyAscii As Integer)
    If Not fblnFormatoCantidad(txtHonorarios, KeyAscii, 2) Then KeyAscii = 7
End Sub

Private Sub txtPorcentajeCoaseguroAdicional_Change()
    Dim dblTotalSinCoaseguro As Double
    Dim dblPorcentaje As Double

    dblTotalSinCoaseguro = Val(Format(txtTotalSinCoaseguro.Text, ""))
    dblPorcentaje = Val(Format(txtPorcentajeCoaseguroAdicional.Text, ""))

    txtCoaseguroAdicional.Text = FormatCurrency(dblTotalSinCoaseguro * dblPorcentaje / 100, 2)
End Sub

Private Sub txtPorcentajeCoaseguroAdicional_GotFocus()
    pSelTextBox txtPorcentajeCoaseguroAdicional
End Sub

Private Sub txtPorcentajeCoaseguroAdicional_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If txtPorcentajeCopago.Enabled Then
            txtPorcentajeCopago.SetFocus
        ElseIf txtCopago.Enabled Then
            txtCopago.SetFocus
        End If
    End If
End Sub

Private Sub txtPorcentajeCoaseguroAdicional_KeyPress(KeyAscii As Integer)
    If Not IsNumeric(Chr(KeyAscii)) Then
        If KeyAscii = 46 And InStr(txtPorcentajeCoaseguroAdicional.Text, ".") > 0 Then
            KeyAscii = 7
        End If
    End If
End Sub

Private Sub txtPorcentajeCopago_Change()
    Dim dblTotalSinCoaseguroAdicional As Double
    Dim dblPorcentaje As Double

    dblTotalSinCoaseguroAdicional = Val(Format(txtTotalSinCoaseguroAdicional.Text, ""))
    dblPorcentaje = Val(Format(txtPorcentajeCopago.Text, ""))

    txtCopago.Text = FormatCurrency(dblTotalSinCoaseguroAdicional * dblPorcentaje / 100, 2)
End Sub

Private Sub txtPorcentajeCopago_GotFocus()
    pEnfocaTextBox txtPorcentajeCopago
End Sub

Private Sub txtPorcentajeCopago_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If txtPorcentajeCoaseguroMed.Enabled Then
            txtPorcentajeCoaseguroMed.SetFocus
        ElseIf txtCoaseguroMedico.Enabled Then
            txtCoaseguroMedico.SetFocus
        End If
    End If
End Sub

Private Sub txtPorcentajeCopago_KeyPress(KeyAscii As Integer)
    If Not IsNumeric(Chr(KeyAscii)) Then
        If KeyAscii = 46 And InStr(txtPorcentajeCopago.Text, ".") > 0 Then
            KeyAscii = 7
        End If
    End If
End Sub

Private Sub txtPorcentajeCoaseguro_Change()
    Dim dblTotalSinDeducible As Double
    Dim dblPorcentaje As Double
    Dim dblCoaseguro As Double
    Dim dblLimiteCO As Double
    
    dblTotalSinDeducible = Val(Format(txtTotalSinDeducible.Text, ""))
    dblPorcentaje = Val(Format(txtPorcentajeCoaseguro.Text, ""))
    
    dblCoaseguro = dblTotalSinDeducible * dblPorcentaje / 100
    dblLimiteCO = Val(Format(txtCantidadMaximaCO.Text, ""))
    
    If dblLimiteCO > 0 Then
        dblCoaseguro = IIf(dblCoaseguro > dblLimiteCO, dblLimiteCO, dblCoaseguro)
    End If

    txtCoaseguro.Text = FormatCurrency(dblCoaseguro, 2)
End Sub

Private Sub txtPorcentajeDeducible_Change()
    Dim dblSumaAsegurada As Double
    Dim dblPorcentaje As Double
    Dim dblDeducible As Double

    dblSumaAsegurada = Val(Format(txtSumaAsegurada.Text, ""))
    dblPorcentaje = Val(Format(txtPorcentajeDeducible.Text, ""))
    dblDeducible = dblSumaAsegurada * dblPorcentaje / 100
    
    If blnCalcularEnBaseACargos Then
        dblDeducible = Val(Format(txtTotalSinExcluidos.Text, "")) * dblPorcentaje / 100
    Else
        dblDeducible = dblSumaAsegurada * dblPorcentaje / 100
    End If
    
    txtDeducible.Text = FormatCurrency(dblDeducible, 2)
End Sub

Private Sub txtExcedenteSumaAsegurada_Change()
    Dim dblTotalCS As Double
    
    txtExcedenteNoFacturado.Text = FormatCurrency(Val(Format(txtExcedenteSumaAsegurada.Text, "")) - dblExcedenteFacturado, 2)

    dblTotalCS = Val(Format(txtExcedenteSumaAsegurada, "")) + IIf(chkFacturaDeducible.Value, Val(Format(txtDeducible.Text, "")), 0) + IIf(chkFacturaCoaseguro.Value, Val(Format(txtCoaseguro.Text, "")), 0) + IIf(chkFacturaCoaseguroAdicional.Value, Val(Format(txtCoaseguroAdicional.Text, "")), 0) + IIf(chkFacturaCopago.Value, Val(Format(txtCopago.Text, "")), 0) + IIf(chkFacturaCoaseguroMedico.Value, Val(Format(txtTotalCoaseguroMedico.Text, "")), 0)
    txtTotalDedCoaCop.Text = FormatCurrency(dblTotalCS, 2)
End Sub

Private Sub txtSumaAsegurada_Change()
    Dim dblSumaAsegurada As Double
    Dim dblTotalSinExcluidos As Double
    
    dblSumaAsegurada = Val(Format(txtSumaAsegurada.Text, ""))
    dblTotalSinExcluidos = Val(Format(txtTotalSinExcluidos.Text, ""))
    
    txtExcedenteSumaAsegurada.Text = FormatCurrency(0, 2)
    
    If dblSumaAsegurada < dblTotalSinExcluidos Then
        txtExcedenteSumaAsegurada.Text = FormatCurrency(dblTotalSinExcluidos - dblSumaAsegurada, 2)
        txtExcedenteNoFacturado.Text = FormatCurrency(Val(Format(txtExcedenteSumaAsegurada.Text, "")) - dblExcedenteFacturado, 2)
    End If
    
    'Limpiar deducible:
    If lblnHacerChange Then
        txtPorcentajeDeducible.Text = ""
        If Val(Format(txtDeducible.Text, "")) = 0 Then
            txtDeducible_Change
        Else
            txtDeducible.Text = FormatNumber(0, 2)
        End If
    Else
        txtDeducible_Change
    End If
End Sub

Private Sub txtDescuento_GotFocus()
    lblMensaje.Caption = "Presione <F10> para asignar este descuento a toda la cuenta"
    lblMensaje.Visible = True
    'pHabilitaExcluidoDescEspecial False
End Sub

Private Sub txtTelefonoFactura_KeyPress(KeyAscii As Integer)
    vgBlnCambioDatosFiscales = True
End Sub

Private Sub txtTotalCoaseguroMedico_Change()
    Dim dblExcedente As Double
    Dim dblDeducible As Double
    Dim dblCoaseguro As Double
    Dim dblCoaseguroAdicional As Double
    Dim dblCopago As Double
    Dim dblCoaseguroMedico As Double

    dblExcedente = Val(Format(txtExcedenteSumaAsegurada.Text, ""))
    dblDeducible = Val(Format(txtDeducible.Text, ""))
    dblCoaseguro = Val(Format(txtCoaseguro.Text, ""))
    dblCoaseguroAdicional = Val(Format(txtCoaseguroAdicional.Text, ""))
    dblCopago = Val(Format(txtCopago.Text, ""))
    dblCoaseguroMedico = Val(Format(txtTotalCoaseguroMedico.Text, ""))
    
    txtCoaseguroMNoFacturado.Text = FormatCurrency(Val(Format(txtTotalCoaseguroMedico.Text, "")) - dblCoaseguroMFacturado, 2)
    
    'Total deducible, coaseguro y copago:
    txtTotalDedCoaCop.Text = FormatCurrency(dblExcedente + dblDeducible + dblCoaseguro + dblCoaseguroAdicional + dblCopago + dblCoaseguroMedico, 2)
End Sub

Private Sub txtTotalNoFacturado_Change()
    txtTotalPagarControl.Text = FormatCurrency(Val(Format(txtTotalNoFacturado.Text, "")) - Val(Format(txtExcluidosPagos.Text, "")), 2)
End Sub

Private Sub txtTotalSinCoaseguro_Change()
    'Deshabilitar la captura de coaseguro adicional:
    optTipoCoaseguroAdicional(0).Enabled = IIf(blnCalcularEnBaseACargos Or IIf(intCoaseguroPorFactura = 1, True, False), False, Val(Format(txtTotalSinCoaseguro.Text, "")) > 0)
    optTipoCoaseguroAdicional(1).Enabled = Val(Format(txtTotalSinCoaseguro.Text, "")) > 0 And intCoaseguroPorFactura = 0
        
    If optTipoCoaseguroAdicional(0).Value Then
        txtCoaseguroAdicional.Enabled = Val(Format(txtTotalSinCoaseguro.Text, "")) > 0
    Else
        txtPorcentajeCoaseguroAdicional.Enabled = Val(Format(txtTotalSinCoaseguro.Text, "")) > 0 And intCoaseguroPorFactura = 0
        lblPorcentajeDeducible(3).Enabled = Val(Format(txtTotalSinCoaseguro.Text, "")) > 0
    End If
End Sub

Private Sub txtTotalSinCoaseguroAdicional_Change()
    'Deshabilitar la captura de copago:
    optTipoCopago(0).Enabled = IIf(blnCalcularEnBaseACargos Or IIf(intCoaseguroPorFactura = 1, True, False), False, Val(Format(txtTotalSinCoaseguroAdicional.Text, "")) > 0)
    optTipoCopago(1).Enabled = Val(Format(txtTotalSinCoaseguroAdicional.Text, "")) > 0 And intCoaseguroPorFactura = 0
    If optTipoCopago(0).Value Then
        txtCopago.Enabled = Val(Format(txtTotalSinCoaseguroAdicional.Text, "")) > 0
    Else
        txtPorcentajeCopago.Enabled = Val(Format(txtTotalSinCoaseguroAdicional.Text, "")) > 0 And intCoaseguroPorFactura = 0
        lblPorcentajeDeducible(4).Enabled = Val(Format(txtTotalSinCoaseguroAdicional.Text, "")) > 0
    End If
End Sub

Private Sub txtTotalSinDeducible_Change()
    'Deshabilitar la captura de coaseguro:
    optTipoCoaseguro(0).Enabled = IIf(blnCalcularEnBaseACargos, False, Val(Format(txtTotalSinDeducible.Text, "")) > 0)
    optTipoCoaseguro(1).Enabled = Val(Format(txtTotalSinDeducible.Text, "")) > 0 And intCoaseguroPorFactura = 0
    If optTipoCoaseguro(0).Value Then
        txtCoaseguro.Enabled = Val(Format(txtTotalSinDeducible.Text, "")) > 0 And intCoaseguroPorFactura = 0
    Else
        txtPorcentajeCoaseguro.Enabled = Val(Format(txtTotalSinDeducible.Text, "")) > 0 And intCoaseguroPorFactura = 0
        lblPorcentajeDeducible(2).Enabled = Val(Format(txtTotalSinDeducible.Text, "")) > 0
    End If
End Sub

Private Sub txtTotalSinExcluidos_Change()
    pConsultaControl
    
    If rsControlSeguro.State = 1 Then
        If rsControlSeguro.RecordCount <> 0 Then
            With rsControlSeguro
                'Si no se ha facturado ningún concepto de seguro
                If ((dblDeducibleFacturado <= 0 And !BITFACTURADEDUCIBLE = 1) Or (IsNull(!CHRFOLIORECIBODEDUCIBLE) And !BITFACTURADEDUCIBLE = 0)) And _
                    ((dblCoaseguroFacturado <= 0 And !BITFACTURACOASEGURO = 1) Or (IsNull(!CHRFOLIORECIBOCOASEGURO) And !BITFACTURACOASEGURO = 0)) And _
                    ((dblCoaseguroMFacturado <= 0 And !BITFACTURACOASEGUROMEDICO = 1) Or (!BITFACTURACOASEGUROMEDICO = 0)) And _
                    ((dblCoaseguroAFacturado <= 0 And !bitFacturaCoaseguroAdicional = 1) Or (IsNull(!CHRFOLIORECIBOCOASEGUROADICION) And !bitFacturaCoaseguroAdicional = 0)) And _
                    ((dblCopagoFacturado <= 0 And !BITFACTURACOPAGO = 1) Or (IsNull(!CHRFOLIORECIBOCOPAGO) And !BITFACTURACOPAGO = 0)) Then
                    
                    txtDeducible.Text = FormatCurrency(0, 2)
                    txtCoaseguro.Text = FormatCurrency(0, 2)
                    txtCoaseguroAdicional.Text = FormatCurrency(0, 2)
                    txtCopago.Text = FormatCurrency(0, 2)
                    txtTotalCoaseguroMedico.Text = FormatCurrency(0, 2)
                    
                    txtPorcentajeDeducible.Text = ""
                    txtPorcentajeCoaseguro.Text = ""
                    txtPorcentajeCoaseguroAdicional.Text = ""
                    txtPorcentajeCopago.Text = ""
                    txtPorcentajeCoaseguroMed.Text = ""
                    txtHonorariosAFacturar.Text = ""
                    txtCoaseguroMedico.Text = ""
                    
                    If !MNYSUMAASEGURADA > 0 Then
                        txtSumaAsegurada.Text = ""
                        txtSumaAsegurada.Text = FormatCurrency(!MNYSUMAASEGURADA, 2)
                    End If
                Else
                'Si ya se ha facturado algún concepto, los que son cantidades se quedan como estaban y los que son en porcentaje se recalculan
                    
                    txtSumaAsegurada.Text = ""
                    txtSumaAsegurada.Text = FormatCurrency(!MNYSUMAASEGURADA, 2)
                    
                    'Deducible
                    'Si se factura y se registró ya sea por cantidad o porcentaje
                    If !BITFACTURADEDUCIBLE And !MNYCANTIDADDEDUCIBLE > 0 Then
                         'Cantidad
                         If optTipoDeducible(0).Value Then
                             txtDeducible.Text = FormatCurrency(!MNYCANTIDADDEDUCIBLE, 2)
                         Else
                         'Porcentaje
                             txtPorcentajeDeducible.Text = FormatNumber(!NUMPORCENTAJEDEDUCIBLE, 2)
                         End If
                    Else
                        txtPorcentajeDeducible.Text = ""
                        txtDeducible.Text = FormatCurrency(0, 2)
                    End If
                    txtDeducibleNoFacturado.Text = FormatCurrency(IIf(chkFacturaDeducible.Value = 1, Val(Format(txtDeducible.Text, "")) - dblDeducibleFacturado, 0), 2)
                    
                    'Coaseguro
                    If !BITFACTURACOASEGURO And !MNYCANTIDADCOASEGURO <> 0 Then
                        If optTipoCoaseguro(0).Value Then
                            txtCoaseguro.Text = FormatCurrency(!MNYCANTIDADCOASEGURO, 2)
                        Else
                            txtPorcentajeCoaseguro.Text = FormatNumber(!NUMPORCENTAJECOASEGURO, 2)
                        End If
                        txtCantidadMaximaCO.Text = IIf(chkFacturaCoaseguro.Value = 1, FormatCurrency(0, 2), FormatCurrency(IIf(IsNull(!mnyCantidadMaximaCoaseguro), 0, !mnyCantidadMaximaCoaseguro), 2))
                    Else
                        txtPorcentajeCoaseguro.Text = ""
                        txtCoaseguro.Text = FormatCurrency(0, 2)
                        txtCantidadMaximaCO.Text = FormatCurrency(0, 2)
                    End If
                    txtCoaseguroNoFacturado.Text = FormatCurrency(IIf(chkFacturaCoaseguro.Value = 1, Val(Format(txtCoaseguro.Text, "")) - dblCoaseguroFacturado, 0), 2)
                                                        
                    'Coaseguro Adicional
                    If !bitFacturaCoaseguroAdicional And !MNYCANTIDADCOASEGUROADICIONAL <> 0 Then
                        If optTipoCoaseguroAdicional(0).Value Then
                            txtCoaseguroAdicional.Text = FormatCurrency(!MNYCANTIDADCOASEGUROADICIONAL, 2)
                        Else
                            txtPorcentajeCoaseguroAdicional.Text = FormatNumber(!NUMPORCENTAJECOASEGUROADICIONA, 2)
                        End If
                    Else
                        txtPorcentajeCoaseguroAdicional.Text = ""
                        txtCoaseguroAdicional.Text = FormatCurrency(0, 2)
                    End If
                    txtCoaseguroANoFacturado.Text = FormatCurrency(IIf(chkFacturaCoaseguroAdicional.Value = 1, Val(Format(txtCoaseguroAdicional.Text, "")) - dblCoaseguroAFacturado, 0), 2)
                   
                   'Copago
                   If !BITFACTURACOPAGO And !MNYCANTIDADCOPAGO <> 0 Then
                        If optTipoCopago(0).Value Then
                            txtCopago.Text = FormatCurrency(!MNYCANTIDADCOPAGO, 2)
                        Else
                            txtPorcentajeCopago.Text = FormatNumber(!NUMPORCENTAJECOPAGO, 2)
                        End If
                    Else
                        txtPorcentajeCopago.Text = ""
                        txtCopago.Text = FormatCurrency(0, 2)
                    End If
                    txtCopagoNoFacturado.Text = FormatCurrency(IIf(chkFacturaCopago.Value = 1, Val(Format(txtCopago.Text, "")) - dblCopagoFacturado, 0), 2)
                   
                    pHabilitaConceptosSeguro False
                End If
            End With
        Else
            txtDeducible.Text = FormatCurrency(0, 2)
            txtCoaseguro.Text = FormatCurrency(0, 2)
            txtCantidadMaximaCO.Text = FormatCurrency(0, 2)
            txtCoaseguroAdicional.Text = FormatCurrency(0, 2)
            txtCopago.Text = FormatCurrency(0, 2)
            txtTotalCoaseguroMedico.Text = FormatCurrency(0, 2)
            
            txtPorcentajeDeducible.Text = ""
            txtPorcentajeCoaseguro.Text = ""
            txtPorcentajeCoaseguroAdicional.Text = ""
            txtPorcentajeCopago.Text = ""
            txtPorcentajeCoaseguroMed.Text = ""
            txtHonorariosAFacturar.Text = ""
            txtCoaseguroMedico.Text = ""
            
            txtSumaAsegurada.Text = txtTotalSinExcluidos.Text
        End If
    End If
End Sub

Private Sub txtCargosHospital_Change()
    'Total cargos:
    txtTotalCargos.Text = FormatCurrency(Val(Format(txtHonorarios.Text, "")) + Val(Format(txtCargosHospital.Text, "")), 2)
End Sub

Private Sub txtCoaseguro_Change()
    'Total sin coaseguro:
    txtTotalSinCoaseguro.Text = FormatCurrency(Val(Format(txtTotalSinDeducible.Text, "")) - Val(Format(txtCoaseguro.Text, "")), 2)
    txtCoaseguroNoFacturado.Text = FormatCurrency(IIf(chkFacturaCoaseguro.Value = 1, Val(Format(txtCoaseguro.Text, "")) - dblCoaseguroFacturado, 0), 2)
    
    'Limpiar coaseguro adicional:
    If lblnHacerChange Then
        txtPorcentajeCoaseguroAdicional.Text = ""
        If Val(Format(txtCoaseguroAdicional.Text, "")) = 0 Then
            txtCoaseguroAdicional_Change
        Else
            txtCoaseguroAdicional.Text = FormatNumber(0, 2)
        End If
    Else
        txtCoaseguroAdicional_Change
    End If
End Sub

Private Sub txtDeducible_Change()
    Dim dblExcedente As Double
    Dim dblCargosCubre As Double
    Dim dblDeducible As Double
    
    dblExcedente = Val(Format(txtExcedenteSumaAsegurada.Text, ""))
    dblDeducible = Val(Format(txtDeducible.Text, ""))
    
    If dblExcedente = 0 Then
        dblCargosCubre = Val(Format(txtTotalSinExcluidos.Text, ""))
    Else
        dblCargosCubre = Val(Format(txtSumaAsegurada.Text, ""))
    End If
        
    'Total sin deducible:
    txtTotalSinDeducible.Text = FormatCurrency(dblCargosCubre - dblDeducible, 2)
    
    txtDeducibleNoFacturado.Text = FormatCurrency(IIf(chkFacturaDeducible.Value = 1, Val(Format(txtDeducible.Text, "")) - dblDeducibleFacturado, 0), 2)
    
    'Limpiar coaseguro:
    If lblnHacerChange And intCoaseguroPorFactura = 0 Then
        txtPorcentajeCoaseguro.Text = ""
        If Val(Format(txtCoaseguro.Text, "")) = 0 Then
            txtCoaseguro_Change
        Else
            txtCoaseguro.Text = FormatNumber(0, 2)
        End If
    Else
        txtCoaseguro_Change
    End If
End Sub

Private Sub txtCopago_Change()
    Dim dblExcedente As Double
    Dim dblDeducible As Double
    Dim dblCoaseguro As Double
    Dim dblCoaseguroAdicional As Double
    Dim dblCopago As Double
    Dim dblCoaseguroMedico As Double

    dblExcedente = Val(Format(txtExcedenteSumaAsegurada.Text, ""))
    dblDeducible = Val(Format(txtDeducible.Text, ""))
    dblCoaseguro = Val(Format(txtCoaseguro.Text, ""))
    dblCoaseguroAdicional = Val(Format(txtCoaseguroAdicional.Text, ""))
    dblCopago = Val(Format(txtCopago.Text, ""))
    dblCoaseguroMedico = Val(Format(txtTotalCoaseguroMedico.Text, ""))
    
    txtCopagoNoFacturado.Text = FormatCurrency(IIf(chkFacturaCopago.Value = 1, Val(Format(txtCopago.Text, "")) - dblCopagoFacturado, 0), 2)
    
    'Total deducible, coaseguro y copago:
    txtTotalDedCoaCop.Text = FormatCurrency(dblExcedente + dblDeducible + dblCoaseguro + dblCoaseguroAdicional + dblCopago + dblCoaseguroMedico, 2)
End Sub

Private Sub txtHonorarios_Change()
    If Not blnCalcularEnBaseACargos Then
        'Total cargos:
        txtTotalCargos.Text = FormatCurrency(Val(Format(txtHonorarios.Text, "")) + Val(Format(txtCargosHospital.Text, "")), 2)
    End If
End Sub

Private Sub txtTotalCargos_Change()
    'Total para cálculo:
    txtTotalSinExcluidos.Text = FormatCurrency(Val(Format(txtTotalCargos.Text, "")) - Val(Format(txtCargosExcluidos.Text, "")), 2)
End Sub

Private Sub txtFPBuscaCliente_KeyUp(KeyCode As Integer, Shift As Integer)
    Dim vlstrSentencia As String
    Dim rs As New ADODB.Recordset
    
    lstFPBuscaCliente.Clear
    If Trim(txtFPBuscaCliente.Text) = "" Then Exit Sub 'Para cuando está vacio
    lstFPBuscaCliente.Visible = False
    If optTipoCliente(0).Value Then Exit Sub  'Para cuando sea Mismo
    
    If optTipoCliente(1).Value Then
    'Convenio
        vlstrSentencia = "Select ccEmpresa.vchDescripcion Cliente, ccEmpresa.intCveEmpresa Clave " & _
                        " From ccCliente " & _
                        " Inner Join NoDepartamento On CcCliente.smiCveDepartamento = NoDepartamento.smiCveDepartamento And NoDepartamento.tnyClaveEmpresa = " & CStr(vgintClaveEmpresaContable) & _
                        " left outer join ccEmpresa ON ccCliente.intNumReferencia = ccEmpresa.intCveEmpresa And CcEmpresa.bitActivo = 1 " & _
                        " where ccCliente.chrTipoCliente = 'CO' " & _
                        " and ccEmpresa.vchDescripcion like '" & Trim(txtFPBuscaCliente.Text) & "%' " & _
                        " and CcCliente.bitActivo = 1 AND ccEmpresa.intCveEmpresa is not null"
    
    ElseIf optTipoCliente(2).Value Then
    'Empleado
        vlstrSentencia = "Select rtrim(noEmpleado.vchApellidoPaterno) || ' ' || rtrim(noEmpleado.vchApellidoMaterno) || ' ' || rtrim(noEmpleado.vchNombre) Cliente, noEmpleado.intCveEmpleado Clave  " & _
                        " From ccCliente " & _
                        " Inner Join NoDepartamento On CcCliente.smiCveDepartamento = NoDepartamento.smiCveDepartamento And NoDepartamento.tnyClaveEmpresa = " & CStr(vgintClaveEmpresaContable) & _
                        " left outer join noEmpleado ON ccCliente.intNumReferencia = noEmpleado.intCveEmpleado And NoEmpleado.bitActivo = 1 " & _
                        " where ccCliente.chrTipoCliente = 'EM' " & _
                        " and rtrim(noEmpleado.vchApellidoPaterno) || ' ' || rtrim(noEmpleado.vchApellidoMaterno) || ' ' || rtrim(noEmpleado.vchNombre) like '" & Trim(txtFPBuscaCliente.Text) & "%' " & _
                        " and CcCliente.bitActivo = 1 and noEmpleado.intCveEmpleado is not null"
    
    ElseIf optTipoCliente(3).Value Then
    'Médico
        vlstrSentencia = "Select rtrim(Homedico.vchApellidoPaterno) || ' ' || rtrim(Homedico.vchApellidoMaterno) || ' ' || rtrim(Homedico.vchNombre) Cliente, HoMedico.intCveMedico Clave  " & _
                        " From ccCliente " & _
                        " Inner Join NoDepartamento On CcCliente.smiCveDepartamento = NoDepartamento.smiCveDepartamento And NoDepartamento.tnyClaveEmpresa = " & CStr(vgintClaveEmpresaContable) & _
                        " left outer join HoMedico ON ccCliente.intNumReferencia = Homedico.intCveMedico And HoMedico.bitEstaActivo = 1 " & _
                        " where ccCliente.chrTipoCliente = 'ME' " & _
                        " and rtrim(Homedico.vchApellidoPaterno) || ' ' || rtrim(Homedico.vchApellidoMaterno) || ' ' || rtrim(Homedico.vchNombre) like '" & Trim(txtFPBuscaCliente.Text) & "%' " & _
                        " and CcCliente.bitActivo = 1 and HoMedico.intCveMedico is not null"
    
    ElseIf optTipoCliente(4).Value Then
    'Paciente Interno
        vlstrSentencia = "select rtrim(adPaciente.vchApellidoPaterno) || ' ' || rtrim(adPaciente.vchApellidoMaterno) || ' ' || rtrim(adPaciente.vchNombre) Cliente, AdAdmision.numnumcuenta Clave  " & _
                        " From ccCliente " & _
                        " Inner Join NoDepartamento On CcCliente.smiCveDepartamento = NoDepartamento.smiCveDepartamento And NoDepartamento.tnyClaveEmpresa = " & CStr(vgintClaveEmpresaContable) & _
                        " left outer join adAdmision ON ccCliente.intNumReferencia = adAdmision.numNumCuenta " & _
                        " left outer join adPaciente ON AdAdmision.numCvePaciente = adPaciente.numCvePaciente " & _
                        " where ccCliente.chrTipoCliente = 'PI' " & _
                        " and rtrim(adPaciente.vchApellidoPaterno) || ' ' || rtrim(adPaciente.vchApellidoMaterno) || ' ' || rtrim(adPaciente.vchNombre) like '" & Trim(txtFPBuscaCliente.Text) & "%' " & _
                        " and CcCliente.bitActivo = 1 and AdAdmision.numnumcuenta is not null"
    
    ElseIf optTipoCliente(5).Value Then
    'Paciente Externo
        vlstrSentencia = "Select rtrim(Externo.chrApePaterno) || ' ' || rtrim(Externo.chrApeMaterno) || ' ' || rtrim(Externo.chrNombre) Cliente, RegistroExterno.intnumcuenta Clave  " & _
                        " From ccCliente " & _
                        " Inner Join NoDepartamento On CcCliente.smiCveDepartamento = NoDepartamento.smiCveDepartamento And NoDepartamento.tnyClaveEmpresa = " & CStr(vgintClaveEmpresaContable) & _
                        " left outer join RegistroExterno ON ccCliente.intNumReferencia = RegistroExterno.intNumCuenta " & _
                        " left outer join Externo ON RegistroExterno.intNumPaciente = Externo.intNumPaciente " & _
                        " where ccCliente.chrTipoCliente = 'PE' " & _
                        " and rtrim(Externo.chrApePaterno) || ' ' || rtrim(Externo.chrApeMaterno) || ' ' || rtrim(Externo.chrNombre) like '" & Trim(txtFPBuscaCliente.Text) & "%' " & _
                        " and CcCliente.bitActivo = 1 and RegistroExterno.intnumcuenta is not null"
    End If
    
    vlstrSentencia = vlstrSentencia + "  Order by Cliente"
    Set rs = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly, 50)
    With lstFPBuscaCliente
        Do While Not rs.EOF
            .AddItem rs!CLIENTE
            .ItemData(.newIndex) = rs!clave
            rs.MoveNext
        Loop
        .Enabled = .ListCount > 0
        If .ListCount > 0 Then
            .ListIndex = 0
        End If
    End With
    rs.Close
    lstFPBuscaCliente.Visible = True
End Sub

Private Sub txtMovimientoPaciente_GotFocus()
    Dim vllngFoliosRestantes As Long
    Dim vlstrFolioDocumento As String
    Dim strFolio As String
    Dim strSerie As String
    Dim strNumeroAprobacion As String
    Dim strAnoAprobacion As String
    
    vllngFoliosRestantes = 1
    vlstrFolioDocumento = ""
    pCargaArreglo alstrParametrosSalida, vllngFoliosRestantes & "|" & ADODB.adBSTR & "|" & strFolio & "|" & ADODB.adBSTR & "|" & strSerie & "|" & ADODB.adBSTR & "|" & strNumeroAprobacion & "|" & ADODB.adBSTR & "|" & strAnoAprobacion & "|" & ADODB.adBSTR
    frsEjecuta_SP "FA|" & vgintNumeroDepartamento & "|0", "sp_gnFolios", , , alstrParametrosSalida
    pObtieneValores alstrParametrosSalida, vllngFoliosRestantes, strFolio, strSerie, strNumeroAprobacion, strAnoAprobacion
    If vllngFoliosRestantes > 0 Then
        MsgBox "Faltan " & Trim(str(vllngFoliosRestantes)) + " facturas y será necesario aumentar folios!", vbOKOnly + vbInformation, "Mensaje"
    End If
    '|  Si la serie está vacía el SP regresa un espacio en blanco por eso se debe de hacer el TRIM
    lblFolioFactura.Caption = Trim(strSerie) & Trim(strFolio)
    If Trim(lblFolioFactura.Caption) = "0" Then
        'No existen folios activos para este documento.
        MsgBox SIHOMsg(291), vbCritical + vbOKOnly, "Mensaje"
        Unload Me
    End If
End Sub

Private Sub txtMovimientoPaciente_KeyPress(KeyAscii As Integer)
    If Not IsNumeric(Chr(KeyAscii)) And Not KeyAscii = vbKeyBack And Not KeyAscii = vbKeyReturn Then
        Select Case UCase(Chr(KeyAscii))
            Case "E"
                If optGrupoCuenta(1).Value Then OptTipoPaciente(1).Value = True
            Case "I"
                If optGrupoCuenta(1).Value Then OptTipoPaciente(0).Value = True
            Case "G"
                optGrupoCuenta(0).Value = True
            Case "C"
                optGrupoCuenta(1).Value = True
        End Select
        KeyAscii = 7
    End If
End Sub

Private Sub txtMovimientoPaciente_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim rs As New ADODB.Recordset
    Dim rsAddenda As New ADODB.Recordset
    Dim rsPaquete As New ADODB.Recordset
    Dim rsPaqueteAddenda As New ADODB.Recordset
    Dim rsDatosFiscales As New ADODB.Recordset
    Dim vlstrSentencia As String
    Dim vldblValidoDolares As String
    Dim rsCuentas As New ADODB.Recordset
    Dim blnValidaCorte As Boolean
    Dim vllngMensaje As Long
    Dim rsFechaCuenta As New ADODB.Recordset
    Dim strSentencia As String
    Dim strSql As String
    Dim vlstrsql As String
    Dim rsAux As New ADODB.Recordset
    Dim rsCatCargos As ADODB.Recordset
    Dim vlblnManejaCatalogoCargos As Boolean
    Dim rsParametros As New ADODB.Recordset
    Dim vlLngCont As Long
    Dim rsInterfazWS As New ADODB.Recordset
    Dim rsLogInterfaz As New ADODB.Recordset
    Dim rsGrupoValidaReqYAuto As New ADODB.Recordset    'Recorset para mostrar mensaje de requisiciones pendientes o cargos automaticos pendientes cuando se trate de un grupo de cuenta
    Dim vlblnReqPendiente As Boolean                    'Variable para identificar si hay requisiciones pendientes
    Dim vlblnCargoAutoPendiente As Boolean              'Variable para identificar si hay cargos automaticos pendientes
    Dim rsCheckup As New ADODB.Recordset
    Dim blnEsAseguradora As Boolean                     '18084
    Dim i As Integer
    Dim ordNombre As String
    Dim ordAps As String
    Dim nombreArr() As String
    'Caso 20262
    Dim rsAuditoriaCargos As New ADODB.Recordset
    Dim vlStrAuditoriaCargos As String
    Dim vlblnAuditoriacargos As Boolean
     ' caso 20239
    Dim bnlespemex As Boolean
    Dim biactivaPEMEX As Boolean
    Dim rsespemex As New ADODB.Recordset
    Dim rsEmpresa As New ADODB.Recordset
    
                           
    vlblnEjecutoActivate = False
    vlblnFacturado = False
    vllngPersonaGrabaDescuento = 0
    cboCartaAutorizacion.Clear
    If KeyCode = vbKeyReturn Then
        lblnCanceloFacturaPaciente = False
        lblMensajeReqAut(36).Visible = False
    
        '-------------------------------------------------
        lblnCambiaNombreCargos = False ' inicializa variable caso 6614
        '-----------------------------------------------------
        'Carga la clave de la empresa PCE
        pCargaEmpresaPCE
          
        'Revisa si se utiliza socios
        vlUsaSocios = fblRevisaUsoSocios()
    
        'Se obtiene el tipo de paciente configurado como socio
        If vlUsaSocios = True Then
            vgLngTipoPacienteSocio = flngTipoPacienteSocio()
        End If
    
        blnExisteExcedente = False
        vlblncontrolaseguradora = False
        chkFacturaSustitutaFP(1) = False
        
        cmdLiquidaCuenta.Enabled = lintConceptoLiquidacion <> -1 And Not optGrupoCuenta(0).Value
        
        vgblnPrimeraVez = True
        If fdblTipoCambio(fdtmServerFecha, "V") = 0 Then
            MsgBox SIHOMsg(231), vbCritical, "Mensaje"
            Exit Sub
        End If
        
        If RTrim(txtMovimientoPaciente.Text) = "" Then
            If optGrupoCuenta(0).Value Then
                frmBusquedaGrupos.vgblnFormaBusqueda = True
                Load frmBusquedaGrupos
                frmBusquedaGrupos.Show vbModal
                'Evalúa si escogió un grupo
                If frmBusquedaGrupos.vgintCveGrupo <> -1 Then
                    txtMovimientoPaciente.Text = frmBusquedaGrupos.vgintCveGrupo
                    txtMovimientoPaciente_KeyDown 13, 1
                End If
                Unload frmBusquedaGrupos
            Else
                With FrmBusquedaPacientes
                    If OptTipoPaciente(1).Value Then 'Externos
                        .vgstrTipoPaciente = "E"

                        .Caption = .Caption & " externos"
                        .vgblnPideClave = False
                        .vgIntMaxRecords = 100
                        .vgstrMovCve = "M"
                        .optSoloActivos.Enabled = True
                        .optSinFacturar.Enabled = True
                        .optTodos.Enabled = True
                        .optSinFacturar.Value = True
                        .vgStrOtrosCampos = ", SiTipoIngreso.vchNombre as Tipo, TO_CHAR(ExPacienteIngreso.dtmFechaHoraIngreso, 'dd/mm/yyyy hh:mi:ss am') as ""Fecha"", isnull(CCempresa.vchDescripcion,adTipoPaciente.vchDescripcion) as Empresa "
                        .vgstrTamanoCampo = "800,3400,1500,1750,4100"
                    Else
                        .vgstrTipoPaciente = "I"  'Internos

                        .vgblnPideClave = False
                        .Caption = .Caption & " internos"
                        .vgIntMaxRecords = 100
                        .vgstrMovCve = "M"
                        .optSinFacturar.Value = True
                        .optSinFacturar.Enabled = True
                        .optSoloActivos.Enabled = True
                        .optTodos.Enabled = True
                        .vgStrOtrosCampos = ", SiTipoIngreso.vchNombre as Tipo, TO_CHAR(ExPacienteIngreso.dtmFechaHoraIngreso, 'dd/mm/yyyy hh:mi:ss am') as ""Fecha ing."", TO_CHAR(ExPacienteIngreso.dtmFechaHoraEgreso, 'dd/mm/yyyy hh:mi:ss am') as ""Fecha egr."", isnull(CCempresa.vchDescripcion,adTipoPaciente.vchDescripcion) as Empresa "
                        .vgstrTamanoCampo = "800,3400,2200,1050,1050,4100"
                    End If
                    
                    txtMovimientoPaciente.Text = .flngRegresaPaciente()
                                        
                    If txtMovimientoPaciente <> -1 Then
                        txtMovimientoPaciente_KeyDown vbKeyReturn, 0
                    Else
                        txtMovimientoPaciente.Text = ""
                    End If
                End With
            End If
        Else
            
            'Se inicializanlas variables relacionadas con la addenda
            vglngCveAddenda = 0
            vglngCveInterfazWS = 0
            vgstrProveedorAXA = ""
            vgstrContratoAXA = ""
            vgstrFolioReceta = ""
            vglngNumPacienteXML = 0

            If optGrupoCuenta(0).Value Then 'Grupo
                Set rs = frsEjecuta_SP(txtMovimientoPaciente.Text, "SP_PVSELGRUPOFACTURA")
                Set rsPostergado = frsRegresaRs("SELECT BITPOSTERGADA FROM EXPACIENTEINGRESO WHERE BITPOSTERGADA = 999999", adLockOptimistic, adOpenDynamic)
            Else
                If OptTipoPaciente(0).Value Then 'Internos
                    vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & str(vgintClaveEmpresaContable)
                    Set rs = frsEjecuta_SP(vgstrParametrosSP, "SP_PVSELINTERNOFACTURA")
                    Set rsPostergado = frsRegresaRs("SELECT BITPOSTERGADA FROM EXPACIENTEINGRESO WHERE INTNUMCUENTA = " & txtMovimientoPaciente.Text, adLockOptimistic, adOpenDynamic)
                Else  'Externos
                    vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & str(vgintClaveEmpresaContable)
                    Set rs = frsEjecuta_SP(vgstrParametrosSP, "SP_PVSELEXTERNOFACTURA")
                    Set rsPostergado = frsRegresaRs("SELECT BITPOSTERGADA FROM EXPACIENTEINGRESO WHERE INTNUMCUENTA = " & txtMovimientoPaciente.Text, adLockOptimistic, adOpenDynamic)
                End If
            End If

            cmdSepararCargosFarmacia.Visible = True
            cmdSepararCargosFarmacia.Enabled = False

            If rs.RecordCount <> 0 Then
                pCargaVariables str(vgintClaveEmpresaContable), txtMovimientoPaciente.Text, IIf(OptTipoPaciente(0).Value, "I", "E"), IIf(IsNull(rs!cveEmpresa), 0, rs!cveEmpresa)
                
                If optGrupoCuenta(1).Value Then
                    'Determina si la cuenta se encuentra bloqueada por trabajo social
                    vgblnCuentaBloqueada = IIf(IsNull(rs!CuentaBloqueada), 0, rs!CuentaBloqueada)
                    
                    lblEstadoPaciente.Caption = ""
                    If OptTipoPaciente(0).Value Then
                        'Muestra si el paciente esta dado de alta voluntaria o médica o si aún permanece internado
                        lblEstadoPaciente.Caption = rs!EstadoPaciente
                    End If
                End If
                
                'Si es un grupo no debe poder seleccionar/Deseleccionar ningun cargo
                If optGrupoCuenta(0).Value Then
                    cmdSelQuita(0).Enabled = False
                    cmdSelQuita(1).Enabled = False
                    cmdSelQuita(2).Enabled = False
                    cmdSelecciona.Enabled = False
                Else
                    cmdSelQuita(0).Enabled = True
                    cmdSelQuita(1).Enabled = True
                    cmdSelQuita(2).Enabled = True
                    cmdSelecciona.Enabled = True
                End If
                
                'Verifica si se usa un catálogo especial y si todos los cargos estan dentro de él (PEMEX, PCE)
                vlblnManejaCatalogoCargos = fblnManejaCatalogoCargos(CLng(IIf(IsNull(rs!cveEmpresa), 0, rs!cveEmpresa)))
                If vlblnManejaCatalogoCargos Then
                    vllngEmpresaManejaCargos = CLng(IIf(IsNull(rs!cveEmpresa), 0, rs!cveEmpresa))
                    lblnCambiaNombreCargos = vlblnManejaCatalogoCargos
                    
                    If (vllngEmpresaManejaCargos <> llngCveEmpresaPCE And llngCveEmpresaPCE <> 0) _
                    Or (vllngEmpresaManejaCargos <> 0 And llngCveEmpresaPCE = 0) Then
                    'Si la empresa no es PCE, los cargos que no estén en el catálogo de la empresa se mostrarán con la descripción y concepto de facturación del hospital
                        If fblnCargosFueraCatalogo(CLng(txtMovimientoPaciente.Text), IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")), CLng(IIf(IsNull(rs!cveEmpresa), 0, rs!cveEmpresa))) Then
                            pCancelar
                            pEnfocaTextBox txtMovimientoPaciente
                            Exit Sub
                        End If
                     
                     ElseIf vllngEmpresaManejaCargos = llngCveEmpresaPCE Then
                    '|  PCE se valida de una forma especial (Esto fue validado por el cliente)
                        
                        '| Valida que todos los cargos de la cuenta esten configurados
                        If Not fblnInfoCompletaPCE Then
                            'La cuenta del paciente tiene cargos que no están registrados en el catálogo de Pensiones.
                            '¿Desea obtener un listado con los cargos?
                            If MsgBox(SIHOMsg(942), vbQuestion + vbYesNo, "Mensaje") = vbYes Then pImprimirInfoFaltantePCE
                            pCancelar
                            pEnfocaTextBox txtMovimientoPaciente
                            Exit Sub
                        End If
                        'Valida que esté configurada la cuenta para gastos no deducibles
                        If lngCuentaGastosNoDeducibles = 0 Then
                            '¡No se ha registrado la cuenta para gastos no deducibles!
                            MsgBox SIHOMsg(1112), vbCritical, "Mensaje"
                            pCancelar
                            pEnfocaTextBox txtMovimientoPaciente
                            Exit Sub
                        End If
                    End If
                End If
                
                vldblRetencionServicios = IIf(IsNull(rs!PorcentajeServicios), 0, rs!PorcentajeServicios)
                
                If (rs!Facturado = 0 Or rs!Facturado = False) Or ((rs!Facturado = 1 Or rs!Facturado = True) And IIf(rsPostergado.RecordCount > 0, rsPostergado!BITPOSTERGADA, 0)) = 1 Then
                    blnValidaCorte = True
                    If optGrupoCuenta(0).Value Then
                        vlstrSentencia = "Select COUNT (*) Co " & _
                                         "  From ( Select intmovpaciente " & _
                                         "              , chrtipopaciente " & _
                                         "           From PVDETALLEFACTURACONSOLID " & _
                                         "          Where PVDETALLEFACTURACONSOLID.intcvegrupo = " & txtMovimientoPaciente.Text & " ) ctas " & _
                                         "       Inner Join PVPAGO On ( ctas.intmovpaciente = PVPAGO.intmovpaciente " & _
                                         "                              And ctas.chrtipopaciente = PVPAGO.chrtipopaciente) " & _
                                         " Where PVPAGO.bitcancelado = 0"
                        Set rsCuentas = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
                        If rsCuentas!CO > 0 Then blnValidaCorte = False
                    End If
                    '|  Valida si el corte actual es correcto
                    If blnValidaCorte Then
                        vllngMensaje = flngCorteValido(vgintNumeroDepartamento, vglngNumeroEmpleado, "P")
                    
                        If vllngMensaje <> 0 Then
                            'Cierre el corte actual antes de registrar este documento.
                            'No existe un corte abierto
                            MsgBox SIHOMsg(str(vllngMensaje)), vbOKOnly + vbInformation, "Mensaje"
                            Unload Me
                            Exit Sub
                        End If
                    End If
                    
                    pLimpiaGrid MSFGFacturasParciales
                    cmdEliminaDonativo.Enabled = False
                    Set vgcolFacturasParciales = Nothing
                    Set vgcolFacturasParciales = New Collection
                    vgdblTotalPagarPesosPaciente = 0    'Monto total factura en pesos del paciente
                    frmFacturacion.Refresh
                    
                    'Datos generales del paciente:
                    lblPaciente.Caption = " " + rs!Nombre
                    vgintEmpresa = IIf(IsNull(rs!cveEmpresa), 0, rs!cveEmpresa)
                    vlstrRFCEmpresa = IIf(IsNull(rs!RFC), "", rs!RFC)
                    lblEmpresa.Caption = " " + IIf(rs!bitUtilizaConvenio = 1, IIf(IsNull(rs!empresa), "", rs!empresa), rs!tipo)
                    Label57(0).Caption = IIf(rs!bitUtilizaConvenio = 1, "Empresa", "Tipo de paciente")
                    vgintTipoPaciente = rs!cveTipoPaciente
                    vgintCveExtra = IIf(IsNull(rs!intCveExtra), 0, rs!intCveExtra) 'Esta puede ser el numero de empleado o del médico
                    lblDireccion.Caption = IIf(IsNull(rs!calle), "", rs!calle)
                    lblNumExterior.Caption = IIf(IsNull(rs!NumeroExterior), "", rs!NumeroExterior)
                    lblNumInterior.Caption = IIf(IsNull(rs!NumeroInterior), "", rs!NumeroInterior)
                    lblColonia.Caption = IIf(IsNull(rs!Colonia), "", rs!Colonia)
                    If Not IsNull(rs!IdCiudad) Then cboCiudad.ListIndex = flngLocalizaCbo(cboCiudad, str(rs!IdCiudad))
                    lblTelefono.Caption = IIf(IsNull(rs!Telefono), "", rs!Telefono)
                    lblFechaIngreso.Caption = IIf(IsNull(rs!FechaIngreso), "", rs!FechaIngreso)
                    lblMedico.Caption = IIf(IsNull(rs!Medico), "", rs!Medico)
                    lblDiagnostico.Caption = IIf(IsNull(rs!Diagnostico), "", rs!Diagnostico)
                    lblCodigoPostal.Caption = IIf(IsNull(rs!CP), "", rs!CP)
                    gintConvenio = IIf((rs!bitUtilizaConvenio = 1), 1, 0)
                    
                    cboUsoCFDI(0).ListIndex = flngLocalizaCbo(cboUsoCFDI(0), flngCatalogoSATIdByNombreTipo("c_UsoCFDI", CLng(vgintTipoPaciente), "TP", 1))
                    cboUsoCFDI(1).ListIndex = flngLocalizaCbo(cboUsoCFDI(1), flngCatalogoSATIdByNombreTipo("c_UsoCFDI", CLng(vgintEmpresa), "EM", 1))
                    
                    'Revisa parámetro que indica si el cálculo en porcentaje de los conceptos de seguros es sobre el total de la cuenta antes de descuentos e IVA
'                    vlintbitConcepSeguroSinDescuentoIVA = 0
'                    vlstrSentencia = "SELECT bitConcepSeguroSinDescuentoIVA FROM CcEmpresa WHERE BITACTIVO = 1 AND intCveEmpresa = " & vgintEmpresa
'                    Set rsParametros = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
'                    If rsParametros.RecordCount > 0 Then vlintbitConcepSeguroSinDescuentoIVA = rsParametros!bitConcepSeguroSinDescuentoIVA
'                    rsParametros.Close
                            
                    vlintbitCalculaConcSegconDescuento = 0
                    vlstrSentencia = "SELECT bitCalculaConcSegconDescuento FROM CcEmpresa WHERE BITACTIVO = 1 AND intCveEmpresa = " & vgintEmpresa
                    Set rsParametros = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
                    If rsParametros.RecordCount > 0 Then vlintbitCalculaConcSegconDescuento = rsParametros!bitCalculaConcSegconDescuento
                    rsParametros.Close
                    
                    vlintbitCalculaConceptoSeguroconIVA = 0
                    vlstrSentencia = "SELECT bitCalculaConceptoSeguroconIVA FROM CcEmpresa WHERE BITACTIVO = 1 AND intCveEmpresa = " & vgintEmpresa
                    Set rsParametros = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
                    If rsParametros.RecordCount > 0 Then vlintbitCalculaConceptoSeguroconIVA = rsParametros!bitCalculaConceptoSeguroconIVA
                    rsParametros.Close
                    
                    'Verifica si la empresa maneja addenda en caso de que el paciente sea de tipo empresa
                    If vgintEmpresa <> 0 Then
                        vglngCveAddenda = 1
                        If optGrupoCuenta(0) Then
                            frsEjecuta_SP -1 & "|" & "G" & "|FA|" & vgintClaveEmpresaContable & "|" & vgintEmpresa, "FN_PVSELADDENDAEMPRESA", True, vglngCveAddenda
                        Else
                            frsEjecuta_SP txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|FA|" & vgintClaveEmpresaContable, "FN_PVSELADDENDAEMPRESA", True, vglngCveAddenda
                        End If
                        vglngCveAddenda = vglngCveAddenda
                        
                        'Valida si se tiene licencia para emitir la addenda seleccionada
                        vglngCveAddenda = IIf(fblLicenciaAddenda(vglngCveAddenda) = True, vglngCveAddenda, 0)
                        If vglngCveAddenda <> 0 Then
                            vlstrsql = "SELECT * From GNADDENDAEMPRESA WHERE INTCVEADDENDA = " & vglngCveAddenda
                            Set rsPaqueteAddenda = frsRegresaRs(vlstrsql, adLockReadOnly, adOpenStatic)
                            If rsPaqueteAddenda!BITUSAPAQUETES <> 0 Then
                                vgblnPaqueteAddenda = True
                            Else
                                vgblnPaqueteAddenda = False
                            End If
                        End If
                        
                        
                        'Verifica si utiliza una interfaz para la facturación
                            'Se valida si la empresa seleccionada está configurada para usarse con alguna interfaz de WS
                            '-------------------------------------------------------------------------------------------------------------------------------------------------------->
                                vglngCveInterfazWS = 1
                                frsEjecuta_SP vgintEmpresa & "|" & vgintClaveEmpresaContable, "FN_GNSELINTERFAZWS", True, vglngCveInterfazWS
                                
                                'Se verifica si se cuenta con una licencia para la interfaz obtenida
                                vglngCveInterfazWS = IIf(fblnLicenciaWS(vglngCveInterfazWS) = True, vglngCveInterfazWS, 0)
                                
                                If vglngCveInterfazWS <> 0 Then 'Si la empresa tiene configurada una interfaz se obtiene la clave del proveedor y la clave de contrato
                                    ' - Número de proveedor AXA
                                    Set rsInterfazWS = frsEjecuta_SP(CStr(vgintClaveEmpresaContable), "SP_GNSELCONFIGINTERFAZWS")
                                    If rsInterfazWS!CVEPROVEEDOR = "" Then
                                        '¡No ha ingresado datos!
                                        MsgBox "No se ha configurado la clave de proveedor AXA para el uso de la interfaz con el web service.", vbInformation + vbOKOnly, "Mensaje"
                                    Else
                                        vgstrProveedorAXA = Trim(rsInterfazWS!CVEPROVEEDOR)
                                    End If
                                    
                                    ' - Número de contrato AXA
                                    Set rsInterfazWS = frsEjecuta_SP(vgintEmpresa & "|" & "CONTRATO", "SP_SISELEQUIVALENCIA")
                                    If rsInterfazWS.RecordCount = 0 Then
                                        '¡No ha ingresado datos!
                                        MsgBox "No se ha configurado la clave de contrato configurada para la empresa del paciente.", vbInformation + vbOKOnly, "Mensaje"
                                    Else
                                        vgstrContratoAXA = Trim(rsInterfazWS!clave)
                                    End If
                                    
                                    'Se selecciona el registro del log de transacciones de la interfaz para obtener la información necesaria
                                    vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & "|" & IIf(OptTipoPaciente(0).Value = True, "I", "E")
                                    Set rsLogInterfaz = frsEjecuta_SP(vgstrParametrosSP, "SP_GNSELLOGINTERFAZAXAPACIENTE")
                                    
                                    If rsLogInterfaz.RecordCount > 0 Then
                                        
                                        'AQUI SE VA A CARGAR LA INFORMACIÓN REGISTRADA EN EL LOG DE TRANSACCIONES DE LA INTERFAZ DE AXA
                                        If Not fblnLeerXMLAXA(rsLogInterfaz!CLBXMLREQUEST, rsLogInterfaz!CLBXMLRESPONSE, rsLogInterfaz!chrTipo) Then
                                            MsgBox "No se pudo recuperar la información del ingreso de paciente AXA.", vbInformation + vbOKOnly, "Mensaje"
                                        Else
                                        
                                            'FOLIO DE TRANSACCIÓN DEL LOG
                                            vglngFolioIngresoLogAXA = Trim(rsLogInterfaz!INTCVEFOLIO)
                                        
                                            'FOLIO DE RECETA
                                            vgstrFolioReceta = Trim(rsLogInterfaz!VCHFOLIORECETA)
                                            
                                            'NUMERO DE PACIENTE CORRESPONDIENTE EN EL LOG
                                            vglngNumPacienteXML = rsLogInterfaz!intnumpaciente
                                            
                                            'CLAVE DEL TIPO INGRESO DEL PACIENTE
                                            vglngCveTipoIngresoXML = rsLogInterfaz!intCveTipoIngreso
                                            
                                        End If
                                        
                                    Else 'Si el recordcount = 0, significa que no fué ingresado por medio de WS exitosamente, por lo que la facturación se realizaría de manera normal
                                        vglngCveInterfazWS = 0
                                    End If
                                End If
                            '<-------------------------------------------------------------------------------------------------------------------------------------------------------
                    End If
                    
                    If vglngCveAddenda = 0 Then
                        cmdAddenda.Enabled = False
                    End If
                    
                    'Se consulta si el paciente a facturar es de tipo socio
                    If (Val(vgLngTipoPacienteSocio) = Val(vgintTipoPaciente)) And (Val(vgLngTipoPacienteSocio) > 0 And Val(vgintTipoPaciente) > 0) Then
                        vgSocio = True
                        vgLngTipoPacienteSocio = flngTipoPacienteSocio()
                        sstFacturacion.TabCaption(4) = "Factura bonificada"
                        lblEmpresa.Caption = "SOCIO"
                        vlstrRFCEmpresa = ""
                        Label57(0).Caption = "Tipo de paciente"
                        chkOtrosDatosFiscales.Enabled = False
                    Else
                        vgSocio = False
                        vgLngTipoPacienteSocio = 0
                        sstFacturacion.TabCaption(4) = "Factura empresa"
                        chkOtrosDatosFiscales.Enabled = True
                    End If
                    
                    ' ---Datos fiscales factura PACIENTE ---
                    If optGrupoCuenta(0).Value And vgintEmpresa = 0 Then
                        vlstrSentencia = "Select PvParametro.chrNombreFacturaPOS chrNombre, PvParametro.chrDireccionPOS chrCalle, ' ' chrTelefono, " & _
                                         "PvParametro.vchNumeroExteriorPOS vchNumeroExterior, PvParametro.vchNumeroInteriorPOS vchNumeroInterior, " & _
                                         "'XAXX010101000' chrRFC, INTCVECIUDAD, vchColoniaPOS vchColonia, vchCodigoPostalPOS vchCodigoPostal, ' ' vchCorreoElectronico, ' ' correo, '0' vchRegimenFiscal " & _
                                         " From pvparametro where tnyclaveempresa = " & vgintClaveEmpresaContable
                    Else
                        If optGrupoCuenta(0).Value Then
                            vlstrSentencia = " SELECT CcEmpresa.VCHDESCRIPCION as chrNombre, "
                            vlstrSentencia = vlstrSentencia & "     CcEmpresa.CHRCALLE as chrCalle, ccempresa.vchNumeroExterior, ccempresa.vchNumeroInterior,"
                            vlstrSentencia = vlstrSentencia & "     CcEmpresa.CHRTELEFONOEMPRESA as chrTelefono, "
                            vlstrSentencia = vlstrSentencia & "     CcEmpresa.CHRRFCEMPRESA as chrRFC, CCEMPRESA.INTCVECIUDAD, "
                            vlstrSentencia = vlstrSentencia & "     CcEmpresa.VCHCOLONIA as vchcolonia, TO_CHAR(CCEMPRESA.VCHCODIGOPOSTAL) vchcodigopostal, trim(CcEmpresa.vchCorreo) vchCorreoElectronico, "
                            vlstrSentencia = vlstrSentencia & "     TO_CHAR(CCEMPRESA.VCHCODIGOPOSTAL) vchcodigopostal, trim(CcEmpresa.vchCorreo) correo, nvl(CcEmpresa.vchRegimenFiscal,0) vchRegimenFiscal "
                            vlstrSentencia = vlstrSentencia & " FROM CcEmpresa "
                            vlstrSentencia = vlstrSentencia & " WHERE CcEmpresa.INTCVEEMPRESA = " & vgintEmpresa
                        Else
                            vlstrSentencia = " select PvDatosFiscales.* " & _
                                                ", CASE WHEN trim(NVL(PvDatosFiscales.vchCorreoElectronico,'')) <> '' THEN trim(NVL(PvDatosFiscales.vchCorreoElectronico,'')) ELSE exPaciente.vchCorreoElectronico END correo " & _
                                             " from PvDatosFiscales " & _
                                                " LEFT JOIN EXPACIENTEINGRESO ON EXPACIENTEINGRESO.INTNUMCUENTA = PvDatosFiscales.INTNUMCUENTA " & _
                                                    " AND EXPACIENTEINGRESO.INTCVETIPOINGRESO IN (SELECT SITIPOINGRESO.INTCVETIPOINGRESO FROM SITIPOINGRESO WHERE SITIPOINGRESO.CHRTIPOINGRESO = PVDATOSFISCALES.CHRTIPOPACIENTE ) " & _
                                                " LEFT JOIN EXPACIENTE ON EXPACIENTE.INTNUMPACIENTE = EXPACIENTEINGRESO.INTNUMPACIENTE " & _
                                             " where PvDatosFiscales.intID = (select MAX(intID) from PvDatosFiscales where PvDatosFiscales.chrTipoPaciente = '" & IIf(OptTipoPaciente(0).Value, "I", "E") & "' and PvDatosFiscales.intNumCuenta = " & Trim(txtMovimientoPaciente.Text) & ")"
                        End If
                    End If
                    
                    Set rsDatosFiscales = frsRegresaRs(vlstrSentencia)
                    If rsDatosFiscales.RecordCount = 0 Then
                    
                      'Datos generales del paciente:
                        nombreArr() = Split(Trim(rs!Nombre))
                        For i = LBound(nombreArr) To UBound(nombreArr)
                            If i = 0 Or i = 1 Then
                                ordAps = ordAps + nombreArr(i) + " "
                            Else
                                ordNombre = ordNombre + nombreArr(i) + " "
                            End If
                        Next i
                        txtNombreFactura.Text = Trim(ordNombre + ordAps)
                        vgstrFacturaNombre = txtNombreFactura.Text
                        
                        txtDireccionFactura(0).Text = Trim(IIf(IsNull(rs!calle), "", rs!calle))
                        If optGrupoCuenta(0).Value Then
                            txtDireccionFactura(1).Text = ""
                        Else
                            txtDireccionFactura(1).Text = Trim(IIf(IsNull(rs!CORREO), "", rs!CORREO))
                        End If
                        vgstrFacturaDireccion = Trim(txtDireccionFactura(0).Text)
                        lstrDatosFiscalesCorreo = Trim(txtDireccionFactura(1).Text)
                        txtFacturaNumExterior.Text = IIf(IsNull(rs!NumeroExterior), "", Trim(rs!NumeroExterior))
                        vgstrFacturaNumExterior = txtFacturaNumExterior.Text
                        txtFacturaNumInterior.Text = IIf(IsNull(rs!NumeroInterior), "", Trim(rs!NumeroInterior))
                        vgstrFacturaNumInterior = txtFacturaNumInterior.Text
                        If optGrupoCuenta(0).Value = False And rsDatosFiscales.RecordCount <> 0 Then
                            chkExtranjero.Value = IIf((rsDatosFiscales!bitExtranjero = 0), vbUnchecked, vbChecked)
                            vgBitExtranjero = IIf((rsDatosFiscales!bitExtranjero = 0), 0, 1)
                        Else
                            chkExtranjero.Value = vbUnchecked
                            vgBitExtranjero = 0
                        End If
                        If IsNull(rs!IdCiudad) Then
                            cboCiudad.ListIndex = -1
                            vglngFacturaCiudad = -1
                        Else
                            cboCiudad.ListIndex = flngLocalizaCbo(cboCiudad, str(rs!IdCiudad))
                            vglngFacturaCiudad = cboCiudad.ItemData(cboCiudad.ListIndex)
                        End If
'                        If cboCiudad.ListIndex > -1 Then
'                            vglngFacturaCiudad = cboCiudad.ItemData(cboCiudad.ListIndex)
'                        End If
                        
                        txtTelefonoFactura.Text = IIf(IsNull(rs!Telefono), "", Trim(rs!Telefono))
                        vgstrFacturaTelefono = txtTelefonoFactura.Text
                        txtRFCFactura.Text = Trim(IIf(IsNull(rs!RFC), "", rs!RFC))
                        vgstrFacturaRFC = txtRFCFactura.Text
                        txtColoniaFactura.Text = Trim(IIf(IsNull(rs!Colonia), "", rs!Colonia))
                        vgstrFacturaColonia = txtColoniaFactura.Text
                        txtCPFactura.Text = Trim(IIf(IsNull(rs!CP), "", rs!CP))
                        vgstrFacturaCodigoPostal = txtCPFactura.Text
                        cboRegimenFiscal.ListIndex = flngLocalizaCbo(cboRegimenFiscal, "0")
                    Else
                        If Trim(IIf(IsNull(rsDatosFiscales!CHRNOMBRE), "", rsDatosFiscales!CHRNOMBRE)) = Trim(rs!Nombre) Then
                            nombreArr() = Split(Trim(rsDatosFiscales!CHRNOMBRE))
                            For i = LBound(nombreArr) To UBound(nombreArr)
                                If i = 0 Or i = 1 Then
                                    ordAps = ordAps + nombreArr(i) + " "
                                Else
                                    ordNombre = ordNombre + nombreArr(i) + " "
                                End If
                            Next i
                            txtNombreFactura.Text = Trim(ordNombre + ordAps)
                        Else
                            txtNombreFactura.Text = Trim(IIf(IsNull(rsDatosFiscales!CHRNOMBRE), "", rsDatosFiscales!CHRNOMBRE))
                        End If
                        vgstrFacturaNombre = txtNombreFactura.Text
                        
                        txtDireccionFactura(0).Text = Trim(IIf(IsNull(rsDatosFiscales!chrCalle), "", rsDatosFiscales!chrCalle))
                        txtDireccionFactura(1).Text = Trim(IIf(IsNull(rsDatosFiscales!vchCorreoElectronico), Trim(IIf(IsNull(rsDatosFiscales!CORREO), "", rsDatosFiscales!CORREO)), rsDatosFiscales!vchCorreoElectronico))
                        txtFacturaNumExterior.Text = IIf(IsNull(rsDatosFiscales!VCHNUMEROEXTERIOR), "", Trim(rsDatosFiscales!VCHNUMEROEXTERIOR))
                        vgstrFacturaNumExterior = txtFacturaNumExterior.Text
                        txtFacturaNumInterior.Text = IIf(IsNull(rsDatosFiscales!VCHNUMEROINTERIOR), "", Trim(rsDatosFiscales!VCHNUMEROINTERIOR))
                        vgstrFacturaNumInterior = txtFacturaNumInterior.Text
                        If optGrupoCuenta(0).Value = False And rsDatosFiscales.RecordCount <> 0 Then
                            chkExtranjero.Value = IIf((rsDatosFiscales!bitExtranjero = 0), vbUnchecked, vbChecked)
                            vgBitExtranjero = IIf((rsDatosFiscales!bitExtranjero = 0), 0, 1)
                        Else
                            chkExtranjero.Value = vbUnchecked
                            vgBitExtranjero = 0
                        End If
                        If IsNull(rsDatosFiscales!intCveCiudad) Then
                            cboCiudad.ListIndex = -1
                            vglngFacturaCiudad = -1
                        Else
                            cboCiudad.ListIndex = flngLocalizaCbo(cboCiudad, str(rsDatosFiscales!intCveCiudad))
                            vglngFacturaCiudad = cboCiudad.ItemData(cboCiudad.ListIndex)
                        End If
                        vgstrFacturaDireccion = txtDireccionFactura(0).Text
                        lstrDatosFiscalesCorreo = txtDireccionFactura(1).Text
                        txtTelefonoFactura.Text = Trim(IIf(IsNull(rsDatosFiscales!chrTelefono), "", rsDatosFiscales!chrTelefono))
                        vgstrFacturaTelefono = txtTelefonoFactura.Text
                        txtRFCFactura.Text = Trim(IIf(IsNull(fStrRFCValido(rsDatosFiscales!CHRRFC)), "", fStrRFCValido(rsDatosFiscales!CHRRFC)))
                        vgstrFacturaRFC = txtRFCFactura.Text
                        txtColoniaFactura.Text = Trim(IIf(IsNull(rsDatosFiscales!VCHCOLONIA), "", rsDatosFiscales!VCHCOLONIA))
                        vgstrFacturaColonia = txtColoniaFactura.Text
                        txtCPFactura.Text = Trim(IIf(IsNull(rsDatosFiscales!VCHCODIGOPOSTAL), "", rsDatosFiscales!VCHCODIGOPOSTAL))
                        vgstrFacturaCodigoPostal = txtCPFactura.Text
                        cboRegimenFiscal.ListIndex = flngLocalizaCbo(cboRegimenFiscal, IIf(IsNull(rsDatosFiscales!VCHREGIMENFISCAL), "0", rsDatosFiscales!VCHREGIMENFISCAL))
                    End If
                    
                    vl_regimencliente = cboRegimenFiscal.ListIndex
                    
                    vgBlnCambioDatosFiscales = False
                    
                    lblCuarto.Caption = IIf(IsNull(rs!Cuarto), "", rs!Cuarto)
                    gintAseguradora = IIf((rs!bitUtilizaConvenio = 1 And rs!bitAseguradora = 1), 1, 0)
                                      
                    optTipoFacturacion(0).Enabled = gintAseguradora = 1
                    optTipoFacturacion(1).Value = True
                    optTipoFacturacion_Click 0
                            
                    ' -- 16805
                    ' -- Se consulta si la empresa de convenio tiene configurado un descuento especial
                    dblPorcentajeDescEspecial = fdblDescuentoEspecial(CDbl(999999999999#), CDbl(999999999999#), CLng(vgintEmpresa), optPesos(1).Value)
                    
                    cmdSepararCargosFarmacia.Visible = True
                    cmdSepararCargosFarmacia.Enabled = False
                                        
                    If optGrupoCuenta(1).Value Then
                        ' -- Caso 16652
                        ' -- Parámetro activo
                        ' -- Empresa del login = empresa configurada para facturar por la razón social de hospital
                        ' -- Paciente PARTICULAR
                        If aFarmaciaCompartida(0).blnActivo And aFarmaciaCompartida(0).lngClaveEmpresaHospital = vgintClaveEmpresaContable And (rs!bitUtilizaConvenio = 0 And rs!tipo = "PARTICULAR") Then
                            cmdSepararCargosFarmacia.Visible = True
                            cmdSepararCargosFarmacia.Enabled = True
                        Else
                            cmdSepararCargosFarmacia.Visible = True
                            cmdSepararCargosFarmacia.Enabled = False
                        End If
                    End If
                    
                    
                    '*******************+lmm DEL CASO DEL PROCESO PEMEX 20239
                    
                    bnlespemex = False
                    biactivaPEMEX = False
                    Set rsEmpresa = frsRegresaRs("SELECT TRIM(SIPARAMETRO.VCHVALOR) AS VALOR " & _
                            "FROM SIPARAMETRO WHERE SIPARAMETRO.VCHNOMBRE = 'BITACTIVAPRECIOSPEMEX' AND SIPARAMETRO.CHRMODULO='PV'")
                     
                    If rsEmpresa.RecordCount <> 0 Then
                        biactivaPEMEX = rsEmpresa!Valor
                    End If
                    
                    If biactivaPEMEX Then
                        vlstrSentencia = "SELECT CcEmpresa.bitespemex FROM CcEmpresa WHERE intCveEmpresa = " & Trim(str(vgintEmpresa))
                        Set rsespemex = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
                        If rsespemex.RecordCount > 0 Then
                            If (rsespemex!bitespemex) <> Null Or (rsespemex!bitespemex) <> "" Then
                                bnlespemex = rsespemex!bitespemex
                            End If
                        End If
                    Else
                        pEjecutaSentencia ("update CCempresa set bitespemex = 0 where bitespemex=1 and intCveEmpresa = " & vgintEmpresa)
                    End If
                     
                                        
                    If bnlespemex Then
                        frsEjecuta_SP Trim(txtMovimientoPaciente.Text) & "|" & Trim(str(vgintEmpresa)), "SP_PVUPDPVCARGOPEMEX", True
                    End If
                    
                    '*********************************************
                    
                    
                    'Llenar la el estado de cuenta:
                    pLlenaCargos
                    
                    'Aplica 100% de descuento a los cargos NO excluidos para pacientes de tipo SOCIO (Sin activar el bitPrecioManual)
                    If vgSocio = True Then
                        For vlLngCont = 1 To grdCargos.Rows - 1
                            If grdCargos.TextMatrix(vlLngCont, 18) <> "X" Then
                                pActualizaDescuentos 100, vlLngCont, 1
                            End If
                        Next
                    End If
                    
                    'Llenar la consulta de pagos:
                    pLlenaPagos
                                        
                    txtTotal.Text = Format(Val(Format(txtTotal.Text, "")) - Val(Format(txtPagos.Text, "")), "$ ###,###,###,##0.00")
                    pConfiguraGridFacturaPaciente
                    pConfiguraGridFacturaEmpresa
                    'lblnCanceloFacturaPaciente = fblnSoloFacPacienteCancelada(sstFacturacion.TabEnabled(2), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(txtMovimientoPaciente.Text))
                    
                    If (vgintEmpresa = 0 Or blnExisteExcedente) And vgSocio = False Then
                        pLlenaFacturasParticulares grdFacturaPaciente
                    Else
                        If gintAseguradora = 0 Then
                            pLlenaFacturasConvenio grdFacturaPaciente
                            pLlenaFacturasConvenio grdFacturaEmpresa
                        Else
                            pConsultaControl
                            pLlenaFacturasConvenioAseguradora grdFacturaPaciente
                            pLlenaFacturasConvenioAseguradora grdFacturaEmpresa
                        End If
                    End If
                                       
                    ''18084
                    blnEsAseguradora = False
                    lblNombreCarta.Visible = False
                    If rs!bitUtilizaConvenio = 1 And rs!bitAseguradora = 1 Then
                        blnEsAseguradora = True
                        pLlenarCartasAutorizacion
                        'Si al intentar llenar no encuentra cartas, entonces agrega una nueva
                        If cboCartaAutorizacion.ListIndex > 0 Then
                            claveCarta = cboCartaAutorizacion.ItemData(cboCartaAutorizacion.ListIndex)
                        Else
                            claveCarta = pGrabaCartaGeneralAseguradora(txtMovimientoPaciente.Text, vgintEmpresa)
                            pLlenarCartasAutorizacion
                        End If
                        pAsignarCargosSinCarta txtMovimientoPaciente.Text, vgintEmpresa
                    End If
                    
                    pConsultaControl
                    
                    If IIf(IsNull(rs!bitAseguradora), 0, rs!bitAseguradora) = 1 Then
                        txtNombreAsegurado.Text = rs!Nombre
                        txtPersonaAutoriza.Text = IIf(IsNull(rs!Autoriza), "", rs!Autoriza)
                        If Not IsNull(rs!CveTipoPoliza) Then cboTipoPoliza.ListIndex = flngLocalizaCbo(cboTipoPoliza, str(rs!CveTipoPoliza))
                        vlPolizaInicial = cboTipoPoliza.ListIndex
                        vgblnCambioPoliza = False
                        txtNumeroPoliza.Text = IIf(IsNull(rs!NumeroPoliza), "", rs!NumeroPoliza)
                        txtNumeroControl.Text = IIf(IsNull(rs!NumeroControl), "", rs!NumeroControl)
                        lblnDatosSeguroModificados = False
                        pCargaControl
                        If vlchrIncluirConceptosSeguro = "" Then
                           vlchrIncluirConceptosSeguro = "I"
                        End If
                        If intMensajeControl > 0 Then
                            'La cuenta no se puede facturar porque se activó el parámetro Calcular importes de seguro en base a los cargos
                            'o
                            'El parámetro Calcular importes de seguro en base a los cargos está activo, será necesario volver a grabar el control
                            MsgBox SIHOMsg(intMensajeControl), vbExclamation, "Mensaje"
                        End If
                    Else
                        vlchrIncluirConceptosSeguro = ""
                        vlintDesgloseConceptosVICFDI = 0
                    End If
                    
                    '--------------------------------------
                    'Estados de los frames, Tabs y estatus
                    '--------------------------------------
                    vgstrEstadoManto = "F" 'Facturando
                    freDatosFiscales.Enabled = True
                    freTipoFactura.Enabled = True
                    frmTipoAgrupa.Enabled = True
                    freDatosPaciente.Enabled = False
                    sstFacturacion.TabEnabled(1) = True 'Estado de Cuenta
                    sstFacturacion.TabEnabled(2) = blnEsAseguradora 'Control Aseguradora 18084
                    sstFacturacion.TabEnabled(4) = IIf(rs!bitUtilizaConvenio = 1, True, False) 'Factura Empresa
                    sstFacturacion.TabEnabled(5) = False 'Busqueda
                    optMuestraCargos(2).Enabled = IIf(rs!bitUtilizaConvenio = 1, True, False) 'Filtro de excluidos
                    optMuestraCargos(1).Enabled = IIf(rs!bitUtilizaConvenio = 1, True, False) 'Filtro de sin excluir
                    cmdBuscar.Enabled = IIf(vlstrDatosPaciente <> "", True, False)
                    
                    'Moví esta linea más arriba, pues se usa antes del llenado de la tabla de cargos
                    lblnCanceloFacturaPaciente = fblnSoloFacPacienteCancelada(sstFacturacion.TabEnabled(2), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(txtMovimientoPaciente.Text))
                    If lblnCanceloFacturaPaciente Or IIf(rsPostergado.RecordCount > 0, rsPostergado!BITPOSTERGADA, 0) = 1 Then 'y factura de la empresa activa, factura de paciente cancelada
                        fraConceptosAseguradora.Enabled = False
                        freControlAseguradora.Enabled = False
                        cmdGrabarControl.Enabled = False
                        cmdConfiguracion.Enabled = False
                        cmdBorraControl.Enabled = False
                        cmdAddenda.Enabled = False
                    Else
                        fraConceptosAseguradora.Enabled = True
                        freControlAseguradora.Enabled = True
                        cmdGrabarControl.Enabled = True
                        cmdConfiguracion.Enabled = True
                    End If
                    
                    'pEnfocaTextBox txtNombreFactura
                    pEnfocaTextBox txtRFCFactura
                    'Si es un grupo valida si es de empresa oparticulares para habilitar/deshabilitar el tab de Factura Paciente
                    If optGrupoCuenta(0).Value Then
                        If rs!bitUtilizaConvenio Then
                            sstFacturacion.TabEnabled(3) = False
                        Else
                            sstFacturacion.TabEnabled(3) = True
                        End If
                    End If
                        
                    'Identifica el tipo de formato a utilizar
                    lngCveFormato = 1
                    frsEjecuta_SP vgintNumeroDepartamento & "|" & vgintEmpresa & "|" & vgintTipoPaciente & "|" & IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")), "fn_PVSelFormatoFactura2", True, lngCveFormato
                    vllngFormatoaUsar = lngCveFormato
                    
                    'Se valida en caso de no haber formato activo mostrar mensaje y cancelar transacción
                    If vllngFormatoaUsar = 0 Then
                        'No se encontró un formato válido de factura.
                        MsgBox SIHOMsg(373), vbCritical, "Mensaje"
                        pCancelar
                        Exit Sub
                    End If
                    
                    'Se compara el tipo de folio con el tipo de formato a utilizar con la fn "fintTipoEmisionComprobante"
                    '(intTipoEmisionComprobante: 0 = Error, 1 = Físico, 2 = Digital)
                    intTipoEmisionComprobante = fintTipoEmisionComprobante("FA", vllngFormatoaUsar)
                    If intTipoEmisionComprobante = 1 Then        'FISICO
                        'Si es físico se factura de manera normal
                        frmTipoAgrupa.Enabled = False
                        frmTipoAgrupa.Visible = False
                    ElseIf intTipoEmisionComprobante = 2 Then    'DIGITAL
                    
                        'Se revisa el tipo de CFD de la Factura (0 = CFD, 1 = CFDi, 2 = Físico, 3 = Error)
                        intTipoCFDFactura = fintTipoCFD("FA", vllngFormatoaUsar)
                        
                        'Si aparece un error terminar la transacción
                        If intTipoCFDFactura = 3 Then   'ERROR
                            'Si es error, se cancela la transacción
                            pCancelar
                            Exit Sub
                        End If
            
                        'Si es digital se cargan las opciones de agrupamiento predeterminadas
                        'y se desactivan las que no tienen un archivo de Crystal Report activo
                        frmTipoAgrupa.Enabled = True
                        frmTipoAgrupa.Visible = True
                        strSql = "select intTipoAgrupaDigital, vchDescripcionAgrupa1, vchDescripcionAgrupa2,vchDescripcionAgrupa3 from FORMATO where intNumeroFormato = " & vllngFormatoaUsar
                        Set rsAux = frsRegresaRs(strSql)

                       'Se cargan las opciones predeterminadas
                        '_____________________________________________________________________________________________________________________________________________
                        If optGrupoCuenta(1).Value And OptTipoPaciente(1).Value Then
                           strSql = "SELECT INTAGRUPACIONFACTURA FROM CUPRESUPUESTOPACIENTE " & _
                                    "INNER JOIN CUPRESUPUESTO ON CUPRESUPUESTO.INTPRESUPUESTO = CUPRESUPUESTOPACIENTE.INTPRESUPUESTO " & _
                                    "WHERE CUPRESUPUESTOPACIENTE.INTCTAPACIENTE = " & Trim(Me.txtMovimientoPaciente.Text)
                           Set rsCheckup = frsRegresaRs(strSql, adLockOptimistic)
                           If rsCheckup.RecordCount > 0 Then
                              If rsCheckup!INTAGRUPACIONFACTURA = 1 Then
                                 optTipoAgrupacion(0) = True
                              Else
                                 optTipoAgrupacion(1) = True
                              End If
                           Else
                              'Se cargan las opciones predeterminadas
                              If rsAux!intTipoAgrupaDigital = 1 Then
                                 optTipoAgrupacion(0) = True
                              ElseIf rsAux!intTipoAgrupaDigital = 2 Then
                                 optTipoAgrupacion(1) = True
                              ElseIf rsAux!intTipoAgrupaDigital = 3 Then
                                 optTipoAgrupacion(2) = True
                              End If
                           End If
                        Else
                              'Se cargan las opciones predeterminadas
                              If rsAux!intTipoAgrupaDigital = 1 Then
                                 optTipoAgrupacion(0) = True
                              ElseIf rsAux!intTipoAgrupaDigital = 2 Then
                                 optTipoAgrupacion(1) = True
                              ElseIf rsAux!intTipoAgrupaDigital = 3 Then
                                 optTipoAgrupacion(2) = True
                              End If
                        End If
                        '_______________________________________________________________
                        'Se deshabilitan los que no tienen asociados un archivo de Crystal
                        If IsNull(rsAux!vchDescripcionAgrupa1) Or Trim(rsAux!vchDescripcionAgrupa1) = "" Then
                            optTipoAgrupacion(0).Enabled = False
                        Else
                            optTipoAgrupacion(0).Enabled = True
                        End If

                        If IsNull(rsAux!vchDescripcionAgrupa2) Or Trim(rsAux!vchDescripcionAgrupa2) = "" Then
                            optTipoAgrupacion(1).Enabled = False
                        Else
                            optTipoAgrupacion(1).Enabled = True
                        End If

                        If IsNull(rsAux!vchDescripcionAgrupa3) Or Trim(rsAux!vchDescripcionAgrupa3) = "" Then
                            optTipoAgrupacion(2).Enabled = False
                        Else
                            optTipoAgrupacion(2).Enabled = True
                        End If

                    ElseIf intTipoEmisionComprobante = 0 Then   'ERROR
                        'Si es error, se cancela la transacción y se cancelan los cambios
                        pCancelar
                        Exit Sub
                    End If
                    
                    vlblnReqPendiente = False
                    vlblnCargoAutoPendiente = False
                    
                    If optGrupoCuenta(0).Value Then
                        vlstrSentencia = "SELECT intmovpaciente, chrtipopaciente " & _
                                         " FROM PVDETALLEFACTURACONSOLID " & _
                                         " WHERE PVDETALLEFACTURACONSOLID.intCveGrupo = " & txtMovimientoPaciente.Text
                        Set rsGrupoValidaReqYAuto = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)

                        rsGrupoValidaReqYAuto.MoveFirst
                        Do Until rsGrupoValidaReqYAuto.EOF
                            'Verificar requisiciones
                            If fblnRequisicionPaciente(rsGrupoValidaReqYAuto!INTMOVPACIENTE, rsGrupoValidaReqYAuto!CHRTIPOPACIENTE) Then
                                vlblnReqPendiente = True
                            End If
                            
                            'Verificar cargos automaticos
                            If fblnCargosAutomaticosPendientes(rsGrupoValidaReqYAuto!INTMOVPACIENTE, rsGrupoValidaReqYAuto!CHRTIPOPACIENTE) Then
                                vlblnCargoAutoPendiente = True
                            End If

                            rsGrupoValidaReqYAuto.MoveNext
                        Loop
                    Else
                        'Verificar requisiciones
                        If fblnRequisicionPaciente(CLng(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E")) Then
                            vlblnReqPendiente = True
                        End If
                        
                        'Verificar cargos automaticos
                        If fblnCargosAutomaticosPendientes(CLng(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E")) Then
                            vlblnCargoAutoPendiente = True
                        End If
                    End If
                    
                    If vlblnReqPendiente And vlblnCargoAutoPendiente Then
                        lblMensajeReqAut(36).Height = 385
                        lblMensajeReqAut(36).Top = 9295
                        lblMensajeReqAut(36).Visible = True
                        lblMensajeReqAut(36).Caption = "Existen requisiciones pendientes de surtir y cargos automáticos programados pendientes de aplicarse."
                    Else
                        If vlblnReqPendiente Then
                            lblMensajeReqAut(36).Height = 435
                            lblMensajeReqAut(36).Top = 9240
                            lblMensajeReqAut(36).Visible = True
                            lblMensajeReqAut(36).Caption = "Existen requisiciones pendientes de surtir, para ver la lista dar clic aquí."
                        Else
                            If vlblnCargoAutoPendiente Then
                                lblMensajeReqAut(36).Height = 195
                                lblMensajeReqAut(36).Top = 9490
                                lblMensajeReqAut(36).Visible = True
                                lblMensajeReqAut(36).Caption = "Existen cargos automáticos programados pendientes de aplicarse."
                            Else
                                lblMensajeReqAut(36).Height = 385
                                lblMensajeReqAut(36).Top = 9295
                                lblMensajeReqAut(36).Visible = False
                                lblMensajeReqAut(36).Caption = ""
                            End If
                        End If
                    End If
                    
                Else
                    If optGrupoCuenta(0).Value Then
                        'La cuenta del grupo está completamente facturado.
                        MsgBox "La cuenta del grupo está completamente facturada.", vbInformation, "Mensaje"
                        vlblnFacturado = True
                    Else
                        'La cuenta del paciente está completamente facturada.
                        MsgBox SIHOMsg(597), vbExclamation, "Mensaje"
                        vlblnFacturado = True
                    End If
                    
                    pCancelar
                End If
                
                pFacturasAnteriores
            Else
                'La información no existe
                MsgBox SIHOMsg(12) & IIf(optGrupoCuenta(1).Value, " o los cargos se encuentran dentro de un grupo", ""), vbExclamation, "Mensaje"
                pCancelar
            End If
        End If
        
        vgblnPrimeraVez = False
        
        pFacturaPacienteActiva
        
        'Caso 20298 - Se agregó porque cuando no trae valor no debe realizar la validación
        If txtMovimientoPaciente.Text <> "" Then
            'Caso 20262 - Mensaje que muestra si esta activo el parámetro de auditoría de cargos y hay cargos con precio de un peso
            vlStrAuditoriaCargos = "SELECT VCHVALOR FROM SIPARAMETRO WHERE VCHNOMBRE = 'BITAUDITORIADECARGOS'"
            Set rsAuditoriaCargos = frsRegresaRs(vlStrAuditoriaCargos, adLockReadOnly, adOpenForwardOnly)
            With rsAuditoriaCargos
                If .RecordCount > 0 Then
                    vlblnAuditoriacargos = IIf(IsNull(!VCHVALOR), False, IIf(!VCHVALOR = 0, False, True))
                Else
                    vlblnAuditoriacargos = False
                End If
                .Close
            End With
            
            If vlblnAuditoriacargos = True Then
                vlStrAuditoriaCargos = "select count(*) total from pvcargo where mnyprecio = 1 and intmovpaciente = " & txtMovimientoPaciente.Text & " and chrtipopaciente = '" & IIf(OptTipoPaciente(0).Value, "I", "E") & "'"
                Set rsAuditoriaCargos = frsRegresaRs(vlStrAuditoriaCargos, adLockReadOnly, adOpenForwardOnly)
                With rsAuditoriaCargos
                    If !Total > 0 Then
                        '¡Existen cargos con precio de un peso!
                        MsgBox "¡Existen cargos con precio de un peso!", vbInformation, "Mensaje"
                    End If
                    .Close
                End With
            End If
            'hasta aqui
        End If
        
    End If
    
    
End Sub

Private Sub pFacturaPacienteActiva()
    
    If lblPaciente.Caption <> "" Then
        If optGrupoCuenta(0).Value Then 'Grupo
            cmdPostergar.Enabled = False
        Else
            If OptTipoPaciente(0).Value Then 'Internos
                If cmdGrabarFacturaPaciente.Enabled = False Then
                    If rsPostergado!BITPOSTERGADA = 1 Then
                        cmdPostergar.Caption = "Restaurar cuenta"
                        cmdPostergar.Enabled = True
                    Else
                        cmdPostergar.Caption = "Postergar cuenta"
                        If vgblnBloqueoPostergacionDefinitivo = True Then
                            cmdPostergar.Enabled = False
                        Else
                            cmdPostergar.Enabled = True
                        End If
                    End If
                    
                Else
                    If rsPostergado!BITPOSTERGADA = 1 Then
                        cmdPostergar.Caption = "Restaurar cuenta"
                        cmdGrabarFacturaPaciente.Enabled = False
                        cmdPrefacturaPaciente.Enabled = False
                        cmdPostergar.Enabled = True
                    Else
                        cmdPostergar.Caption = "Postergar cuenta"
                        If vgblnBloqueoPostergacionDefinitivo = True Then
                            cmdGrabarFacturaPaciente.Enabled = True
                            cmdPrefacturaPaciente.Enabled = True
                            cmdPostergar.Enabled = False
                        Else
                            cmdGrabarFacturaPaciente.Enabled = True
                            cmdPrefacturaPaciente.Enabled = True
                            cmdPostergar.Enabled = True
                        End If
                    End If
                End If
            Else  'Externos
                If cmdGrabarFacturaPaciente.Enabled = False Then
                    If rsPostergado!BITPOSTERGADA = 1 Then
                        cmdPostergar.Caption = "Restaurar cuenta"
                        cmdPostergar.Enabled = True
                    Else
                        cmdPostergar.Caption = "Postergar cuenta"
                        If vgblnBloqueoPostergacionDefinitivo = True Then
                            cmdPostergar.Enabled = False
                        Else
                            cmdPostergar.Enabled = True
                        End If
                    End If
                Else
                    If rsPostergado!BITPOSTERGADA = 1 Then
                        cmdPostergar.Caption = "Restaurar cuenta"
                        cmdGrabarFacturaPaciente.Enabled = False
                        cmdPrefacturaPaciente.Enabled = False
                        cmdPostergar.Enabled = True
                    Else
                        cmdPostergar.Caption = "Postergar cuenta"
                        If vgblnBloqueoPostergacionDefinitivo = True Then
                            cmdGrabarFacturaPaciente.Enabled = True
                            cmdPrefacturaPaciente.Enabled = True
                            cmdPostergar.Enabled = False
                        Else
                            cmdGrabarFacturaPaciente.Enabled = True
                            cmdPrefacturaPaciente.Enabled = True
                            cmdPostergar.Enabled = True
                        End If
                    End If
                End If

            End If
        End If
    End If

End Sub

Private Function fblnSoloFacPacienteCancelada(blnDeAseguradora As Boolean, strTipoPaciente As String, lngnumCuenta As Long) As Boolean
    Dim rsEmp As New ADODB.Recordset
    Dim rsPAC As New ADODB.Recordset
    
    fblnSoloFacPacienteCancelada = False
    If blnDeAseguradora = True Then
        Set rsEmp = frsRegresaRs("select count(*) total from PvFactura where chrTipoFactura = 'E' and trim(chrEstatus) is null and chrTipoPaciente='" & strTipoPaciente & "' and intMovpaciente = " & lngnumCuenta & _
                                    " and intCveCarta = " & claveCarta)
        If rsEmp.RecordCount <> 0 Then
            If rsEmp!Total > 0 Then
                Set rsPAC = frsRegresaRs("select count(*) total from PvFactura where chrTipoFactura = 'P' and chrEstatus= 'C' and chrTipoPaciente='" & strTipoPaciente & "' and intMovpaciente = " & lngnumCuenta & _
                                            " and intCveCarta = " & claveCarta)
                                         '" and (select count(*) from PvCargo where bitExcluido = 1 and chrFolioFactura Is Null and chrTipoPaciente='" & strTipoPaciente & "' and intMovPaciente = " & lngNumCuenta & ") > 0 ")
                If rsPAC.RecordCount <> 0 Then
                    If rsPAC!Total > 0 Then
                        fblnSoloFacPacienteCancelada = True
                    End If
                End If
            End If
        End If
    End If
    
End Function

Private Function fblnValidacionWSAXA(vlstrFolioDocumento As String, lngFolioLog As Long, vllngCveTipoIngreso As Long, lngnumCuenta As Long, lngNumPaciente As Long, strTipoPaciente As String, lngPersonaGraba As Long) As Boolean

    Dim DOMRequestXML As MSXML2.DOMDocument
    Dim SerializerWS As SoapSerializer30 'Para serializar el XML
    Dim ReaderRespuestaWS As SoapReader30      'Para leer la respuesta del WebService
    Dim ConectorWS As ISoapConnector 'Para conectarse al WebService
    Dim rsConexion As New ADODB.Recordset
    Dim vlaryParametrosSalida() As String
    Dim strDestino As String
    Dim objShell As Object
    Dim intMessage As Integer
    Dim rsLogInterfaz As New ADODB.Recordset
    Dim vlstrSentencia As String
    Dim vllngFolioTrans As Long
    
    'Se inicializa la variable del folio
'    vllngFolioTrans = 0
    Err.Clear
    fblnValidacionWSAXA = False
    strRequestXML = ""
    strResponseXML = ""
    
    
    '_________________________________________________________________________________________________
        vlstrSentencia = "Select CLBXMLREQUEST FROM GNLOGINTERFAZAXA Where INTCVEFOLIO = " & lngFolioLog
        Set rsLogInterfaz = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
        
        If rsLogInterfaz.RecordCount <> 0 Then
            strRequestXML = rsLogInterfaz!CLBXMLREQUEST
            strRequestXML = Replace(Replace(Trim(strRequestXML), Chr(10), ""), Chr(13), "") 'Se eliminan los saltos de linea
        Else
            GoTo NotificaError
        End If
    '_________________________________________________________________________________________________
    
        'Se especifican las rutas para la conexión con el servicio de timbrado
        Set rsConexion = frsEjecuta_SP(CStr(vgintClaveEmpresaContable), "SP_GNSELCONFIGINTERFAZWS")
    
        'Se elimina el contenido de la carpeta temporal
        strDestino = Environ$("temp") & "\fm-Axa9"
        pCreaDirectorio strDestino
        On Error Resume Next
        
        'Checa que el directorio se haya creado, para proceder a eliminar el archivo (evita el error 53)
        If Dir$(strDestino & "\") <> "" Then
            Kill strDestino & "\*.*"
            If Err.Number = 53 Or Err.Number = 0 Then '|  File not found
                Err.Clear
            Else
                Err.Raise Err.Number
            End If
        End If
        
        Set ConectorWS = New HttpConnector30
        ' La URL que atenderá nuestra solicitud
        ConectorWS.Property("EndPointURL") = Trim(rsConexion!URLWSConexion) '"http://www.axa-assistance-la.com:8082/wsre/eRecetario.asmx?WSDL"
                    
        ' Ruta del WebMethod según el tipo de ingreso
        ConectorWS.Property("SoapAction") = Trim(rsConexion!URLWMRecepcion)  '"http://www.axa-assistance-la.com/RecepcionServicio"
            
        '###########################################################################################################################
        '########################################## INICIA CONEXIÓN CON EL SERVICIO DE TIMBRADO ##########################################
        '###########################################################################################################################
        ConectorWS.Connect
    
        ConectorWS.BeginMessage
            Set SerializerWS = New SoapSerializer30
            SerializerWS.Init ConectorWS.InputStream
            
            SerializerWS.StartEnvelope
                SerializerWS.StartBody
                    SerializerWS.WriteXml strRequestXML
                SerializerWS.EndBody
            SerializerWS.EndEnvelope
            
        ConectorWS.EndMessage
        
        Set ReaderRespuestaWS = New SoapReader30
        ReaderRespuestaWS.Load ConectorWS.OutputStream
        
        strResponseXML = CStr(ReaderRespuestaWS.Body.xml)
        '#############################################################################################################################
        '########################################## FINAL DE CONEXIÓN CON EL SERVICIO DE TIMBRADO ##########################################
        '#############################################################################################################################
    
        Dim strMensajeError As String
        If Not ReaderRespuestaWS.FaultDetail Is Nothing Then
            Dim DOMNodoCodigoError As MSXML2.IXMLDOMNode
            
            'Se obtiene el codigo del error (en caso de haberlo)
            Set DOMNodoCodigoError = ReaderRespuestaWS.FaultDetail.childNodes(0).Attributes.getNamedItem("codigo")
            
            'Se captura el error
            If DOMNodoCodigoError Is Nothing Then
                Err.Raise 1000, "Comunicación AXA", "Error"
            Else
                strMensajeError = "Ocurrió un error al comunicarse con AXA" & vbNewLine & vbNewLine & _
                                            "Número de error: " & DOMNodoCodigoError.Text & vbNewLine & _
                                            "Descripción: " & ReaderRespuestaWS.FaultString.Text
                'Se muestra el mensaje de error en pantalla
                MsgBox strMensajeError, vbCritical + vbOKOnly, "Mensaje"
            End If
        End If
    
        'Se valida si tiene un error en la conexión al WS
        If Err.Number = 5400 Or Err.Number = -2147024809 Then GoTo NotificaError
    
        'Se determina si se regresó un mensaje de error al solicitar información con AXA
        Dim DOMElementoRespuestaWS As MSXML2.IXMLDOMElement
        Dim DOMnodoAuxiliar As MSXML2.IXMLDOMNode
        Set DOMElementoRespuestaWS = ReaderRespuestaWS.Body
         
        If Trim(DOMElementoRespuestaWS.selectSingleNode("//@mensajeError").Text) <> "" Then 'Si se regresó un mensaje de error...
        
            'Se almacena en el log de transacciones de la interfaz de AXA
            vgstrParametrosSP = Trim(vlstrFolioDocumento) & "|" & vgintNumeroModulo & "|" & vllngCveTipoIngreso & "|" & lngnumCuenta & "|" & lngNumPaciente & "|" & strTipoPaciente & "|" & Trim(vgstrIP) & "|" & "FA" & "|NO|" & strRequestXML & "|" & CStr(ReaderRespuestaWS.Body.xml) & "|" & Trim(vgstrEquipo) & "|" & lngPersonaGraba & "|" & lngFolioLog & "|" & Trim(vgstrFolioReceta) & "|"
            frsEjecuta_SP vgstrParametrosSP, "sp_GNINSloginterfazaxa"
        
            'Generación el MsgBox con hipervínculo al chat de AXA
            Set objShell = CreateObject("Wscript.Shell")
            intMessage = MsgBox("¿Desea abrir el chat en línea con AXA?" & vbNewLine & vbNewLine & "Información incorrecta: " & vbNewLine & vbNewLine & "- " & Trim(DOMElementoRespuestaWS.selectSingleNode("//@mensajeError").Text) & vbNewLine, vbYesNo + vbExclamation, "Mensaje")
            
            'Se valida si no hay link de ayuda por medio de la asignación de un nodo auxiliar
            Set DOMnodoAuxiliar = DOMElementoRespuestaWS.selectSingleNode("//@linkAyuda")
            
            If intMessage = vbYes And DOMnodoAuxiliar Is Nothing Then
                MsgBox "No se proporcionó una liga de acceso al chat en línea de AXA", vbInformation, "Mensaje"
                Exit Function
            End If
            
            'Si se selecciona que sí, se abre la ventana del chat en línea con AXA
            If intMessage = vbYes And Left(Trim(DOMElementoRespuestaWS.selectSingleNode("//@mensajeError").Text), 6) = "Object" Then
                MsgBox "No se proporcionó una liga de acceso al chat en línea de AXA", vbInformation, "Mensaje"
                Exit Function
            End If
            
            If intMessage = vbYes And Left(Trim(DOMElementoRespuestaWS.selectSingleNode("//@mensajeError").Text), 3) = "The" Then
                MsgBox "No se proporcionó una liga de acceso al chat en línea de AXA", vbInformation, "Mensaje"
                Exit Function
            End If
            
            If intMessage = vbYes And Left(Trim(DOMElementoRespuestaWS.selectSingleNode("//@mensajeError").Text), 10) = "Conversion" Then
                MsgBox "No se proporcionó una liga de acceso al chat en línea de AXA", vbInformation, "Mensaje"
                Exit Function
            End If
            
            If intMessage = vbYes And Trim(DOMElementoRespuestaWS.selectSingleNode("//@linkAyuda").Text) <> "" Then
                objShell.Run DOMElementoRespuestaWS.selectSingleNode("//@linkAyuda").Text
            ElseIf intMessage = vbYes And Trim(DOMElementoRespuestaWS.selectSingleNode("//@linkAyuda").Text) = "" Then
                MsgBox "No se proporcionó una liga de acceso al chat en línea de AXA", vbInformation, "Mensaje"
                Exit Function
            Else
                Exit Function
            End If
            
        Else
            'Se selecciona el mensaje de conexión exitosa correspondiente
            MsgBox "Conexión exitosa. " & vbNewLine & vbNewLine & "Folio de transacción: " & Trim(DOMElementoRespuestaWS.selectSingleNode("//@folioEnvio").Text), vbInformation, "Mensaje"
                            
            'Se almacena en el log de transacciones de la interfaz de AXA
            vgstrParametrosSP = Trim(vlstrFolioDocumento) & "|" & vgintNumeroModulo & "|" & vllngCveTipoIngreso & "|" & lngnumCuenta & "|" & lngNumPaciente & "|" & strTipoPaciente & "|" & Trim(vgstrIP) & "|" & "FA" & "|SI|" & strRequestXML & "|" & strResponseXML & "|" & Trim(vgstrEquipo) & "|" & lngPersonaGraba & "|" & lngFolioLog & "|" & Trim(vgstrFolioReceta) & "|"
            frsEjecuta_SP vgstrParametrosSP, "sp_GNINSloginterfazaxa"
            
            'Se regresa variable de estatus de conexión correcta
            fblnValidacionWSAXA = True
            
        End If
        
        Set DOMElementoRespuestaWS = Nothing
        
Exit Function
NotificaError:
    strMensajeError = "Ocurrió un error al comunicarse con AXA" & vbNewLine & vbNewLine & _
                                "Verifique que el equipo cuente con acceso a Internet y/o que la información enviada a AXA esté correcta."
    MsgBox strMensajeError, vbCritical + vbOKOnly, "Mensaje"
    Err.Clear
    fblnValidacionWSAXA = False
    Exit Function
    
End Function

Private Sub pConsultaControl()
    'Cantidades facturadas al paciente de los conceptos de seguro
    dblExcedenteFacturado = 0
    dblDeducibleFacturado = 0
    dblCoaseguroFacturado = 0
    dblCoaseguroAFacturado = 0
    dblCopagoFacturado = 0
    dblCoaseguroMFacturado = 0
    
    'Cantidades facturadas a la empresa por Deducible, Coaseguro y Coaseguro médio
    dblExcedenteFacturadoEmpresa = 0
    dblDeducibleFacturadoEmpresa = 0
    dblCoaseguroFacturadoEmpresa = 0
    dblCoaseguroAFacturadoEmpresa = 0
    dblCopagoFacturadoEmpresa = 0
    dblCoaseguroMFacturadoEmpresa = 0
    
    dblCargosFacturadosPaciente = 0
    
    lblnExcedenteFacturado = False
    lblnDeducibleFacturado = False
    lblnCoaseguroFacturado = False
    lblnCoaseguroMedicoFacturado = False
    lblnCoaseguroAdicionalFacturado = False
    lblnCopagoFacturado = False

    'Cargar el control de seguro, este recordset se usa en muchas partes
    If claveCartaEdoCta = -1 Then
        claveCarta = 0
        If cboCartaAutorizacion.ListIndex > 0 Then
             claveCarta = cboCartaAutorizacion.ItemData(cboCartaAutorizacion.ListIndex)
        End If
    Else
        claveCarta = claveCartaEdoCta   'IIf(claveCartaEdoCta = 0, -1, claveCartaEdoCta)
    End If
    'claveCarta = IIf(cboCartaAutorizacion.ListIndex > 0, cboCartaAutorizacion.ItemData(cboCartaAutorizacion.ListIndex), 0)
    vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & CStr(vgintEmpresa) & "|" & claveCarta
    Set rsControlSeguro = frsEjecuta_SP(vgstrParametrosSP, "SP_PVSELCONTROLSEGUROEMPRESA")
    
    If rsControlSeguro.RecordCount > 0 Then
        '------------------------------------------------------------
        'Cantidades facturadas al paciente de los conceptos de seguro
        '------------------------------------------------------------
        vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & CStr(vgintClaveEmpresaContable) & "|" & CStr(vgintEmpresa) & "|" & claveCarta
        
        'Excedente
        Set rsTemp = frsEjecuta_SP(vgstrParametrosSP & "|EX", "sp_PvSelCantidadFacturadaConc")
        If rsTemp.RecordCount > 0 Then dblExcedenteFacturado = rsTemp!Total
        'Deducible
        Set rsTemp = frsEjecuta_SP(vgstrParametrosSP & "|DE", "sp_PvSelCantidadFacturadaConc")
        If rsTemp.RecordCount > 0 Then dblDeducibleFacturado = rsTemp!Total
        'Coaseguro
        Set rsTemp = frsEjecuta_SP(vgstrParametrosSP & "|CO", "sp_PvSelCantidadFacturadaConc")
        If rsTemp.RecordCount > 0 Then dblCoaseguroFacturado = rsTemp!Total
        'Coaseguro médico
        Set rsTemp = frsEjecuta_SP(vgstrParametrosSP & "|CM", "sp_PvSelCantidadFacturadaConc")
        If rsTemp.RecordCount > 0 Then dblCoaseguroMFacturado = rsTemp!Total
        'Coaseguro adicional
        Set rsTemp = frsEjecuta_SP(vgstrParametrosSP & "|CA", "sp_PvSelCantidadFacturadaConc")
        If rsTemp.RecordCount > 0 Then dblCoaseguroAFacturado = rsTemp!Total
        'Copago
        Set rsTemp = frsEjecuta_SP(vgstrParametrosSP & "|CP", "sp_PvSelCantidadFacturadaConc")
        If rsTemp.RecordCount > 0 Then dblCopagoFacturado = rsTemp!Total
        rsTemp.Close
        
        '-----------------------------------------------------------------------------
        'Cantidades facturadas a la empresa por Deducible, Coaseguro y Coaseguro médio
        '-----------------------------------------------------------------------------
        vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & _
                            IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & _
                            CStr(vgintClaveEmpresaContable) & "|" & _
                            CStr(vgintEmpresa) & "|" & claveCarta
                            
        'Excedente
        Set rsTemp = frsEjecuta_SP(vgstrParametrosSP & "|EX", "Sp_PvSelCSFacturadoEmpresa")
        If rsTemp.RecordCount > 0 Then dblExcedenteFacturadoEmpresa = rsTemp!Total
        'Deducible
        Set rsTemp = frsEjecuta_SP(vgstrParametrosSP & "|DE", "Sp_PvSelCSFacturadoEmpresa")
        If rsTemp.RecordCount > 0 Then dblDeducibleFacturadoEmpresa = rsTemp!Total
        'Coaseguro
        Set rsTemp = frsEjecuta_SP(vgstrParametrosSP & "|CO", "Sp_PvSelCSFacturadoEmpresa")
        If rsTemp.RecordCount > 0 Then dblCoaseguroFacturadoEmpresa = rsTemp!Total
        'Coaseguro médico
        Set rsTemp = frsEjecuta_SP(vgstrParametrosSP & "|CM", "Sp_PvSelCSFacturadoEmpresa")
        If rsTemp.RecordCount > 0 Then dblCoaseguroMFacturadoEmpresa = rsTemp!Total
        'Coaseguro adicional
        Set rsTemp = frsEjecuta_SP(vgstrParametrosSP & "|CA" & CStr(vgintEmpresa), "Sp_PvSelCSFacturadoEmpresa")
        If rsTemp.RecordCount > 0 Then dblCoaseguroAFacturadoEmpresa = rsTemp!Total
        'Copago
        Set rsTemp = frsEjecuta_SP(vgstrParametrosSP & "|CP" & CStr(vgintEmpresa), "Sp_PvSelCSFacturadoEmpresa")
        If rsTemp.RecordCount > 0 Then dblCopagoFacturadoEmpresa = rsTemp!Total
        
        Set rsTemp = frsEjecuta_SP(txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & str(vgintClaveEmpresaContable) & "|" & claveCarta, "Sp_PvSelCargosFacturaPaciente")
        If rsTemp.RecordCount > 0 Then dblCargosFacturadosPaciente = IIf(IsNull(rsTemp!Subtotal), 0, rsTemp!Subtotal) + IIf(IsNull(rsTemp!IVA), 0, rsTemp!IVA)
'        If rsTemp.RecordCount > 0 Then
'            If vlintbitCalculaConcSegconDescuento = 1 Then
'                If vlintbitCalculaConceptoSeguroconIVA = 1 Then
'                    dblCargosFacturadosPaciente = IIf(IsNull(rsTemp!Importe), 0, rsTemp!Importe) - IIf(IsNull(rsTemp!Descuento), 0, rsTemp!Descuento) + IIf(IsNull(rsTemp!IVA), 0, rsTemp!IVA)
'                ElseIf vlintbitCalculaConceptoSeguroconIVA = 0 Then
'                    dblCargosFacturadosPaciente = IIf(IsNull(rsTemp!Importe), 0, rsTemp!Importe) - IIf(IsNull(rsTemp!Descuento), 0, rsTemp!Descuento)
'                End If
'            ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
'                If vlintbitCalculaConceptoSeguroconIVA = 1 Then
'                    dblCargosFacturadosPaciente = IIf(IsNull(rsTemp!Importe), 0, rsTemp!Importe) + IIf(IsNull(rsTemp!IVA), 0, rsTemp!IVA)
'                ElseIf vlintbitCalculaConceptoSeguroconIVA = 0 Then
'                    dblCargosFacturadosPaciente = IIf(IsNull(rsTemp!Importe), 0, rsTemp!Importe)
'                End If
'            End If
'        End If
        '-----------------------------------------------------------------
        'Validación para saber si ya se facturaron los conceptos de seguro
        '-----------------------------------------------------------------
        lblnExcedenteFacturado = Not IsNull(rsControlSeguro!CHRFOLIOFACTURAEXCEDENTE)
        lblnDeducibleFacturado = Not IsNull(rsControlSeguro!CHRFOLIOFACTURADEDUCIBLE)
        lblnCoaseguroFacturado = Not IsNull(rsControlSeguro!CHRFOLIOFACTURACOASEGURO)
        lblnCoaseguroMedicoFacturado = Not IsNull(rsControlSeguro!CHRFOLIOFACTURACOASEGUROMED)
        lblnCoaseguroAdicionalFacturado = Not IsNull(rsControlSeguro!CHRFOLIOFACTURACOASEGUROADICI)
        lblnCopagoFacturado = Not IsNull(rsControlSeguro!CHRFOLIOFACTURACOPAGO)
    
        If lblnExcedenteFacturado Then
        'Excedente
            vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & CStr(vgintClaveEmpresaContable) & "|EX"
            Set rsTemp = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelImportesFacturadosCS")
            If rsTemp.RecordCount > 0 Then
                lblnExcedenteFacturado = (Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")) > 0 And (Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")) - rsTemp!Total) = 0)
            End If
            rsTemp.Close
        End If
        
        If lblnDeducibleFacturado Then
        'Deducible
            vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & CStr(vgintClaveEmpresaContable) & "|DE"
            Set rsTemp = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelImportesFacturadosCS")
            If rsTemp.RecordCount > 0 Then
                lblnDeducibleFacturado = (Val(Format(txtDeducible.Text, "############.00")) > 0 And (Val(Format(txtDeducible.Text, "############.00")) - rsTemp!Total) = 0)
            End If
            rsTemp.Close
        End If
        
        If lblnCoaseguroFacturado Then
        'Coaseguro
            vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & CStr(vgintClaveEmpresaContable) & "|CO"
            Set rsTemp = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelImportesFacturadosCS")
            If rsTemp.RecordCount > 0 Then
                ' lblnCoaseguroFacturado = (Val(Format(txtCoaseguro.Text, "############.00")) > 0 And (IIf(intCoaseguroPorFactura = 1, Val(Format(txtCoaseguro.Text, "###############.00")) - dblCoaseguroFacturado, Val(Format(txtCoaseguro.Text, "###############.00"))) - rsTemp!Total) = 0)
                lblnCoaseguroFacturado = (Val(Format(txtCoaseguro.Text, "############.00")) > 0 And (Val(Format(txtCoaseguro.Text, "############.00")) - rsTemp!Total) = 0)
            End If
            rsTemp.Close
        End If
        
        If lblnCoaseguroMedicoFacturado Then
        'Coaseguro médico
            vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & CStr(vgintClaveEmpresaContable) & "|CM"
            Set rsTemp = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelImportesFacturadosCS")
            If rsTemp.RecordCount > 0 Then
                lblnCoaseguroMedicoFacturado = Val(Format(txtTotalCoaseguroMedico.Text, "############.00")) > 0 And Val(Format(txtTotalCoaseguroMedico.Text, "############.00")) - rsTemp!Total = 0
            End If
            rsTemp.Close
        End If
        
        If lblnCoaseguroAdicionalFacturado Then
        'Coaseguro adicional
            vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & CStr(vgintClaveEmpresaContable) & "|CA"
            Set rsTemp = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelImportesFacturadosCS")
            If rsTemp.RecordCount > 0 Then
                lblnCoaseguroAdicionalFacturado = (Val(Format(txtCoaseguroAdicional.Text, "############.00")) > 0 And (Val(Format(txtCoaseguroAdicional.Text, "############.00")) - rsTemp!Total) = 0)
            End If
            rsTemp.Close
        End If
        
        If lblnCopagoFacturado Then
        'Copago
            vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & CStr(vgintClaveEmpresaContable) & "|CP"
            Set rsTemp = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelImportesFacturadosCS")
            If rsTemp.RecordCount > 0 Then
                lblnCopagoFacturado = (Val(Format(txtCopago.Text, "############.00")) > 0 And (Val(Format(txtCopago.Text, "############.00")) - rsTemp!Total) = 0)
            End If
            rsTemp.Close
        End If
    End If
End Sub

Private Sub pLlenaCargos(Optional blnConservarMarcarCargo As Boolean)
    Dim vlintcontador As Integer
    Dim vldblIVA As Double
    Dim vldbltotal As Double
    Dim rsCargos As New ADODB.Recordset
    Dim vlstrPacientesSinCodigo As String
    Dim vlintseq As Integer
    Dim rsCompletaDescripcion As ADODB.Recordset
    Dim vlintCompleta As Integer
    Dim vlstrConceptoFacturacion As String
    Dim rsConcepto As ADODB.Recordset
    Dim vlstrSentencia As String
    Dim vldblExcedenteGrupo As String
    Dim vldblPrecio As Double
    Dim lngAux As Long
    Dim lngAncho As Long
    Dim lngCantidadPaquete As Long
    Dim i As Integer
    Dim vlblnSeparaCargosFarmCompartida As Boolean
    Dim intincremento As Long
    Dim rsPuntos As New ADODB.Recordset
    Dim rs As New ADODB.Recordset
    Dim vllngCveTipoPaciente As Long
    Dim rsPuntosMedico As New ADODB.Recordset
    Dim vldblMontoDisponiblePuntosMed As Double
    Dim intCveMedicoRelacionado As Double
    Dim vldblMontoDisponiblePuntosPac As Double

'    vlblnSeparaCargosFarmCompartida = False
'    cmdSepararCargosFarmacia.Enabled = True
    pgbBarra.Value = 0
    freBarra.Top = 1500
    lblTextoBarra.Caption = "Consultando cargos del paciente, por favor espere..."
    freBarra.Visible = IIf(vlblnNoMostrarBarra, False, True)
    freBarra.Refresh
    lngAncho = 800
    lngAux = 0
    grdCargos.Redraw = False
    pLimpiaGrid grdCargos
    pConfiguraGridCargos
       
    blnExisteExcedente = False
    Set rsExcedentes = frsEjecuta_SP(txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E"), "SP_PVEXCEDENTEGRUPOSDECARGO")
    claveCarta = 0
    If cboCartaAutorizacion.ListIndex > 0 Then
         claveCarta = cboCartaAutorizacion.ItemData(cboCartaAutorizacion.ListIndex)
    End If
    If optGrupoCuenta(0).Value Then
        vgstrParametrosSP = txtMovimientoPaciente.Text & "|X|" & IIf(chkIncluyeCargosFacturados.Value = 1, 2, 0) & "|-1|" & IIf(optGrupoCuenta(0).Value, "G", "C") & IIf(optGrupoCuenta(0).Value, "|S", "|N") & "|" & IIf(lblnCambiaNombreCargos, 1, 0) '& "|" & claveCarta
    Else
        vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & IIf(chkIncluyeCargosFacturados.Value = 1, 2, 0) & "|-1|C|N|" & IIf(lblnCambiaNombreCargos, 1, 0) '& "|" & claveCarta
    End If
    
    Set rsCargos = frsEjecuta_SP(vgstrParametrosSP, "SP_PVSELCARGOSPACIENTE")
    With rsCargos
        If optOrdenCargos(1).Value Then
            .Sort = "ConceptoSoloPVCARGO"  '"Concepto"
        ElseIf optOrdenCargos(2).Value Then
            .Sort = "NombreDepartamento"
        ElseIf optOrdenCargos(0).Value Then
            .Sort = "dtmFechaHora"
        ElseIf optOrdenCargos(6).Value Then
            .Sort = "DescripcionCargosSoloPVCARGO" '"DescripcionCargo"
        End If
        
        intincremento = 100 / IIf(.RecordCount = 0, 1, .RecordCount)
        pgbBarra.Value = 0
        grdCargos.Redraw = False
        Do While Not .EOF
            If pgbBarra.Value + intincremento >= 100 Then
                pgbBarra.Value = 100
            Else
                pgbBarra.Value = pgbBarra.Value + intincremento
            End If
            If !cveCarta = claveCarta Or (claveCarta = 0) Then ''18084
                If optMuestraCargos(0).Value Or (IIf(IsNull(!Excluido), "", !Excluido) = "X" And optMuestraCargos(2).Value) Or (IIf(IsNull(!Excluido), "", !Excluido) <> "X" And optMuestraCargos(1).Value) Then
                    ' (0) Todos (2) Excluidos (3) No excluidos
                    If grdCargos.RowData(1) <> -1 Then
                         grdCargos.Rows = grdCargos.Rows + 1
                         grdCargos.Row = grdCargos.Rows - 1
                    End If
                    
                    grdCargos.Col = 0
                    grdCargos.CellFontBold = True
                    grdCargos.RowData(grdCargos.Row) = !IntNumCargo
                    
                    If (Trim(!FolioFactura) = "") Or (IsNull(!FolioFactura)) Then
                        grdCargos.TextMatrix(grdCargos.Row, 0) = "*"
                    Else
                        grdCargos.TextMatrix(grdCargos.Row, 0) = "F"
                    End If
                    
                    grdCargos.TextMatrix(grdCargos.Row, 1) = !chrTipoCargo
                    grdCargos.TextMatrix(grdCargos.Row, 2) = IIf(IsNull(!DescripcionCargo), IIf(IsNull(!DescripcionCargosSoloPVCARGO), "", !DescripcionCargosSoloPVCARGO), !DescripcionCargo)
                                
                    If Trim(grdCargos.TextMatrix(grdCargos.Row, 2)) = "" Then
                        If optGrupoCuenta(0).Value Then
                            vlstrPacientesSinCodigo = "G" & txtMovimientoPaciente.Text
                        Else
                            vlstrPacientesSinCodigo = IIf(OptTipoPaciente(0).Value, "I", "E") & txtMovimientoPaciente.Text
                        End If
                
                        Set rsInformacionFaltantePCE = frsEjecuta_SP(vlstrPacientesSinCodigo & "|" & vllngEmpresaManejaCargos, "Sp_Ccverificarinfofaltantepce")
                        Set rsInformacionFaltantePCE = frsUltimoRecordset(rsInformacionFaltantePCE)
                        If rsInformacionFaltantePCE.RecordCount > 0 Then
                            For vlintseq = 0 To rsInformacionFaltantePCE.RecordCount - 1
                                Set rsCompletaDescripcion = frsEjecuta_SP(vlstrPacientesSinCodigo & "|" & vllngEmpresaManejaCargos, "Sp_CcverificaCargoPCE")
                                Set rsCompletaDescripcion = frsUltimoRecordset(rsCompletaDescripcion)
                                'If rsInformacionFaltantePCE.RecordCount > 0 Then
                                If rsCompletaDescripcion.RecordCount > 0 Then
                                    For vlintCompleta = 0 To rsInformacionFaltantePCE.RecordCount - 1
                                        If Trim(rsCargos!CHRCVECARGO) = Trim(rsCompletaDescripcion!ClaveCargo) Then
                                            grdCargos.TextMatrix(grdCargos.Row, 2) = rsCompletaDescripcion!Descripcion
                                            Exit For
                                        End If
                                        rsCompletaDescripcion.MoveNext
                                    Next
                                End If
                                rsInformacionFaltantePCE.MoveNext
                            Next
                        End If
                    End If
                    
                    'vldblPrecio = Format(!mnyPrecio, "Fixed") 'CASO 8152: Agregado para evitar diferencias de redondeos
                    vldblPrecio = !mnyPrecio
                    'grdCargos.TextMatrix(grdCargos.Row, 3) = Format(Round(!mnyPrecio, 2), "$ ###,###,###,###.00")
                    grdCargos.TextMatrix(grdCargos.Row, 3) = Format(vldblPrecio, "$ ###,###,###,###.00####")
                    grdCargos.TextMatrix(grdCargos.Row, 4) = !MNYCantidad
                    'grdCargos.TextMatrix(grdCargos.Row, 5) = Format(Round((!mnyPrecio * !mnyCantidad), 2), "$ ###,###,###,###.00") 'Subtotal
                    grdCargos.TextMatrix(grdCargos.Row, 5) = Format((Val(Format(grdCargos.TextMatrix(grdCargos.Row, 3), "")) * !MNYCantidad), "$ ###,###,###,###.00####") 'Subtotal
                    grdCargos.TextMatrix(grdCargos.Row, 6) = 0 'Descuentos
                    grdCargos.TextMatrix(grdCargos.Row, 7) = 0 'Total
                    grdCargos.TextMatrix(grdCargos.Row, 8) = 0 'Cantidad de IVA
                    grdCargos.TextMatrix(grdCargos.Row, 9) = 0 'Total total
                    grdCargos.TextMatrix(grdCargos.Row, 10) = Format(!dtmFechahora, "dd/MMM/YYYY HH:mm")
                    grdCargos.TextMatrix(grdCargos.Row, 11) = !TipoDocumento
                    grdCargos.TextMatrix(grdCargos.Row, 12) = !intFolioDocumento
                    grdCargos.TextMatrix(grdCargos.Row, 13) = IIf(IsNull(!Concepto), "", !Concepto)
                    grdCargos.TextMatrix(grdCargos.Row, 20) = IIf(IsNull(!smicveconcepto), 0, !smicveconcepto) 'CveConceptoFacturacion
                    grdCargos.TextMatrix(grdCargos.Row, 19) = IIf(IsNull(!smyIVA), "", !smyIVA) 'Porcentaje de IVA
                    'grdCargos.TextMatrix(grdCargos.Row, cintColIVACargo) = IIf(IsNull(!MontoIVA), 0, !MontoIVA)
                    grdCargos.TextMatrix(grdCargos.Row, cintColIVACargo) = Format(IIf(IsNull(!MontoIVA), 0, !MontoIVA), "############.00####")
                    
                    'Total
                    'vldblTotal = (!mnyPrecio * !mnyCantidad) - !mnyDescuento
                    'vldbltotal = (vldblPrecio * !mnyCantidad) - !MNYDESCUENTO
                    vldbltotal = Val(Format(grdCargos.TextMatrix(grdCargos.Row, 5), "")) - Val(Format(Format(!MNYDESCUENTO, "$ ###,###,###,###.00####"), ""))
                    'IVA
                    'vldblIVA = IIf(IsNull(!MontoIVA), 0, !MontoIVA)
                    vldblIVA = Val(Format(grdCargos.TextMatrix(grdCargos.Row, cintColIVACargo), ""))
                    
                    grdCargos.TextMatrix(grdCargos.Row, cintColConceptoHospital) = IIf(IsNull(!CveConceptoHospital), "", !CveConceptoHospital)
                    
                    If Trim(grdCargos.TextMatrix(grdCargos.Row, 13)) = "" Then
                        grdCargos.TextMatrix(grdCargos.Row, 13) = IIf(IsNull(!ConceptoSoloPVCARGO), "", !ConceptoSoloPVCARGO)
                        grdCargos.TextMatrix(grdCargos.Row, 20) = IIf(IsNull(!smiCveConceptoSoloPVCARGO), 0, !smiCveConceptoSoloPVCARGO)
                        grdCargos.TextMatrix(grdCargos.Row, 19) = IIf(IsNull(!smyIVASoloPVCARGO), "", !smyIVASoloPVCARGO)
                        grdCargos.TextMatrix(grdCargos.Row, cintColIVACargo) = Format(IIf(IsNull(!MontoIVASoloPVCARGO), 0, !MontoIVASoloPVCARGO), "############.00####")
                        'vldblIVA = IIf(IsNull(!MontoIVASoloPVCARGO), 0, !MontoIVASoloPVCARGO)
                        vldblIVA = Val(Format(grdCargos.TextMatrix(grdCargos.Row, cintColIVACargo), ""))
                    End If
                    
                    If Trim(grdCargos.TextMatrix(grdCargos.Row, 13)) = "" Then
                        If optGrupoCuenta(0).Value Then
                            vlstrPacientesSinCodigo = "G" & txtMovimientoPaciente.Text
                        Else
                            vlstrPacientesSinCodigo = IIf(OptTipoPaciente(0).Value, "I", "E") & txtMovimientoPaciente.Text
                        End If
    
                        Set rsInformacionFaltantePCE = frsEjecuta_SP(vlstrPacientesSinCodigo & "|" & vllngEmpresaManejaCargos, "Sp_Ccverificarinfofaltantepce")
                        Set rsInformacionFaltantePCE = frsUltimoRecordset(rsInformacionFaltantePCE)
                        If rsInformacionFaltantePCE.RecordCount > 0 Then
                            For vlintseq = 0 To rsInformacionFaltantePCE.RecordCount - 1
                                Set rsCompletaDescripcion = frsEjecuta_SP(vlstrPacientesSinCodigo & "|" & vllngEmpresaManejaCargos, "Sp_CcverificaCargoPCE")
                                Set rsCompletaDescripcion = frsUltimoRecordset(rsCompletaDescripcion)
                                'If rsInformacionFaltantePCE.RecordCount > 0 Then
                                If rsCompletaDescripcion.RecordCount > 0 Then
                                    For vlintCompleta = 0 To rsInformacionFaltantePCE.RecordCount - 1
                                        If Trim(rsCargos!CHRCVECARGO) = Trim(rsCompletaDescripcion!ClaveCargo) Then
                                            vlstrSentencia = "Select * FROM PVCONCEPTOFACTURACION Where smiCveConcepto= " & Trim(rsCompletaDescripcion!smicveconcepto)
                                            Set rsConcepto = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
                                            If rsConcepto.RecordCount > 0 Then
                                                vlstrConceptoFacturacion = (IIf(IsNull(rsConcepto!chrDescripcion), "", rsConcepto!chrDescripcion))
                                                            
                                                grdCargos.TextMatrix(grdCargos.Row, 13) = Trim(vlstrConceptoFacturacion)
                                                grdCargos.TextMatrix(grdCargos.Row, 20) = IIf(IsNull(rsCompletaDescripcion!smicveconcepto), "", rsCompletaDescripcion!smicveconcepto)
                                                
                                                grdCargos.TextMatrix(grdCargos.Row, 19) = IIf(IsNull(rsConcepto!smyIVA), "", rsConcepto!smyIVA) 'Porcentaje de IVA
                                                'grdCargos.TextMatrix(grdCargos.Row, cintColIVACargo) = ((!mnyCantidad * !mnyPrecio) - !mnyDescuento) * (rsConcepto!smyIVA / 100)
                                                'grdCargos.TextMatrix(grdCargos.Row, cintColIVACargo) = ((!mnyCantidad * vldblPrecio) - !MNYDESCUENTO) * (rsConcepto!smyIVA / 100)
                                                grdCargos.TextMatrix(grdCargos.Row, cintColIVACargo) = (Val(Format(grdCargos.TextMatrix(grdCargos.Row, 5), "")) - Val(Format(Format(!MNYDESCUENTO, "$ ###,###,###,###.00####"), ""))) * (rsConcepto!smyIVA / 100)
                                                
                                                'IVA
                                                'vldblIVA = ((!mnyCantidad * !mnyPrecio) - !mnyDescuento) * (rsConcepto!smyIVA / 100)
                                                'vldblIVA = ((!mnyCantidad * vldblPrecio) - !MNYDESCUENTO) * (rsConcepto!smyIVA / 100)
                                                vldblIVA = Val(Format(Format((Val(Format(grdCargos.TextMatrix(grdCargos.Row, 5), "")) - Val(Format(Format(!MNYDESCUENTO, "$ ###,###,###,###.00####"), "")) * (rsConcepto!smyIVA / 100)), "$ ###,###,###,###.00####"), ""))
                                            End If
                                        End If
                                        rsCompletaDescripcion.MoveNext
                                    Next
                                End If
                                rsInformacionFaltantePCE.MoveNext
                            Next
                        End If
                    End If
    
                    grdCargos.TextMatrix(grdCargos.Row, 14) = !nombreDepartamento
                    grdCargos.TextMatrix(grdCargos.Row, 15) = IIf(IsNull(!FolioFactura), "", !FolioFactura)
                    
                    PB.Font = grdCargos.CellFontName
                    PB.FontSize = grdCargos.CellFontSize
                    lngAux = PB.TextWidth(grdCargos.TextMatrix(grdCargos.Row, 15))
                    If lngAux > lngAncho Then
                       lngAncho = lngAux
                    End If
                                    
                    grdCargos.TextMatrix(grdCargos.Row, 16) = !intDescuentaInventario
                    grdCargos.TextMatrix(grdCargos.Row, 17) = !CHRCVECARGO
                    grdCargos.TextMatrix(grdCargos.Row, 18) = IIf(IsNull(!Excluido), "", !Excluido) 'Trae una "X" si está excluido
                    grdCargos.TextMatrix(grdCargos.Row, 21) = IIf(IsNull(!Excluido), "", !Excluido) 'El mismo que el 18 pero nomas pa que se vea y darle performance
                    grdCargos.TextMatrix(grdCargos.Row, 22) = IIf(!Urgente = 0, "", Trim(str(!Urgente * 100))) 'Cargo Urgente (informacion en tabla)
                    grdCargos.TextMatrix(grdCargos.Row, 23) = IIf(!Urgente = 0, "", Trim(str(!Urgente * 100))) 'Cargo Urgente (informacion para cambio)
                    grdCargos.TextMatrix(grdCargos.Row, 24) = !CveDepartamento
                    grdCargos.TextMatrix(grdCargos.Row, 25) = 0 'Resto de incluidos dentro de un paquete mayor a cero, es decir, la cantidad del paquete es 2 ó más
                    grdCargos.TextMatrix(grdCargos.Row, 26) = 0 'esta columna no se usa
                    grdCargos.TextMatrix(grdCargos.Row, 27) = 0 'esta columna no se usa
                    grdCargos.TextMatrix(grdCargos.Row, 28) = 0 'esta columna no se usa
                    grdCargos.TextMatrix(grdCargos.Row, 29) = IIf((!CantidadPaquete = 0 And !CantidadExtraPaquete = 0) Or !PaquetesAsignados = 0, "", IIf(IsNull(!NombrePaquete), "", Trim(!NombrePaquete) & "(" & !PaquetesAsignados & ")")) 'La descripción del paquete que tiene guardado
                    grdCargos.TextMatrix(grdCargos.Row, 30) = IIf(IsNull(!ClavePaquete), 0, !ClavePaquete)  'La clave del paquete al que esta asignado un cargo
                    grdCargos.TextMatrix(grdCargos.Row, 31) = IIf(IsNull(!CantidadPaquete) Or !PaquetesAsignados = 0, "", IIf(!CantidadPaquete = 0, 0, !CantidadPaquete)) 'Cantidad dentro del paquete e incluidos inicialmente
                    grdCargos.TextMatrix(grdCargos.Row, 32) = IIf(IsNull(!CantidadExtraPaquete) Or !PaquetesAsignados = 0, "", IIf(!CantidadExtraPaquete = 0, 0, !CantidadExtraPaquete)) 'Cantidad dentro del paquete pero Fuera de la configuracion inicial
                    grdCargos.TextMatrix(grdCargos.Row, 54) = IIf(!PaquetesAsignados = 0, "", Val(grdCargos.TextMatrix(grdCargos.Row, 4)) - (Val(grdCargos.TextMatrix(grdCargos.Row, 31)) + Val(grdCargos.TextMatrix(grdCargos.Row, 32)))) 'Cantidad extra
                    
    '                If !PaquetesAsignados > 1 Then
    '                    grdCargos.TextMatrix(grdCargos.Row, 31) = IIf(IsNull(!CantidadPaquete) Or !PaquetesAsignados = 0, "", IIf(!CantidadPaquete = 0, 0, IIf(!PaquetesAsignados > !mnyCantidad, !mnyCantidad, !PaquetesAsignados))) 'Cantidad dentro del paquete e incluidos inicialmente
    '                    If !PaquetesAsignados > !mnyCantidad And grdCargos.TextMatrix(grdCargos.Row, 31) > 0 Then
    '                      grdCargos.TextMatrix(grdCargos.Row, 25) = !PaquetesAsignados - !mnyCantidad
    '                    End If
    '                    grdCargos.TextMatrix(grdCargos.Row, 32) = IIf(IsNull(!CantidadExtraPaquete) Or !PaquetesAsignados = 0, "", IIf(!CantidadExtraPaquete = 0, 0, Val(grdCargos.TextMatrix(grdCargos.Row, 4)) - (Val(grdCargos.TextMatrix(grdCargos.Row, 31))))) 'Cantidad dentro del paquete pero Fuera de la configuracion inicial
    '                    For i = 1 To grdCargos.Row - 1
    '                        If Trim(grdCargos.TextMatrix(i, 17)) = Trim(grdCargos.TextMatrix(grdCargos.Row, 17)) Then
    '                            grdCargos.TextMatrix(grdCargos.Row, 31) = IIf(grdCargos.TextMatrix(i, 25) > !mnyCantidad, !mnyCantidad, grdCargos.TextMatrix(i, 25))
    '                            grdCargos.TextMatrix(grdCargos.Row, 32) = IIf(IsNull(!CantidadExtraPaquete) Or !PaquetesAsignados = 0, "", IIf(!CantidadExtraPaquete = 0, 0, Val(grdCargos.TextMatrix(grdCargos.Row, 4)) - (Val(grdCargos.TextMatrix(grdCargos.Row, 31))))) 'Cantidad dentro del paquete pero Fuera de la configuracion inicial
    '                            If grdCargos.TextMatrix(i, 25) >= !mnyCantidad Then
    '                                grdCargos.TextMatrix(grdCargos.Row, 25) = grdCargos.TextMatrix(i, 25) - !mnyCantidad
    '                                grdCargos.TextMatrix(i, 25) = 0
    '                            Else
    '                                grdCargos.TextMatrix(i, 25) = 0
    '                            End If
    '                        End If
    '                    Next i
    '                End If
                    
                    grdCargos.TextMatrix(grdCargos.Row, 33) = "" 'Estatus de cambio en paquetes, Permite ver si un registro ha sido modificado o no, para optimizar la grabada
                    grdCargos.TextMatrix(grdCargos.Row, 34) = IIf(IsNull(!ConceptoFacturaPaquete), 0, !ConceptoFacturaPaquete) 'Concepto de Facturación del paquete
                    grdCargos.TextMatrix(grdCargos.Row, 35) = IIf(IsNull(!PrecioPaquete), 0, !PrecioPaquete) 'PRECIO del paquete
                    grdCargos.TextMatrix(grdCargos.Row, 36) = IIf(IsNull(!PaqueteCuentaIngreso), 0, !PaqueteCuentaIngreso) 'Cuenta Ingreso del paquete
                    grdCargos.TextMatrix(grdCargos.Row, 37) = IIf(IsNull(!PaqueteCuentaDescuento), 0, !PaqueteCuentaDescuento) 'Cuenta de descuento del paquete
                    grdCargos.TextMatrix(grdCargos.Row, 38) = 0 'esta columna no se usa
                    grdCargos.TextMatrix(grdCargos.Row, 39) = 0 'esta columna no se usa
                    'grdCargos.TextMatrix(grdCargos.Row, 40) = IIf(IsNull(!IVAPaquete), 0, !IVAPaquete) 'IVA del paquete (ya multiplicado)
                    grdCargos.TextMatrix(grdCargos.Row, 40) = IIf(IsNull(!IVAPaquete), 0, Val(Format(Format(!IVAPaquete, "$ ###,###,###,###.00####")))) 'IVA del paquete (ya multiplicado)
                    grdCargos.TextMatrix(grdCargos.Row, 41) = IIf(IsNull(!DescripConceptoPaquete), 0, !DescripConceptoPaquete) 'Nombre del concepto de facturacion
                    grdCargos.TextMatrix(grdCargos.Row, 42) = IIf(IsNull(!INTMOVPACIENTE), 0, !INTMOVPACIENTE) '|  Cuenta (Movimiento) del paciente
                    grdCargos.TextMatrix(grdCargos.Row, cintColMarcadoParaFacturar) = IIf(IsNull(!MarcadoParaFacturar), 0, !MarcadoParaFacturar) 'Indica si el cargo se seleccionó para facturar a los pacientes de convenio con aseguradoras
                    
                    'Descuentos
                    grdCargos.TextMatrix(grdCargos.Row, 6) = Format(!MNYDESCUENTO, "$ ###,###,###,###.00####")
    '                'Total
    '                vldbltotal = (!mnyPrecio * !mnyCantidad) - !mnyDescuento
                    grdCargos.TextMatrix(grdCargos.Row, 7) = Format(vldbltotal, "$ ###,###,###,###.00####")
                    'IVA
    '                vldblIva = !MontoIVA
                    grdCargos.TextMatrix(grdCargos.Row, 8) = Format(vldblIVA, "$ ###,###,###,###.00####")
                    'Total total
                    grdCargos.TextMatrix(grdCargos.Row, 9) = Format(vldbltotal + vldblIVA, "$ ###,###,###,###.00####")
                    
    '                grdCargos.TextMatrix(grdCargos.Row, cintColPrecioCargo) = !mnyPrecio
    '                grdCargos.TextMatrix(grdCargos.Row, cintColDescuentoCargo) = IIf(IsNull(!MNYDESCUENTO), 0, !MNYDESCUENTO)
    '                grdCargos.TextMatrix(grdCargos.Row, cintColPrecioPaquete) = IIf(IsNull(!PrecioPaquete), 0, !PrecioPaquete)
    '                grdCargos.TextMatrix(grdCargos.Row, cintColIVAPaquete) = IIf(IsNull(!IVAPaquete), 0, !IVAPaquete)
    '                'grdCargos.TextMatrix(grdCargos.Row, cintColPrecioCantidad) = !mnyPrecio * !mnyCantidad
    '                grdCargos.TextMatrix(grdCargos.Row, cintColPrecioCantidad) = vldblPrecio * !mnyCantidad
    '                'grdCargos.TextMatrix(grdCargos.Row, cintColTotalCargo) = (!mnyPrecio * !mnyCantidad) - IIf(IsNull(!mnyDescuento), 0, !mnyDescuento) + IIf(IsNull(!MontoIVA), 0, !MontoIVA)
    '                grdCargos.TextMatrix(grdCargos.Row, cintColTotalCargo) = (vldblPrecio * !mnyCantidad) - IIf(IsNull(!MNYDESCUENTO), 0, !MNYDESCUENTO) + IIf(IsNull(!MontoIVA), 0, !MontoIVA)
    '                grdCargos.TextMatrix(grdCargos.Row, cintColDescuentopaquete) = IIf(IsNull(!DescuentoPaquete), 0, !DescuentoPaquete)
    '                'grdCargos.TextMatrix(grdCargos.Row, cintColCantidadPaquete) = IIf(IsNull(!PaquetesAsignados), 0, !PaquetesAsignados)
    
                    grdCargos.TextMatrix(grdCargos.Row, cintColPrecioCargo) = Round(!mnyPrecio, 6)
                    grdCargos.TextMatrix(grdCargos.Row, cintColDescuentoCargo) = IIf(IsNull(!MNYDESCUENTO), 0, Round(!MNYDESCUENTO, 6))
                    grdCargos.TextMatrix(grdCargos.Row, cintColPrecioPaquete) = IIf(IsNull(!PrecioPaquete), 0, Round(!PrecioPaquete, 6))
                    grdCargos.TextMatrix(grdCargos.Row, cintColIVAPaquete) = IIf(IsNull(!IVAPaquete), 0, Round(!IVAPaquete, 6))
                    'grdCargos.TextMatrix(grdCargos.Row, cintColPrecioCantidad) = !mnyPrecio * !mnyCantidad
                    grdCargos.TextMatrix(grdCargos.Row, cintColPrecioCantidad) = Round(Round(vldblPrecio, 6) * !MNYCantidad, 6)
                    'grdCargos.TextMatrix(grdCargos.Row, cintColTotalCargo) = (!mnyPrecio * !mnyCantidad) - IIf(IsNull(!mnyDescuento), 0, !mnyDescuento) + IIf(IsNull(!MontoIVA), 0, !MontoIVA)
                    grdCargos.TextMatrix(grdCargos.Row, cintColTotalCargo) = Round((Round(vldblPrecio, 6) * !MNYCantidad), 6) - IIf(IsNull(!MNYDESCUENTO), 0, Round(!MNYDESCUENTO, 6)) + IIf(IsNull(!MontoIVA), 0, Round(!MontoIVA, 6))
                    grdCargos.TextMatrix(grdCargos.Row, cintColDescuentopaquete) = IIf(IsNull(!DescuentoPaquete), 0, Round(!DescuentoPaquete, 6))
                    'grdCargos.TextMatrix(grdCargos.Row, cintColCantidadPaquete) = IIf(IsNull(!PaquetesAsignados), 0, !PaquetesAsignados)
    
                    grdCargos.TextMatrix(grdCargos.Row, cintColConceptoExento) = IIf(IsNull(!smyIVAoExento), 0, !smyIVAoExento)
                    grdCargos.TextMatrix(grdCargos.Row, cintColExcluirDescuento) = IIf(IsNull(!bitExcluirDescuento), "", IIf(!bitExcluirDescuento = 0, "", "X"))
                    grdCargos.TextMatrix(grdCargos.Row, 63) = IIf(IsNull(!ClaveDeptoIngreso), 0, !ClaveDeptoIngreso)
                    grdCargos.TextMatrix(grdCargos.Row, 64) = IIf(IsNull(!cveArticulo), 0, !cveArticulo) 'solo para articulo
                    '18084 grid
                    grdCargos.TextMatrix(grdCargos.Row, cintColNombreCarta) = IIf(IsNull(!NombreCarta), "", !NombreCarta) ''65
                    grdCargos.TextMatrix(grdCargos.Row, cintColCveCarta) = IIf(IsNull(!cveCarta), 0, !cveCarta) ''66
    
    '                grdCargos.TextMatrix(grdCargos.Row, 65) = IIf(IsNull(!cantidadSurteConsignacion), 0, !cantidadSurteConsignacion)
                    'Paquetes fraccionados de PEMEX
                    lngCantidadPaquete = 1
                    frsEjecuta_SP !INTMOVPACIENTE & "|" & !CHRTIPOPACIENTE & "|" & !ClavePaquete, "fn_PVnumPaquetesAFacturar", True, lngCantidadPaquete
                    grdCargos.TextMatrix(grdCargos.Row, cintColCantidadPaquete) = Round(lngCantidadPaquete / 100, 3)
                    
                    If Not rsExcedentes.EOF Then
                        vldblExcedenteGrupo = 0
                        rsExcedentes.MoveFirst
                        Do While Not rsExcedentes.EOF
                            If rsExcedentes!IntNumCargo = grdCargos.RowData(grdCargos.Row) Then
                                vldblExcedenteGrupo = vldblExcedenteGrupo + rsExcedentes!mnyexcedente
                                blnExisteExcedente = True
                            End If
                            rsExcedentes.MoveNext
                        Loop
                        grdCargos.TextMatrix(grdCargos.Row, 55) = Format(vldblExcedenteGrupo, "$ ###,###,###,###.00")
                        rsExcedentes.MoveFirst
                    End If
                    
                    If !PrecioManual Then
                         grdCargos.Col = 3
                         grdCargos.CellBackColor = &HC0FFFF   'fondo amarillo
                     End If
                     If Not IsNull(!FechaManual) Then
                         If !FechaManual = 1 Then
                             grdCargos.Col = 10
                             grdCargos.CellBackColor = &HC0E0FF      'fondo naranja
                         End If
                     End If
                     If !Excluido = "X" Then
                         For vlintcontador = 1 To grdCargos.Cols - 1
                             grdCargos.Col = vlintcontador
                             grdCargos.CellForeColor = &HFF0000 'letra azul
                         Next
                     Else
                         For vlintcontador = 1 To grdCargos.Cols - 1
                             grdCargos.Col = vlintcontador
                             grdCargos.CellForeColor = &H0& 'letra negra
                         Next
                        
                        '-- 16805
                        '-- Los cargos que se marcarán para excluirlos del descuento especial, serán los que cumplan con las siguientes condiciones:
                        '-- Si la empresa del convenio tiene configurado la opción de excluir medicamento y material del descuento especial
                        '-- Si los cargos que son de tipo "AR", que no están incluidos en paquete o
                        '-- los cargos que si están incluidos en paquete, pero únicamente los que quedaron fuera del paquete
                        If dblPorcentajeDescEspecial > 0 And vlblnConsiderarExcluidosDescEsp And grdCargos.TextMatrix(grdCargos.Row, cintColExcluirDescuento) = "X" _
                           And grdCargos.TextMatrix(grdCargos.Row, 1) = "AR" _
                           And (Val(grdCargos.TextMatrix(grdCargos.Row, 30)) = 0 _
                               Or (Val(grdCargos.TextMatrix(grdCargos.Row, 30)) > 0 And Val(grdCargos.TextMatrix(grdCargos.Row, 54)) > 0)) Then
                               For vlintcontador = 1 To grdCargos.Cols - 1
                                   grdCargos.Col = vlintcontador
                                   grdCargos.CellForeColor = &HC0C000
                               Next
                        End If
                     End If
                         grdCargos.Col = grdCargos.Cols - 1
                         grdCargos.CellFontBold = True
                         grdCargos.Col = grdCargos.Col - 3
                         grdCargos.CellFontBold = True
                         grdCargos.Col = grdCargos.Col + 1
                End If ''Termina
            End If
                 
                 '-- 16652
                 '-- Los cargos que se marcarán para ser separados hacia FARMACIA, serán los que cumplan con las siguientes condiciones:
                 '-- Cargos que son de tipo "AR"
                 '-- Cargos que no están incluidos en paquete
                 '-- Cargos que si están incluidos en paquete, pero únicamente los que quedaron fuera del paquete
                 If aFarmaciaCompartida(0).blnActivo _
                    And cmdSepararCargosFarmacia.Visible _
                    And cmdSepararCargosFarmacia.Enabled _
                    And grdCargos.TextMatrix(grdCargos.Row, 1) = "AR" _
                    And (Val(grdCargos.TextMatrix(grdCargos.Row, 30)) = 0 _
                        Or (Val(grdCargos.TextMatrix(grdCargos.Row, 30)) > 0 And Val(grdCargos.TextMatrix(grdCargos.Row, 54)) > 0)) Then
                    If fblnBuscaCargosConsignacion Then
                        For vlintcontador = 1 To grdCargos.Cols - 1
                            grdCargos.Col = vlintcontador
                            grdCargos.CellForeColor = &HC0&
                        Next

                        vlblnSeparaCargosFarmCompartida = True
                    End If
                 End If
            .MoveNext
        Loop
        grdCargos.Redraw = True
        
        If lngAncho > 800 Then grdCargos.ColWidth(15) = lngAncho + 100
    .Close
    End With
    
    pConsultaControl
    pCargaControl
    
    '-------------------------------------------------------------------
    ' (Begin) Procedimiento para calcular DESCUENTOS
    '-------------------------------------------------------------------
    If grdCargos.RowData(1) <> -1 Then 'Por si esta vacio el de cargos
        pTotales 'Calculo de totales
    End If 'Por si esta vacio el de cargos
    
    ' -- 16652
    If vlblnSeparaCargosFarmCompartida = False Then
        cmdSepararCargosFarmacia.Visible = True
        'If cmdSepararCargosFarmacia.Enabled <> True Then
            cmdSepararCargosFarmacia.Enabled = False
        'End If
        pConfiguraGridCargos
    End If
    
    ' -- Caso 16801 --
    ' Se muestra en una etiqueta los puntos disponibles con los que cuenta el paciente, en caso de tener
    ' la licencia activa para generar la lealtad del cliente y el médico con el hospital por medio del otorgamiento de puntos
    vlstrMensajePuntos = ""
    vldblMontoDisponiblePuntos = 0
    vldblMontoDisponiblePuntosPac = 0
    vldblMontoDisponiblePuntosMed = 0
    vldblPuntosDisponibles = 0
    If optGrupoCuenta(1).Value And blnLicenciaLealtadCliente Then
        pDatosPaciente txtMovimientoPaciente.Text
        '-- puntos paciente
        vgstrParametrosSP = Val(txtMovimientoPaciente.Text) & "|1|-1"
        Set rsPuntos = frsEjecuta_SP(vgstrParametrosSP, "SP_PVSELPUNTOSDISPONIBLES")

        If rsPuntos.RecordCount > 0 Then vldblMontoDisponiblePuntosPac = rsPuntos!puntosDisponibles
        
        vlstrSentencia = "select pi.intcvetipoingreso, pi.intcvetipopaciente, nvl(pi.intcvemedicorelacionado, 0) intcvemedicorelacionado, pi.intcvemedicotratante, tp.bitfamiliar, tp.chrtipo from ExPacienteIngreso pi inner join AdTipoPaciente tp on pi.intcvetipopaciente = tp.tnycvetipopaciente where pi.intNumCuenta = " & Val(txtMovimientoPaciente.Text)
        Set rs = frsRegresaRs(vlstrSentencia, adOpenDynamic, adLockOptimistic)
        If rs.RecordCount > 0 Then
            vllngCveTipoPaciente = rs!intCveTipoPaciente
    
            If (rs!bitFamiliar = 1 And rs!chrTipo = "ME") Or rs!chrTipo = "ME" Then
                '-- puntos médico o familiar de médico
                intCveMedicoRelacionado = rs!intCveMedicoRelacionado
                vgstrParametrosSP = Val(txtMovimientoPaciente.Text) & "|0|" & intCveMedicoRelacionado
                Set rsPuntosMedico = frsEjecuta_SP(vgstrParametrosSP, "SP_PVSELPUNTOSDISPONIBLES")
        
                If rsPuntosMedico.RecordCount > 0 Then vldblMontoDisponiblePuntosMed = rsPuntosMedico!puntosDisponiblesMed
            End If
        End If
        
        If (vldblMontoDisponiblePuntosPac + vldblMontoDisponiblePuntosMed) > 0 Then
            vldblPuntosDisponibles = (vldblMontoDisponiblePuntosPac + vldblMontoDisponiblePuntosMed)
            vldblMontoDisponiblePuntos = ((vldblMontoDisponiblePuntosPac + vldblMontoDisponiblePuntosMed) * fdblValorPuntoLealtad)
            If vldblMontoDisponiblePuntos > 0 Then
                vlstrMensajePuntos = "Puntos acumulados " & (vldblMontoDisponiblePuntosPac + vldblMontoDisponiblePuntosMed) & " que equivalen a " & Format(vldblMontoDisponiblePuntos, "$ ###,###,###,###.00")
            End If
        Else
            vlstrMensajePuntos = "Puntos acumulados " & (vldblMontoDisponiblePuntosPac + vldblMontoDisponiblePuntosMed) & " que equivalen a " & Format(vldblMontoDisponiblePuntos, "$ ###,###,###,##0.00")
        End If
        pEtiquetaVar "Generales", vlstrMensajePuntos
        pEtiquetaVar "Generales", vlstrMensajePuntos
    End If
    freBarra.Visible = False
    grdCargos.Redraw = True
End Sub

Private Sub pLlenaPagos()
    Dim vlstrSentencia As String
    Dim rs As New ADODB.Recordset
    Dim vldblTotalPagos As Double
    Dim vldblCantidad As Double
    Dim vlintcontador As Integer
    
    vlstrSentencia = "Select intNumPago " & _
                     "     , pvpago.intNumConcepto " & _
                     "     , chrDescripcion Concepto " & _
                     "     , dtmFecha Fecha" & _
                     "     , chrFolioRecibo Recibo" & _
                     "     , mnyCantidad Cantidad " & _
                     "     , Case bitPesos when 1 then 'Pesos' Else 'Dolares' end as Moneda " & _
                     "     , mnyTipoCambio TipoCambio" & _
                     "     , chrTipo TipoPago " & _
                     "     , isnull(chrFolioFactura,'') Factura" & _
                     "     , 'E' EntradaSalida " & _
                     "     , intNumCorte Corte " & _
                     "     , pvconceptopagoempresa.intnumerocuenta CuentaConcepto " & _
                     "     , pvpago.bitIncluidoenFactura " & _
                     "  From pvpago " & _
                     "       inner join pvConceptoPago on pvPago.intNumConcepto = pvConceptoPago.intNumConcepto " & _
                     "       inner join pvconceptopagoempresa on pvconceptopago.intnumconcepto = pvconceptopagoempresa.intnumconcepto " & _
                     " Where pvconceptopagoempresa.intcveempresa = " & vgintClaveEmpresaContable
    If optGrupoCuenta(0).Value Then
        vlstrSentencia = vlstrSentencia & _
                         " and (PVPAGO.intmovpaciente, PVPAGO.chrtipopaciente) " & _
                         "       In (Select Distinct INTMOVPACIENTE, CHRTIPOPACIENTE From PVDETALLEFACTURACONSOLID Where INTCVEGRUPO = " & Trim(txtMovimientoPaciente.Text) & ")"
    Else
        vlstrSentencia = vlstrSentencia & _
                         " and chrTipoPaciente = " & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & _
                         "   and intMovPaciente = " & Trim(txtMovimientoPaciente.Text)
    End If
    vlstrSentencia = vlstrSentencia & _
                     IIf(chkIncluyePagosFacturados.Value, " and not (bitCancelado = 1 and chrFolioFactura is null)", " and bitCancelado = 0")
    vlstrSentencia = vlstrSentencia & " UNION Select intNumSalida, pvSalidaDinero.intNumConcepto, " & _
                    " chrDescripcion Concepto, dtmFecha Fecha, chrFolioRecibo Recibo, " & _
                    " mnyCantidad*-1 Cantidad, " & _
                    " Case bitPesos when 1 then 'Pesos' Else 'Dolares' end as Moneda, " & _
                    " mnyTipoCambio TipoCambio, 'SD' TipoPago, " & _
                    " isnull(chrFolioFactura,'') Factura, " & _
                    " 'S' EntradaSalida, " & _
                    " intNumCorte Corte, " & _
                    " pvconceptopagoempresa.intnumerocuenta CuentaConcepto, " & _
                    " pvsalidadinero.bitIncluidoenFactura " & _
                    " From pvSalidaDinero " & _
                    " inner join pvConceptoPago on pvSalidaDinero.intNumConcepto = pvConceptoPago.intNumConcepto " & _
                    " inner join pvconceptopagoempresa on pvconceptopago.intnumconcepto = pvconceptopagoempresa.intnumconcepto " & _
                    " where pvconceptopagoempresa.intcveempresa = " & vgintClaveEmpresaContable
    If optGrupoCuenta(0).Value Then
        vlstrSentencia = vlstrSentencia & _
                         " and (pvSalidaDinero.intmovpaciente, pvSalidaDinero.chrtipopaciente) " & _
                         "       In (Select Distinct INTMOVPACIENTE, CHRTIPOPACIENTE From PVDETALLEFACTURACONSOLID Where INTCVEGRUPO = " & Trim(txtMovimientoPaciente.Text) & ")"
    Else
        vlstrSentencia = vlstrSentencia & _
                         " and chrTipoPaciente = " & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & _
                         "   and intMovPaciente = " & Trim(txtMovimientoPaciente.Text)
    End If
    vlstrSentencia = vlstrSentencia & _
                     IIf(chkIncluyePagosFacturados.Value, " and not (bitCancelado = 1 and chrFolioFactura is null)", " and bitCancelado = 0")

    Set rs = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
    
    pLimpiaGrid grdPagos
    pConfiguraGridPagos
    vldblTotalPagos = 0
    With grdPagos
        .Redraw = False 'Optimización
        If optOrdenCargos(3).Value Then
            rs.Sort = "Fecha"
        ElseIf optOrdenCargos(4).Value Then
                rs.Sort = "Concepto"
            ElseIf optOrdenCargos(5).Value Then
                rs.Sort = "Cantidad"
        End If
        
        Do While Not rs.EOF
            If .RowData(1) <> -1 Then
                 .Rows = .Rows + 1
                 .Row = .Rows - 1
            End If

            .Col = 0
            .CellFontBold = True
            If (Trim(rs!Factura) = "") Or IsNull(rs!Factura) Then
                .TextMatrix(.Row, 0) = "*"
            Else
                .TextMatrix(.Row, 0) = "F"
            End If
            .RowData(.Row) = rs!intNumPago 'No me sirve de nada
            .TextMatrix(.Row, 1) = rs!Concepto
            .TextMatrix(.Row, 2) = rs!fecha
            .TextMatrix(.Row, 3) = Format(rs!cantidad, "$ ###,###,###,###.00") 'La cantidad se pone igual que como se grabó (Sin hacer nungún tipo de conversión dado que se despliega también la moneda)
            vldblCantidad = IIf(rs!Moneda = "Pesos", 1, rs!TipoCambio) * rs!cantidad 'Convierte a pesos (Si es necesario)
            lngMontoCambioPago = IIf(rs!Moneda = "Pesos", 1, rs!TipoCambio) 'aqui lo guardamos para la conversion by hector
            lngTipoCambioAnticipo = IIf(rs!TipoCambio = 0, 1, rs!TipoCambio)
            .TextMatrix(.Row, 4) = Trim(rs!Recibo)
            .TextMatrix(.Row, 5) = rs!Moneda
            .TextMatrix(.Row, 6) = IIf(IsNull(rs!Factura), "", rs!Factura)
            .TextMatrix(.Row, 7) = rs!tipoPago
            .TextMatrix(.Row, 8) = rs!TipoCambio
            .TextMatrix(.Row, 9) = rs!EntradaSalida
            .TextMatrix(.Row, 10) = rs!corte
            .TextMatrix(.Row, 11) = rs!CuentaConcepto
            .TextMatrix(.Row, 12) = IIf(IsNull(rs!bitIncluidoenFactura), 0, rs!bitIncluidoenFactura)
            .TextMatrix(.Row, 13) = rs!cantidad

            If (rs!tipoPago = "NO" Or rs!tipoPago = "SD") And (.TextMatrix(.Row, 0) <> "F") Then
                vldblTotalPagos = vldblTotalPagos + vldblCantidad
            End If
            
            For vlintcontador = 2 To .Cols - 1
                If rs!EntradaSalida = "S" Then
                    .Col = vlintcontador
                    .CellBackColor = &H80000018
                Else
                    .Col = vlintcontador
                    .CellForeColor = &H80000008
                End If
            Next
            rs.MoveNext
        Loop
    .Redraw = True 'Optimización
    rs.Close
    End With
    If IIf(rsPostergado.RecordCount > 0, rsPostergado!BITPOSTERGADA, 0) = 1 Then
        txtPagos.Text = Format(0, "$ ###,###,###,##0.00")
    Else
        txtPagos.Text = Format(vldblTotalPagos, "$ ###,###,###,##0.00")
    End If
End Sub

Private Sub pTotales()
    'Cargos no excluídos
    Dim dblCargosNOExcluidosNoFact As Double
    Dim dblImporteNoExcluidoNoFact As Double
    Dim dblDescuentoNoExcluidoNoFact As Double
    Dim dblIVANoExcluidoNoFact As Double
    'Cargos excluídos
    Dim dblCargosExcluidosNoFact As Double
    Dim dblImporteENoFact As Double
    Dim dblDescuentoENoFact As Double
    Dim dblIVAENoFact As Double
    'Todos los cargos
    Dim vldbltotal As Double
    Dim vldblSubtotal As Double
    Dim vldblTotDescuentos As Double
    Dim vldblIVA As Double
    Dim vlintcontador As Integer
    Dim vldblIVARedondeo As Double
    
    vldblSubtotal = 0
    vldblTotDescuentos = 0
    vldblIVA = 0
    
    dblImporteNoExcluidoNoFact = 0
    dblDescuentoNoExcluidoNoFact = 0
    dblIVANoExcluidoNoFact = 0
    dblImporteENoFact = 0
    dblDescuentoENoFact = 0
    dblIVAENoFact = 0
    dblCargosExcluidosNoFact = 0
    dblCargosNOExcluidosNoFact = 0
  
    
    For vlintcontador = 1 To grdCargos.Rows - 1
        If grdCargos.TextMatrix(vlintcontador, 0) = "*" Then
            'vldblSubtotal = vldblSubtotal + CDbl(Val(grdCargos.TextMatrix(vlintContador, cintColPrecioCantidad)))
            'vldblTotDescuentos = vldblTotDescuentos + CDbl(Val(grdCargos.TextMatrix(vlintContador, cintColDescuentoCargo)))
            vldblSubtotal = vldblSubtotal + CDbl(grdCargos.TextMatrix(vlintcontador, cintColPrecioCantidad))
            vldblTotDescuentos = vldblTotDescuentos + CDbl(grdCargos.TextMatrix(vlintcontador, cintColDescuentoCargo))
            'vldblIVA = vldblIVA + IIf(CDbl(Val(grdCargos.TextMatrix(vlintContador, cintColIVACargo))) > 0, (CDbl(Val(grdCargos.TextMatrix(vlintContador, cintColPrecioCargo))) * Val(Format(grdCargos.TextMatrix(vlintContador, 4), "")) - CDbl(Val(grdCargos.TextMatrix(vlintContador, cintColDescuentoCargo)))) * (CDbl(Val(grdCargos.TextMatrix(vlintContador, 19))) / 100), 0)
            vldblIVA = vldblIVA + IIf(CDbl(grdCargos.TextMatrix(vlintcontador, cintColIVACargo)) > 0, CDbl(grdCargos.TextMatrix(vlintcontador, cintColIVACargo)), 0)
            vldblIVARedondeo = vldblIVARedondeo + IIf(CDbl(grdCargos.TextMatrix(vlintcontador, cintColIVACargo)) > 0, CDbl(Format(grdCargos.TextMatrix(vlintcontador, cintColIVACargo), "############.00")), 0)
            
            If grdCargos.TextMatrix(vlintcontador, 18) <> "X" Then
                'dblImporteNoExcluidoNoFact = dblImporteNoExcluidoNoFact + CDbl(Val(grdCargos.TextMatrix(vlintContador, cintColPrecioCantidad)))
                'dblDescuentoNoExcluidoNoFact = dblDescuentoNoExcluidoNoFact + CDbl(Val(grdCargos.TextMatrix(vlintContador, cintColDescuentoCargo)))
                dblImporteNoExcluidoNoFact = dblImporteNoExcluidoNoFact + CDbl(grdCargos.TextMatrix(vlintcontador, cintColPrecioCantidad))
                dblDescuentoNoExcluidoNoFact = dblDescuentoNoExcluidoNoFact + CDbl(grdCargos.TextMatrix(vlintcontador, cintColDescuentoCargo))
                
                dblIVANoExcluidoNoFact = dblIVANoExcluidoNoFact + IIf(CDbl(grdCargos.TextMatrix(vlintcontador, cintColIVACargo)) > 0, CDbl(grdCargos.TextMatrix(vlintcontador, cintColIVACargo)), 0)
            ElseIf grdCargos.TextMatrix(vlintcontador, 18) = "X" Then
                'dblImporteENoFact = dblImporteENoFact + Val(Format(grdCargos.TextMatrix(vlintContador, 4), "")) * CDbl(Val(grdCargos.TextMatrix(vlintContador, cintColPrecioCargo)))
                'dblDescuentoENoFact = dblDescuentoENoFact + CDbl(Val(grdCargos.TextMatrix(vlintContador, cintColDescuentoCargo)))
                dblImporteENoFact = dblImporteENoFact + CDbl(grdCargos.TextMatrix(vlintcontador, cintColPrecioCantidad))
                dblDescuentoENoFact = dblDescuentoENoFact + CDbl(grdCargos.TextMatrix(vlintcontador, cintColDescuentoCargo))
                
                dblIVAENoFact = dblIVAENoFact + IIf(CDbl(grdCargos.TextMatrix(vlintcontador, cintColIVACargo)) > 0, CDbl(grdCargos.TextMatrix(vlintcontador, cintColIVACargo)), 0)
            End If
        End If
    Next
    
    If optGrupoCuenta(0).Value Then
        If vldblIVARedondeo > vldblIVA Then
            vldblIVA = vldblIVARedondeo
            For vlintcontador = 1 To grdCargos.Rows - 1
                grdCargos.TextMatrix(vlintcontador, cintColIVACargo) = IIf(CDbl(grdCargos.TextMatrix(vlintcontador, cintColIVACargo)) > 0, CDbl(Format(grdCargos.TextMatrix(vlintcontador, cintColIVACargo), "############.00")), 0)
            Next
        End If
    End If
    
    
    dblCargosExcluidosNoFact = Format(dblImporteENoFact, "############.00####") - Format(dblDescuentoENoFact, "############.00####") + Format(dblIVAENoFact, "############.00####")
    dblCargosNOExcluidosNoFact = Format(dblImporteNoExcluidoNoFact, "############.00####") - Format(dblDescuentoNoExcluidoNoFact, "############.00####") + Format(dblIVANoExcluidoNoFact, "############.00####")
    
    txtDescuentos.Text = Format(vldblTotDescuentos, "$ ###,###,###,##0.00")
    txtSubtotal.Text = Format(vldblSubtotal - vldblTotDescuentos, "$ ###,###,###,##0.00")
    txtIva.Text = Format(vldblIVA, "$ ###,###,###,##0.00")
    vldbltotal = vldblSubtotal - vldblTotDescuentos + vldblIVA
    'txtTotalFactura.Text = FormatCurrency(Val(Format(txtSubtotal.Text, "")) + Val(Format(txtIva.Text, "")), 2)
    txtTotalFactura.Text = Format(Val(Format(txtSubtotal.Text, "")) + Val(Format(txtIva.Text, "")), "$ ###,###,###,##0.00")
    txtTotal.Text = txtTotalFactura.Text
    optMuestraCargos(0).Caption = "Todos (" & FormatCurrency(dblCargosExcluidosNoFact + dblCargosNOExcluidosNoFact, 2) & ")"
    optMuestraCargos(2).Caption = "Excluídos (" & FormatCurrency(dblCargosExcluidosNoFact, 2) & ")"
    optMuestraCargos(1).Caption = "Sin excluir (" & FormatCurrency(dblCargosNOExcluidosNoFact, 2) & ")"
   
    If Not optMuestraCargos(1).Value Then
        '------------------------------------------------------
        ' No le quito los pagos cuando veo solo los excluidos
        ' porque los pagos solo son del paciente particular
        '-------------------------------------------------------
        txtTotal.Text = Format(Val(Format(txtTotal.Text, "")) - Val(Format(txtPagos.Text, "")), "$ ###,###,###,##0.00")
    End If
    
    txtPagos.Enabled = Not optMuestraCargos(1).Value
    lblPagos.Enabled = Not optMuestraCargos(1).Value
End Sub

Private Function fintPosicion(lngCveConcepto As Long, lngCveDepartamento As Long) As Integer
    Dim intcontador As Integer

    fintPosicion = -1
    For intcontador = 0 To UBound(aCPCargosPoliza) - 1
        If lngCveConcepto = aCPCargosPoliza(intcontador).lngConceptoFacturacion And lngCveDepartamento = aCPCargosPoliza(intcontador).lngDepartamento Then
            fintPosicion = intcontador
        End If
    Next intcontador
End Function

Private Function fdblDescuentoConceptoSeguro(lngCveConcepto As Long, lngnumCuenta As Long, strTipoPaciente As String, dblImporte As Double, strConcepto As String)
    'Función para calcular el descuento sobre conceptos de seguro
    Dim rs As New ADODB.Recordset
    Dim dtmfecha As Date
    Dim blnContinuar As Boolean
    
    fdblDescuentoConceptoSeguro = 0
    
    dtmfecha = fdtmServerFecha
    
    vgstrParametrosSP = str(lngnumCuenta) & "|" & strTipoPaciente & "|" & str(lngCveConcepto)
    Set rs = frsEjecuta_SP(vgstrParametrosSP, "SP_PVSELDESCUENTOPACIENTE")
    'If rs.RecordCount <> 0 Then
    Do While Not rs.EOF
        blnContinuar = True
        If Not IsNull(rs!dtmFechaInicioVigencia) Then
            blnContinuar = dtmfecha >= rs!dtmFechaInicioVigencia And dtmfecha <= rs!dtmFechaFinVigencia
        End If
        
        If blnContinuar Then
            If rs!intTipoDescuento = 0 Then
            'Descuento en cantidad:
                If Not blnCalcularEnBaseACargos Then
                    fdblDescuentoConceptoSeguro = fdblDescuentoConceptoSeguro + rs!MNYDESCUENTO
                Else
                    If strConcepto = "EX" Then
                        fdblDescuentoConceptoSeguro = fdblDescuentoConceptoSeguro + (dblImporte / IIf(Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")) = 0, 1, Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")))) * rs!MNYDESCUENTO
                    ElseIf strConcepto = "DE" Then
                        fdblDescuentoConceptoSeguro = fdblDescuentoConceptoSeguro + (dblImporte / IIf(Val(Format(txtDeducible.Text, "############.00")) = 0, 1, Val(Format(txtDeducible.Text, "############.00")))) * rs!MNYDESCUENTO
                    ElseIf strConcepto = "CO" Then
                        fdblDescuentoConceptoSeguro = fdblDescuentoConceptoSeguro + (dblImporte / IIf(Val(Format(txtCoaseguro.Text, "############.00")) = 0, 1, Val(Format(txtCoaseguro.Text, "############.00")))) * rs!MNYDESCUENTO
                        'fdblDescuentoConceptoSeguro = (dblImporte / IIf(IIf(intCoaseguroPorFactura = 1, Val(Format(txtCantidadMaximaCO.Text, "###############.00")), Val(Format(txtCoaseguro.Text, "###############.00"))) = 0, 1, IIf(intCoaseguroPorFactura = 1, Val(Format(txtCantidadMaximaCO.Text, "###############.00")), Val(Format(txtCoaseguro.Text, "###############.00"))))) * rs!mnyDescuento
                    ElseIf strConcepto = "CM" Then
                        fdblDescuentoConceptoSeguro = fdblDescuentoConceptoSeguro + (dblImporte / IIf(Val(Format(txtCoaseguroMedico.Text, "############.00")) = 0, 1, Val(Format(txtCoaseguroMedico.Text, "############.00")))) * rs!MNYDESCUENTO
                    ElseIf strConcepto = "CA" Then
                        fdblDescuentoConceptoSeguro = fdblDescuentoConceptoSeguro + (dblImporte / IIf(Val(Format(txtCoaseguroAdicional.Text, "############.00")) = 0, 1, Val(Format(txtCoaseguroAdicional.Text, "############.00")))) * rs!MNYDESCUENTO
                    ElseIf strConcepto = "CP" Then
                        fdblDescuentoConceptoSeguro = fdblDescuentoConceptoSeguro + (dblImporte / IIf(Val(Format(txtCopago.Text, "############.00")) = 0, 1, Val(Format(txtCopago.Text, "############.00")))) * rs!MNYDESCUENTO
                    End If
                End If
            End If
            If rs!intTipoDescuento = 1 Then
                'Descuento en porcentaje:
                fdblDescuentoConceptoSeguro = fdblDescuentoConceptoSeguro + (dblImporte * rs!MNYDESCUENTO / 100)
            End If
            If rs!intTipoDescuento = 2 Then
                'Descuento en costo: (no existen costos de conceptos, o sea el descuento es 0 (cero)
                fdblDescuentoConceptoSeguro = 0
            End If
        End If
        rs.MoveNext
    Loop
    'End If
End Function

Private Sub pConfiguraGridFacturaEmpresa()
    With grdFacturaEmpresa
        .Cols = 16
        .FixedCols = 2
        .FixedRows = 1
        .FormatString = "|Concepto|Cargo|Abono"
        .ColWidth(0) = 200  'Fix
        .ColWidth(1) = 8000 'Concepto de facturación
        .ColWidth(2) = 1430 'Cargo
        .ColWidth(3) = 1430 'Abono
        .ColWidth(4) = 0    'IVA  -----
        .ColWidth(5) = 0    'Descuentos
        .ColWidth(6) = 0   'Tipo de Concepto (NO = Normal, DE = Descuentos, OC = OtrosConeptos)
        .ColWidth(7) = 0    'Disponible
        .ColWidth(8) = 0    'Clave del Paquete
        .ColWidth(9) = 0    'Cargos, con todos los decimales
        .ColWidth(10) = 0    'Cargo en pesos
        .ColWidth(11) = 0    'Descuento en pesos
        .ColWidth(12) = 0    'Cargo en pesos con decimales
        .ColWidth(13) = 0   'Indica si el concepto de facturación grava
        .ColWidth(14) = 0   'retencion correspondiente al concepto si aplica
        .ColWidth(15) = 0   'Descuento especial
        .ColAlignment(0) = flexAlignCenterCenter
        .ColAlignment(1) = flexAlignLeftCenter
        .ColAlignment(2) = flexAlignRightCenter
        .ColAlignment(3) = flexAlignRightCenter
        .ColAlignment(4) = flexAlignRightCenter
        .ColAlignment(5) = flexAlignCenterCenter
        .ColAlignment(6) = flexAlignRightCenter
        .ColAlignment(7) = flexAlignRightCenter
        .ColAlignment(8) = flexAlignRightCenter
        .ColAlignment(9) = flexAlignRightCenter
        .ColAlignmentFixed(0) = flexAlignCenterCenter
        .ColAlignmentFixed(1) = flexAlignLeftCenter
        .ColAlignmentFixed(2) = flexAlignCenterCenter
        .ColAlignmentFixed(3) = flexAlignCenterCenter
        .ColAlignmentFixed(4) = flexAlignCenterCenter
        .ColAlignmentFixed(5) = flexAlignCenterCenter
        .ColAlignmentFixed(6) = flexAlignCenterCenter
        .ColAlignmentFixed(7) = flexAlignCenterCenter
        .ColAlignmentFixed(8) = flexAlignCenterCenter
        .ColAlignmentFixed(9) = flexAlignCenterCenter
        .ScrollBars = flexScrollBarBoth
    End With
End Sub

Public Sub pConfiguraGridFacturaPaciente()
    With grdFacturaPaciente
        .Cols = 16
        .FixedCols = 2
        .FixedRows = 1
        .FormatString = "|Concepto|Cargo|Abono"
        
        .ColWidth(0) = 200  'Fix
        .ColWidth(1) = 4935 'Concepto de facturación
        .ColWidth(2) = 1300 'Cargo
        .ColWidth(3) = 1300 'Abono
        .ColWidth(4) = 0    'IVA
        .ColWidth(5) = 0    'Descuentos
        .ColWidth(6) = 0    'Tipo de Concepto (NO = Normal, DE = Descuentos, OC = OtrosConeptos)
        .ColWidth(7) = 0    'Tipo de Otro Concepto (Deducible, Coaseguro, Copago o Excedente)
        .ColWidth(8) = 0    'Clave del paquete
        .ColWidth(9) = 0    'Cargos con decimales
        .ColWidth(10) = 0   'Cargos en pesos
        .ColWidth(11) = 0   'Descuentos en pesos
        .ColWidth(12) = 0    'Cargos en pesos con decimales
        .ColWidth(13) = 0   'Indica si el concepto de facturación grava
        .ColWidth(14) = 0
        .ColWidth(15) = 0   'Descuento especial
        .ColAlignment(0) = flexAlignCenterCenter
        .ColAlignment(1) = flexAlignLeftCenter
        .ColAlignment(2) = flexAlignRightCenter
        .ColAlignment(3) = flexAlignRightCenter
        .ColAlignment(4) = flexAlignRightCenter
        .ColAlignment(5) = flexAlignCenterCenter
        .ColAlignment(6) = flexAlignRightCenter
        .ColAlignment(7) = flexAlignRightCenter
        .ColAlignment(8) = flexAlignRightCenter
        .ColAlignment(9) = flexAlignRightCenter
        .ColAlignmentFixed(0) = flexAlignCenterCenter
        .ColAlignmentFixed(1) = flexAlignLeftCenter
        .ColAlignmentFixed(2) = flexAlignCenterCenter
        .ColAlignmentFixed(3) = flexAlignCenterCenter
        .ColAlignmentFixed(4) = flexAlignCenterCenter
        .ColAlignmentFixed(5) = flexAlignCenterCenter
        .ColAlignmentFixed(6) = flexAlignCenterCenter
        .ColAlignmentFixed(7) = flexAlignCenterCenter
        .ColAlignmentFixed(8) = flexAlignCenterCenter
        .ColAlignmentFixed(9) = flexAlignCenterCenter
        .ScrollBars = flexScrollBarBoth
    End With
End Sub

Private Sub pConfiguraGridCargos()
    With grdCargos
         .Cols = 67     '66 18084 grid
        .FixedCols = 3
        .FixedRows = 1
        If cmdSepararCargosFarmacia.Visible And cmdSepararCargosFarmacia.Enabled Then
            .FormatString = "|Tipo|Descripción del cargo|Precio|Cant.|Importe|Descuento|Subtotal|IVA|Monto total|Fecha/Hora |Tipo doc.|Referencia|Concepto de facturación|Departamento|Factura||||||Exclusión||Urgente||||||Paquete asignado||Incluidos|Agregados||||||||||||||||||||||Fuera del paquete|Excedente por grupo de cargo|||||Almacén consignación farmacia|"
        Else
            .FormatString = "|Tipo|Descripción del cargo|Precio|Cant.|Importe|Descuento|Subtotal|IVA|Monto total|Fecha/Hora |Tipo doc.|Referencia|Concepto de facturación|Departamento|Factura||||||Exclusión||Urgente||||||Paquete asignado||Incluidos|Agregados||||||||||||||||||||||Fuera del paquete|Excedente por grupo de cargo||||||||-|-|Carta de autorización|Clave" '18084
        End If
        .ColWidth(0) = 200  'Fix
        .ColWidth(1) = 400  'Tipo de cargo (FIX)
        .ColWidth(2) = 4000 'Descripción
        .ColWidth(3) = 1000 'Precio
        .ColWidth(4) = 450  'Cantidad
        .ColWidth(5) = 1200 'Importe
        .ColWidth(6) = 1000 'Descuentos
        .ColWidth(7) = 1200 'Total
        .ColWidth(8) = 900 'Cantidad IVA
        .ColWidth(9) = 1200 'Total total
        .ColWidth(10) = 1530 'Fecha
        .ColWidth(11) = 1200 'Tipo de documento
        .ColWidth(12) = 1000 'Numero de documento (Referencia)
        .ColWidth(13) = 3500 'Concepto de facturación
        .ColWidth(14) = 2800 'Departamento
        .ColWidth(15) = 800 'Factura
        .ColWidth(16) = 0   'bitDescuentaInventario
        .ColWidth(17) = 0   'Clave del cargo
        .ColWidth(18) = 0   'Bit Excluido
        .ColWidth(19) = 0   'IVA
        .ColWidth(20) = 0   'Clave Concepto Facturacion
        .ColWidth(21) = 800 'Estatus Visual de ExClusion "X"
        .ColWidth(22) = 0   'Información en la tabla de BitUrgente
        .ColWidth(23) = 800 'Información Visual del BitUrgente
        .ColWidth(24) = 0   'Clave del departamento que carga
        .ColWidth(25) = 0   'Esta columna no se usa
        .ColWidth(26) = 0   'Esta columna no se usa
        .ColWidth(27) = 0   'Esta columna no se usa
        .ColWidth(28) = 0   'Esta columna no se usa
        .ColWidth(29) = 3000 'Descripción del paquete cambio 3 y tambien el tamaño del combo cboPaquetes Width=2995
        .ColWidth(30) = 0    'Clave del paquete
        .ColWidth(31) = 800  'Cantidad de cargos incluidos en el paquetew
        .ColWidth(32) = 900  'Cantidad de cargos incluidos en el paquete pero EXTRA de la configuracion inicial
        .ColWidth(33) = 0    'Estatus de cambio en paquetes, Permite ver si un registro ha sido modificado o no, para optimizar la grabada
        .ColWidth(34) = 0    'Concepto de facturacion del paquete
        .ColWidth(35) = 0    'Precio del paquete
        .ColWidth(36) = 0    'Cuenta de ingresos del Concepto del Paquete
        .ColWidth(37) = 0    'Cuenta de descuentos del Concepto del Paquete
        .ColWidth(38) = 0    'Esta columna no se usa
        .ColWidth(39) = 0    'Esta columna no se usa
        .ColWidth(40) = 0    'IVA del paquete (ya multiplicado)
        .ColWidth(41) = 0    'Descripcion del concepto de facturacion del paquete
        .ColWidth(42) = 0    'Cuenta a la que pertenece el cargo, esto es de utilidad para cuando se usan grupos de cuentas
        .ColWidth(43) = 0
        .ColWidth(44) = 0
        .ColWidth(45) = 0
        .ColWidth(46) = 0
        .ColWidth(47) = 0
        .ColWidth(48) = 0
        .ColWidth(49) = 0
        .ColWidth(50) = 0
        .ColWidth(51) = 0
        .ColWidth(52) = 0
        .ColWidth(53) = 0
        .ColWidth(54) = 1400   'Cantidad de cargos fuera del paquete y que se cobraran extra al paquete
        .ColWidth(55) = 2300   'Excedente por uso de paquetes y grupos de cargos configurados por monto
        .ColWidth(56) = 0
        .ColWidth(57) = 0
        .ColWidth(58) = 0
        .ColWidth(59) = 0       'Columna para indicar si el concepto de facturación será exento
        If cmdSepararCargosFarmacia.Visible And cmdSepararCargosFarmacia.Enabled Then
            .ColWidth(60) = 2500        'Columna para indicar si el cargo fue surtido mediante almacén de consignación de farmacia compartida
        Else
            .ColWidth(60) = 0
        End If
        .ColWidth(61) = 0       'Clave del articulo
        .ColWidth(62) = 0       'Excluido del descuento especial
        .ColWidth(63) = 0       'clave departamento ingreso,tomado de ivrequisicionmaestro
        .ColWidth(64) = 0       'clave articulo (solo articulos)
        .ColWidth(cintColNombreCarta) = 3200     'Descripción de la carta de autorización 18084 cambio 3
        .ColWidth(cintColCveCarta) = 0     'Clave de la carta de autorización     18084
'        .ColWidth(65) = 0       'Cantidad del cargo que fue surtido por almacén consignación
        
        .ColWidth(cintColPrecioCargo) = 0
        .ColWidth(cintColIVACargo) = 0
        .ColWidth(cintColDescuentoCargo) = 0
        .ColWidth(cintColPrecioPaquete) = 0
        .ColWidth(cintColIVAPaquete) = 0
        .ColWidth(cintColPrecioCantidad) = 0
        .ColWidth(cintColTotalCargo) = 0
        .ColWidth(cintColDescuentopaquete) = 0
        .ColWidth(cintColCantidadPaquete) = 0
        .ColWidth(cintColMarcadoParaFacturar) = 0
        
        .ColAlignment(0) = flexAlignCenterCenter
        .ColAlignment(1) = flexAlignCenterCenter
        .ColAlignment(2) = flexAlignLeftCenter
        .ColAlignment(3) = flexAlignRightCenter
        .ColAlignment(4) = flexAlignRightCenter
        .ColAlignment(5) = flexAlignRightCenter
        .ColAlignment(6) = flexAlignRightCenter
        .ColAlignment(7) = flexAlignRightCenter
        .ColAlignment(8) = flexAlignRightCenter
        .ColAlignment(9) = flexAlignRightCenter
        .ColAlignment(10) = flexAlignLeftCenter
        .ColAlignment(11) = flexAlignCenterCenter
        .ColAlignment(12) = flexAlignRightCenter
        .ColAlignment(13) = flexAlignLeftBottom
        .ColAlignment(14) = flexAlignLeftBottom
        .ColAlignment(21) = flexAlignCenterCenter
        .ColAlignment(22) = flexAlignCenterCenter
        .ColAlignment(23) = flexAlignCenterCenter
        .ColAlignment(24) = flexAlignCenterCenter
        .ColAlignment(25) = flexAlignCenterCenter
        .ColAlignment(26) = flexAlignCenterCenter
        .ColAlignment(27) = flexAlignCenterCenter
        .ColAlignment(28) = flexAlignCenterCenter
        .ColAlignment(29) = flexAlignCenterCenter
        .ColAlignment(30) = flexAlignCenterCenter
        .ColAlignment(31) = flexAlignCenterCenter
        .ColAlignment(32) = flexAlignCenterCenter
        .ColAlignment(33) = flexAlignCenterCenter
        .ColAlignment(34) = flexAlignCenterCenter
        .ColAlignment(35) = flexAlignCenterCenter
        .ColAlignment(36) = flexAlignCenterCenter
        .ColAlignment(37) = flexAlignCenterCenter
        .ColAlignment(38) = flexAlignCenterCenter
        .ColAlignment(39) = flexAlignCenterCenter
        .ColAlignment(40) = flexAlignCenterCenter
        .ColAlignment(41) = flexAlignCenterCenter
        .ColAlignment(42) = flexAlignCenterCenter
        .ColAlignment(43) = flexAlignCenterCenter
        .ColAlignment(54) = flexAlignCenterCenter
        .ColAlignment(55) = flexAlignRightCenter
        .ColAlignment(60) = flexAlignLeftCenter
        .ColAlignmentFixed(0) = flexAlignCenterCenter
        .ColAlignmentFixed(1) = flexAlignCenterCenter
        .ColAlignmentFixed(2) = flexAlignLeftCenter
        .ColAlignmentFixed(3) = flexAlignCenterCenter
        .ColAlignmentFixed(4) = flexAlignCenterCenter
        .ColAlignmentFixed(5) = flexAlignCenterCenter
        .ColAlignmentFixed(6) = flexAlignCenterCenter
        .ColAlignmentFixed(7) = flexAlignCenterCenter
        .ColAlignmentFixed(8) = flexAlignCenterCenter
        .ColAlignmentFixed(9) = flexAlignCenterCenter
        .ColAlignmentFixed(10) = flexAlignCenterCenter
        .ColAlignmentFixed(11) = flexAlignCenterCenter
        .ColAlignmentFixed(12) = flexAlignCenterCenter
        .ColAlignmentFixed(13) = flexAlignCenterCenter
        .ColAlignmentFixed(14) = flexAlignCenterCenter
        .ColAlignmentFixed(15) = flexAlignCenterCenter
        .ColAlignmentFixed(21) = flexAlignCenterCenter
        .ColAlignmentFixed(22) = flexAlignCenterCenter
        .ColAlignmentFixed(23) = flexAlignCenterCenter
        .ColAlignmentFixed(29) = flexAlignCenterCenter
        .ColAlignmentFixed(31) = flexAlignCenterCenter
        .ColAlignmentFixed(32) = flexAlignCenterCenter
        .ColAlignmentFixed(33) = flexAlignCenterCenter
        .ColAlignmentFixed(34) = flexAlignCenterCenter
        .ColAlignmentFixed(35) = flexAlignCenterCenter
        .ColAlignmentFixed(36) = flexAlignCenterCenter
        .ColAlignmentFixed(37) = flexAlignCenterCenter
        .ColAlignmentFixed(38) = flexAlignCenterCenter
        .ColAlignmentFixed(39) = flexAlignCenterCenter
        .ColAlignmentFixed(40) = flexAlignCenterCenter
        .ColAlignmentFixed(41) = flexAlignCenterCenter
        .ColAlignmentFixed(42) = flexAlignCenterCenter
        .ColAlignmentFixed(42) = flexAlignCenterCenter
        .ColAlignmentFixed(43) = flexAlignCenterCenter
        .ColAlignmentFixed(54) = flexAlignCenterCenter
        .ColAlignmentFixed(55) = flexAlignCenterCenter
        .ScrollBars = flexScrollBarBoth
    End With
End Sub

Private Sub pConfiguraGridPagos()
    With grdPagos
        .Cols = 14
        .FixedCols = 2
        .FixedRows = 1
        .FormatString = "*|Concepto del pago|Fecha|Cantidad|Recibo|Moneda|Factura"
        .ColWidth(0) = 200  'Fix
        .ColWidth(1) = 5000 'Concepto del pago
        .ColWidth(2) = 1430 'Fecha
        .ColWidth(3) = 1430 'Cantidad
        .ColWidth(4) = 1430 'Recivo
        .ColWidth(5) = 700  'Moneda
        .ColWidth(6) = 1200 'Factura
        .ColWidth(7) = 0    'Tipo de Pago que se realizó
        .ColWidth(8) = 0    '*Disponible*
        .ColWidth(9) = 0    'Si es un pago "E" o una devolución "S" (Entrada o Salida)
        .ColWidth(10) = 0   'El numero de corte
        .ColWidth(11) = 0   'La cuenta contable segun el Concepto de pago/salida de dinero
        .ColWidth(12) = 0   'Bit que indica si el pago/salida de dinero ya ha sido facturado
        .ColWidth(cintColCantidadPago) = 0
        .ColAlignment(0) = flexAlignCenterCenter
        .ColAlignment(1) = flexAlignLeftCenter
        .ColAlignment(2) = flexAlignLeftCenter
        .ColAlignment(3) = flexAlignRightCenter
        .ColAlignment(4) = flexAlignRightCenter
        .ColAlignment(5) = flexAlignCenterCenter
        .ColAlignment(6) = flexAlignRightCenter
        .ColAlignment(7) = flexAlignRightCenter
        .ColAlignment(8) = flexAlignRightCenter
        .ColAlignment(9) = flexAlignRightCenter
        .ColAlignment(10) = flexAlignLeftCenter
        .ColAlignment(11) = flexAlignCenterCenter
        .ColAlignment(12) = flexAlignCenterCenter
        .ColAlignmentFixed(0) = flexAlignCenterCenter
        .ColAlignmentFixed(1) = flexAlignLeftCenter
        .ColAlignmentFixed(2) = flexAlignCenterCenter
        .ColAlignmentFixed(3) = flexAlignCenterCenter
        .ColAlignmentFixed(4) = flexAlignCenterCenter
        .ColAlignmentFixed(5) = flexAlignCenterCenter
        .ColAlignmentFixed(6) = flexAlignCenterCenter
        .ColAlignmentFixed(7) = flexAlignCenterCenter
        .ColAlignmentFixed(8) = flexAlignCenterCenter
        .ColAlignmentFixed(9) = flexAlignCenterCenter
        .ColAlignmentFixed(10) = flexAlignCenterCenter
        .ColAlignmentFixed(11) = flexAlignCenterCenter
        .ColAlignmentFixed(12) = flexAlignCenterCenter
        .ScrollBars = flexScrollBarBoth
    End With
End Sub

Private Sub pCargaControl()
    Dim rsIVAConceptoHospital As New ADODB.Recordset
    Dim rsControlEmpresa As New ADODB.Recordset
    Dim rsIVAPaquete As New ADODB.Recordset
    Dim vlstrSentencia As String
    
    Dim blnHabilitaDeducible As Boolean
    Dim blnHabilitaCoaseguro As Boolean
    Dim blnHabilitaCoaseguroMedico As Boolean
    Dim blnHabilitaCoaseguroAdicional As Boolean
    Dim blnHabilitaCopago As Boolean
    Dim blnHabilita As Boolean
        
    Dim dblSumaAsegurada As Double
    Dim dblTotalCargosCuenta As Double
    Dim dblImporteEx As Double                  'Importe de los cargos excluídos (facturados y no facturados)
    Dim dblDescuentoEx As Double                'Descuento de los cargos excluídos (facturados y no facturados)
    Dim dblIVAEX As Double                      'IVA de los cargos excluídos (facturados y no facturados)
    
    Dim lngCantidadCargo As Long                'Cantidad del cargo
    Dim dblPrecioCargo As Double                'Precio del Cargo
    Dim dblDescuentosCargo As Double            'Descuento del cargo
    Dim dblIVACargo As Double                   'IVA del cargo
    Dim lngCantidadDentroPaquete As Long        'Cantidad que esta dentro del paquete (Original+Extra)
    Dim lngCantidadPaquetes As Long             'Para la cantidad asignada del paquete
    Dim dblPrecioPaquete As Double              'Precio del paquete
    Dim dblDescuentoPaquete  As Double          'Descuento del paquete
    Dim dblIVAPaquete As Double                 'Para el IVA del paquete
    Dim lngCvePaquete As Long
    Dim lngCuentaPaciente As Long
    Dim intTotalPaquetes As Integer
    Dim rsPAC As New ADODB.Recordset
    
    'Deducible
    If optTipoDeducible(0).Value Then
        optTipoDeducible(1).Value = True
    Else
        optTipoDeducible_Click 1
    End If
    optTipoDeducible(0).Enabled = True
    optTipoDeducible(1).Enabled = True
    txtPorcentajeDeducible.Enabled = True
    lblPorcentajeDeducible(0).Enabled = True
    chkFacturaDeducible.Enabled = True
    
    'Coaseguro
    If optTipoCoaseguro(0).Value Then
        optTipoCoaseguro(1).Value = True
    Else
        optTipoCoaseguro_Click 1
    End If
    optTipoCoaseguro(0).Enabled = True
    optTipoCoaseguro(1).Enabled = True
    txtPorcentajeCoaseguro.Enabled = True
    lblPorcentajeDeducible(2).Enabled = True
    chkFacturaCoaseguro.Enabled = True
    txtCantidadMaximaCO.Enabled = True
    
    'Coaseguro adicional
    If optTipoCoaseguroAdicional(0).Value Then
        optTipoCoaseguroAdicional(1).Value = True
    Else
        optTipoCoaseguroAdicional_Click 1
    End If
    optTipoCoaseguroAdicional(0).Enabled = True
    optTipoCoaseguroAdicional(1).Enabled = True
    txtPorcentajeCoaseguroAdicional.Enabled = True
    lblPorcentajeDeducible(3).Enabled = True
    chkFacturaCoaseguroAdicional.Enabled = True
    
    'Copago
    If optTipoCopago(0).Value Then
        optTipoCopago(1).Value = True
    Else
        optTipoCopago_Click 1
    End If
    optTipoCopago(0).Enabled = True
    optTipoCopago(1).Enabled = True
    txtPorcentajeCopago.Enabled = True
    lblPorcentajeDeducible(4).Enabled = True
    chkFacturaCopago.Enabled = True
    
    'Coaseguro médico
    If optTipoCoaseguroMedico(0).Value Then
        optTipoCoaseguroMedico(1).Value = True
    Else
        optTipoCoaseguroMedico_Click 1
    End If
    optTipoCoaseguroMedico(0).Enabled = True
    optTipoCoaseguroMedico(1).Enabled = True
    txtPorcentajeCoaseguroMed.Enabled = True
    lblPorcentajeDeducible(1).Enabled = True
    chkFacturaCoaseguroMedico.Enabled = True
    chkFacturaCoaseguroMedico.Value = 0
    
    txtSumaAsegurada.Enabled = True
    lblnHacerChange = True
    
    ReDim arrCuentaPaquetes(0)

    dblPorcentajeCoaseguroMedico = 0
    dblCantidadMaximaCO = 0
    
    dblSTCargosConvenio = 0
    dblIVACargosConvenio = 0
    dblImporteGravaConvenio = 0
    dblDescuentoCargosConvenio = 0
    
    dblImporteEx = 0
    dblDescuentoEx = 0
    dblIVAEX = 0
    
    lngCvePaquete = 0
    ldblHonorariosFacturadosPac = 0
    ldblHonorariosFacturadosEmp = 0
    
    intMensajeControl = 0
    blnCargosSinFacturarPaciente = False
    ldblTotalCargosConvenioSinExcluidos = 0
    ldblTotalCargosHospital = 0
    
     '18084
    If claveCartaEdoCta = -1 Then
        claveCarta = 0
        If cboCartaAutorizacion.ListIndex > 0 Then
             claveCarta = cboCartaAutorizacion.ItemData(cboCartaAutorizacion.ListIndex)
        End If
    Else
        claveCarta = claveCartaEdoCta   'IIf(claveCartaEdoCta = 0, -1, claveCartaEdoCta)
    End If
    
    '----------------
    'Total de cargos
    '----------------
    vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|2|-1|C|N|" & IIf(lblnCambiaNombreCargos, 1, 0) '& "|" & claveCarta
    Set rsTemp = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelCargosPaciente")
    If rsTemp.RecordCount > 0 Then
        With rsTemp
            Do While Not .EOF
                If rsTemp!cveCarta = claveCarta Or claveCarta = -1 Then ' si el cargo en cuestion corresponde a la carta seleccionada
                    lngCuentaPaciente = IIf(IsNull(!INTMOVPACIENTE), 0, !INTMOVPACIENTE)
                    lngCantidadCargo = !MNYCantidad
                    dblPrecioCargo = !mnyPrecio
                    dblDescuentosCargo = IIf(IsNull(!MNYDESCUENTO), 0, !MNYDESCUENTO)
                    
                    If lblnCambiaNombreCargos And IsNull(!Concepto) Then
                        vgstrParametrosSP = CStr(!CveConceptoHospital) & "|-1|-1"
                        Set rsIVAConceptoHospital = frsEjecuta_SP(vgstrParametrosSP, "Sp_PvSelConceptoFactura")
                        If Not rsIVAConceptoHospital.EOF Then
                            'dblIVACargo = (dblPrecioCargo * lngCantidadCargo - dblDescuentosCargo) * IIf(IsNull(rsIVAConceptoHospital!smyIVA), 0, rsIVAConceptoHospital!smyIVA / 100)
                            'If vlintbitCalculaConcSegconDescuento = 1 Then   '4a combinación
                                dblIVACargo = (dblPrecioCargo * lngCantidadCargo - dblDescuentosCargo) * IIf(IsNull(rsIVAConceptoHospital!smyIVA), 0, rsIVAConceptoHospital!smyIVA / 100)
                            'ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
                            '    dblIVACargo = (dblPrecioCargo * lngCantidadCargo) * IIf(IsNull(rsIVAConceptoHospital!smyIVA), 0, rsIVAConceptoHospital!smyIVA / 100)
                            'End If
                        End If
                        rsIVAConceptoHospital.Close
                    Else
                        'If vlintbitCalculaConcSegconDescuento = 0 And vlintbitCalculaConceptoSeguroconIVA = 1 Then
                        '    dblIVACargo = IIf(IIf(IsNull(!MontoIVA), 0, !MontoIVA) > 0, (dblPrecioCargo * lngCantidadCargo) * IIf(IsNull(!smyIVA), 0, !smyIVA / 100), 0)
                        'Else
                            dblIVACargo = IIf(IIf(IsNull(!MontoIVA), 0, !MontoIVA) > 0, (dblPrecioCargo * lngCantidadCargo - dblDescuentosCargo) * IIf(IsNull(!smyIVA), 0, !smyIVA / 100), 0)
                        'End If
                        'If vlintbitCalculaConcSegconDescuento = 1 Then      '4a combinación
                            'dblIVACargo = IIf(IIf(IsNull(!MontoIVA), 0, !MontoIVA) > 0, (dblPrecioCargo * lngCantidadCargo - dblDescuentosCargo) * IIf(IsNull(!smyIVA), 0, !smyIVA / 100), 0)
                        'ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
                            'dblIVACargo = IIf(IIf(IsNull(!MontoIVA), 0, !MontoIVA) > 0, (dblPrecioCargo * lngCantidadCargo) * IIf(IsNull(!smyIVA), 0, !smyIVA / 100), 0)
                        'End If
                    End If
                    
                    'cantidad que está dentro del paquete(original+extra)
                    lngCantidadDentroPaquete = IIf((IsNull(!CantidadPaquete) Or !CantidadPaquete = 0), 0, !CantidadPaquete) + IIf((IsNull(!CantidadExtraPaquete) Or !CantidadExtraPaquete = 0), 0, !CantidadExtraPaquete)
                    lngCantidadPaquetes = IIf(IsNull(!PaquetesAsignados), 0, !PaquetesAsignados)
                    dblPrecioPaquete = IIf(IsNull(!PrecioPaquete), 0, !PrecioPaquete)
                    'Descuento total del paquete
                    dblDescuentoPaquete = IIf(IsNull(!DescuentoPaquete), 0, !DescuentoPaquete) * lngCantidadPaquetes
                    lngCvePaquete = IIf(IsNull(!ClavePaquete), 0, !ClavePaquete)
                    If lngCvePaquete > 0 Then
                        'Busca el IVA del concepto de facturación del paquete
                        Set rsIVAPaquete = frsEjecuta_SP(CStr(lngCvePaquete), "sp_PvSelIVAPaquete")
                        If rsIVAPaquete.RecordCount > 0 Then
                            dblIVAPaquete = ((dblPrecioPaquete * lngCantidadPaquetes) - dblDescuentoPaquete) * rsIVAPaquete!IVA
                        End If
                    Else
                        dblIVAPaquete = 0
                    End If
                
                    'Excluídos
                    If Not IsNull(!Excluido) And Trim(!Excluido) = "X" Then
                        dblImporteEx = dblImporteEx + lngCantidadCargo * dblPrecioCargo
                        dblDescuentoEx = dblDescuentoEx + dblDescuentosCargo
                        dblIVAEX = dblIVAEX + dblIVACargo
                    Else
                        'Cargo normal
                        If lngCvePaquete = 0 Then
    '                        If vlintbitConcepSeguroSinDescuentoIVA = 0 Then
    '                            dblSTCargosConvenio = dblSTCargosConvenio + (lngCantidadCargo * dblPrecioCargo) - dblDescuentosCargo
    '                        ElseIf vlintbitConcepSeguroSinDescuentoIVA = 1 Then
    '                            dblSTCargosConvenio = dblSTCargosConvenio + (lngCantidadCargo * dblPrecioCargo)
    '                        End If
                            If vlintbitCalculaConcSegconDescuento = 1 Then
                                dblSTCargosConvenio = dblSTCargosConvenio + (lngCantidadCargo * dblPrecioCargo) - dblDescuentosCargo
                            ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
                                dblSTCargosConvenio = dblSTCargosConvenio + (lngCantidadCargo * dblPrecioCargo)
                            End If
                            dblIVACargosConvenio = dblIVACargosConvenio + dblIVACargo
                            dblImporteGravaConvenio = dblImporteGravaConvenio + IIf(dblIVACargo > 0, (dblPrecioCargo * lngCantidadCargo - dblDescuentosCargo), 0)
                            dblDescuentoCargosConvenio = dblDescuentoCargosConvenio + dblDescuentosCargo
                            ldblTotalCargosConvenioSinExcluidos = ldblTotalCargosConvenioSinExcluidos + (lngCantidadCargo * dblPrecioCargo) - dblDescuentosCargo
                        Else
                            'Paquetes
                            If Not fblnExistePaquete(arrCuentaPaquetes, lngCvePaquete, lngCuentaPaciente) Then
                                intTotalPaquetes = UBound(arrCuentaPaquetes) + 1
                                ReDim Preserve arrCuentaPaquetes(intTotalPaquetes)
                                arrCuentaPaquetes(intTotalPaquetes).lngCuenta = lngCuentaPaciente
                                arrCuentaPaquetes(intTotalPaquetes).lngPaquete = lngCvePaquete
                                                        
    '                            If vlintbitConcepSeguroSinDescuentoIVA = 0 Then
    '                                dblSTCargosConvenio = dblSTCargosConvenio + (dblPrecioPaquete * lngCantidadPaquetes) - dblDescuentoPaquete
    '                            ElseIf vlintbitConcepSeguroSinDescuentoIVA = 1 Then
    '                                dblSTCargosConvenio = dblSTCargosConvenio + (dblPrecioPaquete * lngCantidadPaquetes)
    '                            End If
                                If vlintbitCalculaConcSegconDescuento = 1 Then
                                    dblSTCargosConvenio = dblSTCargosConvenio + (dblPrecioPaquete * lngCantidadPaquetes) - dblDescuentoPaquete
                                ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
                                    dblSTCargosConvenio = dblSTCargosConvenio + (dblPrecioPaquete * lngCantidadPaquetes)
                                End If
                                dblIVACargosConvenio = dblIVACargosConvenio + dblIVAPaquete
                                dblImporteGravaConvenio = dblImporteGravaConvenio + IIf(dblIVAPaquete > 0, (dblPrecioPaquete * lngCantidadPaquetes) - dblDescuentoPaquete, 0)
                                dblDescuentoCargosConvenio = dblDescuentoCargosConvenio + dblDescuentoPaquete
                                ldblTotalCargosConvenioSinExcluidos = ldblTotalCargosConvenioSinExcluidos + (dblPrecioPaquete * lngCantidadPaquetes) - dblDescuentoPaquete
                            End If
                           
                            'Excedente de paquete
                            If lngCantidadCargo > lngCantidadDentroPaquete Then
    '                            If vlintbitConcepSeguroSinDescuentoIVA = 0 Then
    '                                dblSTCargosConvenio = dblSTCargosConvenio + ((lngCantidadCargo - lngCantidadDentroPaquete) * dblPrecioCargo) - ((dblDescuentosCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadDentroPaquete))
    '                            ElseIf vlintbitConcepSeguroSinDescuentoIVA = 1 Then
    '                                dblSTCargosConvenio = dblSTCargosConvenio + ((lngCantidadCargo - lngCantidadDentroPaquete) * dblPrecioCargo)
    '                            End If
                                If vlintbitCalculaConcSegconDescuento = 1 Then
                                    dblSTCargosConvenio = dblSTCargosConvenio + ((lngCantidadCargo - lngCantidadDentroPaquete) * dblPrecioCargo) - ((dblDescuentosCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadDentroPaquete))
                                ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
                                    dblSTCargosConvenio = dblSTCargosConvenio + ((lngCantidadCargo - lngCantidadDentroPaquete) * dblPrecioCargo)
                                End If
                                dblIVACargosConvenio = dblIVACargosConvenio + (dblIVACargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadDentroPaquete)
                                dblImporteGravaConvenio = dblImporteGravaConvenio + IIf(dblIVACargo > 0, ((dblPrecioCargo * (lngCantidadCargo - lngCantidadDentroPaquete)) - ((dblDescuentosCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadDentroPaquete))), 0)
                                dblDescuentoCargosConvenio = dblDescuentoCargosConvenio + ((dblDescuentosCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadDentroPaquete))
                                ldblTotalCargosConvenioSinExcluidos = ldblTotalCargosConvenioSinExcluidos + ((lngCantidadCargo - lngCantidadDentroPaquete) * dblPrecioCargo) - ((dblDescuentosCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadDentroPaquete))
                            End If
                        End If
                        
                        If !MarcadoParaFacturar = 0 Then
                            blnCargosSinFacturarPaciente = True
                        End If
                    End If
                End If
                .MoveNext
            Loop
            
            ldblTotalCargosHospital = dblSTCargosConvenio + dblIVACargosConvenio + (Format(dblImporteEx, "############.00") - Format(dblDescuentoEx, "############.00") + Format(dblIVAEX, "############.00"))
            ldblTotalCargosConvenioSinExcluidos = ldblTotalCargosConvenioSinExcluidos + dblIVACargosConvenio
'            If vlintbitConcepSeguroSinDescuentoIVA = 0 Then
'                dblTotalCargosCuenta = dblSTCargosConvenio + dblIVACargosConvenio + (Format(dblImporteEx, "############.00") - Format(dblDescuentoEx, "############.00") + Format(dblIVAEX, "############.00"))
'            ElseIf vlintbitConcepSeguroSinDescuentoIVA = 1 Then
'                dblTotalCargosCuenta = dblSTCargosConvenio + (Format(dblImporteEx, "############.00"))
'            End If
            If vlintbitCalculaConcSegconDescuento = 1 Then
                If vlintbitCalculaConceptoSeguroconIVA = 1 Then
                    dblTotalCargosCuenta = dblSTCargosConvenio + dblIVACargosConvenio + (Format(dblImporteEx, "############.00") - Format(dblDescuentoEx, "############.00") + Format(dblIVAEX, "############.00"))
                ElseIf vlintbitCalculaConceptoSeguroconIVA = 0 Then
                    dblTotalCargosCuenta = dblSTCargosConvenio + (Format(dblImporteEx, "############.00") - Format(dblDescuentoEx, "############.00"))
                End If
            ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
                If vlintbitCalculaConceptoSeguroconIVA = 1 Then
                    dblTotalCargosCuenta = dblSTCargosConvenio + dblIVACargosConvenio + (Format(dblImporteEx, "############.00")) + Format(dblIVAEX, "############.00")
                ElseIf vlintbitCalculaConceptoSeguroconIVA = 0 Then
                    dblTotalCargosCuenta = dblSTCargosConvenio + (Format(dblImporteEx, "############.00"))
                End If
            End If
        End With
        txtCargosHospital.Text = FormatCurrency(dblTotalCargosCuenta, 2)
        
        'Cargos excluídos
        ldblTotalCargosExcluidos = FormatCurrency(Format(dblImporteEx, "############.00") - Format(dblDescuentoEx, "############.00") + Format(dblIVAEX, "############.00"), 2)
'        If vlintbitConcepSeguroSinDescuentoIVA = 0 Then
'            txtCargosExcluidos.Text = FormatCurrency(Format(dblImporteEx, "############.00") - Format(dblDescuentoEx, "############.00") + Format(dblIVAEX, "############.00"), 2)
'        ElseIf vlintbitConcepSeguroSinDescuentoIVA = 1 Then
'            txtCargosExcluidos.Text = FormatCurrency(Format(dblImporteEx, "############.00"), 2)
'        End If
        If vlintbitCalculaConcSegconDescuento = 1 Then
            If vlintbitCalculaConceptoSeguroconIVA = 1 Then
                txtCargosExcluidos.Text = FormatCurrency(Format(dblImporteEx, "############.00") - Format(dblDescuentoEx, "############.00") + Format(dblIVAEX, "############.00"), 2)
            ElseIf vlintbitCalculaConceptoSeguroconIVA = 0 Then
                txtCargosExcluidos.Text = FormatCurrency(Format(dblImporteEx, "############.00") - Format(dblDescuentoEx, "############.00"), 2)
            End If
        ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
            If vlintbitCalculaConceptoSeguroconIVA = 1 Then
'                txtCargosExcluidos.Text = FormatCurrency(Format(dblImporteEx, "############.00"), 2) + Format(dblIVAEX, "############.00")
                txtCargosExcluidos.Text = FormatCurrency(Format((dblImporteEx + dblIVAEX), "############.00"), 2)
            ElseIf vlintbitCalculaConceptoSeguroconIVA = 0 Then
                txtCargosExcluidos.Text = FormatCurrency(Format(dblImporteEx, "############.00"), 2)
            End If
        End If
        txtExcluidosDescuentos.Text = FormatCurrency(dblDescuentoEx, 2)
'        If vlintbitConcepSeguroSinDescuentoIVA = 0 Then
'            txtExcluidosHospital.Text = FormatCurrency(Format(dblImporteEx, "############.00") - Format(dblDescuentoEx, "############.00"), 2)
'        ElseIf vlintbitConcepSeguroSinDescuentoIVA = 1 Then
'            txtExcluidosHospital.Text = FormatCurrency(Format(dblImporteEx, "############.00"), 2)
'        End If
        If vlintbitCalculaConcSegconDescuento = 1 Then
            txtExcluidosHospital.Text = FormatCurrency(Format(dblImporteEx, "############.00") - Format(dblDescuentoEx, "############.00"), 2)
        ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
            txtExcluidosHospital.Text = FormatCurrency(Format(dblImporteEx, "############.00"), 2)
        End If
        txtExcluidosIVA.Text = FormatCurrency(dblIVAEX, 2)
'        If vlintbitConcepSeguroSinDescuentoIVA = 0 Then
'            txtExcluidosTotal.Text = FormatCurrency(Format(dblImporteEx, "############.00") - Format(dblDescuentoEx, "############.00") + Format(dblIVAEX, "############.00"), 2)
'        ElseIf vlintbitConcepSeguroSinDescuentoIVA = 1 Then
'            txtExcluidosTotal.Text = FormatCurrency(Format(dblImporteEx, "############.00"), 2)
'        End If
        If vlintbitCalculaConcSegconDescuento = 1 Then
            If vlintbitCalculaConceptoSeguroconIVA = 1 Then
                txtExcluidosTotal.Text = FormatCurrency(Format(dblImporteEx, "############.00") - Format(dblDescuentoEx, "############.00") + Format(dblIVAEX, "############.00"), 2)
            ElseIf vlintbitCalculaConceptoSeguroconIVA = 0 Then
                txtExcluidosTotal.Text = FormatCurrency(Format(dblImporteEx, "############.00") - Format(dblDescuentoEx, "############.00"), 2)
            End If
        ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
            If vlintbitCalculaConceptoSeguroconIVA = 1 Then
                'txtExcluidosTotal.Text = FormatCurrency(Format(dblImporteEx, "############.00") + Format(dblIVAEX, "############.00"), 2)
                txtExcluidosTotal.Text = FormatCurrency(Format((dblImporteEx + dblIVAEX), "############.00"), 2)
            ElseIf vlintbitCalculaConceptoSeguroconIVA = 0 Then
                txtExcluidosTotal.Text = FormatCurrency(Format(dblImporteEx, "############.00"), 2)
            End If
        End If
    End If
    
    lngCuentaExcedenteHonorarios = 0
    'Cuenta acreedora de la empresa
    Set rsTemp = frsEjecuta_SP(CStr(vgintEmpresa) & "|8", "Sp_Gnselcuentasempresa")
    If Not rsTemp.EOF Then
        For lintContador = 1 To rsTemp.RecordCount
            If rsTemp!tnyclaveempresa = vgintClaveEmpresaContable Then
                lngCuentaExcedenteHonorarios = IIf(IsNull(rsTemp!intNumeroCuenta), 0, rsTemp!intNumeroCuenta)
                Exit For
            End If
            rsTemp.MoveNext
        Next lintContador
    End If
    rsTemp.Close
    
    If rsControlSeguro.RecordCount > 0 Then
        With rsControlSeguro
            txtNombreAsegurado.Text = IIf(IsNull(!chrNombreAsegurado), " ", Trim(!chrNombreAsegurado))
            cboParentesco.Text = Trim(!chrParentesco)
            
            lngCartaDefault = flngCartaDefault(CLng(txtMovimientoPaciente))
            If lngCartaDefault = claveCarta Then
                If optGrupoCuenta(0).Value Then 'Grupo
                    Set rsPAC = frsEjecuta_SP(txtMovimientoPaciente.Text, "SP_PVSELGRUPOFACTURA")
                    'Set rsPostergado = frsRegresaRs("SELECT BITPOSTERGADA FROM EXPACIENTEINGRESO WHERE BITPOSTERGADA = 999999", adLockOptimistic, adOpenDynamic)
                Else
                    If OptTipoPaciente(0).Value Then 'Internos
                        vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & str(vgintClaveEmpresaContable)
                        Set rsPAC = frsEjecuta_SP(vgstrParametrosSP, "SP_PVSELINTERNOFACTURA")
                        'Set rsPostergado = frsRegresaRs("SELECT BITPOSTERGADA FROM EXPACIENTEINGRESO WHERE INTNUMCUENTA = " & txtMovimientoPaciente.Text, adLockOptimistic, adOpenDynamic)
                    Else  'Externos
                        vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & str(vgintClaveEmpresaContable)
                        Set rsPAC = frsEjecuta_SP(vgstrParametrosSP, "SP_PVSELEXTERNOFACTURA")
                        'Set rsPostergado = frsRegresaRs("SELECT BITPOSTERGADA FROM EXPACIENTEINGRESO WHERE INTNUMCUENTA = " & txtMovimientoPaciente.Text, adLockOptimistic, adOpenDynamic)
                    End If
                End If
                If rsPAC.RecordCount <> 0 Then
                    If IIf(IsNull(rsPAC!bitAseguradora), 0, rsPAC!bitAseguradora) = 1 Then
                        txtPersonaAutoriza.Text = IIf(IsNull(rsPAC!Autoriza), "", rsPAC!Autoriza)
                        If Not IsNull(rsPAC!CveTipoPoliza) Then cboTipoPoliza.ListIndex = flngLocalizaCbo(cboTipoPoliza, str(rsPAC!CveTipoPoliza))
                        vlPolizaInicial = cboTipoPoliza.ListIndex
                        vgblnCambioPoliza = False
                        txtNumeroPoliza.Text = IIf(IsNull(rsPAC!NumeroPoliza), "", rsPAC!NumeroPoliza)
                        txtNumeroControl.Text = IIf(IsNull(rsPAC!NumeroControl), "", rsPAC!NumeroControl)
                    End If
                End If
                rsPAC.Close
            Else
                txtPersonaAutoriza.Text = IIf(IsNull(!VCHAUTORIZACION), "", !VCHAUTORIZACION)
                If Not IsNull(!intCveTipoPoliza) Then cboTipoPoliza.ListIndex = flngLocalizaCbo(cboTipoPoliza, str(!intCveTipoPoliza))
                vlPolizaInicial = cboTipoPoliza.ListIndex
                vgblnCambioPoliza = False
                txtNumeroPoliza.Text = IIf(IsNull(!VCHNUMPOLIZA), "", !VCHNUMPOLIZA)
                txtNumeroControl.Text = IIf(IsNull(!VCHNUMAFILIACION), "", !VCHNUMAFILIACION)
            End If
            
            dblHonorarios = IIf(IsNull(!mnyHonorarios), 0, !mnyHonorarios)
            txtHonorarios.Text = FormatCurrency(dblHonorarios, 2)

            blnHabilitaDeducible = False
            blnHabilitaCoaseguro = False
            blnHabilitaCoaseguroMedico = False
            blnHabilitaCoaseguroAdicional = False
            blnHabilitaCopago = False
            
            dblSumaAsegurada = !MNYSUMAASEGURADA
            
            If dblSumaAsegurada > 0 Then
                txtSumaAsegurada.Text = ""
                txtSumaAsegurada.Text = FormatCurrency(dblSumaAsegurada, 2)
            End If
            
            If Val(Format(txtExcedenteSumaAsegurada.Text, "")) > 0 Then
                txtExcedenteNoFacturado.Text = FormatCurrency(Val(Format(txtExcedenteSumaAsegurada.Text, "")) - dblExcedenteFacturado, 2)
            End If
            
            'Deducible:
            If Trim(!CHRTIPODEDUCIBLE) = "C" Then
                If optTipoDeducible(0).Value Then
                    optTipoDeducible_Click 0
                Else
                    optTipoDeducible(0).Value = True
                End If
            Else
                If optTipoDeducible(1).Value Then
                    optTipoDeducible_Click 1
                Else
                    optTipoDeducible(1).Value = True
                End If
            End If
            
            If !MNYCANTIDADDEDUCIBLE <> 0 Then 'Se registró deducible (sea por cantidad o porcentaje)
                txtDeducible.Text = FormatCurrency(!MNYCANTIDADDEDUCIBLE, 2)
                If optTipoDeducible(1).Value Then
                    txtPorcentajeDeducible.Text = FormatNumber(!NUMPORCENTAJEDEDUCIBLE, 2)
                End If
                If blnDeducibleSinIVA Then
                    Dim dlbDed As Double
                    
                    dlbDed = Round(Val(Format(txtDeducible.Text, "")) - (dblDeducibleFacturado * (1 + (fdblTasaIVAEmpresa(vgintEmpresa) / 100))), 4)
                    If Abs(dlbDed) <= 0.02 Then
                        dblDeducibleFacturado = Val(Format(txtDeducible.Text, ""))
                    End If
                End If
                txtDeducibleNoFacturado.Text = FormatCurrency(IIf(!BITFACTURADEDUCIBLE = 1, Val(Format(txtDeducible.Text, "")) - dblDeducibleFacturado, 0), 2)
            End If
                
            'Coaseguro:
            If Trim(!CHRTIPOCOASEGURO) = "C" Then
                If optTipoCoaseguro(0).Value Then
                    optTipoCoaseguro_Click 0
                Else
                    optTipoCoaseguro(0).Value = True
                End If
            Else
                If optTipoCoaseguro(1).Value Then
                    optTipoCoaseguro_Click 1
                Else
                    optTipoCoaseguro(1).Value = True
                End If
            End If
            
            If !MNYCANTIDADCOASEGURO <> 0 Then 'Se registró el coaseguro (sea por cantidad o porcentaje)
                txtCantidadMaximaCO.Text = FormatCurrency(IIf(IsNull(!mnyCantidadMaximaCoaseguro), 0, !mnyCantidadMaximaCoaseguro), 2)
                dblCantidadMaximaCO = Val(Format(txtCantidadMaximaCO.Text, ""))
                
                If intCoaseguroPorFactura = 0 Then
                    If Val(Format(txtCantidadMaximaCO.Text, "")) > 0 Then
                        txtCoaseguro.Text = FormatCurrency(IIf(!MNYCANTIDADCOASEGURO > Val(Format(txtCantidadMaximaCO.Text, "")), Val(Format(txtCantidadMaximaCO.Text, "")), !MNYCANTIDADCOASEGURO), 2)
                    Else
                        txtCoaseguro.Text = FormatCurrency(!MNYCANTIDADCOASEGURO, 2)
                    End If
                Else
                    txtCoaseguro.Text = FormatCurrency(dblCoaseguroFacturado + Val(Format(txtCantidadMaximaCO.Text, "")), 2)
                End If
                                
                If optTipoCoaseguro(1).Value Then txtPorcentajeCoaseguro.Text = FormatNumber(!NUMPORCENTAJECOASEGURO, 2)
                txtCoaseguroNoFacturado.Text = FormatCurrency(IIf(!BITFACTURACOASEGURO = 1, Val(Format(txtCoaseguro.Text, "")) - dblCoaseguroFacturado, 0), 2)
            End If
                
            'Coaseguro adicional:
            If Trim(!CHRTIPOCOASEGUROADICIONAL) = "C" Then
                If optTipoCoaseguroAdicional(0).Value Then
                    optTipoCoaseguroAdicional_Click 0
                Else
                    optTipoCoaseguroAdicional(0).Value = True
                End If
            Else
                If optTipoCoaseguroAdicional(1).Value Then
                    optTipoCoaseguroAdicional_Click 1
                Else
                    optTipoCoaseguroAdicional(1).Value = True
                End If
            End If
            
            If !MNYCANTIDADCOASEGUROADICIONAL <> 0 Then 'Se registró coaseguro adicional (sea por cantidad o porcentaje)
                txtCoaseguroAdicional.Text = FormatCurrency(!MNYCANTIDADCOASEGUROADICIONAL, 2)
                If optTipoCoaseguroAdicional(1).Value Then
                    txtPorcentajeCoaseguroAdicional.Text = FormatNumber(!NUMPORCENTAJECOASEGUROADICIONA, 2)
                End If
                txtCoaseguroANoFacturado.Text = FormatCurrency(IIf(!bitFacturaCoaseguroAdicional = 1, Val(Format(txtCoaseguroAdicional.Text, "")) - dblCoaseguroAFacturado, 0), 2)
            End If
            
            'Copago:
            If Trim(!CHRTIPOCOPAGO) = "C" Then
                If optTipoCopago(0).Value Then
                    optTipoCopago_Click 0
                Else
                    optTipoCopago(0).Value = True
                End If
            Else
                If optTipoCopago(1).Value Then
                    optTipoCopago_Click 1
                Else
                    optTipoCopago(1).Value = True
                End If
            End If
            
            If !MNYCANTIDADCOPAGO <> 0 Then 'Se registró copago (sea por cantidad o porcentaje)
                txtCopago.Text = FormatCurrency(!MNYCANTIDADCOPAGO, 2)
                If optTipoCopago(1).Value Then
                    txtPorcentajeCopago.Text = FormatNumber(!NUMPORCENTAJECOPAGO, 2)
                End If
                txtCopagoNoFacturado.Text = FormatCurrency(IIf(!BITFACTURACOPAGO = 1, Val(Format(txtCopago.Text, "")) - dblCopagoFacturado, 0), 2)
            End If
            
            'Coaeguro médico
            optTipoCoaseguroMedico(0).Value = IIf(IsNull(Trim(!CHRTIPOCOASEGUROMEDICO)), "P", Trim(!CHRTIPOCOASEGUROMEDICO)) = "C"
            optTipoCoaseguroMedico(1).Value = IIf(IsNull(Trim(!CHRTIPOCOASEGUROMEDICO)), "P", Trim(!CHRTIPOCOASEGUROMEDICO)) = "P"
            optTipoCoaseguroMedico_Click IIf(optTipoCoaseguroMedico(0).Value, 0, 1)
            If !MNYCANTIDADCOASEGUROMEDICO <> 0 Or !MNYCANTIDADCMAFACTURAR <> 0 Then 'Se registró el coaseguro médico (sea por cantidad o porcentaje)
                'txtTotalCoaseguroMedico.Text = FormatCurrency(dblCoaseguroMFacturado, 2)
                txtTotalCoaseguroMedico.Text = FormatCurrency(!MNYCANTIDADCOASEGUROMEDICO, 2)
                If optTipoCoaseguroMedico(1).Value Then
                    txtPorcentajeCoaseguroMed.Text = FormatNumber(IIf(IsNull(!numPorcentajeCoaseguroMedico), 0, !numPorcentajeCoaseguroMedico), 2)
                    txtHonorariosAFacturar.Text = FormatCurrency(IIf(IsNull(!MNYHONORARIOSAFACTURAR), 0, !MNYHONORARIOSAFACTURAR), 2)
                Else
                    txtCoaseguroMedico.Text = FormatCurrency(IIf(IsNull(!MNYCANTIDADCMAFACTURAR), 0, !MNYCANTIDADCMAFACTURAR), 2)
                End If
                
                txtCoaseguroMNoFacturado.Text = FormatCurrency(IIf(!BITFACTURACOASEGUROMEDICO = 1, !MNYCANTIDADCMAFACTURAR, 0), 2)
            End If
            
            chkFacturaDeducible.Value = !BITFACTURADEDUCIBLE
            chkFacturaCoaseguro.Value = !BITFACTURACOASEGURO
            chkFacturaCoaseguroAdicional.Value = !bitFacturaCoaseguroAdicional
            chkFacturaCopago.Value = !BITFACTURACOPAGO
            chkFacturaCoaseguroMedico.Value = !BITFACTURACOASEGUROMEDICO
            
            txtObservaciones.Text = Trim(IIf(IsNull(!chrComentarios), "", !chrComentarios))
            txtObservaciones.SelStart = Len(LTrim(RTrim(txtObservaciones.Text)))
            
            optTipoFacturacion(1).Value = !CHRFORMAFACTURACION = "FFS" 'Factura Paciente y empresa
            optTipoFacturacion(0).Value = !CHRFORMAFACTURACION = "RFS" 'Recibo Paciente y Factura empresa
            optTipoFacturacion_Click IIf(optTipoFacturacion(0).Value, 0, 1)
            
            'Deducible
            blnHabilitaDeducible = (dblDeducibleFacturado <= 0 And !BITFACTURADEDUCIBLE = 1) Or (IsNull(!CHRFOLIORECIBODEDUCIBLE) And !BITFACTURADEDUCIBLE = 0)
            'Coaseguro
            blnHabilitaCoaseguro = (dblCoaseguroFacturado <= 0 And !BITFACTURACOASEGURO = 1) Or (IsNull(!CHRFOLIORECIBOCOASEGURO) And !BITFACTURACOASEGURO = 0)
            'Coaseguro adicional
            blnHabilitaCoaseguroAdicional = (dblCoaseguroAFacturado <= 0 And !bitFacturaCoaseguroAdicional = 1) Or (IsNull(!CHRFOLIORECIBOCOASEGUROADICION) And !bitFacturaCoaseguroAdicional = 0)
            'Copago
            blnHabilitaCopago = (dblCopagoFacturado <= 0 And !BITFACTURACOPAGO = 1) Or (IsNull(!CHRFOLIORECIBOCOPAGO) And !BITFACTURACOPAGO = 0)
            'CoaseguroMedico
            blnHabilitaCoaseguroMedico = dblCoaseguroMFacturado <= 0
            
            blnHabilita = blnHabilitaDeducible And blnHabilitaCoaseguro And blnHabilitaCoaseguroAdicional And blnHabilitaCopago And blnHabilitaCoaseguroMedico
            pHabilitaConceptosSeguro blnHabilita
            lblnHacerChange = blnHabilita
        End With
    Else
        txtPersonaAutoriza.Text = ""
        cboParentesco.ListIndex = 0
        cboTipoPoliza.ListIndex = 0
        vlPolizaInicial = cboTipoPoliza.ListIndex
        vgblnCambioPoliza = False
        txtNumeroPoliza.Text = ""
        txtNumeroControl.Text = ""
        txtObservaciones.Text = ""
        txtNumeroControl.Enabled = True
        txtPersonaAutoriza.Enabled = True
    End If
    
    If Not blnCalcularEnBaseACargos Then
        'Poner el último tipo de deducible, coaseguro y copago usado esta aseguradora:
        Set rsControlEmpresa = frsEjecuta_SP(str(vgintEmpresa), "SP_PVSELCONTROLASEGURADORAEMPR")
        If rsControlEmpresa.RecordCount <> 0 Then
            If rsControlSeguro.RecordCount = 0 Then
                If Trim(rsControlEmpresa!CHRTIPODEDUCIBLE) = "C" Then
                    If optTipoDeducible(0).Value Then
                        optTipoDeducible_Click 0
                    Else
                        optTipoDeducible(0).Value = True
                    End If
                Else
                    If optTipoDeducible(1).Value Then
                        optTipoDeducible_Click 1
                    Else
                        optTipoDeducible(1).Value = True
                    End If
                End If
            
                If Trim(rsControlEmpresa!CHRTIPOCOASEGURO) = "C" Then
                    If optTipoCoaseguro(0).Value Then
                        optTipoCoaseguro_Click 0
                    Else
                        optTipoCoaseguro(0).Value = True
                    End If
                Else
                    If optTipoCoaseguro(1).Value Then
                        optTipoCoaseguro_Click 1
                    Else
                        optTipoCoaseguro(1).Value = True
                    End If
                End If
                
                If Trim(rsControlEmpresa!CHRTIPOCOASEGUROADICIONAL) = "C" Then
                    If optTipoCoaseguroAdicional(0).Value Then
                        optTipoCoaseguroAdicional_Click 0
                    Else
                        optTipoCoaseguroAdicional(0).Value = True
                    End If
                Else
                    If optTipoCoaseguroAdicional(1).Value Then
                        optTipoCoaseguroAdicional_Click 1
                    Else
                        optTipoCoaseguroAdicional(1).Value = True
                    End If
                End If
                
                If Trim(rsControlEmpresa!CHRTIPOCOPAGO) = "C" Then
                    If optTipoCopago(0).Value Then
                        optTipoCopago_Click 0
                    Else
                        optTipoCopago(0).Value = True
                    End If
                Else
                    If optTipoCopago(1).Value Then
                        optTipoCopago_Click 1
                    Else
                        optTipoCopago(1).Value = True
                    End If
                End If
                           
                chkFacturaDeducible.Value = rsControlEmpresa!BITFACTURADEDUCIBLE
                chkFacturaCoaseguro.Value = rsControlEmpresa!BITFACTURACOASEGURO
                chkFacturaCoaseguroAdicional.Value = rsControlEmpresa!bitFacturaCoaseguroAdicional
                chkFacturaCopago.Value = rsControlEmpresa!BITFACTURACOPAGO
            End If
                
            chkAutoriza.Value = rsControlEmpresa!INTAUTORIZA
            chkTipoPoliza.Value = rsControlEmpresa!INTTIPOPOLIZA
            chkNumeroPoliza.Value = rsControlEmpresa!intNumPoliza
            chkNumeroControl.Value = rsControlEmpresa!INTNUMCONTROL
        Else
            optTipoDeducible(0).Value = True
            optTipoCoaseguro(0).Value = True
            optTipoCoaseguroAdicional(0).Value = True
            optTipoCopago(0).Value = True
            optTipoCoaseguroMedico(1).Value = True
        
            chkAutoriza.Value = 0
            chkTipoPoliza.Value = 0
            chkNumeroPoliza.Value = 0
            chkNumeroControl.Value = 0
        End If
        
        rsControlEmpresa.Close
    Else
        optTipoCoaseguro(0).Enabled = False
        optTipoCoaseguroAdicional(0).Enabled = False
        optTipoCopago(0).Enabled = False
        
        If rsControlSeguro.RecordCount > 0 Then
            'Si ya está grabado el control y tiene CO, CA o CP en cantidad y ya se ha facturado algo entonces que mande un mensaje indicando que no se puede facturar esa cuenta
            If (chkFacturaCoaseguro.Value = 1 And optTipoCoaseguro(0).Value And IIf(intCoaseguroPorFactura = 1, Val(Format(txtCantidadMaximaCO.Text, "")), Val(Format(txtCoaseguro.Text, ""))) > 0 And (IIf(intCoaseguroPorFactura = 1, Val(Format(txtCantidadMaximaCO.Text, "")), Val(Format(txtCoaseguro.Text, ""))) > Val(Format(txtCoaseguroNoFacturado.Text, "")))) _
            Or (chkFacturaCoaseguroAdicional.Value = 1 And optTipoCoaseguroAdicional(0).Value And Val(Format(txtCoaseguroAdicional.Text, "")) > 0 And (Val(Format(txtCoaseguroAdicional.Text, "")) > Val(Format(txtCoaseguroANoFacturado.Text, "")))) _
            Or (chkFacturaCopago.Value = 1 And optTipoCopago(0).Value And Val(Format(txtCopago.Text, "")) > 0 And (Val(Format(txtCopago.Text, "")) > Val(Format(txtCopagoNoFacturado.Text, "")))) Then
                'La cuenta no se puede facturar porque se activó el parámetro "Calcular importes de seguro en base a los cargos"
                intMensajeControl = 1069
            Else
                'Si ya está grabado el control y tiene CO, CA o CP en cantidad entonces que mande un mensaje indicando que será necesario volver a grabar el control
                If (chkFacturaCoaseguro.Value = 1 And optTipoCoaseguro(0).Value And intCoaseguroPorFactura = 0) _
                Or (chkFacturaCoaseguroAdicional.Value = 1 And optTipoCoaseguroAdicional(0).Value) _
                Or (chkFacturaCopago.Value = 1 And optTipoCopago(0).Value) Then
                    'El parámetro "Calcular importes de seguro en base a los cargos" está activo, será necesario volver a grabar el control
                    intMensajeControl = 1070
                End If
                
                optTipoCoaseguro(1).Value = IIf(intCoaseguroPorFactura = 0, True, False)
                optTipoCoaseguroAdicional(1).Value = True
                optTipoCopago(1).Value = True
            End If
        Else
            optTipoCoaseguro(1).Value = IIf(intCoaseguroPorFactura = 0, True, False)
            optTipoCoaseguroAdicional(1).Value = True
            optTipoCopago(1).Value = True
        End If
    End If
        
    lblnDatosSeguroModificados = False
End Sub

Private Function fblnControlValido(blnMuestraMensaje As Boolean) As Boolean
    fblnControlValido = True

    '18084 que se haya seleccionado carta
    If vlblnValidaCartaAutorizacion And cboCartaAutorizacion.ListIndex <= 0 Then
        fblnControlValido = False
        If blnMuestraMensaje Then
            '¡No ha ingresado datos!
            MsgBox "Seleccione la carta de autorización.", vbExclamation, "Mensaje"
            cboCartaAutorizacion.SetFocus
        End If
    End If
    
    'Que se haya registrado suma asegurada:
    If fblnControlValido And Val(Format(txtSumaAsegurada.Text, "")) = 0 Then
        fblnControlValido = False
        If blnMuestraMensaje Then
            '¡No ha ingresado datos!
            MsgBox SIHOMsg(2), vbExclamation, "Mensaje"
            pEnfocaTextBox txtSumaAsegurada
        End If
    End If
    
    'Que el deducible sea correcto:
    If fblnControlValido And Val(Format(txtTotalSinDeducible.Text, "")) < 0 Then
        fblnControlValido = False
        If blnMuestraMensaje Then
            'La cantidad es incorrecta.
            MsgBox SIHOMsg(452), vbExclamation, "Mensaje"
            If optTipoDeducible(0).Value Then
                pEnfocaTextBox txtDeducible
            Else
                pEnfocaTextBox txtPorcentajeDeducible
            End If
        End If
    End If
    
    'Que el coaseguro sea correcto:
    If fblnControlValido And Val(Format(txtTotalSinCoaseguro.Text, "")) < 0 Then
        fblnControlValido = False
        If blnMuestraMensaje Then
            'La cantidad es incorrecta.
            MsgBox SIHOMsg(452), vbExclamation, "Mensaje"
            If optTipoCoaseguro(0).Value Then
                pEnfocaTextBox txtCoaseguro
            Else
                pEnfocaTextBox txtPorcentajeCoaseguro
            End If
        End If
    End If
    
    'Que el coaseguro adicional sea correcto:
    If fblnControlValido And Val(Format(txtTotalSinCoaseguroAdicional.Text, "")) < 0 Then
        fblnControlValido = False
        If blnMuestraMensaje Then
            'La cantidad es incorrecta.
            MsgBox SIHOMsg(452), vbExclamation, "Mensaje"
            If optTipoCoaseguroAdicional(0).Value Then
                pEnfocaTextBox txtCoaseguroAdicional
            Else
                pEnfocaTextBox txtPorcentajeCoaseguroAdicional
            End If
        End If
    End If
    
    'Que el copago sea correcto:
    If fblnControlValido And Val(Format(txtTotalSinCoaseguroAdicional.Text, "")) < Val(Format(txtCopago.Text, "")) Then
        fblnControlValido = False
        If blnMuestraMensaje Then
            'La cantidad es incorrecta.
            MsgBox SIHOMsg(452), vbExclamation, "Mensaje"
            If optTipoCopago(0).Value Then
                pEnfocaTextBox txtCopago
            Else
                pEnfocaTextBox txtPorcentajeCopago
            End If
        End If
    End If
    
    'Que el total de conceptos de seguro no sea mayor a la cuenta
    'Cuando se factura en base a cargos
    If fblnControlValido And blnCalcularEnBaseACargos Then
        If Val(Format(txtTotalDedCoaCop.Text, "")) > Val(Format(txtTotalSinExcluidos.Text, "")) _
        Or (Val(Format(txtTotalNoFacturado.Text, "")) - Val(Format(txtCargosExcluidosNoFacturados.Text, ""))) > (Val(Format(ldblSTConvenioNoFact, "############.00")) + Val(Format(ldblIVACargosConvenioNoFact, "############.00"))) Then
            fblnControlValido = False
            If blnMuestraMensaje Then
                'No se pueden cobrar importes de seguro mayores a la cuenta
                MsgBox SIHOMsg(1057), vbExclamation, "Mensaje"
            End If
        End If
    End If
    
    'Cuando se encuentra activado check box de tipo de póliza
    'se valida que se seleccione un tipo de póliza
    If fblnControlValido And chkTipoPoliza.Value = 1 Then
        If cboTipoPoliza.ListIndex = -1 Or cboTipoPoliza.ListIndex = 0 Then
            fblnControlValido = False
            If blnMuestraMensaje Then
                'Seleccione el tipo de póliza
                MsgBox SIHOMsg(378), vbExclamation, "Mensaje"
                cboTipoPoliza.SetFocus
            End If
        End If
    End If
End Function

Private Sub cmdGrabarControl_Click()
    Dim vllngPersonaGraba As Long
    Dim vlstrSentencia As String
    Dim rsConceptosFacturaSeg As New ADODB.Recordset
    Dim vlintTipoPoliza As Integer
    Dim vllngCveCarta As Long '18084
        
    If fblnControlValido(True) Then
        vllngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
        If vllngPersonaGraba <> 0 Then
         If fblnControlAseguradoraFacturado Then 'by cgr
            lblnDatosSeguroModificados = False
            '18084
            claveCarta = 0
            If cboCartaAutorizacion.ListIndex > 0 Then
                claveCarta = cboCartaAutorizacion.ItemData(cboCartaAutorizacion.ListIndex)
            End If
            
            Set rsConceptosFacturaSeg = frsEjecuta_SP(CStr(vgintClaveEmpresaContable), "Sp_PvSelConceptoFacturaSeguro")
            ldblDesctoExcedente = 0
            ldblDesctoDeducible = 0
            ldblDesctoCoaseguro = 0
            ldblDesctoCoaseguroMedico = 0
            ldblDesctoCoaseguroAdicional = 0
            ldblDesctoCopago = 0
            
            If Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")) > 0 Then
                ldblDesctoExcedente = Format(fdblDescuentoConceptoSeguro(rsConceptosFacturaSeg!excedente, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtExcedenteSumaAsegurada.Text, "###############.00")) - dblExcedenteH, "EX"), "###############.00")
            End If
            
            If chkFacturaDeducible.Value Then
                ldblDesctoDeducible = Format(fdblDescuentoConceptoSeguro(rsConceptosFacturaSeg!Deducible, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtDeducible.Text, "###############.00")) - dblDeducibleH, "DE"), "###############.00")
            End If
            
            If chkFacturaCoaseguro.Value Then
                ldblDesctoCoaseguro = Format(fdblDescuentoConceptoSeguro(rsConceptosFacturaSeg!Coaseguro, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtCoaseguro.Text, "###############.00")) - dblCoaseguroH, "CO"), "###############.00")
                ' ldblDesctoCoaseguro = Format(fdblDescuentoConceptoSeguro(rsConceptosFacturaSeg!Coaseguro, Val(txtMovimientoPaciente.Text), IIf(optTipoPaciente(0).Value, "I", "E"), IIf(intCoaseguroPorFactura = 1, Val(Format(txtCantidadMaximaCO.Text, "###############.00")), Val(Format(txtCoaseguro.Text, "###############.00"))) - dblCoaseguroH, "CO"), "###############.00")
            End If
            
            If Val(Format(txtCoaseguroMedico.Text, "###############.00")) > 0 Then
                ldblDesctoCoaseguroMedico = Format(fdblDescuentoConceptoSeguro(rsConceptosFacturaSeg!CoaseguroMedico, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtCoaseguroMedico.Text, "###############.00")) - dblCoaseguroMH, "CM"), "###############.00")
            End If
            
            If chkFacturaCoaseguroAdicional Then
                ldblDesctoCoaseguroAdicional = Format(fdblDescuentoConceptoSeguro(rsConceptosFacturaSeg!CoaseguroAdicional, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtCoaseguroAdicional.Text, "###############.00")) - dblCoaseguroAH, "CA"), "###############.00")
            End If
            
            If chkFacturaCopago.Value Then
                ldblDesctoCopago = Format(fdblDescuentoConceptoSeguro(rsConceptosFacturaSeg!Copago, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtCopago.Text, "###############.00")) - dblCopagoH, "CP"), "###############.00")
            End If
                        
            If cboTipoPoliza.ListIndex = -1 Then
                vlintTipoPoliza = -1
            Else
                vlintTipoPoliza = cboTipoPoliza.ItemData(cboTipoPoliza.ListIndex)
            End If
                        
            vgstrParametrosSP = _
                                txtMovimientoPaciente.Text _
                                & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") _
                                & "|" & Trim(str(vgintEmpresa)) _
                                & "|" & Format(txtDeducible.Text, "") _
                                & "|" & IIf(optTipoCoaseguro(1).Value, Format(txtPorcentajeCoaseguro.Text, ""), "0") _
                                & "|" & Format(txtSumaAsegurada.Text, "") _
                                & "|" & Trim(txtNombreAsegurado.Text) _
                                & "|" & cboParentesco.Text _
                                & "|" & IIf(optTipoFacturacion(1).Value, "FFS", "RFS") _
                                & "|" & Format(txtHonorarios.Text, "") _
                                & "|" & Trim(txtObservaciones.Text) _
                                & "|" & Format(txtExcedenteSumaAsegurada.Text, "") _
                                & "|" & str(chkFacturaDeducible.Value) _
                                & "|" & str(chkFacturaCoaseguro.Value) _
                                & "|" & str(chkFacturaCopago.Value) _
                                & "|" & IIf(optTipoCopago(1).Value, Format(txtPorcentajeCopago.Text, ""), "0") _
                                & "|" & Format(txtCopago.Text, "") _
                                & "|" & Format(txtCoaseguro.Text, "") _
                                & "|" & IIf(optTipoDeducible(1).Value, Format(txtPorcentajeDeducible.Text, ""), "0") _
                                & "|" & IIf(optTipoDeducible(0).Value, "C", "P") _
                                & "|" & IIf(optTipoCoaseguro(0).Value, "C", "P") _
                                & "|" & IIf(optTipoCopago(0).Value, "C", "P")
            
            vgstrParametrosSP = vgstrParametrosSP _
                                & "|" & Format(txtCoaseguroAdicional.Text, "") _
                                & "|" & IIf(optTipoCoaseguroAdicional(0).Value, "0", Format(txtPorcentajeCoaseguroAdicional.Text, "")) _
                                & "|" & str(chkFacturaCoaseguroAdicional.Value) _
                                & "|" & IIf(optTipoCoaseguroAdicional(0).Value, "C", "P") _
                                & "|" & str(ldblDesctoExcedente) _
                                & "|" & str(ldblDesctoDeducible) _
                                & "|" & str(ldblDesctoCoaseguro) _
                                & "|" & str(ldblDesctoCoaseguroAdicional) _
                                & "|" & str(ldblDesctoCopago) _
                                & "|" & str(chkAutoriza.Value) _
                                & "|" & str(chkTipoPoliza.Value) _
                                & "|" & str(chkNumeroControl.Value) _
                                & "|" & str(chkNumeroPoliza.Value) _
                                & "|" & str(chkFacturaCoaseguroMedico.Value) _
                                & "|" & Format(txtPorcentajeCoaseguroMed.Text, "") _
                                & "|" & Format(txtTotalCoaseguroMedico.Text, "") _
                                & "|" & str(ldblDesctoCoaseguroMedico) _
                                & "|" & Val(Format(txtCantidadMaximaCO.Text, "")) _
                                & "|" & IIf(optTipoCoaseguroMedico(0).Value, "C", "P") _
                                & "|" & Val(Format(txtHonorariosAFacturar.Text, "")) _
                                & "|" & Val(Format(txtCoaseguroMedico.Text, ""))
            '18084
            vgstrParametrosSP = vgstrParametrosSP _
                                & "|" & claveCarta _
                                & "|" & Trim(txtPersonaAutoriza.Text) _
                                & "|" & IIf(vlintTipoPoliza = 0 Or vlintTipoPoliza = -1, "", str(vlintTipoPoliza)) _
                                & "|" & Trim(txtNumeroPoliza.Text) _
                                & "|" & Trim(txtNumeroControl.Text)
            
            frsEjecuta_SP vgstrParametrosSP, "SP_PVINSCONTROLASEGURADORA"
            
            If blnCambiosEnParametrosCuenta Then
                pEjecutaSentencia ("UPDATE PVCONTROLASEGURADORA SET " & _
                                     "BITCALCULARENBASEACARGOS = " & IIf(blnCalcularEnBaseACargosTemp, 1, 0) & " " & _
                                    ",INTDESGLOSARIVAEXCEDENTE = " & lintDesglosaIVAExcedenteTemp & " ,INTDESGLOSARIVADEDUCIBLE = " & lintDesglosaIVADeducibleTemp & " " & _
                                    ",INTDESGLOSARIVACOASEGURO = " & lintDesglosaIVACoaseguroTemp & " ,INTDESGLOSARIVACOASEGUROMEDICO = " & lintDesglosaIVACoaseguroMedicoTemp & " " & _
                                    ",INTDESGLOSARIVACOASEGUROADICIO = " & lintDesglosaIVACoaseguroAdicionalTemp & " ,INTDESGLOSARIVACOPAGO = " & lintDesglosaIVACopagoTemp & " " & _
                                    ",INTDESGLOSAREXCEDENTE = " & lintDesglosaExcedenteTemp & " ,INTDESGLOSARDEDUCIBLE = " & lintDesglosaDeducibleTemp & " " & _
                                    ",INTDESGLOSARCOASEGURO = " & lintDesglosaCoaseguroTemp & " ,INTDESGLOSARCOASEGUROMEDICO = " & lintDesglosaCoaseguroMedicoTemp & " " & _
                                    ",INTDESGLOSARCOASEGUROADICIONAL = " & lintDesglosaCoaseguroAdicionalTemp & " ,INTDESGLOSARCOPAGO = " & lintDesglosaCopagoTemp & " " & _
                                    ",SMYPORCENTEXCEDENTENOTA = " & dblPorcentajeEXNotaTemp & " ,MNYCANTIDADLIMITEEXCEDENTE = " & dblLimiteNotaEXTemp & " " & _
                                    ",SMYPORCENTDEDUCIBLENOTA = " & dblPorcentajeDENotaTemp & " ,MNYCANTIDADLIMITEDEDUCIBLE = " & dblLimiteNotaDETemp & " " & _
                                    ",SMYPORCENTCOASEGURONOTA = " & dblPorcentajeCONotaTemp & " ,MNYCANTIDADLIMITECOASEGURO = " & dblLimiteNotaCOTemp & " " & _
                                    ",SMYPORCENTCOASEGUROMEDICONOTA = " & dblPorcentajeCMNotaTemp & " ,MNYCANTIDADLIMITECOASEGUROMED = " & dblLimiteNotaCMTemp & " " & _
                                    ",SMYPORCENTCOASADICIONALNOTA = " & dblPorcentajeCANotaTemp & " ,MNYCANTIDADLIMITECOASADICIONAL = " & dblLimiteNotaCATemp & " " & _
                                    ",SMYPORCENTCOPAGONOTA = " & dblPorcentajeCPNotaTemp & " ,MNYCANTIDADLIMITECOPAGO = " & dblLimiteNotaCPTemp & " " & _
                                    ",BITDESGLOSAIVATASAHOSPICONCEP = " & intIVATasaHospiTemp & " " & ",BITCAPTURARCOASEGUROPORFACTURA = " & intCoaseguroPorFacturaTemp & " " & _
                                    ", chrIncluirConceptosSeguro = '" & vlchrIncluirConceptosSeguroTemp & "' " & ", intDesgloseConceptosVICFDI = " & vlintDesgloseConceptosVICFDITemp & " " & _
                                    ", chrTipoDesctoNotaExcedente = '" & strTipoDesctoNotaExcedenteTemp & "' " & _
                                    ", chrTipoDesctoNotaDeducible = '" & strTipoDesctoNotaDeducibleTemp & "' " & _
                                    ", chrTipoDesctoNotaCoaseguro = '" & strTipoDesctoNotaCoaseguroTemp & "' " & _
                                    ", chrTipoDesctoNotaCoaseguroMedi = '" & strTipoDesctoNotaCoaMedicoTemp & "' " & _
                                    ", chrTipoDesctoNotaCoaseguroAdic = '" & strTipoDesctoNotaCoaAdicionalTemp & "' " & _
                                    ", chrTipoDesctoNotaCopago = '" & strTipoDesctoNotaCopagoTemp & "' " & _
                                    "WHERE intMovPaciente = " & txtMovimientoPaciente.Text & " " & _
                                        "AND chrTipoPaciente = '" & IIf(OptTipoPaciente(0).Value, "I", "E") & "' " & "AND intCveEmpresa = " & str(vgintEmpresa) & _
                                        " AND INTCVECARTA = '" & claveCarta & "'")  '18084
                                        
                pEjecutaSentencia ("update PVControlAseguradoraEmpresa set chrIncluirConceptosSeguro = '" & vlchrIncluirConceptosSeguroTemp & "', intDesgloseConceptosVICFDI = " & vlintDesgloseConceptosVICFDITemp & " where intCveEmpresa = " & vgintEmpresa)
                
                If fblnRevisaPermiso(vglngNumeroLogin, 4196, "C", True) Then
                    vgblnBloqueoPostergacionDefinitivo = blnCalcularEnBaseACargosTemp
                    pFacturaPacienteActiva
                Else
                    vgblnBloqueoPostergacionDefinitivo = True
                    pFacturaPacienteActiva
                End If
                
                strTipoDesctoNotaExcedente = strTipoDesctoNotaExcedenteTemp
                strTipoDesctoNotaDeducible = strTipoDesctoNotaDeducibleTemp
                strTipoDesctoNotaCoaseguro = strTipoDesctoNotaCoaseguroTemp
                strTipoDesctoNotaCoaMedico = strTipoDesctoNotaCoaMedicoTemp
                strTipoDesctoNotaCoaAdicional = strTipoDesctoNotaCoaAdicionalTemp
                strTipoDesctoNotaCopago = strTipoDesctoNotaCopagoTemp
                
                dblPorcentajeEXNota = dblPorcentajeEXNotaTemp
                dblPorcentajeDENota = dblPorcentajeDENotaTemp
                dblPorcentajeCONota = dblPorcentajeCONotaTemp
                dblPorcentajeCMNota = dblPorcentajeCMNotaTemp
                dblPorcentajeCANota = dblPorcentajeCANotaTemp
                dblPorcentajeCPNota = dblPorcentajeCPNotaTemp

                dblLimiteNotaEX = dblLimiteNotaEXTemp
                dblLimiteNotaDE = dblLimiteNotaDETemp
                dblLimiteNotaCO = dblLimiteNotaCOTemp
                dblLimiteNotaCM = dblLimiteNotaCMTemp
                dblLimiteNotaCA = dblLimiteNotaCATemp
                dblLimiteNotaCP = dblLimiteNotaCPTemp

                blnCalcularEnBaseACargos = blnCalcularEnBaseACargosTemp
                Frame13.Enabled = IIf(blnCalcularEnBaseACargos, False, True)
                
                lintDesglosaIVAExcedente = lintDesglosaIVAExcedenteTemp
                lintDesglosaIVADeducible = lintDesglosaIVADeducibleTemp
                lintDesglosaIVACoaseguro = lintDesglosaIVACoaseguroTemp
                lintDesglosaIVACoaseguroMedico = lintDesglosaIVACoaseguroMedicoTemp
                lintDesglosaIVACoaseguroAdicional = lintDesglosaIVACoaseguroAdicionalTemp
                lintDesglosaIVACopago = lintDesglosaIVACopagoTemp
                
                intCoaseguroPorFactura = intCoaseguroPorFacturaTemp

                intIVATasaHospi = intIVATasaHospiTemp
                
                vlchrIncluirConceptosSeguro = vlchrIncluirConceptosSeguroTemp
                vlintDesgloseConceptosVICFDI = vlintDesgloseConceptosVICFDITemp
                
                pLlenaFacturasConvenioAseguradora grdFacturaPaciente
                pLlenaFacturasConvenioAseguradora grdFacturaEmpresa
            End If
            
            If cboTipoPoliza.ListIndex = -1 Then
                vlintTipoPoliza = -1
            Else
                vlintTipoPoliza = cboTipoPoliza.ItemData(cboTipoPoliza.ListIndex)
            End If

            lngCartaDefault = flngCartaDefault(CLng(txtMovimientoPaciente))
            If lngCartaDefault = claveCarta Then
                vgstrParametrosSP = txtMovimientoPaciente.Text _
                                    & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") _
                                    & "|" & Trim(txtPersonaAutoriza.Text) _
                                    & "|" & IIf(vlintTipoPoliza = 0 Or vlintTipoPoliza = -1, "", str(vlintTipoPoliza)) _
                                    & "|" & Trim(txtNumeroPoliza.Text) _
                                    & "|" & Trim(txtNumeroControl.Text) _
                                    & "|" & str(vllngPersonaGraba)
    
    '                                & "|" & IIf(cboTipoPoliza.ItemData(cboTipoPoliza.ListIndex) = 0 Or cboTipoPoliza.ItemData(cboTipoPoliza.ListIndex) = -1, "", Str(cboTipoPoliza.ItemData(cboTipoPoliza.ListIndex))) _

                frsEjecuta_SP vgstrParametrosSP, "SP_PVUPDCUENTASEGURO"
            End If
                    
            Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGraba, "CONTROL SEGURO", txtMovimientoPaciente.Text & IIf(OptTipoPaciente(0).Value, "I", "E"))
            If blnCambiosEnParametrosCuenta Then
                Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGraba, "CONFIGURACIÓN DE PARÁMETROS DE LA CUENTA", txtMovimientoPaciente.Text & IIf(OptTipoPaciente(0).Value, "I", "E"))
                blnCambiosEnParametrosCuenta = False
            End If
            
            dblHonorarios = 0
            
            pConsultaControl
            pCargaControl
            
            vlstrSentencia = "delete from PvTipoPacienteProceso where PvTipoPacienteProceso.intnumerologin = " & vglngNumeroLogin & _
                            "and PvTipoPacienteProceso.intproceso = " & enmTipoProceso.Facturacion
            pEjecutaSentencia vlstrSentencia
            
            vlstrSentencia = "insert into PvTipoPacienteProceso (intnumerologin, intproceso, chrtipopaciente) values(" & vglngNumeroLogin & "," & enmTipoProceso.Facturacion & "," & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & ")"
            pEjecutaSentencia vlstrSentencia
            
            MsgBox SIHOMsg(284), vbInformation, "Mensaje"
            vlblncontrolaseguradora = True
          Else
            '¡No es posible modificar el control de aseguradora! Existen conceptos de aseguradora ya facturados.
            MsgBox SIHOMsg(1240), vbExclamation, "Mensaje"
            Unload Me
         End If ' revisión de que el control de aseguradora no este ya facturado
            
            
        End If
    End If
    
    'Verifica si la empresa maneja addenda en caso de que el paciente sea de tipo empresa
    If optGrupoCuenta(0).Value = False And vgintEmpresa <> 0 Then
        vglngCveAddenda = 1
        frsEjecuta_SP txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|FA|" & vgintClaveEmpresaContable, "FN_PVSELADDENDAEMPRESA", True, vglngCveAddenda
        vglngCveAddenda = vglngCveAddenda
        
        'Valida si se tiene licencia para emitir la addenda seleccionada
        vglngCveAddenda = IIf(fblLicenciaAddenda(vglngCveAddenda) = True, vglngCveAddenda, 0)
        
        'Graba las observaciones en la addenda (si es que hay observaciones capturadas)
        If Trim(txtObservaciones.Text) <> "" And vglngCveAddenda <> 0 Then
            vgstrParametrosSP = Val(txtMovimientoPaciente) & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & Trim(txtObservaciones.Text)
            frsEjecuta_SP vgstrParametrosSP, "SP_PVUPDADDENDADATOSOBS"
        End If
        
    End If
    
    If vglngCveAddenda = 0 Then
        cmdAddenda.Enabled = False
    ElseIf vglngCveAddenda <> 0 And vgblnPaqueteAddenda = True And vglngPaqueteAddenda <> 0 Then
        cmdAddenda.Enabled = True
    ElseIf vglngCveAddenda <> 0 And vgblnPaqueteAddenda = True And vglngPaqueteAddenda = 0 Then
        cmdAddenda.Enabled = False
    ElseIf vglngCveAddenda <> 0 And vgblnPaqueteAddenda = False Then
        cmdAddenda.Enabled = True
    End If
    
    vlPolizaInicial = vlintTipoPoliza       'cboTipoPoliza.ItemData(cboTipoPoliza.ListIndex)
    vgblnCambioPoliza = False
End Sub

Private Sub optDolares_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    optPesos_MouseUp Index, 1, 0, 0, 0
End Sub

Private Sub optPesos_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    pCargaControl
    If Index = 0 Then
        'Pacientes
        If (vgintEmpresa = 0 Or blnExisteExcedente) And vgSocio = False Then
            pLlenaFacturasParticulares grdFacturaPaciente
        Else
            If gintAseguradora = 0 Then
                pLlenaFacturasConvenio grdFacturaPaciente
            Else
                pLlenaFacturasConvenioAseguradora grdFacturaPaciente
            End If
        End If
    Else
        'Empresas
        If vgintEmpresa <> 0 Or vgSocio = True Then
            If gintAseguradora = 0 Then
                pLlenaFacturasConvenio grdFacturaEmpresa
            Else
                pLlenaFacturasConvenioAseguradora grdFacturaEmpresa
            End If
        End If
    End If
End Sub

Private Sub pLiberaCuenta()
On Error GoTo NotificaError

    Dim vlstrSentencia As String
    Dim vlintMovCta As Long
    Dim vlstrTipoCta As String
    Dim vlintCuentas As Long
    Dim vlrsCuentas As New ADODB.Recordset
    Dim vlblnEsGrupo As Boolean
    
    vlintCuentas = 1
    vlblnEsGrupo = False
    If optGrupoCuenta(0).Value Then 'Es un grupo
        Set vlrsCuentas = frsRegresaRs("SELECT DISTINCT intMovPaciente, chrTipoPaciente FROM PvCargo WHERE PvCargo.INTCVEGRUPO = " & txtMovimientoPaciente.Text)
        vlintCuentas = vlrsCuentas.RecordCount
        vlblnEsGrupo = True
    Else
        vlintMovCta = txtMovimientoPaciente.Text
        vlstrTipoCta = IIf(OptTipoPaciente(0).Value, "I", "E")
    End If
    
    For vlintCuentas = 1 To vlintCuentas
        If vlblnEsGrupo Then 'Grupo de facturas
            vlintMovCta = vlrsCuentas!INTMOVPACIENTE
            vlstrTipoCta = vlrsCuentas!CHRTIPOPACIENTE
        End If

        frsEjecuta_SP vlstrTipoCta & "|" & vlintMovCta & "|0", "SP_EXUPDCUENTAOCUPADA"
        If vlblnEsGrupo Then vlrsCuentas.MoveNext
    Next

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":pLiberaCuenta"))
End Sub

Private Function fblnBloqueoCuenta() As Boolean
On Error GoTo NotificaError

    Dim X As Integer
    Dim vlblnTermina As Boolean
    Dim vlstrBloqueo As String
                
    fblnBloqueoCuenta = False
    vlblnTermina = False
    
    X = 1
    Do While X <= cgintIntentoBloqueoCuenta And Not vlblnTermina
        vlstrBloqueo = fstrBloqueaCuenta(Val(txtMovimientoPaciente.Text), IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")))
        If vlstrBloqueo = "F" Then
            vlblnTermina = True
            'La cuenta ya ha sido facturada, no se pudo realizar ningún movimiento.
            MsgBox SIHOMsg(299), vbOKOnly + vbInformation, "Mensaje"
        Else
            If vlstrBloqueo = "O" Then
                If X = cgintIntentoBloqueoCuenta Then
                    vlblnTermina = True
                    'La cuenta esta siendo usada por otra persona, intente de nuevo.
                    MsgBox SIHOMsg(300), vbOKOnly + vbInformation, "Mensaje"
                End If
            Else
                If vlstrBloqueo = "L" Then
                    vlblnTermina = True
                    fblnBloqueoCuenta = True
                End If
            End If
        End If
        X = X + 1
    Loop

Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":fblnBloqueoCuenta"))
End Function

Public Sub pCancelar()
    lblMensajeReqAut(36).Visible = False

    '----------------------------
    '       Datos Generales
    '----------------------------
    txtMovimientoPaciente.Text = ""
    lblPaciente.Caption = ""
    lblEmpresa.Caption = ""
    vlstrRFCEmpresa = ""
    lblEstadoPaciente.Caption = ""
    
    lblCuarto.Caption = ""
    lblFechaIngreso.Caption = ""
    lblDireccion.Caption = ""
    lblCodigoPostal.Caption = ""
    lblNumExterior.Caption = ""
    lblNumInterior.Caption = ""
    lblTelefono.Caption = ""
    lblColonia.Caption = ""
    lblMedico.Caption = ""
    lblDiagnostico.Caption = ""
    
    'Datos fiscales
    chkRFCgenerico.Value = vbUnchecked
    txtRFCFactura.Text = ""
    txtRFCFactura.Enabled = True
    chkExtranjero.Value = vbUnchecked
    txtNombreFactura.Text = ""
    txtDireccionFactura(0).Text = ""
    txtDireccionFactura(1).Text = ""
    txtFacturaNumExterior.Text = ""
    txtFacturaNumInterior.Text = ""
    txtColoniaFactura.Text = ""
    txtCPFactura.Text = ""
    cboCiudad.ListIndex = -1
    txtTelefonoFactura.Text = ""
    If cboRegimenFiscal.ListCount = 0 Then cboRegimenFiscal.ListIndex = -1 Else cboRegimenFiscal.ListIndex = 0
    
    vgBlnCambioDatosFiscales = False    'Fueron modificados los datos fiscales del paciente
    
    freDatosPaciente.Enabled = True
    freDatosFiscales.Enabled = False
    frmTipoAgrupa.Enabled = False
    freTipoFactura.Enabled = False
    
    cmdBuscar.Enabled = True
    
    '----------------------------
    '            Cargos
    '----------------------------
    'Mostrar cargos
    optMuestraCargos(0).Value = True
    optMuestraCargos(0).Caption = "Todos"
    optMuestraCargos(1).Caption = "Excluidos"
    optMuestraCargos(2).Caption = "Sin excluir"
    chkIncluyeCargosFacturados.Value = 0
    
    'Totales
    txtDescuentos.Text = FormatCurrency(0, 2)
    txtSubtotal.Text = FormatCurrency(0, 2)
    txtIva.Text = FormatCurrency(0, 2)
    txtTotalFactura.Text = FormatCurrency(0, 2)
    txtPagos.Text = FormatCurrency(0, 2)
    txtTotal.Text = FormatCurrency(0, 2)
    
    cmdActualizarCargos.Enabled = False
    
    '----------------------------
    '   Control de aseguradora
    '----------------------------
    intMensajeControl = 0
    lblnDatosSeguroModificados = False
    blnCargosSinFacturarPaciente = False
    
    txtNombreAsegurado.Text = ""
    txtPersonaAutoriza.Text = ""
    txtNumeroPoliza.Text = ""
    txtNumeroControl.Text = ""
    cboParentesco.ListIndex = 0
    cboTipoPoliza.ListIndex = 0
    txtObservaciones.Text = ""
    txtNumeroControl.Enabled = True
    txtPersonaAutoriza.Enabled = True
    vglngPaqueteAddenda = 0
    vgblnPaqueteAddenda = False
    vgblnEncontroPaqueteAddenda = False
    
    'Honorarios
    txtHonorarios.Text = FormatCurrency(0, 2)
    If blnCalcularEnBaseACargos Then
        txtHonorarios.Enabled = False
        lblPorcentajeDeducible(20).Enabled = False
    Else
        txtHonorarios.Enabled = True
        lblPorcentajeDeducible(20).Enabled = True
    End If
    
    'Cargos
    txtCargosHospital.Text = FormatCurrency(0, 2)
    txtTotalCargos.Text = FormatCurrency(0, 2)
    txtCargosExcluidos.Text = FormatCurrency(0, 2)
    txtTotalSinExcluidos.Text = FormatCurrency(0, 2)
    txtSumaAsegurada.Text = FormatCurrency(0, 2)
    
    'Excedente
    txtExcedenteSumaAsegurada.Text = FormatCurrency(0, 2)
    
    'Deducible
    txtDeducible.Text = FormatCurrency(0, 2)
    optTipoDeducible(0).Value = True
    txtPorcentajeDeducible.Text = ""
    
    txtTotalSinDeducible.Text = FormatCurrency(0, 2)
    
    'Coaseguro
    txtCoaseguro.Text = FormatCurrency(0, 2)
    optTipoCoaseguro(0).Value = True
    txtPorcentajeCoaseguro.Text = ""
    txtCantidadMaximaCO.Text = ""
    
    txtTotalSinCoaseguro.Text = FormatCurrency(0, 2)
    
    'Coaseguro adicional
    txtCoaseguroAdicional.Text = FormatCurrency(0, 2)
    optTipoCoaseguroAdicional(0).Value = True
    txtPorcentajeCoaseguro.Text = ""
    
    txtTotalSinCoaseguroAdicional = FormatCurrency(0, 2)
    
    'Copago
    txtCopago.Text = FormatCurrency(0, 2)
    optTipoCopago(0).Value = True
    txtPorcentajeCopago.Text = ""
    
    'Coaseguro médico
    txtTotalCoaseguroMedico.Text = FormatCurrency(0, 2)
    optTipoCoaseguroMedico(0).Value = True
    txtPorcentajeCoaseguroMed.Text = ""
    chkFacturaCoaseguroMedico.Value = 0
    txtHonorariosAFacturar.Text = ""
    txtCoaseguroMedico.Text = ""
    dblPorcentajeCoaseguroMedico = 0
    dblHonorarios = 0
    
    txtTotalDedCoaCop.Text = FormatCurrency(0, 2)
    
    'Cargos no facturados
    txtCargosHospitalNoFacturados.Text = FormatCurrency(0, 2)
    txtCargosExcluidosNoFacturados.Text = FormatCurrency(0, 2)
    txtExcedenteNoFacturado.Text = FormatCurrency(0, 2)
    txtDeducibleNoFacturado.Text = FormatCurrency(0, 2)
    txtCoaseguroNoFacturado.Text = FormatCurrency(0, 2)
    txtCoaseguroANoFacturado.Text = FormatCurrency(0, 2)
    txtCopagoNoFacturado.Text = FormatCurrency(0, 2)
    txtCoaseguroMNoFacturado.Text = FormatCurrency(0, 2)
    txtTotalNoFacturado.Text = FormatCurrency(0, 2)
    
    'Cargos excluídos
    txtExcluidosHospital.Text = FormatCurrency(0, 2)
    txtExcluidosDescuentos.Text = FormatCurrency(0, 2)
    txtExcluidosIVA.Text = FormatCurrency(0, 2)
    txtExcluidosTotal.Text = FormatCurrency(0, 2)
    
    txtExcluidosPagos.Text = FormatCurrency(0, 2)
    txtTotalPagarControl.Text = FormatCurrency(0, 2)
    
    dblExcedenteDeIVA = 0
    
    '----------------------------
    '      Factura Paciente
    '----------------------------
    txtFPDescuentos.Text = FormatCurrency(0, 2)
    txtFPSubtotal.Text = FormatCurrency(0, 2)
    txtFPIVA.Text = FormatCurrency(0, 2)
    txtFPTotalFactura.Text = FormatCurrency(0, 2)
    txtFPPagos.Text = FormatCurrency(2, 2)
    txtFPNotasCredito = FormatCurrency(0, 2)
    txtFPTotalPagar.Text = FormatCurrency(0, 2)
    Frame13.Enabled = True
    txtFPBuscaCliente.Text = ""
    lstFPBuscaCliente.Clear
    
    '----------------------------
    '      Factura Empresa
    '----------------------------
    txtFEDescuentos.Text = FormatCurrency(0, 2)
    txtFESubtotal.Text = FormatCurrency(0, 2)
    txtFEIVA.Text = FormatCurrency(0, 2)
    txtFETotalFactura.Text = FormatCurrency(0, 2)
    txtFEPagos.Text = FormatCurrency(0, 2)
    txtFEDedyCoa.Text = FormatCurrency(0, 2)
    txtFEPagos.Text = FormatCurrency(0, 2)
    txtFETotalPagar.Text = FormatCurrency(0, 2)
    
    ldblDescuentosFactura = 0
    vgintTipoPaciente = 0
    vgintEmpresa = 0
    
    vgstrEstadoManto = ""
    
    
    '-----------------------------------
    ' Deshabilitar Tabs
    '-----------------------------------
    sstFacturacion.TabEnabled(1) = False
    sstFacturacion.TabEnabled(2) = False
    sstFacturacion.TabEnabled(3) = False
    sstFacturacion.TabEnabled(4) = False
    sstFacturacion.TabEnabled(5) = True
    sstFacturacion.Tab = 0
    SSTEstadoCuenta.Tab = 0
    
    pConfiguraGridCargos
    pEnfocaTextBox txtMovimientoPaciente
    
    optMostrarSolo(0).Value = True
    optTipoPacienteBusqueda(0).Enabled = True
    optTipoPacienteBusqueda(1).Enabled = True
    optTipoPacienteBusqueda(2).Enabled = True
    optTipoBusqueda(0).Enabled = True
    optTipoBusqueda(1).Enabled = True
    mskFechaInicial.Enabled = True
    mskFechaFinal.Enabled = True
    
    txtImpresionesFP(0).Text = fintNumCopiaImpFactPaciente
    txtImpresionesFP(1).Text = fintNumCopiaImpFactEmpresa
    cmdDescuentoPuntos.Caption = "Aplicar puntos de cliente leal"
    dblDescuentoAplicadoPuntos = 0
    
    claveCartaEdoCta = -1
    chkRazonSocial.Enabled = False
    chkRazonSocial.Value = 0
End Sub

Private Sub pLlenaParentesco()
    cboParentesco.AddItem "Mismo"
    cboParentesco.AddItem "Padre"
    cboParentesco.AddItem "Madre"
    cboParentesco.AddItem "Hijo(a)"
    cboParentesco.AddItem "Abuelo(a)"
    cboParentesco.AddItem "Esposo(a)"
    cboParentesco.AddItem "Concubino(a)"
    cboParentesco.ListIndex = 0
End Sub

Private Sub pCargaEmpresaPCE()
On Error GoTo NotificaError

    Dim rsEmpresaPCE As New ADODB.Recordset

   'Empresa PCE:
    llngCveEmpresaPCE = 0
      
    Set rsEmpresaPCE = frsEjecuta_SP(CStr(vgintClaveEmpresaContable), "sp_GNSelParametroPCE")
    If rsEmpresaPCE.RecordCount <> 0 Then
        llngCveEmpresaPCE = IIf(IsNull(rsEmpresaPCE!intCveEmpresaPCE), 0, rsEmpresaPCE!intCveEmpresaPCE)
    End If
    rsEmpresaPCE.Close
    
    Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":pCargaEmpresaPCE"))
End Sub

Private Sub Form_Load()
    Dim rs As New ADODB.Recordset
    Dim rsParametros As New ADODB.Recordset
    Dim rsNotasCS As New ADODB.Recordset
    Dim vlstrSentencia As String
    Dim lngNumOpcionDatosSeguro As Long
    Dim vlUsaSocios As Boolean
    Dim rsNuevoEsquemaCancelacion As New ADODB.Recordset
    Dim rsPrmtsFarmaciaCompartida  As New ADODB.Recordset
    
    vgstrNombreForm = Me.Name
    
    Me.Icon = frmMenuPrincipal.Icon
    'Carga la clave de la empresa PCE
    pCargaEmpresaPCE
      
    'Revisa si se utiliza socios
    vlUsaSocios = fblRevisaUsoSocios()

    'Se obtiene el tipo de paciente configurado como socio
    If vlUsaSocios = True Then
        vgLngTipoPacienteSocio = flngTipoPacienteSocio()
    End If
      
    vlblnEjecutoActivate = False
    vllngPersonaGraba = 0
    vllngPersonaGrabaDescuento = 0
    vlstrRFCprovisional = ""
    'blnText = False
    
    'Conceptos configurados para excedente, deducible, coaseguro, coaseguro adicional y copago:
    Set rsConceptosSeguro = frsEjecuta_SP(str(vgintClaveEmpresaContable), "SP_PVSELCONCEPTOSEGURO")
    
    Set rsNotasCS = frsEjecuta_SP(str(vgintClaveEmpresaContable), "Sp_PvSelParametro")
    If Not rsNotasCS.EOF Then
        lngClaveEX = IIf(IsNull(rsNotasCS!INTCONCEPTOSUMAASEGURADA), 0, rsNotasCS!INTCONCEPTOSUMAASEGURADA)
        lngClaveDE = IIf(IsNull(rsNotasCS!INTCONCEPTODEDUCIBLE), 0, rsNotasCS!INTCONCEPTODEDUCIBLE)
        lngClaveCO = IIf(IsNull(rsNotasCS!INTCONCEPTOCOASEGURO), 0, rsNotasCS!INTCONCEPTOCOASEGURO)
        lngClaveCM = IIf(IsNull(rsNotasCS!intConceptoCoaseguroMedico), 0, rsNotasCS!intConceptoCoaseguroMedico)
        lngClaveCA = IIf(IsNull(rsNotasCS!INTCONCEPTOCOASEGUROADICIONAL), 0, rsNotasCS!INTCONCEPTOCOASEGUROADICIONAL)
        lngClaveCP = IIf(IsNull(rsNotasCS!INTCONCEPTOCOPAGO), 0, rsNotasCS!INTCONCEPTOCOPAGO)
        lngClaveExIVA = IIf(IsNull(rsNotasCS!intExcedenteIVA), 0, rsNotasCS!intExcedenteIVA)

        blnConceptoCoaseguroMedico = IIf(IsNull(rsNotasCS!intConceptoCoaseguroMedico), False, rsNotasCS!intConceptoCoaseguroMedico)
        blnConceptoDeducible = IIf(IsNull(rsNotasCS!INTCONCEPTODEDUCIBLE), False, rsNotasCS!INTCONCEPTODEDUCIBLE)
        blnConceptoCoaseguro = IIf(IsNull(rsNotasCS!INTCONCEPTOCOASEGURO), False, rsNotasCS!INTCONCEPTOCOASEGURO)
        blnConceptoCoaseguroAdicional = IIf(IsNull(rsNotasCS!INTCONCEPTOCOASEGUROADICIONAL), False, rsNotasCS!INTCONCEPTOCOASEGUROADICIONAL)
        blnConceptoCopago = IIf(IsNull(rsNotasCS!INTCONCEPTOCOPAGO), False, rsNotasCS!INTCONCEPTOCOPAGO)
        blnConceptoExcedenteDeIVA = IIf(IsNull(rsNotasCS!intExcedenteIVA), False, rsNotasCS!intExcedenteIVA)
    End If
    rsNotasCS.Close
    
    blnDeducibleSinIVA = False
    vlstrSentencia = "Select BITCALCULARDEDUSINIVA From PvParametro Where tnyclaveempresa = " & vgintClaveEmpresaContable
    Set rs = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
        blnDeducibleSinIVA = IIf(rs!BITCALCULARDEDUSINIVA = 1, True, False)
    rs.Close
    
    pCargaVariables str(vgintClaveEmpresaContable), 0, "", 0
    
    'Configuración de folios de Notas de crédito
    blnErrorManejoFolio = False
    Set rsTemp = frsRegresaRs("Select intFolioUnicoNotas, intSerieUnicaNotas From CcParametro")
    If rsTemp.RecordCount > 0 Then
        intFolioUnico = IIf(IsNull(rsTemp!intFolioUnicoNotas), 0, rsTemp!intFolioUnicoNotas)
        intSerieUnica = IIf(IsNull(rsTemp!intserieUnicaNotas), 0, rsTemp!intserieUnicaNotas)
    Else
        blnErrorManejoFolio = True
    End If
    rsTemp.Close
    
    'Formato para las notas
    lngNumeroTipoFormatoNotas = flngFormatoDepto(vgintNumeroDepartamento, cintTipoDocumento, "*")
    
    'Impresora para las notas de crédito
    Set rsTemp = frsRegresaRs("Select chrNombreImpresora From ImpresoraDepartamento Where chrTipo = 'NO' And smiCveDepartamento = " & CStr(vgintNumeroDepartamento))
    If rsTemp.RecordCount > 0 Then
        strImpresoraNotas = IIf(IsNull(Trim(rsTemp!chrNombreImpresora)), "", Trim(rsTemp!chrNombreImpresora))
    End If
    rsTemp.Close
    
    'Impresora para las facturas
    Set rsTemp = frsRegresaRs("Select chrNombreImpresora From ImpresoraDepartamento Where chrTipo = 'FA' And smiCveDepartamento = " & CStr(vgintNumeroDepartamento))
    If rsTemp.RecordCount > 0 Then
        strImpresoraFacturas = IIf(IsNull(Trim(rsTemp!chrNombreImpresora)), "", Trim(rsTemp!chrNombreImpresora))
    End If
    rsTemp.Close
    
    'Cuenta puente para notas de crédito
    lngCuentaPuenteNotasCredito = 0
    Set rsTemp = frsSelParametros("CN", vgintClaveEmpresaContable, "INTNUMCUENTAPUENTEDESCTOSPACIENTE")
    If Not rsTemp.EOF Then
        lngCuentaPuenteNotasCredito = IIf(IsNull(rsTemp!Valor), 0, CLng(rsTemp!Valor))
    End If
    rsTemp.Close
    
    'Cuenta para gastos no deducibles
    lngCuentaGastosNoDeducibles = 0
    Set rsTemp = frsEjecuta_SP(vgintClaveEmpresaContable & "|-1", "Sp_CcSelConfiguracionPensiones")
    If rsTemp.RecordCount <> 0 Then
        lngCuentaGastosNoDeducibles = IIf(IsNull(rsTemp!INTNUMCUENTACONTABLE), 0, rsTemp!INTNUMCUENTACONTABLE)
    End If
    rsTemp.Close
    
    'Número de opción por módulo:
    Select Case cgstrModulo
    Case "PV"
        llngNumOpcionDescto = clngNumOpcionDesctoCaja
        lngNumOpcionDatosSeguro = clngNumOpcionDatosSeguroCaja
    Case "CC"
        llngNumOpcionDescto = clngNumOpcionDesctoCredito
        lngNumOpcionDatosSeguro = clngNumOpcionDatosSeguroCredito
    End Select

    'Cargar las ciudades:
    Set rs = frsEjecuta_SP("", "Sp_GnSelCiudadEstado")
    If rs.RecordCount <> 0 Then
        pLlenarCboRs cboCiudad, rs, 0, 1
    End If
    
    'Impresoras
    vlstrSentencia = "select chrNombreImpresora Impresora from ImpresoraDepartamento where chrTipo = 'FA' and smiCveDepartamento = " & Trim(str(vgintNumeroDepartamento))
    Set rsImpresoras = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
    
    'Permiso, estado de cuenta:
    lblnPermisoEstado = fblnRevisaPermiso(vglngNumeroLogin, 305, "L", True)
    
    Set vgcolFacturasParciales = New Collection
    
    pConfiguraGridFacturaParcial
    pLimpiaGrid MSFGFacturasParciales
    pConfiguraGridCargos
    pLlenaParentesco
    sstFacturacion.TabEnabled(1) = False
    sstFacturacion.TabEnabled(2) = False
    sstFacturacion.TabEnabled(3) = False
    sstFacturacion.TabEnabled(4) = False
    sstFacturacion.Tab = 0
    freConsultaGeneraFacturas(0).Height = 2720
    freConsultaGeneraFacturas(1).Height = 2625
    
    'Usos de CFDI
    pCargaUsosCFDI
            
    ' Inicio de Cantidades en cero con formato
    txtSubtotal.Text = FormatCurrency(0, 2)
    txtIva.Text = FormatCurrency(0, 2)
    txtDescuentos.Text = FormatCurrency(0, 2)
    txtTotalFactura.Text = FormatCurrency(0, 2)
    txtPagos.Text = FormatCurrency(0, 2)
    txtRetenionServ.Text = FormatCurrency(0, 2)
    txtTotal.Text = FormatCurrency(0, 2)
    
    vgintColumnaDescuento = 6
    vgintColumnaFechaHoraCargo = 10
    
    vlstrSentencia = "Select BITVERIFICARREQUISICIONES, BITDESACTIVARALFACTURAR From pvParametro where tnyclaveempresa = " & vgintClaveEmpresaContable
    Set rs = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
        vlblnVerificarRequisiciones = IIf(rs!BITVERIFICARREQUISICIONES = 1, True, False)
        vlblnDesactivarExterno = IIf(rs!BITDESACTIVARALFACTURAR = 1, True, False)
    rs.Close
    
    'Checa si esta configurado el parametro Concepto de Facturacion
    vlstrSentencia = "Select count(*) As Co " & _
                     "From PvConceptoFacturacion " & _
                     "Where PvConceptoFacturacion.BITFACTURACIONPARCIAL <> 0 "
    Set rs = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
    If rs!CO = 0 Then
        cmdAgregaDonativo.Enabled = False
        lblMsgConcFact.Visible = True
        vglngCtaingresoFactParc = -1
        vglngCtaDescuentoFactParc = -1
        vglngCtaIVACreditoFactParc = -1
        vglngCtaIVAEfectivoFactParc = -1
    Else
        pLlenaCboCF cboCFParaFacturaParcial
        cmdAgregaDonativo.Enabled = True
        lblMsgConcFact.Visible = False
    End If
    
    If fintEsInterno(vglngNumeroLogin, enmTipoProceso.Facturacion) > 0 Then
        If fintEsInterno(vglngNumeroLogin, enmTipoProceso.Facturacion) = 1 Then
            optGrupoCuenta(1).Value = True
            OptTipoPaciente(0).Value = True
        Else
            optGrupoCuenta(1).Value = True
            OptTipoPaciente(1).Value = True
        End If
    End If
    
    pIniciaChkFacturaBase
    vgblnCancelacionFP = False
    
    lintConceptoLiquidacion = fintUsaFacturacionConsolidadaParticulares
    vlblncontrolaseguradora = False
    
    optTipoCoaseguroMedico_Click 0
    optTipoDeducible_Click 0
    optTipoCoaseguro_Click 0
    optTipoCopago_Click 0

    fraTipoCoaseguroMedico.BorderStyle = 0
    fraTipoDeducible.BorderStyle = 0
    fraTipoCoaseguro.BorderStyle = 0
    fraTipoCoaseguroAdicional.BorderStyle = 0
    fraTipoCopago.BorderStyle = 0
    
    'Tipos de pólizas:
    pCargaTipoPoliza
    
    ' Habilitar marcar / desmarcar para la validación de datos del seguro:
    lblnModificaSeguro = fblnRevisaPermiso(vglngNumeroLogin, lngNumOpcionDatosSeguro, "E", True)
    chkAutoriza.Enabled = lblnModificaSeguro
    chkTipoPoliza.Enabled = lblnModificaSeguro
    chkNumeroPoliza.Enabled = lblnModificaSeguro
    chkNumeroControl.Enabled = lblnModificaSeguro
    
    If vlstrDatosPaciente <> "" Then
        optGrupoCuenta(0).Enabled = False
        optGrupoCuenta(1).Enabled = False
        OptTipoPaciente(0).Value = IIf(Mid(vlstrDatosPaciente, 1, 1) = "I", True, False)
        OptTipoPaciente(1).Value = IIf(Mid(vlstrDatosPaciente, 1, 1) = "E", True, False)
        txtMovimientoPaciente.Text = Mid(vlstrDatosPaciente, 2, 8)
        txtMovimientoPaciente_KeyDown 13, 0
    End If
    
    pAgregarControles '18084
    pUbicacionElementos
    pCancelar
    
    blnHabilitadosConceptos = True
    vllngCuentaBusqueda = -1 'Variable para la busqueda de facturas por "nombre del paciente"
    vlblnValidaCargo = False
    
    '|  Identifca si se está utilizando el nuevo esquema de cancelación vigente a partir del 1 de septiembre del 2018
    
    txtImpresionesFP(0).Text = fintNumCopiaImpFactPaciente
    txtImpresionesFP(1).Text = fintNumCopiaImpFactEmpresa
    
    ' -- Caso 16652
    ' -- Obtiene los parámetros para determinar si se permite que la facturación se divida en dos facturas:
    ' -- Una factura por la razón social del hospital por servicios, materiales, anestésicos, biomédicos, etc. con IVA al 16%.
    ' -- Una factura por la razón social de farmacia por medicamentos. con IVA al 0%
    Set rsPrmtsFarmaciaCompartida = frsEjecuta_SP(CStr(vgintClaveEmpresaContable), "sp_GNSelGnParametrosFarmacia")
    ReDim aFarmaciaCompartida(0)
    If rsPrmtsFarmaciaCompartida.RecordCount > 0 Then
        aFarmaciaCompartida(0).blnActivo = rsPrmtsFarmaciaCompartida!bitactivo
        aFarmaciaCompartida(0).lngClaveEmpresaHospital = IIf(IsNull(rsPrmtsFarmaciaCompartida!tnyclaveempresahospital), 0, rsPrmtsFarmaciaCompartida!tnyclaveempresahospital)
        aFarmaciaCompartida(0).lngClaveEmpresaFarmacia = IIf(IsNull(rsPrmtsFarmaciaCompartida!TNYCLAVEEMPRESAFARMACIA), 0, rsPrmtsFarmaciaCompartida!TNYCLAVEEMPRESAFARMACIA)
        aFarmaciaCompartida(0).lngNumCliente = IIf(IsNull(rsPrmtsFarmaciaCompartida!intNumCliente), 0, rsPrmtsFarmaciaCompartida!intNumCliente)
        aFarmaciaCompartida(0).lngCveDepartamentoFarmacia = IIf(IsNull(rsPrmtsFarmaciaCompartida!smicvedepartamentofarmacia), 0, rsPrmtsFarmaciaCompartida!smicvedepartamentofarmacia)
        aFarmaciaCompartida(0).lngCveDepartamentoConsignacion = IIf(IsNull(rsPrmtsFarmaciaCompartida!smicvedepartamentoconsignacion), 0, rsPrmtsFarmaciaCompartida!smicvedepartamentoconsignacion)
    End If
    rsPrmtsFarmaciaCompartida.Close

    'Se inicializan los parámetros de la addenda
    vglngPaqueteAddenda = 0
    vgblnPaqueteAddenda = False
    vgblnEncontroPaqueteAddenda = False

    'Validar licencia para generar la lealtad del cliente y el médico con el hospital por medio del otorgamiento de puntos
    blnLicenciaLealtadCliente = fblnLicenciaLealtadCliente

    cboRegimenFiscal.Clear
    Set rs = frsRegresaRs("select vchclave, vchdescripcion from gncatalogosatdetalle where intidcatalogosat = 1 and bitactivo = 1")
    If Not rs.EOF Then
        pLlenarCboRs cboRegimenFiscal, rs, 0, 1
        cboRegimenFiscal.AddItem "<NINGUNO>", 0
        cboRegimenFiscal.ItemData(cboRegimenFiscal.newIndex) = 0
        cboRegimenFiscal.ListIndex = 0
    End If
    rs.Close
    
    'pLlenarCboRs cboRegimenFiscal, rs, 0, 1, 4
    vlblnAnticipoPendiente = False

End Sub

Private Sub pCargaTipoPoliza()
    Dim rs As New ADODB.Recordset
    
    Set rs = frsEjecuta_SP("-1|1", "SP_PVSELTIPOPOLIZASEGURO")
    If rs.RecordCount <> 0 Then
        pLlenarCboRs cboTipoPoliza, rs, 0, 1
    End If
    rs.Close
    
    cboTipoPoliza.AddItem " ", 0
    cboTipoPoliza.ItemData(cboTipoPoliza.newIndex) = 0
    
    cboTipoPoliza.AddItem "<AGREGAR> ", 1
    cboTipoPoliza.ItemData(cboTipoPoliza.newIndex) = -1
    
    cboTipoPoliza.ListIndex = 0
End Sub

Private Sub chkIncluyeCargosFacturados_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    pLlenaCargos
End Sub

Private Sub optMuestraCargos_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    pLlenaCargos
End Sub

Private Sub chkIncluyePagosFacturados_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
    pLlenaPagos
End Sub

Private Sub optOrdenCargos_Click(Index As Integer)
    If Index < 3 Or Index = 6 Then
        pLlenaCargos
    Else
        pLlenaPagos
    End If
End Sub

Private Sub cmdSelecciona_Click()
    GrdCargos_DblClick
End Sub

Private Sub cmdSelQuita_Click(Index As Integer)
    Dim vlintcontador As Integer
    Dim vlblnbandera As Boolean 'Ayuda a indicar si enocntro un paciente de convenio con ningun cargo excluido
    Dim vlintCvePaquete As Long
    Dim vlIntCont As Integer
    
    vlblnbandera = True
    With grdCargos
        .Row = 0
        vlblnbandera = True
        For vlintcontador = 1 To .Rows - 1
            .Row = .Row + 1
            
            If Trim(.TextMatrix(.Row, 15)) = "" Then
                'Seleccionar
                If Index = 0 Then
                    .TextMatrix(.Row, 0) = "*"
                ElseIf Index = 2 Then
                    'Si es convenio: solo seleccionamos los cargos que pagara el paciente y que su IVA sea mayor que 0
                    If gintConvenio = 1 Then
                        If .TextMatrix(.Row, cintColIVACargo) > 0 And .TextMatrix(.Row, clbytColumnaExclusion) = "X" Or .TextMatrix(.Row, 29) <> "" Then
                            .TextMatrix(.Row, 0) = "*"
                            
                            vlblnbandera = False
                        Else
                            .TextMatrix(.Row, 0) = ""
                        End If
                    Else
                    'Si no es convenio: se selecciona los cargos con IVA mayor que 0
                        If .TextMatrix(.Row, cintColIVACargo) > 0 Or .TextMatrix(.Row, 29) <> "" Then
                            .TextMatrix(.Row, 0) = "*"
                        Else
                            .TextMatrix(.Row, 0) = ""
                        End If
                    End If
                Else
                'Quitar
                    .TextMatrix(.Row, 0) = IIf(grdCargos.TextMatrix(vlintcontador, cintColMarcadoParaFacturar) = 1, "*", "")
                End If
            Else
                .TextMatrix(.Row, 0) = "F"
            End If
            
            .Col = 0
            .CellFontBold = True
        Next
        
        .Row = 1
    End With
    If Index = 2 Then
        If vlblnbandera And gintAseguradora = 1 Then
            MsgBox "No se encontraron cargos excluidos con IVA.", vbExclamation, "Mensaje"
        End If
    End If
    
    pTotales
End Sub

Private Sub GrdCargos_DblClick()
    Dim vlIntCont As Integer
    Dim vlintCvePaquete As Long
    
    '----------------------------
    'Si esta vacio que se salga
    '----------------------------
    If (grdCargos.Row = 0) Or (grdCargos.RowData(1) = -1) Then Exit Sub
    '----------------------------
    'Que se salga Cuando se trate de un grupo
    '----------------------------
    If optGrupoCuenta(0).Value Then Exit Sub
    '----------------------------
    'Que se salga Cuando el cargo ya está facturado
    '----------------------------
    If grdCargos.TextMatrix(grdCargos.Row, 0) = "F" Then Exit Sub
    '----------------------------
    'Que se salga Cuando el cargo fué marcado por facturar al paciente
    '----------------------------
    If grdCargos.TextMatrix(grdCargos.Row, cintColMarcadoParaFacturar) = 1 Then Exit Sub
    
    With grdCargos
        '-----------------------------------------------------------------------------------
        ' Validación que solo permite seleccionar un paquete completo o quitar la selección del mismo
        '-----------------------------------------------------------------------------------
        If .TextMatrix(.Row, 29) <> "" Then
            vlintCvePaquete = .TextMatrix(.Row, 30)
            For vlIntCont = 1 To .Rows - 1
                If .TextMatrix(vlIntCont, 30) = CStr(vlintCvePaquete) Then
                    If .TextMatrix(vlIntCont, 0) = "*" Then
                        .TextMatrix(vlIntCont, 0) = IIf(.TextMatrix(vlIntCont, cintColMarcadoParaFacturar) = 1, "*", "")
                    Else
                        .TextMatrix(vlIntCont, 0) = "*"
                    End If
                End If
            Next vlIntCont
        Else
            If Trim(.TextMatrix(.Row, 15)) = "" _
                    And grdCargos.Col <> clbytColumnaExclusion _
                    And grdCargos.Col <> 23 _
                    And grdCargos.Col <> 29 Then
                    
                If .TextMatrix(.Row, 0) = "*" Then
                    .TextMatrix(.Row, 0) = IIf(.TextMatrix(.Row, cintColMarcadoParaFacturar) = 1, "*", "")
                Else
                    .TextMatrix(.Row, 0) = "*"
                End If
            End If
            .Col = 0
            .CellFontBold = True
        End If
    End With
    
    pTotales
End Sub

Private Sub Form_KeyPress(KeyAscii As Integer)
    Select Case KeyAscii
        Case vbKeyEscape
            KeyAscii = 0
            Unload Me
        Case Asc("+")
            If sstFacturacion.Tab = 3 Then
                cmdAgregaDonativo_Click
                KeyAscii = 0
            End If
        Case Asc("-")
            If Not cmdEliminaDonativo.Enabled Then Exit Sub
            If sstFacturacion.Tab = 3 Then
                cmdEliminaDonativo_Click
                KeyAscii = 0
            End If
        Case Asc("*")
            If Not cmdEliminaDonativo.Enabled Then Exit Sub
            If sstFacturacion.Tab = 3 Then
                cmdModificaCantidad_Click
                KeyAscii = 0
            End If
    End Select
End Sub

Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    Dim vlblnSalir As Boolean
    
    vlblnSalir = True
    If vgblnCancelacionFP Then
        vgblnCancelacionFP = False
        Cancel = 1
        Exit Sub
    End If
    
    If chkFacturaBase.Enabled Then 'Significa que si hay facturas parciales que faltan de grabar
        If MsgBox(SIHOMsg(17), vbYesNo + vbQuestion, "Mensaje") = vbNo Then
            Cancel = 1
            vlblnSalir = False
        Else
            Cancel = 1
            vgstrEstadoManto = ""
            pCancelar
        End If
    Else
        Select Case vgstrEstadoManto
            Case Is = "C" 'Que esta en la consulta de las facturas
                Cancel = 1
                vgstrEstadoManto = "F"
                If sstFacturacion.Tab = 3 Then
                    chkConsultaGeneraFacturas(0).Value = 0
                    chkConsultaGeneraFacturas_Click 0
                Else
                    chkConsultaGeneraFacturas(1).Value = 0
                    chkConsultaGeneraFacturas_Click 1
                End If
            Case Is = "F" 'Que esta facturando
                If vlstrDatosPaciente <> "" Then Exit Sub
                Cancel = 1
                
                If freListaUrgencias.Visible Then 'Si esta modificando las urgencias
                    grdCargos.SetFocus
                ElseIf cboPaquetes.Visible Then   'Si esta modificando la asignacion de paquetes
                    grdCargos.SetFocus
                Else                              'No esta haciendo nada (ta flojiando)
                    vgstrEstadoManto = ""
                    If cmdDescuentoPuntos.Caption = "Desaplicar puntos de cliente leal" Then
                        MsgBox "Es necesario desaplicar los puntos de cliente leal antes de salir de la pantalla.", vbExclamation, "Mensaje"
                        If sstFacturacion.Tab <> 3 Then
                            sstFacturacion.Tab = 3
                        End If
                        cmdDescuentoPuntos.SetFocus
                        vgstrEstadoManto = "F"
                        vlblnSalir = False
                    Else
                        pCancelar
                    End If
                End If
            Case Is = "B" 'Que esta búscando
                Cancel = 1
                vgstrEstadoManto = ""
                pCancelar
            Case Is = "FE" 'Que Editando un descuento
                Cancel = 1
                vgstrEstadoManto = "F"
                grdCargos.SetFocus
                txtDescuento.Visible = False
        End Select
    End If
    
    If Cancel = 1 And vlblnSalir Then
        pIniciaChkFacturaBase
    End If
End Sub

Private Function fblnControlDiferente() As Boolean
    'Para detectar si el control que está guardado corresponde con lo que está en pantalla

    fblnControlDiferente = False
    ''18084
    If sstFacturacion.TabEnabled(2) Then
        If rsControlSeguro.RecordCount <> 0 Then
            fblnControlDiferente = rsControlSeguro!MNYCANTIDADDEDUCIBLE <> Val(Format(txtDeducible.Text, "")) Or _
                (IIf(IsNull(rsControlSeguro!MNYCANTIDADCOASEGURO), 0, rsControlSeguro!MNYCANTIDADCOASEGURO)) <> Val(Format(txtCoaseguro.Text, "")) Or _
                (IIf(IsNull(rsControlSeguro!MNYCANTIDADCOPAGO), 0, rsControlSeguro!MNYCANTIDADCOPAGO)) <> Val(Format(txtCopago.Text, "")) Or _
                (IIf(IsNull(rsControlSeguro!MNYEXCEDENTESUMAASEGURADA), 0, rsControlSeguro!MNYEXCEDENTESUMAASEGURADA)) <> Val(Format(txtExcedenteSumaAsegurada.Text, "")) Or _
                (IIf(IsNull(rsControlSeguro!MNYDESCUENTOEXCEDENTE), 0, rsControlSeguro!MNYDESCUENTOEXCEDENTE) <> ldblDesctoExcedente And IsNull(rsControlSeguro!CHRFOLIOFACTURAEXCEDENTE)) Or _
                (IIf(IsNull(rsControlSeguro!MNYDESCUENTODEDUCIBLE), 0, rsControlSeguro!MNYDESCUENTODEDUCIBLE) <> ldblDesctoDeducible And IsNull(rsControlSeguro!CHRFOLIOFACTURADEDUCIBLE)) Or _
                (IIf(IsNull(rsControlSeguro!MNYDESCUENTOCOASEGURO), 0, rsControlSeguro!MNYDESCUENTOCOASEGURO) <> ldblDesctoCoaseguro And IsNull(rsControlSeguro!CHRFOLIOFACTURACOASEGURO)) Or _
                (IIf(IsNull(rsControlSeguro!MNYDESCUENTOCOASEGUROMEDICO), 0, rsControlSeguro!MNYDESCUENTOCOASEGUROMEDICO) <> ldblDesctoCoaseguroMedico And IsNull(rsControlSeguro!CHRFOLIOFACTURACOASEGUROMED)) Or _
                (IIf(IsNull(rsControlSeguro!MNYDESCUENTOCOASEGUROADICIONAL), 0, rsControlSeguro!MNYDESCUENTOCOASEGUROADICIONAL) <> ldblDesctoCoaseguroAdicional And IsNull(rsControlSeguro!CHRFOLIOFACTURACOASEGUROADICI)) Or _
                (IIf(IsNull(rsControlSeguro!MNYDESCUENTOCOPAGO), 0, rsControlSeguro!MNYDESCUENTOCOPAGO) <> ldblDesctoCopago And IsNull(rsControlSeguro!CHRFOLIOFACTURACOPAGO))
        Else
            fblnControlDiferente = Val(Format(txtDeducible.Text, "")) <> 0 Or _
                Val(Format(txtCoaseguro.Text, "")) <> 0 Or _
                Val(Format(txtCopago.Text, "")) <> 0 Or _
                Val(Format(txtExcedenteSumaAsegurada.Text, "")) <> 0
        End If
    End If
End Function

Private Sub sstFacturacion_Click(PreviousTab As Integer)
    With sstFacturacion
        freDatosPaciente.Visible = .Tab <> 5
        vgstrEstadoManto = IIf(.Tab = 5, "B", vgstrEstadoManto) 'Búsqueda
        pEtiquetaVar "", ""
        Select Case .Tab
            Case 0
                'Datos Generales
                freBusqueda.Enabled = False
                freFacturaEmpresa.Enabled = False
                FreTotales.Visible = False
                pEtiquetaVar "Generales", vlstrMensajePuntos
                
            Case 1
                'Estado de Cuenta
                freBusqueda.Enabled = False
                freFacturaEmpresa.Enabled = False
                FreTotales.Visible = True
                cmdImprimirEstado.Enabled = Not optGrupoCuenta(0).Value And lblnPermisoEstado
                
            Case 2
                'Control aseguradora
                'El estado de cuenta contiene cambios que no han sido grabados, por favor grabe los cambios y vuelva a intentarlo.'
                If cmdActualizarCargos.Enabled Then
                    MsgBox SIHOMsg(624), vbExclamation, "Mensaje"
                    sstFacturacion.Tab = 1
                    grdCargos.SetFocus
                End If

                pCargaControl
                freBusqueda.Enabled = False
                freFacturaEmpresa.Enabled = False
                FreTotales.Visible = True

                If gintAseguradora = 1 Then
                    pLlenaFacturasConvenioAseguradora grdFacturaPaciente
                    pLlenaFacturasConvenioAseguradora grdFacturaEmpresa
                End If
               
                If fblnCanFocus(cboCartaAutorizacion) Then cboCartaAutorizacion.SetFocus    '18084
                'If fblnCanFocus(txtNombreAsegurado) Then txtNombreAsegurado.SetFocus
                
                'Verifica addenda
                If vglngCveAddenda <> 0 And lblnCanceloFacturaPaciente = False And vgblnPaqueteAddenda = True And vglngPaqueteAddenda <> 0 Then
                    cmdAddenda.Enabled = True
                ElseIf vglngCveAddenda <> 0 And lblnCanceloFacturaPaciente = False And vgblnPaqueteAddenda = False Then
                    cmdAddenda.Enabled = True
                End If
                
                'Verifica uso de interfaz AXA (Se deshabilita el campo del número de control y autorización)
                If vglngCveInterfazWS > 0 Then
                    If Trim(txtNumeroControl.Text) = "" Then
                        chkNumeroControl.Value = vbUnchecked
                    End If

                    If Trim(txtPersonaAutoriza.Text) = "" Then
                        chkAutoriza.Value = vbUnchecked
                    End If
                    
                    txtNumeroControl.Enabled = False
                    txtPersonaAutoriza.Enabled = False
                End If
                
            Case 3
                'Factura Paciente
                'El estado de cuenta contiene cambios que no han sido grabados, por favor grabe los cambios y vuelva a intentarlo.'
                If cmdActualizarCargos.Enabled Then
                    'El estado de cuenta contiene cambios que no han sido grabados, grabe y vuelva a intentar.
                    MsgBox SIHOMsg(624), vbExclamation, "Mensaje"
                    sstFacturacion.Tab = 1
                    grdCargos.SetFocus
                    Exit Sub
                Else
                    If sstFacturacion.TabEnabled(2) Then
                        If blnCambiosEnParametrosCuenta Or ((fblnControlDiferente() Or Not fblnControlValido(False)) Or lblnDatosSeguroModificados) Then
                            If lblnCanceloFacturaPaciente Then
                                'Se deberá cancelar la factura de la empresa para grabar el control de la aseguradora con la nueva configuración.
                               
                            Else
                                'Recuerde grabar el control de la aseguradora con la nueva configuración.
                               
                            End If
                           
                        End If
                    End If
                End If
                
                If vgBlnCambioDatosFiscales Then    'Fueron modificados los datos fiscales del paciente
                    'Recuerde grabar los nuevos datos fiscales de la cuenta particular
                    MsgBox SIHOMsg(1076), vbOKOnly + vbExclamation, "Mensaje"
                    sstFacturacion.Tab = 0
                    cmdActualizaFiscales.SetFocus
                    Exit Sub
                End If
                
                freBusqueda.Enabled = False
                freFacturaEmpresa.Enabled = False
                FreTotales.Visible = True
                freFacturaPaciente.Enabled = True
                
                If vgintEmpresa = 0 Then
                    pLlenaFacturasParticulares grdFacturaPaciente
                Else
                    If gintAseguradora = 0 Then
                        pLlenaFacturasConvenio grdFacturaPaciente
                        pLlenaFacturasConvenio grdFacturaEmpresa
                    Else
                        pLlenaFacturasConvenioAseguradora grdFacturaPaciente
                        pLlenaFacturasConvenioAseguradora grdFacturaEmpresa
                    End If
                End If
                
                ' Codigo repetido?
                If vgintEmpresa = 0 Then
                    pLlenaFacturasParticulares grdFacturaPaciente
                Else
                    If gintAseguradora = 0 Then
                        pLlenaFacturasConvenio grdFacturaPaciente
                    Else
                        pLlenaFacturasConvenioAseguradora grdFacturaPaciente
                    End If
                End If
                
                If vlblnCargosMenoresaConcepSegurosNOGravados And gintAseguradora = 1 Then
                    'El importe no gravado de los cargos seleccionados, es menor al importe no gravado de los conceptos de seguro.
                    MsgBox "El importe no gravado de los cargos seleccionados, es menor al importe no gravado de los conceptos de seguro.", vbExclamation, "Mensaje"
                    sstFacturacion.Tab = 1
                    grdCargos.SetFocus
                Else
                    If cmdGrabarFacturaPaciente.Enabled Then cmdGrabarFacturaPaciente.SetFocus
                End If
    
                If vlblnCargosMenoresaConcepSegurosGravados And gintAseguradora = 1 Then
                    'El importe gravado de los cargos seleccionados, es menor al importe gravado de los conceptos de seguro.
                    MsgBox "El importe gravado de los cargos seleccionados, es menor al importe gravado de los conceptos de seguro.", vbExclamation, "Mensaje"
                    sstFacturacion.Tab = 1
                    grdCargos.SetFocus
                Else
                    If cmdGrabarFacturaPaciente.Enabled Then cmdGrabarFacturaPaciente.SetFocus
                End If
    
                'If cmdGrabarFacturaPaciente.Enabled Then cmdGrabarFacturaPaciente.SetFocus
                vgblnPesos = IIf(optPesos(0).Value, True, False)
                
                If vldblMontoDisponiblePuntos > 0 Then 'And Val(Format(txtFPSubtotal.Text, "")) > 0 Then
                    pEtiquetaVar "Factura", vlstrMensajePuntos
                    cmdDescuentoPuntos.Enabled = True
                    'txtFPDescuentos.Top = 255
                    'Label60(2).Top = 285
                    'txtFPDescuentos(1).Visible = True
                    'Label60(10).Visible = True
                Else
                    pEtiquetaVar "", ""
                    cmdDescuentoPuntos.Enabled = False
                    'txtFPDescuentos(1).Visible = False
                    'Label60(10).Visible = False
                    'txtFPDescuentos.Top = 560
                    'Label60(2).Top = 590
                End If
            Case 4
                'Factura Empresa
                'El estado de cuenta contiene cambios que no han sido grabados, por favor grabe los cambios y vuelva a intentarlo.'
                If cmdActualizarCargos.Enabled Then
                    MsgBox SIHOMsg(624), vbExclamation, "Mensaje"
                    sstFacturacion.Tab = 1
                    grdCargos.SetFocus
                    Exit Sub
                Else
                    If blnCambiosEnParametrosCuenta Or ((fblnControlDiferente() Or Not fblnControlValido(False) Or lblnDatosSeguroModificados) And sstFacturacion.TabEnabled(2)) Then
                        If lblnCanceloFacturaPaciente Then
                            'Se deberá cancelar la factura de la empresa para grabar el control de la aseguradora con la nueva configuración.
                            
                          
                        Else
                            'Recuerde grabar el control de la aseguradora con la nueva configuración.
                           
                        End If
                    End If
                End If
                freBusqueda.Enabled = False
                
                If vgintEmpresa = 0 And vgSocio = False Then
                    pLlenaFacturasParticulares grdFacturaPaciente
                Else
                    If gintAseguradora = 0 Then
                        pLlenaFacturasConvenio grdFacturaPaciente
                        pLlenaFacturasConvenio grdFacturaEmpresa
                    Else
                        pLlenaFacturasConvenioAseguradora grdFacturaPaciente
                        pLlenaFacturasConvenioAseguradora grdFacturaEmpresa
                    End If
                End If
                
                If gintAseguradora = 1 _
                    And Val(Format(txtSumaAsegurada.Text, "")) > 0 _
                    And Val(Format(txtSumaAsegurada.Text, "")) < Val(Format(txtFETotalPagar.Text, "")) _
                    And Val(Format(txtFETotalPagar.Text, "")) - Val(Format(txtSumaAsegurada.Text, "")) > 2 Then
                    lblCancelada(2).Visible = True
                Else
                    lblCancelada(2).Visible = False
                End If
                freFacturaEmpresa.Enabled = True
                FreTotales.Visible = True
                
                If dblIVAP < 0 And dblExcedenteDeIVA = 0 Then
                    'El IVA de los cargos seleccionados, es menor al IVA a descontar
                    MsgBox "El IVA de los cargos seleccionados es menor que el IVA a descontar", vbExclamation, "Mensaje"
                    sstFacturacion.Tab = 1
                    grdCargos.SetFocus
                Else
                    cmdGrabarFacturaEmpresa.SetFocus
                End If
                
                If vlblnCargosMenoresaConcepSegurosNOGravados And gintAseguradora = 1 Then
                    'El importe no gravado de los cargos seleccionados, es menor al importe no gravado de los conceptos de seguro a descontar.
                    MsgBox "El importe no gravado de los cargos seleccionados, es menor al importe no gravado de los conceptos de seguro a descontar.", vbExclamation, "Mensaje"
                    sstFacturacion.Tab = 1
                    grdCargos.SetFocus
                Else
                    cmdGrabarFacturaEmpresa.SetFocus
                End If
                
                If vlblnCargosMenoresaConcepSegurosGravados And gintAseguradora = 1 Then
                    'El importe gravado de los cargos seleccionados, es menor al importe gravado de los conceptos de seguro.
                    MsgBox "El importe gravado de los cargos seleccionados, es menor al importe gravado de los conceptos de seguro.", vbExclamation, "Mensaje"
                    sstFacturacion.Tab = 1
                    grdCargos.SetFocus
                Else
                    If cmdGrabarFacturaPaciente.Enabled Then cmdGrabarFacturaPaciente.SetFocus
                End If
                
            Case 5
                'Consulta de Facturas
                pEtiquetaVar "Consulta", ""
                
                FreTotales.Visible = False
                freBusqueda.Enabled = True
                
                optTipoPacienteBusqueda(2).Value = True
                optTipoBusqueda(0).Value = True
                
                vgstrEstadoManto = "B"
                
                pCargaBusqueda "A", -1
                
                grdBuscaFacturas.SetFocus
        End Select
        
        If chkConsultaGeneraFacturas(0).Value = 1 Or chkConsultaGeneraFacturas(1).Value = 1 Then
            vgstrEstadoManto = "F"
            If PreviousTab = 3 Then
                chkConsultaGeneraFacturas(0).Value = 0
                chkConsultaGeneraFacturas_Click 0
            Else
                If PreviousTab = 4 Then
                    chkConsultaGeneraFacturas(1).Value = 0
                    chkConsultaGeneraFacturas_Click 1
                End If
            End If
        End If
    End With
End Sub

Sub pLimpiaGrid(ObjGrd As MSHFlexGrid)
    Dim vlbytColumnas As Byte
    
    With ObjGrd
        .FormatString = ""
        .Row = 1
        .Col = 1
        .Rows = 2
        For vlbytColumnas = 1 To .Cols - 1
            .TextMatrix(1, vlbytColumnas) = ""
        Next vlbytColumnas
        .TextMatrix(1, 1) = ""
        .RowData(1) = -1
    End With
End Sub

Private Sub optTipoFacturacion_Click(Index As Integer)
    Dim rsControl As New ADODB.Recordset
    Dim vlstrSentencia As String
    
    sstFacturacion.TabEnabled(3) = optTipoFacturacion(1).Value

    If Not vgblnPrimeraVez Then
        If Index = 0 Then 'Facturación Consolidada
            vlstrSentencia = "Select intMovPaciente from pvControlAseguradora " & _
                            " where intMovPaciente = " & Trim(txtMovimientoPaciente.Text) & _
                            " and chrTipoPaciente = " & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & _
                            " And (bitFacturaDeducible <> 0 Or bitFacturaCoaseguro <> 0 Or bitFacturaCopago <> 0)" & _
                            " and intCveEmpresa = " & str(vgintEmpresa)
                            
            Set rsControl = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
            If rsControl.RecordCount > 0 Then 'Ya se ha grabado el Control de la aseguradora
                'No puede ser factura consolidada si se va a facturar deducible, coaseguro o copago
                MsgBox SIHOMsg(652), vbOKOnly + vbInformation, "Mensaje"
                optTipoFacturacion(1).Value = True
                If fblnCanFocus(optTipoFacturacion(1)) Then optTipoFacturacion(1).SetFocus
            Else
                'Deshabilitación de Deducible, Coaseguro y Copago en el tab Control de aseguradora
                chkFacturaDeducible.Value = 0
                chkFacturaCoaseguro.Value = 0
                chkFacturaCopago.Value = 0
                chkFacturaDeducible.Enabled = False
                chkFacturaCoaseguro.Enabled = False
                chkFacturaCopago.Enabled = False
            End If
        Else 'Facturación Separada
            chkFacturaDeducible.Enabled = True
            chkFacturaCoaseguro.Enabled = True
            chkFacturaCopago.Enabled = True
        End If
    End If
End Sub

Private Sub txtPorcentajeCoaseguro_GotFocus()
    pEnfocaTextBox txtPorcentajeCoaseguro
End Sub

Private Sub txtPorcentajeCoaseguro_KeyPress(KeyAscii As Integer)
    If Not IsNumeric(Chr(KeyAscii)) Then
        If KeyAscii = 46 And InStr(txtPorcentajeCoaseguro.Text, ".") > 0 Then
            KeyAscii = 7
        End If
    End If
End Sub

Private Sub txtPorcentajeCoaseguro_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If fblnCanFocus(txtCantidadMaximaCO) Then
            txtCantidadMaximaCO.SetFocus
        Else
            If txtPorcentajeCoaseguroAdicional.Enabled Then
                txtPorcentajeCoaseguroAdicional.SetFocus
            Else
                If txtCoaseguroAdicional.Enabled Then
                    txtCoaseguroAdicional.SetFocus
                End If
            End If
        End If
    End If
End Sub

Private Sub txtSumaAsegurada_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If txtPorcentajeDeducible.Enabled Then
            txtPorcentajeDeducible.SetFocus
        Else
            If txtDeducible.Enabled Then
                txtDeducible.SetFocus
            End If
        End If
    End If
End Sub

Private Sub txtSumaAsegurada_GotFocus()
    pEnfocaTextBox txtSumaAsegurada
End Sub

Private Sub txtSumaAsegurada_KeyPress(KeyAscii As Integer)
    If KeyAscii = 13 Then
        If Me.ActiveControl.Name = "txtSumaAsegurada" Then
            txtSumaAsegurada.Text = FormatCurrency(Val(Format(txtSumaAsegurada.Text, "")), 2)
            pEnfocaTextBox txtSumaAsegurada
        End If
    Else
        If Not fblnFormatoCantidad(txtSumaAsegurada, KeyAscii, 2) Then
            KeyAscii = 7
        End If
    End If
End Sub

Private Sub txtPorcentajeDeducible_GotFocus()
    pEnfocaTextBox txtPorcentajeDeducible
End Sub

Private Sub txtPorcentajeDeducible_KeyPress(KeyAscii As Integer)
    If Not IsNumeric(Chr(KeyAscii)) Then
        If KeyAscii = 46 And InStr(txtPorcentajeDeducible.Text, ".") > 0 Then
            KeyAscii = 7
        End If
    End If
End Sub

Private Sub txtPorcentajeDeducible_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If txtPorcentajeCoaseguro.Enabled Then
            txtPorcentajeCoaseguro.SetFocus
        Else
            If txtCoaseguro.Enabled Then
                txtCoaseguro.SetFocus
            Else
                chkFacturaCoaseguro.SetFocus
            End If
        End If
    End If
End Sub

Private Sub txtObservaciones_KeyPress(KeyAscii As Integer)
    KeyAscii = Asc(UCase(Chr(KeyAscii)))
End Sub

Private Sub txtObservaciones_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If fblnCanFocus(txtHonorarios) Then
            txtHonorarios.SetFocus
        Else
            If fblnCanFocus(txtSumaAsegurada) Then
                txtSumaAsegurada.SetFocus
            Else
                txtHonorariosAFacturar.SetFocus
            End If
        End If
    End If
End Sub

Private Sub cboParentesco_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then cboTipoPoliza.SetFocus  'txtPersonaAutoriza.SetFocus
End Sub

Private Sub txtPersonaAutoriza_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then txtNumeroControl.SetFocus  'cboTipoPoliza.SetFocus
End Sub

Private Sub txtPersonaAutoriza_KeyPress(KeyAscii As Integer)
    KeyAscii = Asc(UCase(Chr(KeyAscii)))
End Sub

Private Sub txtNombreFactura_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then pEnfocaTextBox txtDireccionFactura(0)
End Sub

Private Sub txtDireccionFactura_KeyDown(Index As Integer, KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then
        If Index = 0 Then   'calle
            pEnfocaTextBox txtFacturaNumExterior
        Else    'correo
            If fblnCanFocus(cmdActualizaFiscales) Then cmdActualizaFiscales.SetFocus
        End If
    End If
End Sub

Private Sub txtNombreFactura_KeyPress(KeyAscii As Integer)
    KeyAscii = Asc(UCase(Chr(KeyAscii)))
    vgBlnCambioDatosFiscales = True
End Sub

Private Sub txtRFCFactura_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then chkRFCgenerico.SetFocus
End Sub

Private Sub txtTelefonoFactura_GotFocus()
    pSelTextBox txtTelefonoFactura
End Sub

Private Sub txtTelefonoFactura_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyReturn Then txtDireccionFactura(1).SetFocus
End Sub

Private Sub Form_Activate()
    Dim vllngFoliosRestantes As Long
    Dim vlstrFolioDocumento As String
    Dim vllngMensaje As Long
    Dim rsTipoFacturacion As New ADODB.Recordset
    Dim vlstrSentencia As String
    Dim lngCveFormato As Long
    Dim strFolio As String
    Dim strSerie As String
    Dim strNumeroAprobacion As String
    Dim strAnoAprobacion As String
    
    vllngPersonaGraba = 0
    
    If Not vlblnEjecutoActivate Then
        vllngFoliosRestantes = 1
        vlstrFolioDocumento = ""
        pCargaArreglo alstrParametrosSalida, vllngFoliosRestantes & "|" & ADODB.adBSTR & "|" & strFolio & "|" & ADODB.adBSTR & "|" & strSerie & "|" & ADODB.adBSTR & "|" & strNumeroAprobacion & "|" & ADODB.adBSTR & "|" & strAnoAprobacion & "|" & ADODB.adBSTR
        frsEjecuta_SP "FA|" & vgintNumeroDepartamento & "|0", "sp_gnFolios", , , alstrParametrosSalida
        pObtieneValores alstrParametrosSalida, vllngFoliosRestantes, strFolio, strSerie, strNumeroAprobacion, strAnoAprobacion
        If vllngFoliosRestantes > 0 Then
            MsgBox "Faltan " & Trim(str(vllngFoliosRestantes)) + " facturas y será necesario aumentar folios!", vbOKOnly + vbInformation, "Mensaje"
        End If
        '|  Si la serie está vacía el SP regresa un espacio en blanco por eso se debe de hacer el TRIM
        vlstrFolioDocumento = Trim(strSerie) & strFolio
        lblFolioFactura.Caption = Trim(vlstrFolioDocumento)
    End If
    
    lblTipoCambio.Caption = "Dólar " & Trim(str(fdblTipoCambio(fdtmServerFecha, "V")))

'    lblnCambiaNombreCargos = False

    vlblnEjecutoActivate = True
    fblnHabilitaObjetos Me
    
    pHabilitaGrabacionFacturaPaciente
    
    lblnTienePermisoLiquidar = cmdLiquidaCuenta.Enabled
    
    If vlblnFacturado Then
        vlblnFacturado = False
        Unload Me
    End If
    acomodaControles
End Sub
'- CASO 7442: Regresa tipo de movimiento según la forma de pago -'
Private Function fstrTipoMovimientoForma(lintCveForma As Integer) As String
On Error GoTo NotificaError

    Dim rsForma As New ADODB.Recordset
    Dim lstrSentencia As String
    
    fstrTipoMovimientoForma = ""
    
    lstrSentencia = "SELECT * FROM PvFormaPago WHERE intFormaPago = " & lintCveForma
    Set rsForma = frsRegresaRs(lstrSentencia, adLockReadOnly, adOpenForwardOnly)
    If rsForma.RecordCount > 0 Then
        Select Case rsForma!chrTipo
            Case "E": fstrTipoMovimientoForma = "EFF"
            Case "T": fstrTipoMovimientoForma = "TAF"
            Case "B": fstrTipoMovimientoForma = "TPF"
            Case "H": fstrTipoMovimientoForma = "CHF"
        End Select
    End If
    rsForma.Close
    
    Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":fstrTipoMovimientoForma"))
End Function
Private Sub cmdBuscar_Click()
    sstFacturacion.Tab = 5
End Sub

Private Sub optTipoPaciente_Click(Index As Integer)
    pEnfocaTextBox txtMovimientoPaciente
End Sub

Private Sub cmdBorraControl_Click()
    Dim vlstrSentencia As String
    Dim vllngPersonaGraba As Long
    
    '¿Está seguro que desea borrar el control de la aseguradora de este paciente?
    If MsgBox(SIHOMsg(509), vbQuestion + vbYesNo, "Mensaje") = vbYes Then
        ' Persona que graba
        vllngPersonaGraba = flngPersonaGraba(vgintNumeroDepartamento)
        If vllngPersonaGraba <> 0 Then
           If fblnControlAseguradoraFacturado Then
                vlstrSentencia = "Delete pvControlAseguradora " & _
                                " where intMovPaciente = " & Trim(txtMovimientoPaciente.Text) & _
                                " and chrTipoPaciente = " & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & _
                                " and intCveEmpresa = " & str(vgintEmpresa)
                pEjecutaSentencia vlstrSentencia
                                        
                Call pGuardarLogTransaccion(Me.Name, EnmBorrar, vllngPersonaGraba, "CONTROL SEGURO", txtMovimientoPaciente.Text & IIf(OptTipoPaciente(0).Value, "I", "E"))
                
                'El control de la aseguradora se eliminó con éxito, recuerde grabar el nuevo cálculo.
                MsgBox SIHOMsg(510), vbInformation, "Mensaje"
                Unload Me
           Else
               '¡No es posible eliminar el control de aseguradora! Existen conceptos de aseguradora ya facturados.
               MsgBox SIHOMsg(1241), vbExclamation, "Mensaje"
               Unload Me
           End If
        End If
    End If
End Sub

Private Sub optTipoCliente_MouseUp(Index As Integer, Button As Integer, Shift As Integer, X As Single, Y As Single)
    If Index = 0 Then
        txtFPBuscaCliente.Text = ""
        txtFPBuscaCliente.Enabled = False
        lstFPBuscaCliente.Enabled = False
    Else
        txtFPBuscaCliente.Enabled = True
        txtFPBuscaCliente_KeyUp 0, 0
        pEnfocaTextBox txtFPBuscaCliente
        chkRFCgenerico.Value = 0
    End If
    
    pDatosFacturaPaciente
End Sub

Private Sub txtFPBuscaCliente_KeyPress(KeyAscii As Integer)
    If KeyAscii = 39 Then
        KeyAscii = 0
        Exit Sub
    Else
        KeyAscii = Asc(UCase(Chr(KeyAscii)))
    End If
End Sub

Private Sub txtDireccionFactura_KeyPress(Index As Integer, KeyAscii As Integer)
    If Index = 0 Then KeyAscii = Asc(UCase(Chr(KeyAscii)))
    vgBlnCambioDatosFiscales = True
End Sub

Private Sub txtFPBuscaCliente_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = vbKeyDown Or KeyCode = vbKeyReturn Then
        If lstFPBuscaCliente.Enabled Then
            lstFPBuscaCliente.SetFocus
        End If
    End If
End Sub

Private Sub grdCargos_RowColChange()
    Dim strInfoHonorario  As String
    Dim strSentencia As String
    Dim rsInfoHonorarios As New Recordset
    
    lblMensaje.Caption = "Presione <F10> para asignar este descuento a toda la cuenta"
    lblMensaje.Visible = grdCargos.Col = vgintColumnaDescuento
    pHabilitaExcluidoDescEspecial grdCargos.Col <> vgintColumnaDescuento
    '----------------------------
    'Muestra información del honorario médico
    '----------------------------
    
    txtInfoHonorario.Text = ""
    If grdCargos.TextMatrix(grdCargos.Row, 1) = "OC" Then
        strInfoHonorario = ""
        strSentencia = "Select FN_PVHONORARIOMEDICO(" & grdCargos.RowData(grdCargos.Row) & ") InfoHonorario From Dual"
        Set rsInfoHonorarios = frsRegresaRs(strSentencia, adLockReadOnly, adOpenStatic)
        If rsInfoHonorarios.RecordCount <> 0 Then
            strInfoHonorario = IIf(IsNull(rsInfoHonorarios!InfoHonorario), "", rsInfoHonorarios!InfoHonorario)
        End If
        txtInfoHonorario.Text = strInfoHonorario
    End If
    
    If grdCargos.Col = vgintColumnaDescuento Then
'        If KeyCode <> vbKeyUp And KeyCode <> vbKeyDown And KeyCode <> vbKeyLeft And KeyCode <> vbKeyRight And KeyCode <> vbKeyEscape Then
'            If Not fblnEstatusCuenta(txtMovimientoPaciente.Text, IIf(OptTipoPaciente(0).Value, "I", "E")) Then
'                MsgBox SIHOMsg(596), vbInformation, "Mensaje"
'                Exit Sub
'            End If
'        End If
        intlocaterow = grdCargos.Row
        If (vgSocio = True And (grdCargos.TextMatrix(grdCargos.Row, 18) = "X")) Or (vgSocio = False) Then 'Se valida que a los socios solo se les pueda modificar el descuento a los cargos excluidos
'            Call pEditarColumna(13, txtDescuento, grdCargos)
        End If
    End If
            
            
'        If KeyCode = vbKeyF2 Then 'para que se edite el contenido de la celda como en excel
'            '---------------------------------------------------------------------------------
'            '|  Valida que tenga permisos de control total para realizar descuentos
'            '---------------------------------------------------------------------------------
'            If Not fblnRevisaPermiso(vglngNumeroLogin, vllngNumeroOpcion, "C") Then Exit Sub
'
'            If (vgSocio = True And (grdCargos.TextMatrix(grdCargos.Row, 18) = "X")) Or (vgSocio = False) Then 'Se valida que a los socios solo se les pueda modificar el descuento a los cargos excluidos
'                Call pEditarColumna(13, txtDescuento, grdCargos)
'            End If
'
'            If gintAseguradora = 1 Then pCargaControl
'
'        ElseIf KeyCode = vbKeyF10 Then 'Para copiar el descuento a los otros Cargos
'            '---------------------------------------------------------------------------------
'            '|  Valida que tenga permisos del control total para realizar descuentos
'            '---------------------------------------------------------------------------------
'            If Not fblnRevisaPermiso(vglngNumeroLogin, llngNumOpcionDescto, "E", True) Then Exit Sub
'
'            If (vgSocio = True And (grdCargos.TextMatrix(grdCargos.Row, 18) <> "X")) Then Exit Sub  'Se valida que a los socios solo se les pueda modificar el descuento a los cargos excluidos
'
'            ' ¿Desea aplicar este descuento a todos los cargos?
'            'If MsgBox(SIHOMsg(537), vbQuestion + vbYesNo, "Mensaje") = vbYes Then
'              'If vllngPersonaGrabaDescuento = 0 Then ''* otro variable
'              '       vllngPersonaGrabaDescuento = flngPersonaGraba(vgintNumeroDepartamento)
'              '        If vllngPersonaGrabaDescuento = 0 Then ''*
'                      If vllngPersonaGrabaDescuento = 0 Then ''*
'                            txtDescuento.Text = ""
'                            txtDescuento.Visible = False
'                            grdCargos.Row = intlocaterow ''*
'                            grdCargos.Col = vgintColumnaDescuento ''*
'                            grdCargos.SetFocus
'                            Exit Sub
'                      End If
'              '  End If
'
'             If vllngPersonaGrabaDescuento <> 0 Then ''*
'                vldblDescuento = CDbl(grdCargos.TextMatrix(grdCargos.Row, cintColDescuentoCargo)) / CDbl(grdCargos.TextMatrix(grdCargos.Row, cintColPrecioCantidad)) * 100
'
'                'Barrita de progreso
'                pgbBarra.Value = 1
'                freBarra.Top = 1500
'                lblTextoBarra.Caption = "Actualizando descuentos en cargos, por favor espere..."
'                freBarra.Visible = True
'                freBarra.Refresh
'
'                If vgSocio = True Then 'Si es socio, se aplica el descuento únicamente a los cargos excluidos
'                    For vllngContador = 1 To grdCargos.Rows - 1
'                        If grdCargos.TextMatrix(vllngContador, 18) = "X" Then
'                            pActualizaDescuentos vldblDescuento, vllngContador, 2
'                            Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGrabaDescuento, "DESCUENTOS EN PANTALLA DE FACTURACIÓN", "Cta. " & txtMovimientoPaciente.Text & " Cargo " & grdCargos.RowData(vllngContador) & " Descto. " & Format(Val(vldblDescuento), "#,###.##00")) ''F10
'                        End If
'                    Next
'                Else
'                    For vllngContador = 1 To grdCargos.Rows - 1
'                        pgbBarra.Value = (vllngContador / (grdCargos.Rows - 1)) * 100
'                        pActualizaDescuentos vldblDescuento, vllngContador
'                        Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGrabaDescuento, "DESCUENTOS EN PANTALLA DE FACTURACIÓN", "Cta. " & txtMovimientoPaciente.Text & " Cargo " & grdCargos.RowData(vllngContador) & " Descto. " & Format(Val(vldblDescuento), "#,###.##00")) ''F10
'                    Next
'                End If
'
'                pLlenaCargos
'                pTotales
'                freBarra.Visible = False
'             End If
'        End If
'    End If
'
    
    
End Sub

Private Sub pActualizaDescuentos(vldblDescuento As Double, vllngRenglon As Long, Optional vlSocio As Integer)
    Dim rs As New ADODB.Recordset
    Dim vlstrSentencia As String
    Dim vldblIVA As Double
    Dim vldblSubtotal As Double
    Dim dblDescuento As Double
    Dim vlintcontador As Integer
    Dim vdblImporteHonorario As Double
    Dim vdblPrecioCantidad2Dec As Double
    Dim vdblDescuento2Dec As Double
    
    If vldblDescuento > 100 Then
        vldblDescuento = 0
    End If
    
    vdblImporteHonorario = 0
    vlstrSentencia = "select PVBASEHONORARIOMEDICO.NUMIMPORTEHONORARIO from PVBASEHONORARIOMEDICO where PVBASEHONORARIOMEDICO.INTNUMCARGO = " & grdCargos.RowData(vllngRenglon)
    Set rs = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenStatic)
    If rs.RecordCount <> 0 Then
        vdblImporteHonorario = rs!NUMIMPORTEHONORARIO
    End If
        
    If vdblImporteHonorario > 0 Then
        If vdblImporteHonorario > CDbl(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCantidad)) - CDbl(vldblDescuento / 100 * CDbl(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCantidad))) Then
            'Mensaje
            MsgBox "El importe resultante al aplicar el descuento (" & Format(CDbl(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCantidad)) - CDbl(vldblDescuento / 100 * CDbl(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCantidad))), "$ ###,###,###,###.00") & ") es menor al importe a pagar del honorario (" & Format(vdblImporteHonorario, "$ ###,###,###,###.00") & ")", vbCritical, "Mensaje"
            vldblDescuento = 0
        End If
    End If
        
    vdblPrecioCantidad2Dec = CDbl(Format(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCargo), "$ ###,###,###,###.00")) * CDbl(grdCargos.TextMatrix(vllngRenglon, 4))
    vdblDescuento2Dec = CDbl(Format((vldblDescuento / 100) * CDbl(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCantidad)), "$ ###,###,###,###.00"))
    If vdblDescuento2Dec > vdblPrecioCantidad2Dec And vldblDescuento < 100 Then
        grdCargos.TextMatrix(vllngRenglon, vgintColumnaDescuento) = Format(Truncar((vldblDescuento / 100) * CDbl(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCantidad)), 2), "$ ###,###,###,###.00")
        grdCargos.TextMatrix(vllngRenglon, cintColDescuentoCargo) = Truncar(vldblDescuento / 100 * CDbl(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCantidad)), 2)
    Else
        grdCargos.TextMatrix(vllngRenglon, vgintColumnaDescuento) = Format((vldblDescuento / 100) * CDbl(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCantidad)), "$ ###,###,###,###.00####")
        grdCargos.TextMatrix(vllngRenglon, cintColDescuentoCargo) = vldblDescuento / 100 * CDbl(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCantidad))
    End If
        
'    grdCargos.TextMatrix(vllngRenglon, vgintColumnaDescuento) = Format((vldblDescuento / 100) * CDbl(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCantidad)), "$ ###,###,###,###.00")
'    grdCargos.TextMatrix(vllngRenglon, cintColDescuentoCargo) = vldblDescuento / 100 * CDbl(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCantidad))
    
    'Si no hubo modificación del descuento(si los totales se conservan),
    'se le hace creer que la modificación es de tipo socio (para que no se active el bit de precio manual por solo posicionarse en el txt del descuento)
    'If Trim(FormatCurrency(grdCargos.TextMatrix(vllngRenglon, 7), 2)) <> Trim(FormatCurrency(CDbl(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCantidad)) - CDbl(grdCargos.TextMatrix(vllngRenglon, cintColDescuentoCargo)), 2)) Then
    If Trim(FormatCurrency(grdCargos.TextMatrix(vllngRenglon, 7), 6)) <> Trim(FormatCurrency(CDbl(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCantidad)) - CDbl(grdCargos.TextMatrix(vllngRenglon, cintColDescuentoCargo)), 6)) Then
        grdCargos.Redraw = False
        For vlintcontador = 3 To grdCargos.Cols - 1
            grdCargos.Col = vlintcontador
            If vlintcontador >= 3 And grdCargos.Row = vllngRenglon Then 'Para que no pinte todas las celdas del mundo!
                grdCargos.CellBackColor = &H80000018 'naranja
            End If
        Next
        grdCargos.Redraw = True
    Else
        vlSocio = 1 'para que no afecte el bitPrecioManual
    End If
    
    'grdCargos.TextMatrix(vllngRenglon, 7) = FormatCurrency(CDbl(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCantidad)) - CDbl(grdCargos.TextMatrix(vllngRenglon, cintColDescuentoCargo)), 2)
    grdCargos.TextMatrix(vllngRenglon, 7) = Format(CDbl(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCantidad)) - CDbl(grdCargos.TextMatrix(vllngRenglon, cintColDescuentoCargo)), "$ ###,###,###,###.00####")
    
    '-----------------------
    'IVA
    '-----------------------
    vlstrSentencia = "Select smyIva/100 IVA from pvConceptoFacturacion " & _
                   " where smiCveConcepto = " & Trim(grdCargos.TextMatrix(vllngRenglon, 20))
    Set rs = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
    vldblIVA = rs!IVA * (CDbl(grdCargos.TextMatrix(vllngRenglon, cintColPrecioCantidad)) - CDbl(grdCargos.TextMatrix(vllngRenglon, cintColDescuentoCargo)))
    vldblSubtotal = vldblIVA + Val(Format(grdCargos.TextMatrix(vllngRenglon, 7), ""))
    grdCargos.TextMatrix(vllngRenglon, 8) = Format(Val(Format(vldblIVA, "")), "$ ###,###,###,###.00####")
    
    grdCargos.TextMatrix(vllngRenglon, cintColIVACargo) = vldblIVA
    'grdCargos.TextMatrix(vllngRenglon, 9) = FormatCurrency(vldblSubtotal, 2)
    grdCargos.TextMatrix(vllngRenglon, 9) = Format(Val(Format(vldblSubtotal, "")), "$ ###,###,###,###.00####")
    grdCargos.TextMatrix(vllngRenglon, cintColTotalCargo) = vldblSubtotal
    
    rs.Close

    If grdCargos.TextMatrix(vllngRenglon, cintColDescuentoCargo) = 0 Then
        dblDescuento = 0
    Else
        dblDescuento = Format(grdCargos.TextMatrix(vllngRenglon, cintColDescuentoCargo), "")
    End If
    
    vgstrParametrosSP = str(grdCargos.RowData(vllngRenglon)) & "|" & Format(vldblIVA, "##################0.00####") & "|" & dblDescuento & "|" & IIf(vlSocio <> 0, vlSocio, 0)
    frsEjecuta_SP vgstrParametrosSP, "SP_PVUPDMODIFICACARGO"
End Sub
Private Sub grdCargos_Click()
    'Cargos no excluídos
    Dim dblCargosNOExcluidosNoFact As Double
    Dim dblImporteNoExcluidoNoFact As Double
    Dim dblDescuentoNoExcluidoNoFact As Double
    Dim dblIVANoExcluidoNoFact As Double
    'Cargos excluídos
    Dim dblCargosExcluidosNoFact As Double
    Dim dblImporteENoFact As Double
    Dim dblDescuentoENoFact As Double
    Dim dblIVAENoFact As Double
    Dim rsInfoHonorarios As New ADODB.Recordset
    Dim strSentencia As String
    Dim strInfoHonorario As String
    
    Dim vllngContador As Long
    '----------------------------
    'Si esta vacio que se salga
    '----------------------------
    If (grdCargos.Row = 0) Or (grdCargos.RowData(1) = -1) Then Exit Sub
    '----------------------------
    'Muestra información del honorario médico
    '----------------------------
    txtInfoHonorario.Text = ""
    If grdCargos.TextMatrix(grdCargos.Row, 1) = "OC" Then
        strInfoHonorario = ""
        strSentencia = "Select FN_PVHONORARIOMEDICO(" & grdCargos.RowData(grdCargos.Row) & ") InfoHonorario From Dual"
        Set rsInfoHonorarios = frsRegresaRs(strSentencia, adLockReadOnly, adOpenStatic)
        If rsInfoHonorarios.RecordCount <> 0 Then
            strInfoHonorario = IIf(IsNull(rsInfoHonorarios!InfoHonorario), "", rsInfoHonorarios!InfoHonorario)
        End If
        txtInfoHonorario.Text = strInfoHonorario
    End If
    '----------------------------
    'Si esta FACTURADO que se salga
    '----------------------------
    If grdCargos.TextMatrix(grdCargos.Row, 0) = "F" Then Exit Sub
    '----------------------------
    'Que se salga Cuando no tenga permiso de Grabar
    '----------------------------
    If Not fblnRevisaPermiso(vglngNumeroLogin, vllngNumeroOpcion, "E") Then Exit Sub
    '----------------------------
    'Que se salga Cuando se trate de un grupo
    '----------------------------
    If optGrupoCuenta(0).Value Then Exit Sub
    '----------------------------
    'Que se salga Cuando el cargo fué marcado por facturar al paciente
    '----------------------------
    If grdCargos.TextMatrix(grdCargos.Row, cintColMarcadoParaFacturar) = 1 Then Exit Sub
    
    If (grdCargos.Col = clbytColumnaExclusion) Then 'Columna de Exclusión de cargos
        vlblnValidaCargo = True
        If fblnCargoFacturado(grdCargos.RowData(grdCargos.RowSel)) Then Exit Sub

        If Not fblnEstatusCuenta(txtMovimientoPaciente.Text, IIf(OptTipoPaciente(0).Value, "I", "E")) Then
            MsgBox SIHOMsg(596), vbInformation, "Mensaje"
            Exit Sub
        End If
        '-------------------------------------------------------------------
        '   Valida si la cuenta se encuentra bloqueada por trabajo social
        '-------------------------------------------------------------------
        If vgblnCuentaBloqueada Then
            'No se puede realizar ésta operación. La cuenta se encuentra bloqueada por trabajo social.
            MsgBox SIHOMsg(662), vbCritical, "Mensaje"
            Exit Sub
        End If
        'Para que no haga nada con los Particulares
        If vgintEmpresa = 0 And vgSocio = False Then Exit Sub
                
        If grdCargos.TextMatrix(grdCargos.Row, clbytColumnaExclusion) = "X" Then
            grdCargos.TextMatrix(grdCargos.Row, clbytColumnaExclusion) = ""
        Else
            'Verifica si a la cuenta del paciente ya se le han facturado conceptos de seguro
            vlblnValidaCargo = True
            fblnConceptoSeguroFacturado
        
            grdCargos.TextMatrix(grdCargos.Row, clbytColumnaExclusion) = "X"
            
            'Si está excluido, se quita del paquete:
            grdCargos.TextMatrix(grdCargos.Row, 29) = "" 'Descripcion del paquete
            grdCargos.TextMatrix(grdCargos.Row, 30) = "" 'Clave del paquete
            grdCargos.TextMatrix(grdCargos.Row, 31) = "" 'Cantidad de cargos incluidos en el paquete
            grdCargos.TextMatrix(grdCargos.Row, 32) = "" 'Cantidad de cargos incluidos en el paquete pero no en la definicion inicial
            grdCargos.TextMatrix(grdCargos.Row, 54) = "" 'Cantidad de cargos extras
            grdCargos.TextMatrix(grdCargos.Row, 33) = "*" 'Marca para distinguir que se quitó el paquete
            grdCargos.TextMatrix(grdCargos.Row, 55) = ""  'Limpia la columna del excedente en grupo de cargo
            '18084 excluido
            'grdCargos.TextMatrix(grdCargos.Row, cintColNombreCarta) = "" 'Descripcion de la carta Cambio 4 quitar estas dos lineas
            'grdCargos.TextMatrix(grdCargos.Row, cintColCveCarta) = 0  'Clave carta
        End If
        
        If (vgintEmpresa <> 0 Or vgSocio = True) Then
            cmdActualizarCargos.Enabled = True
        Else
            cmdActualizarCargos.Enabled = False
        End If
        cmdSelQuita(2).Enabled = False
        cmdActualizarCargos.Enabled = (vgintEmpresa <> 0 Or vgSocio = True)
        dblImporteNoExcluidoNoFact = 0
        dblDescuentoNoExcluidoNoFact = 0
        dblIVANoExcluidoNoFact = 0
        dblImporteENoFact = 0
        dblDescuentoENoFact = 0
        dblIVAENoFact = 0
        dblCargosExcluidosNoFact = 0
        dblCargosNOExcluidosNoFact = 0
        
        For vllngContador = 1 To grdCargos.Rows - 1
            If grdCargos.TextMatrix(vllngContador, 0) = "*" Then
                If grdCargos.TextMatrix(vllngContador, 18) <> "X" Then
                    dblImporteNoExcluidoNoFact = dblImporteNoExcluidoNoFact + CDbl(Val(grdCargos.TextMatrix(vllngContador, cintColPrecioCantidad)))
                    dblDescuentoNoExcluidoNoFact = dblDescuentoNoExcluidoNoFact + CDbl(Val(grdCargos.TextMatrix(vllngContador, cintColDescuentoCargo)))
                    dblIVANoExcluidoNoFact = dblIVANoExcluidoNoFact + IIf(CDbl(Val(grdCargos.TextMatrix(vllngContador, cintColIVACargo))) > 0, (CDbl(Val(grdCargos.TextMatrix(vllngContador, cintColPrecioCargo))) * Val(Format(grdCargos.TextMatrix(vllngContador, 4), "")) - CDbl(Val(grdCargos.TextMatrix(vllngContador, cintColDescuentoCargo)))) * (CDbl(Val(grdCargos.TextMatrix(vllngContador, 19))) / 100), 0)
                ElseIf grdCargos.TextMatrix(vllngContador, 18) = "X" Then
                    dblImporteENoFact = dblImporteENoFact + Val(Format(grdCargos.TextMatrix(vllngContador, 4), "")) * CDbl(Val(grdCargos.TextMatrix(vllngContador, cintColPrecioCargo)))
                    dblDescuentoENoFact = dblDescuentoENoFact + CDbl(Val(grdCargos.TextMatrix(vllngContador, cintColDescuentoCargo)))
                    dblIVAENoFact = dblIVAENoFact + IIf(CDbl(Val(grdCargos.TextMatrix(vllngContador, cintColIVACargo))) > 0, (CDbl(Val(grdCargos.TextMatrix(vllngContador, cintColPrecioCargo))) * Val(Format(grdCargos.TextMatrix(vllngContador, 4), "")) - CDbl(Val(grdCargos.TextMatrix(vllngContador, cintColDescuentoCargo)))) * (CDbl(Val(grdCargos.TextMatrix(vllngContador, 19))) / 100), 0)
                End If
            End If
        Next
        
        dblCargosExcluidosNoFact = Format(dblImporteENoFact, "############.00") - Format(dblDescuentoENoFact, "############.00") + Format(dblIVAENoFact, "############.00")
        dblCargosNOExcluidosNoFact = Format(dblImporteNoExcluidoNoFact, "############.00") - Format(dblDescuentoNoExcluidoNoFact, "############.00") + Format(dblIVANoExcluidoNoFact, "############.00")

        optMuestraCargos(0).Caption = "Todos (" & FormatCurrency(dblCargosExcluidosNoFact + dblCargosNOExcluidosNoFact, 2) & ")"
        optMuestraCargos(2).Caption = "Excluidos (" & FormatCurrency(dblCargosExcluidosNoFact, 2) & ")"
        optMuestraCargos(1).Caption = "Sin excluir (" & FormatCurrency(dblCargosNOExcluidosNoFact, 2) & ")"
    
    ElseIf grdCargos.Col = clbytColumnaUrgente Then 'Columna del bitUrgente
        '----------------------------
        'Que se salga Cuando no tenga permiso de Control Total
        '----------------------------
        If Not fblnRevisaPermiso(vglngNumeroLogin, vllngNumeroOpcion, "C") Then Exit Sub
        
        pCargaUrgencias grdCargos.Row
        
        dblCargosExcluidosNoFact = 0
    ElseIf grdCargos.Col = vgintColumnaDescuento Then
        '-----------------------------------------------------------------------------------
        '|  Valida que el usuario tenga permiso de control total para realizar descuentos
        '-----------------------------------------------------------------------------------
        If Not fblnRevisaPermiso(vglngNumeroLogin, llngNumOpcionDescto, "E", True) Then Exit Sub
        '-------------------------------------------------------------------
        '   Valida si la cuenta se encuentra bloqueada por trabajo social
        '-------------------------------------------------------------------
        If Not fblnEstatusCuenta(txtMovimientoPaciente.Text, IIf(OptTipoPaciente(0).Value, "I", "E")) Then
            MsgBox SIHOMsg(596), vbInformation, "Mensaje"
            Exit Sub
        End If
        If vgblnCuentaBloqueada Then
            'No se puede realizar ésta operación. La cuenta se encuentra bloqueada por trabajo social.
            MsgBox SIHOMsg(662), vbCritical, "Mensaje"
            Exit Sub
        End If
        lblMensaje.Caption = "Presione <F10> para asignar este descuento a toda la cuenta"
        lblMensaje.Visible = grdCargos.Col = vgintColumnaDescuento
        pHabilitaExcluidoDescEspecial grdCargos.Col <> vgintColumnaDescuento
        If (vgSocio = True And (grdCargos.TextMatrix(grdCargos.Row, 18) = "X")) Or (vgSocio = False) Then 'Se valida que a los socios solo se les pueda modificar el descuento a los cargos excluidos
            Call pEditarColumna(32, txtDescuento, grdCargos)
        End If
    ElseIf grdCargos.Col = 29 And Trim(grdCargos.TextMatrix(grdCargos.Row, 21)) = "" Then   'Seleccion de Paquetes (Combo)
        If Not fblnEstatusCuenta(txtMovimientoPaciente.Text, IIf(OptTipoPaciente(0).Value, "I", "E")) Then
                MsgBox SIHOMsg(596), vbInformation, "Mensaje"
                Exit Sub
        End If
        clStrSeleccionComboPaquetes = "P"
        pCargaPaquetes
        If grdCargos.TextMatrix(grdCargos.Row, 29) = "" And grdCargos.TextMatrix(grdCargos.Row, 33) = "*" Then
           pRegistraCambio 0, grdCargos.TextMatrix(grdCargos.Row, 2), grdCargos.TextMatrix(grdCargos.Row, 30)
        End If
    ElseIf (grdCargos.Col = 31 Or grdCargos.Col = 32) And Trim(grdCargos.TextMatrix(grdCargos.Row, 21)) = "" Then  'Cantidad extra de los paquetes
        If Val(grdCargos.TextMatrix(grdCargos.Row, 30)) <> 0 Then
'            cmdActualizarCargos.Enabled = True
            Call pEditarCantidadPaquete(32, txtCantidadPaquete, grdCargos)
        End If
    ElseIf grdCargos.Col = cintColNombreCarta And Trim(grdCargos.TextMatrix(grdCargos.Row, 21)) = "" Then   'Selección de carta
        '18084
        If Not fblnEstatusCuenta(txtMovimientoPaciente.Text, IIf(OptTipoPaciente(0).Value, "I", "E")) Then
                MsgBox SIHOMsg(596), vbInformation, "Mensaje"
                Exit Sub
        End If
        clStrSeleccionComboPaquetes = "C"
        pCargaCartas
    End If
End Sub

Private Sub GrdCargos_GotFocus()
    Dim vllngCantidadCargosPaquete As Long
    Dim intBitValidaPaquetes As Long
    
    '----------------------------
    'Si esta vacio que se salga
    '----------------------------
    If (grdCargos.Row = 0) Or (grdCargos.RowData(1) = -1) Then Exit Sub
    '----------------------------
    'Si esta FACTURADO que se salga
    '----------------------------
    If grdCargos.TextMatrix(grdCargos.Row, 0) = "F" Then Exit Sub
    '----------------------------
    'Que se salga Cuando se trate de un grupo
    '----------------------------
''    If optGrupoCuenta(0).Value Then Exit Sub
    '----------------------------
    'Que se salga Cuando el cargo fué marcado por facturar al paciente
    '----------------------------
    If grdCargos.TextMatrix(grdCargos.Row, cintColMarcadoParaFacturar) = 1 Then Exit Sub
    
    If txtCantidadPaquete <> "" Then intCantidadIncluida = CLng(txtCantidadPaquete)
    If grdCargos.TextMatrix(grdCargos.Row, 32) <> "" Then intCantidadExtra = CInt(grdCargos.TextMatrix(grdCargos.Row, 32))
    
    ' Regresa bit para validar paquetes
    intBitValidaPaquetes = 1
    If Val(grdCargos.TextMatrix(grdCargos.Row, 30)) <> 0 Then
        frsEjecuta_SP Val(grdCargos.TextMatrix(grdCargos.Row, 30)), "FN_PVSELVALIDACARGOSPAQUETE", True, intBitValidaPaquetes
    Else
        intBitValidaPaquetes = 0
    End If
    
'    If Not fblnEstatusCuenta(txtMovimientoPaciente.Text, IIf(OptTipoPaciente(0).Value, "I", "E")) Then Exit Sub
'    If Not fblnEstatusCuenta(txtMovimientoPaciente.Text, IIf(OptTipoPaciente(0).Value, "I", "E")) Then
'        MsgBox SIHOMsg(596), vbInformation, "Mensaje"
'       MsgBox SIHOMsg(596), vbCritical, "Mensaje"
'        Exit Sub
'    End If
    'Copia el valor del textbox al grid y lo esconde
    Unload frmPersonaGraba
    If grdCargos.Col = vgintColumnaDescuento Then
    Call pSetCellValueCol(grdCargos, txtDescuento)
   
    ElseIf grdCargos.Col = 32 And intBitValidaPaquetes = 0 Then 'Cantidad de cargos del paquete
        If Val(txtCantidadPaquete.Text) + Val(grdCargos.TextMatrix(grdCargos.Row, 31)) > Val(grdCargos.TextMatrix(grdCargos.Row, 4)) Then
            If Val(grdCargos.TextMatrix(grdCargos.Row, 4)) - Val(grdCargos.TextMatrix(grdCargos.Row, 31)) <= 0 Then
                txtCantidadPaquete.Text = 0
            Else
                txtCantidadPaquete.Text = Val(grdCargos.TextMatrix(grdCargos.Row, 4)) - Val(grdCargos.TextMatrix(grdCargos.Row, 31))
            End If

        End If
        Call pSetCellValueCol(grdCargos, txtCantidadPaquete)
    Else
        txtCantidadPaquete.Text = 0
        Call pSetCellValueCol(grdCargos, txtCantidadPaquete)
    End If
    grdCargos.RowHeight(grdCargos.Row) = 240 'Tamaño inicial del renglon del Grid
End Sub

Private Function fblnEstatusCuenta(intCveCuenta As String, strTipoCuenta As String) As Boolean
    Dim vlstrSentencia As String
    Dim rsCuenta As New ADODB.Recordset
    Dim rsGrupos As New ADODB.Recordset
    
On Error GoTo NotificaError

    If optGrupoCuenta(0).Value Then
       vlstrSentencia = "select intMovPaciente, chrTipoPaciente from pvCargo where intNumCargo = " & str(grdCargos.RowData(grdCargos.RowSel))
       Set rsGrupos = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
        With rsGrupos
        If !CHRTIPOPACIENTE = "I" Then
            vlstrSentencia = "select AdAdmision.* from AdAdmision where AdAdmision.numNumCuenta = " & !INTMOVPACIENTE
        Else
            vlstrSentencia = "select RegistroExterno.* from RegistroExterno where RegistroExterno.intNumCuenta = " & !INTMOVPACIENTE
        End If
        End With
    Else
        If strTipoCuenta = "I" Then
            vlstrSentencia = "select AdAdmision.* from AdAdmision where AdAdmision.numNumCuenta = " & intCveCuenta
        Else
            vlstrSentencia = "select RegistroExterno.* from RegistroExterno where RegistroExterno.intNumCuenta = " & intCveCuenta
        End If
    End If
    
    Set rsCuenta = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
    If rsCuenta.RecordCount <> 0 Then
        If rsCuenta!bitCuentaCerrada = 0 Then
            fblnEstatusCuenta = True
        Else
            fblnEstatusCuenta = False
        End If
    End If
    
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":fblnEstatusCuenta"))
End Function

Private Sub grdCargos_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim vllngContador As Long
    Dim vldblDescuento As Double

    '----------------------------
    'Si esta vacio que se salga
    '----------------------------
    If (grdCargos.Row = 0) Or (grdCargos.RowData(1) = -1) Then Exit Sub
    '----------------------------
    'Si esta FACTURADO que se salga
    '----------------------------
    If grdCargos.TextMatrix(grdCargos.Row, 0) = "F" Then Exit Sub
    '----------------------------
    'Que se salga Cuando no tenga permiso de Grabar
    '----------------------------
    If Not fblnRevisaPermiso(vglngNumeroLogin, vllngNumeroOpcion, "E") Then Exit Sub
    '----------------------------
    'Que se salga Cuando se trate de un grupo
    '----------------------------
''    If optGrupoCuenta(0).Value Then Exit Sub
    '----------------------------
    'Que se salga Cuando el cargo fué marcado por facturar al paciente
    '----------------------------
    If grdCargos.TextMatrix(grdCargos.Row, cintColMarcadoParaFacturar) = 1 Then Exit Sub
    
    If grdCargos.Col = vgintColumnaDescuento Then
'        If KeyCode <> vbKeyUp And KeyCode <> vbKeyDown And KeyCode <> vbKeyLeft And KeyCode <> vbKeyRight And KeyCode <> vbKeyEscape Then
'            If Not fblnEstatusCuenta(txtMovimientoPaciente.Text, IIf(OptTipoPaciente(0).Value, "I", "E")) Then
'                MsgBox SIHOMsg(596), vbInformation, "Mensaje"
'                Exit Sub
'            End If
'        End If
'        If KeyCode = 39 Then 'Flecha hacia la derecha
'            txtDescuento.Text = ""
'            txtDescuento.Visible = False
'            grdCargos.Row = intlocaterow ''*
'            grdCargos.Col = vgintColumnaDescuento ''*
'            grdCargos.SetFocus
'        Else
        If KeyCode = vbKeyF2 Then 'para que se edite el contenido de la celda como en excel
            '---------------------------------------------------------------------------------
            '|  Valida que tenga permisos de control total para realizar descuentos
            '---------------------------------------------------------------------------------
            If Not fblnRevisaPermiso(vglngNumeroLogin, vllngNumeroOpcion, "C") Then Exit Sub
      
            If (vgSocio = True And (grdCargos.TextMatrix(grdCargos.Row, 18) = "X")) Or (vgSocio = False) Then 'Se valida que a los socios solo se les pueda modificar el descuento a los cargos excluidos
                Call pEditarColumna(13, txtDescuento, grdCargos)
            End If
            
            If gintAseguradora = 1 Then pCargaControl
            
        ElseIf KeyCode = vbKeyF10 Then 'Para copiar el descuento a los otros Cargos
            '---------------------------------------------------------------------------------
            '|  Valida que tenga permisos del control total para realizar descuentos
            '---------------------------------------------------------------------------------
            If Not fblnRevisaPermiso(vglngNumeroLogin, llngNumOpcionDescto, "E", True) Then Exit Sub

            If (vgSocio = True And (grdCargos.TextMatrix(grdCargos.Row, 18) <> "X")) Then Exit Sub  'Se valida que a los socios solo se les pueda modificar el descuento a los cargos excluidos
                
             '¿Desea aplicar este descuento a todos los cargos?
            If MsgBox(SIHOMsg(537), vbQuestion + vbYesNo, "Mensaje") = vbYes Then
                If vllngPersonaGrabaDescuento = 0 Then
                    vllngPersonaGrabaDescuento = flngPersonaGraba(vgintNumeroDepartamento)
                    If vllngPersonaGrabaDescuento = 0 Then
                        txtDescuento.Text = ""
                        txtDescuento.Visible = False
                        grdCargos.Row = intlocaterow
                        grdCargos.Col = vgintColumnaDescuento
                        grdCargos.SetFocus
                        Exit Sub
                    End If
                End If
                
                If vllngPersonaGrabaDescuento <> 0 Then
                    vldblDescuento = CDbl(grdCargos.TextMatrix(grdCargos.Row, cintColDescuentoCargo)) / CDbl(grdCargos.TextMatrix(grdCargos.Row, cintColPrecioCantidad)) * 100
                
                    'Barrita de progreso
                    pgbBarra.Value = 1
                    freBarra.Top = 1500
                    lblTextoBarra.Caption = "Actualizando descuentos en cargos, por favor espere..."
                    freBarra.Visible = True
                    freBarra.Refresh
                
                    If vgSocio = True Then 'Si es socio, se aplica el descuento únicamente a los cargos excluidos
                        For vllngContador = 1 To grdCargos.Rows - 1
                            If grdCargos.TextMatrix(vllngContador, 18) = "X" Then
                                pActualizaDescuentos vldblDescuento, vllngContador, 2
                                Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGrabaDescuento, "DESCUENTOS EN PANTALLA DE FACTURACIÓN", "Cta. " & txtMovimientoPaciente.Text & " Cargo " & grdCargos.RowData(vllngContador) & " Descto. " & Format(Val(vldblDescuento), "#,###.##00")) ''F10
                            End If
                        Next
                    Else
                        For vllngContador = 1 To grdCargos.Rows - 1
                            pgbBarra.Value = (vllngContador / (grdCargos.Rows - 1)) * 100
                            pActualizaDescuentos vldblDescuento, vllngContador
                            Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGrabaDescuento, "DESCUENTOS EN PANTALLA DE FACTURACIÓN", "Cta. " & txtMovimientoPaciente.Text & " Cargo " & grdCargos.RowData(vllngContador) & " Descto. " & Format(Val(vldblDescuento), "#,###.##00")) ''F10
                        Next
                    End If
                
                    pLlenaCargos
                    pTotales
                    freBarra.Visible = False
                End If
            End If
        End If
    ElseIf grdCargos.Col = 29 Then  'PAQUETES combo
        If KeyCode = vbKeyReturn Then
            grdCargos_Click
        End If
    ElseIf grdCargos.Col = 32 Then ' Cantidad extra del Paquete
        If Not fblnEstatusCuenta(txtMovimientoPaciente.Text, IIf(OptTipoPaciente(0).Value, "I", "E")) And KeyCode <> vbKeyUp And KeyCode <> vbKeyDown And KeyCode <> vbKeyLeft And KeyCode <> vbKeyRight And KeyCode <> vbKeyEscape Then
            MsgBox SIHOMsg(596), vbInformation, "Mensaje"
            Exit Sub
        End If
        If KeyCode = vbKeyF2 Then 'para que se edite el contenido de la celda como en excel
            '----------------------------
            'Que se salga Cuando no tenga permiso de Grabar (faltaría dar de alta esta opcion)
            '----------------------------
            If Val(grdCargos.TextMatrix(grdCargos.Row, 30)) <> 0 Then
                Call pEditarCantidadPaquete(13, txtCantidadPaquete, grdCargos)
            End If
        End If
    ElseIf grdCargos.Col = 65 Then  'CARTAS combo
        If KeyCode = vbKeyReturn Then
            grdCargos_Click
        End If
    Else
        If KeyCode = vbKeyReturn Then
            grdCargos.Col = 1
            If grdCargos.Row - 1 < grdCargos.Rows Then
                If grdCargos.Row = grdCargos.Rows - 1 Then
                    grdCargos.Row = 1
                Else
                    grdCargos.Row = grdCargos.Row + 1
                    If grdCargos.Row = grdCargos.Rows - 1 Then
                        grdCargos.Row = 1
                    End If
                End If
            End If
        End If
    End If
End Sub

Private Sub grdCargos_KeyPress(KeyAscii As Integer)
 Dim vlKeyAscii As Integer
    '----------------------------
    'Si esta vacio que se salga
    '----------------------------
    If (grdCargos.Row = 0) Or (grdCargos.RowData(1) = -1) Then Exit Sub
    '----------------------------
    'Si esta FACTURADO que se salga
    '----------------------------
    If grdCargos.TextMatrix(grdCargos.Row, 0) = "F" Then Exit Sub
    '----------------------------
    'Que se salga Cuando se trate de un grupo
    '----------------------------
''    If optGrupoCuenta(0).Value Then Exit Sub
    '----------------------------
    'Que se salga Cuando el cargo fué marcado por facturar al paciente
    '----------------------------
    If grdCargos.TextMatrix(grdCargos.Row, cintColMarcadoParaFacturar) = 1 Then Exit Sub
    If grdCargos.Col = vgintColumnaDescuento Then 'Columna que puede ser editada
        '---------------------------------------------------------------------------------
        '|  Valida que tenga permisos para grabar la factura y para realizar descuentos
        '---------------------------------------------------------------------------------
        If Not fblnRevisaPermiso(vglngNumeroLogin, llngNumOpcionDescto, "E", True) Then Exit Sub
        If (vgSocio = True And (grdCargos.TextMatrix(grdCargos.Row, 18) = "X")) Or (vgSocio = False) Then 'Se valida que a los socios solo se les pueda modificar el descuento a los cargos excluidos
            vlKeyAscii = KeyAscii
         
'            If vllngPersonaGrabaDescuento = 0 Then ''* otro variable
'                 vllngPersonaGrabaDescuento = flngPersonaGraba(vgintNumeroDepartamento)
'                 If vllngPersonaGrabaDescuento <> 0 Then
'                    Exit Sub
'                 End If
'            End If
            
'            If vllngPersonaGrabaDescuento <> 0 Then ''*
                Call pEditarColumna(vlKeyAscii, txtDescuento, grdCargos)
'            End If
        
           'Call pEditarColumna(KeyAscii, txtDescuento, grdCargos)
        End If
    ElseIf grdCargos.Col = 32 Then 'Columna de Numero de cargos por paquete
        '----------------------------
        'Que se salga Cuando no tenga permiso de Grabar (aun no tiene la seguridad, por eso esta comentado,)
        '----------------------------
        If Val(grdCargos.TextMatrix(grdCargos.Row, 30)) <> 0 Then
            Call pEditarCantidadPaquete(KeyAscii, txtCantidadPaquete, grdCargos)
        End If
    End If
End Sub

Private Sub grdCargos_LeaveCell()
  Call GrdCargos_GotFocus
     txtDescuento.Text = ""
     txtDescuento.Visible = False
     grdCargos.Row = intlocaterow
     grdCargos.Col = vgintColumnaDescuento
     grdCargos.SetFocus
     Exit Sub
  'End If
End Sub

Private Sub grdCargos_Scroll()
    grdCargos.SetFocus
    lblMensaje.Visible = False
End Sub

Private Sub pSetCellValueCol(grid As MSHFlexGrid, txtEdit As TextBox)
    Dim lngRenglon As Long
    Dim lngColumna As Long
    
    If grid.MouseCol = vgintColumnaDescuento Then
        grid.Col = vgintColumnaDescuento
    ElseIf grid.MouseCol = 32 Then
        grid.Col = grid.MouseCol
    End If
    
    If txtEdit.Visible Then
        If txtEdit.Text <> "" Then
            vgstrEstadoManto = Mid(vgstrEstadoManto, 1, 1)
            If txtEdit.Name = "txtDescuento" Then
                If vlblnValidaCargo = True Then
                    If fblnCargoFacturado(grdCargos.RowData(grdCargos.RowSel)) Then Exit Sub
                    lngRenglon = grid.Row
                    lngColumna = grid.Col
                    If vllngPersonaGrabaDescuento <> 0 Then
                        pActualizaDescuentos Val(txtEdit.Text), grid.Row
                        Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGrabaDescuento, "DESCUENTOS EN PANTALLA DE FACTURACIÓN", "Cta. " & txtMovimientoPaciente.Text & " Cargo " & Trim(grdCargos.RowData(grdCargos.Row)) & " Descto. " & Format(Val(txtEdit.Text), "#,###.##00"))
                    End If
                    'pLlenaCargos
                    grid.Row = lngRenglon
                    grid.Col = lngColumna
                    pTotales
                End If
            ElseIf txtEdit.Name = "txtCantidadPaquete" Then
'                GrdCargos.TextMatrix(GrdCargos.Row, 32) = IIf(Format(txtEdit.Text, "########") = "", 0, Format(txtEdit.Text, "########"))
'                GrdCargos.TextMatrix(GrdCargos.Row, 33) = "*" 'Estatus de cambio en la informacion
'                GrdCargos.TextMatrix(GrdCargos.Row, 55) = ""  'Limpia la columna del excedente en grupo de cargo
'                GrdCargos.TextMatrix(GrdCargos.Row, 54) = Val(GrdCargos.TextMatrix(GrdCargos.Row, 4)) - (IIf(GrdCargos.TextMatrix(GrdCargos.Row, 31) = "", 0, Val(GrdCargos.TextMatrix(GrdCargos.Row, 31))) + IIf(GrdCargos.TextMatrix(GrdCargos.Row, 32) = "", 0, Val(GrdCargos.TextMatrix(GrdCargos.Row, 32))))
            End If
        End If
        txtEdit.Visible = False
    End If
End Sub

Public Sub pEditarColumna(KeyAscii As Integer, txtEdit As TextBox, grid As MSHFlexGrid, Optional pintText As Integer = 0)
    Dim vlintTexto As Integer

    If Not fblnEstatusCuenta(txtMovimientoPaciente.Text, IIf(OptTipoPaciente(0).Value, "I", "E")) Then
        MsgBox SIHOMsg(596), vbInformation, "Mensaje"
        Exit Sub
    End If
    
    With txtEdit
        If pintText = 0 Then
            .Text = Format(CDbl(grid.TextMatrix(grid.Row, cintColDescuentoCargo)) / CDbl(grid.TextMatrix(grid.Row, cintColPrecioCantidad)) * 100, "###.00##")
        End If
       
        Select Case KeyAscii
            Case 0 To 32
                'Edita el texto de la celda en la que está posicionado
                    .SelStart = 0
                    .SelLength = 1000
            Case 8, 48 To 57
                ' Reemplaza el texto actual solo si se teclean números
                vlintTexto = Chr(KeyAscii)
                .Text = vlintTexto
                .SelStart = 1
            Case 46
                ' Reemplaza el texto actual solo si se teclean números
                .Text = "."
                .SelStart = 1
        End Select
    End With
    
    With grid
        If .CellWidth < 0 Then Exit Sub
        txtEdit.Move .Left + .CellLeft, .Top + .CellTop, .CellWidth - 8, .CellHeight - 8
    End With
    
    vgstrEstadoManto = vgstrEstadoManto & "E"
    vlblnValidaCargo = True
    txtEdit.Enabled = True
    txtEdit.Visible = True
    txtEdit.SetFocus
End Sub

Public Sub pEditarCantidadPaquete(KeyAscii As Integer, txtEdit As TextBox, grid As MSHFlexGrid)
    Dim vlintTexto As Integer
    Dim strParametrosPaquetes As String
    Dim intCantidad As Long
    Dim intCargos As Long
    Dim dblUnitario As Double
    Dim dblAcumulado As Double
    Dim inti As Integer
    Dim intcontador As Integer
    Dim rsPvDatosGrupo As New ADODB.Recordset
    
    If Not fblnEstatusCuenta(txtMovimientoPaciente.Text, IIf(OptTipoPaciente(0).Value, "I", "E")) Then
                MsgBox SIHOMsg(596), vbInformation, "Mensaje"
                Exit Sub
    End If
    strParametrosPaquetes = txtMovimientoPaciente & "|" & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & "|" & grid.TextMatrix(grid.Row, 30) & "|" & "CANTIDAD"
            
    ' Busca cantidad de paquetes asignados
    intCantidad = 1
    frsEjecuta_SP strParametrosPaquetes, "FN_PVSELCANTIDADPAQUETES", True, intCantidad
    
    intCargos = 1
    strParametrosPaquetes = txtMovimientoPaciente & "|" & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & "|" & grid.TextMatrix(grid.Row, 30) & "|" & grid.TextMatrix(grid.Row, 17) & "|'" & grid.TextMatrix(grid.Row, 1) & "'"
    frsEjecuta_SP strParametrosPaquetes, "FN_PVSELCARGOSENPAQUETE", True, intCargos
    
    If intCargos = 0 Then
        Set rsPvDatosGrupo = frsRegresaRs("SELECT CASE WHEN mnymontolimite = 0 THEN smicantidad ELSE mnymontolimite END Configuracion " & _
                                                ",CASE WHEN mnymontolimite = 0 THEN 0 ELSE 1 END TipoConfiguracion " & _
                                          "FROM PVDETALLEPAQUETE " & _
                                          "WHERE intnumpaquete = " & grid.TextMatrix(grid.Row, 30) & " " & _
                                                "AND chrtipocargo = 'GC' " & _
                                                "AND intcvecargo IN (SELECT intCveGrupo " & _
                                                                    "FROM PVDETALLEGRUPOCARGO " & _
                                                                    "WHERE intcvecargo = " & grid.TextMatrix(grid.Row, 17) & " " & _
                                                                        "AND (chrtipocargo = (CASE WHEN '" & grid.TextMatrix(grid.Row, 1) & "' = 'AR' THEN 'AR' ELSE '" & grid.TextMatrix(grid.Row, 1) & "' END) " & _
                                                                            "OR chrtipocargo = (CASE WHEN '" & grid.TextMatrix(grid.Row, 1) & "' = 'AR' THEN 'ME' ELSE '" & grid.TextMatrix(grid.Row, 1) & "' END)) " & _
                                                                        "AND intCveGrupo IN (SELECT intCveCargo " & _
                                                                                            "FROM PVDETALLEPAQUETE " & _
                                                                                            "WHERE intnumpaquete = " & grid.TextMatrix(grid.Row, 30) & " " & _
                                                                                                "AND chrtipocargo = 'GC'))", adLockOptimistic, adOpenDynamic)
        If rsPvDatosGrupo.RecordCount <> 0 Then
            If rsPvDatosGrupo!TipoConfiguracion = 0 Then
                intCargos = rsPvDatosGrupo!Configuracion
            Else
                dblUnitario = Format(CDbl(grid.TextMatrix(grid.Row, 9)) / CDbl(grid.TextMatrix(grid.Row, 4)), "###,###,##0.00")
                If dblUnitario = 0 Then
                    intCargos = 0
                    dblAcumulado = 0
                Else
                    intCargos = Val(rsPvDatosGrupo!Configuracion / dblUnitario)
                    dblAcumulado = intCargos * dblUnitario
                    Do While dblAcumulado < rsPvDatosGrupo!Configuracion
                        dblAcumulado = dblAcumulado + dblUnitario
                        intCargos = intCargos + 1
                    Loop
                End If
            End If
        End If
    End If
    
    With txtEdit
        If grid.Col = 31 And (Val(grid.TextMatrix(grid.Row, 4)) - Val(grid.TextMatrix(grid.Row, 31)) <= 0 Or intCargos = 0) Then
        'No se puede editar si la cantidad total de cargos ya ha sido incluida en un paquete.
            MsgBox SIHOMsg(IIf(intCargos = 0, 992, 623)), vbInformation, "Mensaje"
            Exit Sub
        End If
         
        If grid.Col = 31 Then
            If Val(grid.TextMatrix(grid.Row, 31)) = 0 Then
                If Val(grid.TextMatrix(grid.Row, 4)) <= (intCantidad * intCargos) Then
                    .Text = Val(grid.TextMatrix(grid.Row, 4))
                Else
                    .Text = Val(intCantidad * intCargos)
                End If
            Else
                If Val(grid.TextMatrix(grid.Row, 4)) <= (intCantidad * intCargos) Then
                    .Text = grid.TextMatrix(grid.Row, 31)
                Else
                    .Text = Val(intCantidad * intCargos)
                End If
            End If
        End If

        If grid.Col = 32 Then
             If Val(grid.TextMatrix(grid.Row, 31)) = 0 Then
                 .Text = Val(grid.TextMatrix(grid.Row, 4)) - Val(grid.TextMatrix(grid.Row, 31))
             Else
                 .Text = grid.TextMatrix(grid.Row, 32)
             End If
        End If
       
        Select Case KeyAscii
            Case 0 To 32 'Edita el texto de la celda en la que está posicionado
                    .SelStart = 0
                    .SelLength = 1000
            Case 8, 48 To 57 ' Reemplaza el texto actual solo si se teclean números
                vlintTexto = Chr(KeyAscii)
                .Text = vlintTexto
                .SelStart = 1
            Case 46 ' Reemplaza el texto actual solo si se teclean números
                .Text = "."
                .SelStart = 1
        End Select
        
        Call pSetCellValueCol(grid, txtEdit)
    End With ' End txtEdit
    
    With grid
        If .CellWidth < 0 Then Exit Sub
        txtEdit.Move .Left + .CellLeft, .Top + .CellTop, .CellWidth - 8, .CellHeight - 8
    End With
    
    vgstrEstadoManto = vgstrEstadoManto & "E"
    txtEdit.Visible = True
    txtEdit.SetFocus
End Sub

Private Sub txtDescuento_KeyDown(KeyCode As Integer, Shift As Integer)
    'Para verificar que tecla fue presionada en el textbox
    With grdCargos
        Select Case KeyCode
            Case 27   'ESC
                 txtDescuento.Visible = False
                .SetFocus
            Case 38   'Flecha para arriba
                If Not fblnEstatusCuenta(txtMovimientoPaciente.Text, IIf(OptTipoPaciente(0).Value, "I", "E")) Then
                    txtDescuento.Visible = False
                    .SetFocus
                    MsgBox SIHOMsg(596), vbInformation, "Mensaje"
                    Exit Sub
                End If
  
                If vllngPersonaGrabaDescuento = 0 Then
                    vllngPersonaGrabaDescuento = flngPersonaGraba(vgintNumeroDepartamento)
                    ' si se canceló
                    If vllngPersonaGrabaDescuento = 0 Then
                        vgblnEditaDescuento = False
                        txtDescuento.Text = ""
                        txtDescuento.Visible = False
                        If .Row > .FixedRows Then
                            .Row = .Row - 1
                        End If
                        .SetFocus
                        Exit Sub
                    End If
                End If
  
                If fblnDescuentoValido Then
                    vgblnEditaDescuento = True
                    .SetFocus
                    DoEvents
                    If .Row > .FixedRows Then
                        .Row = .Row - 1
                    End If
                    lblMensaje.Caption = "Presione <F10> para asignar este descuento a toda la cuenta"
                    lblMensaje.Visible = True
                    
'                    If grdCargos.Col = vgintColumnaDescuento Then
'                        'intlocaterow = grdCargos.Row ''*
'                        If (vgSocio = True And (grdCargos.TextMatrix(grdCargos.Row, 18) = "X")) Or (vgSocio = False) Then 'Se valida que a los socios solo se les pueda modificar el descuento a los cargos excluidos
'                            Call pEditarColumna(13, txtDescuento, grdCargos)
'                        End If
'                    End If
'                    vgblnEditaDescuento = False
                End If
            Case 40, 13

                If Not fblnEstatusCuenta(txtMovimientoPaciente.Text, IIf(OptTipoPaciente(0).Value, "I", "E")) Then
                    txtDescuento.Visible = False
                    .SetFocus
                    MsgBox SIHOMsg(596), vbInformation, "Mensaje"
                    Exit Sub
                End If
                
                If vllngPersonaGrabaDescuento = 0 Then
                    vllngPersonaGrabaDescuento = flngPersonaGraba(vgintNumeroDepartamento)
                    ' si se canceló
                    If vllngPersonaGrabaDescuento = 0 Then
                        vgblnEditaDescuento = False
                        txtDescuento.Text = ""
                        txtDescuento.Visible = False
                        .Row = intlocaterow
                        .Col = vgintColumnaDescuento
                        .SetFocus
                        Exit Sub
                    End If
                End If
                
                If fblnDescuentoValido Then
                    vgblnEditaDescuento = True
                    .SetFocus
                    DoEvents
                    If .Row < .Rows - 1 Then
                        .Row = .Row + 1
                    End If
                    lblMensaje.Caption = "Presione <F10> para asignar este descuento a toda la cuenta"
                    lblMensaje.Visible = True
                    'pHabilitaExcluidoDescEspecial False
                End If
            Case vbKeyF10
                If vllngPersonaGrabaDescuento = 0 Then
                   vllngPersonaGrabaDescuento = flngPersonaGraba(vgintNumeroDepartamento)
                          If vllngPersonaGrabaDescuento = 0 Then
                               vgblnEditaDescuento = False
                               txtDescuento.Text = ""
                               txtDescuento.Visible = False
                               .Row = intlocaterow
                               .Col = vgintColumnaDescuento
                               .SetFocus
                               Exit Sub
                          Else
                               If MsgBox(SIHOMsg(537), vbQuestion + vbYesNo, "Mensaje") = vbYes Then
                                   GrdCargos_GotFocus
                                   grdCargos_KeyDown vbKeyF10, 0
                               Else
                                   vgblnEditaDescuento = False
                                   txtDescuento.Text = ""
                                   txtDescuento.Visible = False
                                   .Row = intlocaterow
                                   .Col = vgintColumnaDescuento
                                   .SetFocus
                                   Exit Sub
                               End If
                          End If
                Else
                   If MsgBox(SIHOMsg(537), vbQuestion + vbYesNo, "Mensaje") = vbYes Then 'vbYes Then
                       GrdCargos_GotFocus
                       grdCargos_KeyDown vbKeyF10, 0
                   Else
                       vgblnEditaDescuento = False
                       txtDescuento.Text = ""
                       txtDescuento.Visible = False
                       .Row = intlocaterow
                       .Col = vgintColumnaDescuento
                       .SetFocus
                       Exit Sub
                   End If
                End If
             
        End Select
    End With
End Sub

Private Sub txtDescuento_KeyPress(KeyAscii As Integer)
    If Not fblnFormatoCantidad(txtDescuento, KeyAscii, 4) Then
        KeyAscii = 7
    End If
End Sub

Private Sub txtDescuento_LostFocus()
    lblMensaje.Visible = False
End Sub

Private Sub pDatosFacturaPaciente()
    Dim rs As New ADODB.Recordset
    Dim vlstrSentencia As String
    
    '----------------------------------------------
    ' Que no haga nada si la lista esta vacia
    '----------------------------------------------
    If lstFPBuscaCliente.ListCount = 0 Then Exit Sub
    
    If optTipoCliente(1).Value Then
    'Convenio
        vlstrSentencia = "Select ccEmpresa.vchrazonsocial Cliente, ccEmpresa.chrRfcEmpresa RFC, ccEmpresa.chrCalle, ccEmpresa.vchNumeroExterior, ccEmpresa.vchNumeroInterior, ccEmpresa.chrTelefonoEmpresa Telefono, " & _
                        " vchColonia Colonia, nvl(intCveCiudad,0) CveCiudad, vchCodigoPostal CodigoPostal,trim(vchCorreo) correo, nvl(VCHREGIMENFISCAL,0) VCHREGIMENFISCAL " & _
                        " From ccEmpresa " & _
                        " Where ccEmpresa.intCveEmpresa = " & Trim(str(lstFPBuscaCliente.ItemData(lstFPBuscaCliente.ListIndex))) & _
                        " And CcEmpresa.bitActivo = 1"
    
    ElseIf optTipoCliente(2).Value Then
    'Empleado
        vlstrSentencia = "Select rtrim(vchNombre) || ' ' || rtrim(vchApellidoPaterno) || ' ' || rtrim(vchApellidoMaterno) Cliente, " & _
                        " chrRFC RFC, chrCalle, vchNumeroExterior, vchNumeroInterior, chrTelefono Telefono, chrColonia Colonia, nvl(intCveCiudad,0) CveCiudad,chrCodigoPostal CodigoPostal, VCHREGIMENFISCAL, trim(vchCorreo) correo, nvl(VCHREGIMENFISCAL,0) VCHREGIMENFISCAL " & _
                        " From noEmpleado " & _
                        " Inner join nodepartamento on nodepartamento.smicvedepartamento = noempleado.smicvedepartamento " & _
                        " where intCveEmpleado = " & Trim(str(lstFPBuscaCliente.ItemData(lstFPBuscaCliente.ListIndex))) & _
                        " and nodepartamento.tnyclaveempresa = " & vgintClaveEmpresaContable & _
                        " And NoEmpleado.bitActivo = 1"
    
    ElseIf optTipoCliente(3).Value Then
    'Médico                 '" VCHPARTCOLONIA Colonia, INTCVECIUDAD CveCiudad, VCHPARTCODPOSTAL CodigoPostal, trim(vchemail) correo " cadena original      NVL(VCHPARTCODPOSTAL,VCHCONSULCODPOSTAL,VCHPARTCODPOSTAL)
        vlstrSentencia = "Select rtrim(vchNombre) || ' ' || rtrim(vchApellidoPaterno) || ' ' || rtrim(vchApellidoMaterno) Cliente, " & _
                        " vchRfcMedico RFC, vchPartCalle as chrCalle, vchPartNumeroExterior as vchNumeroExterior, vchPartNumeroInterior as vchNumeroInterior, '' Telefono, " & _
                        " VCHPARTCOLONIA Colonia, nvl(INTCVECIUDAD,0) CveCiudad, nvl(VCHPARTCODPOSTAL,nvl(VCHCONSULCODPOSTAL,0)) CodigoPostal, trim(vchemail) correo, nvl(VCHREGIMENFISCAL,0) VCHREGIMENFISCAL " & _
                        " From HoMedico " & _
                        " Where intCveMedico = " & Trim(str(lstFPBuscaCliente.ItemData(lstFPBuscaCliente.ListIndex))) & _
                        " And HoMedico.bitEstaActivo = 1"
    
    ElseIf optTipoCliente(4).Value Or optTipoCliente(5).Value Then
    'Paciente Interno, Paciente Externo
'        vlstrSentencia = "Select rtrim(adPaciente.vchApellidoPaterno) || ' ' || rtrim(adPaciente.vchApellidoMaterno) || ' ' || rtrim(adPaciente.vchNombre) Cliente, " & _
'                        " adPaciente.chrRfc RFC, ADPACIENTE.vchCallePart as chrCalle, ADPACIENTE.VCHNUMEROEXTERIOR, AdPaciente.VchNumeroInterior, adPaciente.vchTelefonoPart Telefono, " & _
'                        " VCHCOLONIAPART Colonia, INTCIUDADPART CveCiudad, VCHCODPOSTALPART CodigoPostal, adpaciente.vchNumeroExterior, adPaciente.vchNumeroInterior " & _
'                        " From adPaciente " & _
'                        " Inner join adadmision on adpaciente.numcvepaciente = adadmision.numcvepaciente " & _
'                        " Where adadmision.numnumcuenta = " & Trim(Str(lstFPBuscaCliente.ItemData(lstFPBuscaCliente.ListIndex)))
'
'    ElseIf optTipoCliente(5).Value Then
        vlstrSentencia = "Select RTRIM(vchNombre) || ' ' || RTRIM(vchApellidoPaterno) || ' ' || RTRIM(vchApellidoMaterno) Cliente, " & _
                        " vchRFC RFC, trim(domicilio.vchCALLE) CHRCALLE, domicilio.VCHNUMEROEXTERIOR, domicilio.VCHNUMEROINTERIOR, trim(telefono.vchTelefono) Telefono, " & _
                        " domicilio.vchColonia Colonia, nvl(domicilio.intCveCiudad,0) CveCiudad, domicilio.vchCodigoPostal CodigoPostal, trim(exPaciente.vchCorreoElectronico) correo, 0 VCHREGIMENFISCAL  " & _
                        " From ExPaciente " & _
                        " Inner join ExPacienteIngreso on ExPaciente.INTNUMPACIENTE = ExPacienteIngreso.INTNUMPACIENTE " & _
                        " left join (select gnDomicilio.*, expacientedomicilio.intnumpaciente from gndomicilio inner join exPacienteDomicilio on expacientedomicilio.intcvedomicilio = gndomicilio.intcvedomicilio AND gndomicilio.intcvetipodomicilio = 1 " & _
                             "            ) domicilio on ExPaciente.intnumpaciente = domicilio.intnumpaciente " & _
                             " left join (select gntelefono.*, exPAcientetelefono.intnumPaciente from gnTelefono inner join exPAcientetelefono on exPAcientetelefono.intCveTelefono = gnTelefono.intCveTelefono and gnTelefono.intCveTipoTelefono = 1 " & _
                             "            ) telefono on ExPaciente.intnumpaciente = telefono.intnumpaciente" & _
                        " Where ExPacienteIngreso.intnumcuenta = " & Trim(str(lstFPBuscaCliente.ItemData(lstFPBuscaCliente.ListIndex))) & _
                        " AND ExPacienteIngreso.chrTipoIngreso='" & IIf(optTipoCliente(4).Value, "I", "E") & "' "
    End If
    
    If optTipoCliente(0).Value Then 'Ninguno
        txtNombreFactura.Text = vgstrFacturaNombre
        txtRFCFactura.Text = fStrRFCValido(vgstrFacturaRFC)
        txtDireccionFactura(0).Text = vgstrFacturaDireccion
        txtFacturaNumExterior.Text = vgstrFacturaNumExterior
        txtFacturaNumInterior.Text = vgstrFacturaNumInterior
        txtTelefonoFactura.Text = vgstrFacturaTelefono
        txtDireccionFactura(1).Text = lstrDatosFiscalesCorreo
        txtColoniaFactura.Text = vgstrFacturaColonia
        cboCiudad.ListIndex = flngLocalizaCbo(cboCiudad, str(vglngFacturaCiudad))
        txtCPFactura.Text = vgstrFacturaCodigoPostal
    Else
    
        Set rs = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
        If rs.RecordCount > 0 Then
            txtNombreFactura.Text = IIf(IsNull(rs!CLIENTE), "", rs!CLIENTE)
            txtRFCFactura.Text = fStrRFCValido(IIf(IsNull(rs!RFC), "", rs!RFC))
            txtDireccionFactura(0).Text = IIf(IsNull(rs!chrCalle), "", rs!chrCalle)
            txtFacturaNumExterior.Text = IIf(IsNull(rs!VCHNUMEROEXTERIOR), "", rs!VCHNUMEROEXTERIOR)
            txtFacturaNumInterior.Text = IIf(IsNull(rs!VCHNUMEROINTERIOR), "", rs!VCHNUMEROINTERIOR)
            txtTelefonoFactura.Text = IIf(IsNull(rs!Telefono), "", rs!Telefono)
            txtDireccionFactura(1).Text = IIf(IsNull(rs!CORREO), "", rs!CORREO)
            txtColoniaFactura.Text = IIf(IsNull(rs!Colonia), "", rs!Colonia)
            cboCiudad.ListIndex = flngLocalizaCbo(cboCiudad, rs!cveCiudad)
            txtCPFactura.Text = IIf(IsNull(rs!CodigoPostal), vgstrFacturaCodigoPostal, rs!CodigoPostal)
            cboRegimenFiscal.ListIndex = flngLocalizaCbo(cboRegimenFiscal, rs!VCHREGIMENFISCAL)
            vl_regimencliente = cboRegimenFiscal.ListIndex
        End If
        rs.Close
    End If
End Sub

Private Sub pHabilitaConceptosSeguro(blnHabilita As Boolean)
    'Cambios en deducible:
    optTipoDeducible(0).Enabled = blnHabilita
    optTipoDeducible(1).Enabled = blnHabilita
    txtPorcentajeDeducible.Enabled = blnHabilita
    lblPorcentajeDeducible(0).Enabled = blnHabilita
    chkFacturaDeducible.Enabled = blnHabilita
    txtDeducible.Enabled = blnHabilita
    
    'Cambios en coaseguro:
    optTipoCoaseguro(0).Enabled = IIf(intCoaseguroPorFactura = 1, True, IIf(blnCalcularEnBaseACargos, False, blnHabilita))
    optTipoCoaseguro(1).Enabled = IIf(intCoaseguroPorFactura = 1, False, blnHabilita)
    txtPorcentajeCoaseguro.Enabled = IIf(intCoaseguroPorFactura = 1, False, blnHabilita)
    lblPorcentajeDeducible(2).Enabled = blnHabilita
    chkFacturaCoaseguro.Enabled = blnHabilita
    
    'Cambios en coaseguro adicional:
    optTipoCoaseguroAdicional(0).Enabled = IIf(blnCalcularEnBaseACargos Or IIf(intCoaseguroPorFactura = 1, True, False), False, blnHabilita)
    optTipoCoaseguroAdicional(1).Enabled = IIf(intCoaseguroPorFactura = 1, False, blnHabilita)
    txtPorcentajeCoaseguroAdicional.Enabled = IIf(intCoaseguroPorFactura = 1, False, blnHabilita)
    lblPorcentajeDeducible(3).Enabled = blnHabilita
    chkFacturaCoaseguroAdicional.Enabled = IIf(intCoaseguroPorFactura = 1, False, blnHabilita)
    txtCoaseguroAdicional.Enabled = IIf(intCoaseguroPorFactura = 1, False, blnHabilita)
        
    If intCoaseguroPorFactura = 1 Then 'En caso de que se vaya a facturar el coaseguro por factura se impide la captura del coaseguro adicional
        chkFacturaCoaseguroAdicional.Value = 0
        If Val(Format(txtPorcentajeCoaseguroAdicional.Text, "")) = 0 Then
            txtPorcentajeCoaseguroAdicional_Change
        Else
            txtPorcentajeCoaseguroAdicional.Text = FormatNumber(0, 2)
        End If
        If Val(Format(txtCoaseguroAdicional.Text, "")) = 0 Then
            txtCoaseguroAdicional_Change
        Else
            txtCoaseguroAdicional.Text = FormatNumber(0, 2)
        End If
    End If
        
    'Cambios en copago:
    optTipoCopago(0).Enabled = IIf(blnCalcularEnBaseACargos Or IIf(intCoaseguroPorFactura = 1, True, False), False, blnHabilita)
    optTipoCopago(1).Enabled = IIf(intCoaseguroPorFactura = 1, False, blnHabilita)
    txtPorcentajeCopago.Enabled = IIf(intCoaseguroPorFactura = 1, False, blnHabilita)
    lblPorcentajeDeducible(4).Enabled = blnHabilita
    chkFacturaCopago.Enabled = IIf(intCoaseguroPorFactura = 1, False, blnHabilita)
    txtCopago.Enabled = IIf(intCoaseguroPorFactura = 1, False, blnHabilita)
    
    If intCoaseguroPorFactura = 1 Then 'En caso de que se vaya a facturar el coaseguro por factura se impide la captura del copago
        chkFacturaCopago.Value = 0
        If Val(Format(txtPorcentajeCopago.Text, "")) = 0 Then
            txtPorcentajeCopago_Change
        Else
            txtPorcentajeCopago.Text = FormatNumber(0, 2)
        End If
        If Val(Format(txtCopago.Text, "")) = 0 Then
            txtCopago_Change
        Else
            txtCopago.Text = FormatNumber(0, 2)
        End If
    End If
        
    'Prepara los componentes para la captura del coaseguro por factura
    lblPorcentajeDeducible(16).Caption = IIf(intCoaseguroPorFactura = 1, "Cantidad a facturar", "Cantidad máxima")
    txtCantidadMaximaCO.ToolTipText = IIf(intCoaseguroPorFactura = 1, "Cantidad a facturar de coaseguro", "Cantidad máxima a cobrar por coaseguro")
    
    If intCoaseguroPorFactura = 1 Then
        If optTipoCoaseguro(0).Value Then
            optTipoCoaseguro_Click 0
        Else
            optTipoCoaseguro(0).Value = True
        End If
        txtPorcentajeCoaseguro.Text = ""
        txtCantidadMaximaCO.Text = FormatCurrency(IIf(Val(Format(txtCantidadMaximaCO.Text, "")) = 0, 0, Val(Format(txtCantidadMaximaCO.Text, ""))), 2)
        If txtCoaseguro.Text = FormatCurrency(dblCoaseguroFacturado + Val(Format(txtCantidadMaximaCO, "")), 2) Then
            txtCoaseguro_Change
        Else
            txtCoaseguro.Text = FormatCurrency(dblCoaseguroFacturado + Val(Format(txtCantidadMaximaCO, "")), 2)
        End If
    End If
        
    txtCoaseguro.Enabled = IIf(intCoaseguroPorFactura = 1, False, blnHabilita)
    
    'Cambios en desglosar coaseguro médico
    chkFacturaCoaseguroMedico.Enabled = IIf(chkFacturaCoaseguroMedico.Value = 1, blnHabilita, True)
    optTipoCoaseguroMedico(0).Enabled = IIf(chkFacturaCoaseguroMedico.Value = 1, blnHabilita, True)
    optTipoCoaseguroMedico(1).Enabled = IIf(chkFacturaCoaseguroMedico.Value = 1, blnHabilita, True)
    
    'Cambios en suma asegurada:
'    txtSumaAsegurada.Enabled = blnHabilita
    If lblnCanceloFacturaPaciente = False Then
        If rsPostergado.RecordCount > 0 Then
            If rsPostergado!BITPOSTERGADA = 1 Then
                cmdBorraControl.Enabled = False
            Else
                cmdBorraControl.Enabled = blnHabilita
            End If
        End If
    End If
    
    blnHabilitadosConceptos = blnHabilita   'Variable para saber si permitira los cambios a la configuracion de los parametros de la cuenta
End Sub

Private Sub pConfiguraGridFacturaParcial()
    With MSFGFacturasParciales
        .Cols = 19
        .FixedCols = 3
        .FixedRows = 1
        .FormatString = "||Facturado a|Cantidad|IVA|Total||||Dlls||||Folio|Fecha|Concepto de facturación"
        
        .ColWidth(0) = 0  ' Cve de referencia (Médico, Empleado etc.)
        .ColWidth(1) = 0  ' Tipo de cliente "ME", "EM", "PI"
        .ColWidth(2) = 3820 'Facturado a
        .ColWidth(3) = 1360 'Cantidad
        .ColWidth(4) = 1060 'Iva
        .ColWidth(5) = 1360 'Total
        .ColWidth(6) = 0    'Subtotal completo
        .ColWidth(7) = 0    'IVA Completo
        .ColWidth(8) = 0    'TotalCompleto
        .ColWidth(10) = 0   'Dlls
        .ColWidth(11) = 0   'Indica si ya fue facturada o solo está en memoria
        .ColWidth(12) = 0   'Es el concepto de facturación
        .ColWidth(13) = 900 'Folio de la factura
        .ColWidth(14) = 950 'Fecha de facturación
        .ColWidth(15) = 5200 'Descripción del concepto de facturación
        .ColWidth(16) = 0 'Importe gravado de la factura parcial
        .ColWidth(17) = 0 'Importe no gravado de la factura parcial
        .ColWidth(18) = 0 'Indica si es concepto de seguro
        
        .ColAlignment(0) = flexAlignCenterCenter
        .ColAlignment(1) = flexAlignLeftCenter
        .ColAlignment(2) = flexAlignLeftCenter
        .ColAlignment(3) = flexAlignRightCenter
        .ColAlignment(4) = flexAlignRightCenter
        .ColAlignment(5) = flexAlignRightCenter
        .ColAlignment(9) = flexAlignCenterCenter 'Dlls
        .ColAlignment(15) = flexAlignLeftCenter
        .ColAlignmentFixed(0) = flexAlignCenterCenter
        .ColAlignmentFixed(1) = flexAlignCenterCenter
        .ColAlignmentFixed(2) = flexAlignLeftCenter
        .ColAlignmentFixed(3) = flexAlignCenterCenter
        .ColAlignmentFixed(4) = flexAlignCenterCenter
        .ColAlignmentFixed(5) = flexAlignCenterCenter
        .ColAlignmentFixed(13) = flexAlignCenterCenter
        .ColAlignmentFixed(14) = flexAlignCenterCenter
        .ColAlignmentFixed(15) = flexAlignCenterCenter
        .ScrollBars = flexScrollBarBoth
    End With
End Sub

Private Sub pCalculaPrecios()
    Dim vlIntCont As Integer
    Dim vldblTipoCambio As Double
    Dim vldblCantidad As Double
    
    vldblTipoCambio = fdblTipoCambio(fdtmServerFecha, "V") 'Tipo de cambio a la Venta
    With MSFGFacturasParciales
        If .RowData(1) <> -1 Then
            .TextMatrix(.Row, 6) = IIf(.TextMatrix(.Row, 9) = "x", .TextMatrix(.Row, 6) / vldblTipoCambio, .TextMatrix(.Row, 6) * vldblTipoCambio)
            .TextMatrix(.Row, 3) = "$ " & Format(Round(.TextMatrix(.Row, 6), 2), "###,###,##0.00") '3
            .TextMatrix(.Row, 7) = IIf(.TextMatrix(.Row, 9) = "x", .TextMatrix(.Row, 7) / vldblTipoCambio, .TextMatrix(.Row, 7) * vldblTipoCambio)
            .TextMatrix(.Row, 4) = "$ " & Format(Round(.TextMatrix(.Row, 7), 2), "###,###,##0.00") 'IVA 3
            .TextMatrix(.Row, 8) = IIf(.TextMatrix(.Row, 9) = "x", .TextMatrix(.Row, 8) / vldblTipoCambio, .TextMatrix(.Row, 8) * vldblTipoCambio)
            .TextMatrix(.Row, 5) = "$ " & Format(Round(.TextMatrix(.Row, 8), 2), "###,###,##0.00") 'IVA 3
            .TextMatrix(.Row, 16) = Format(IIf(.TextMatrix(.Row, 9) = "x", .TextMatrix(.Row, 16) / vldblTipoCambio, .TextMatrix(.Row, 16) * vldblTipoCambio), "############.00")
            .TextMatrix(.Row, 17) = Format(IIf(.TextMatrix(.Row, 9) = "x", .TextMatrix(.Row, 17) / vldblTipoCambio, .TextMatrix(.Row, 17) * vldblTipoCambio), "############.00")
        End If
    End With
End Sub

Private Function fintBuscaConceptoFacturacion(pintConceptoFacturacion As Long) As Long
    Dim vlIntCont As Integer
    
    fintBuscaConceptoFacturacion = -1
    For vlIntCont = 1 To grdFacturaPaciente.Rows - 1
        If grdFacturaPaciente.RowData(vlIntCont) = pintConceptoFacturacion Then fintBuscaConceptoFacturacion = vlIntCont
    Next vlIntCont
End Function

Private Function fintBuscaConceptoFacturacionDescuento(pintConceptoFacturacion As Long) As Long
    Dim vlIntCont As Integer
    
    fintBuscaConceptoFacturacionDescuento = -1
    For vlIntCont = 1 To grdFacturaPaciente.Rows - 1
        If grdFacturaPaciente.RowData(vlIntCont) = pintConceptoFacturacion And (grdFacturaPaciente.TextMatrix(vlIntCont, 6) = "DE" Or grdFacturaPaciente.TextMatrix(vlIntCont, 6) = "OD") Then fintBuscaConceptoFacturacionDescuento = vlIntCont
    Next vlIntCont
End Function

Private Function fcolLocalizaFacturaParcial(plngCveColeccion As Long) As clsFacturaParcial
    Dim vlIntCont As Integer
    Dim vlcolAux As Collection
    
    For vlIntCont = 1 To vgcolFacturasParciales.Count
        If vgcolFacturasParciales.Item(vlIntCont).intIdFacturaParcial = plngCveColeccion Then
            Set fcolLocalizaFacturaParcial = vgcolFacturasParciales.Item(vlIntCont)
            Exit For
        End If
    Next vlIntCont
End Function

Private Sub pLlenaCboCF(pcboCombo As ComboBox)
    Dim vlstrSentencia As String
    Dim vlrsCF As New ADODB.Recordset
    Dim vlintIndex As Integer
    
    vlstrSentencia = " Select PvConceptoFacturacion.SMICVECONCEPTO, PvConceptoFacturacion.CHRDESCRIPCION, PvConceptoFacturacion.BITFACTURACIONPARCIAL "
    vlstrSentencia = vlstrSentencia & " From PvConceptoFacturacion "
    vlstrSentencia = vlstrSentencia & " Inner join pvconceptofacturacionempresa on  pvconceptofacturacion.smicveconcepto = pvconceptofacturacionempresa.intcveconceptofactura"
    vlstrSentencia = vlstrSentencia & " Where PvConceptoFacturacion.BITFACTURACIONPARCIAL <> 0 "
    vlstrSentencia = vlstrSentencia & " and pvconceptofacturacionempresa.intcveempresacontable = " & vgintClaveEmpresaContable & "Order by CHRDESCRIPCION"
    Set vlrsCF = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
    vlintIndex = -1
    cboCFParaFacturaParcial.Clear
    While Not vlrsCF.EOF
        cboCFParaFacturaParcial.AddItem RTrim(vlrsCF!chrDescripcion)
        cboCFParaFacturaParcial.ItemData(cboCFParaFacturaParcial.newIndex) = vlrsCF!smicveconcepto
        If vlrsCF!BITFACTURACIONPARCIAL = 2 Then vlintIndex = cboCFParaFacturaParcial.newIndex
        vlrsCF.MoveNext
    Wend
    If vlrsCF.RecordCount > 0 Then cboCFParaFacturaParcial.ListIndex = 0
End Sub

Private Sub pHabilitaGrabacionFacturaPaciente()
    'Si la cuenta tiene cargos
    If grdCargos.RowData(1) <> -1 Then
        cmdGrabarFacturaPaciente.Enabled = True
        cmdPrefacturaPaciente.Enabled = True
        pFacturaPacienteActiva
        cmdLiquidaCuenta.Enabled = IIf(CDbl(txtFPTotalPagar.Text) > 0 And fblnRevisaPermiso(vglngNumeroLogin, 2055, "E", True), True, False) And lintConceptoLiquidacion <> -1
        chkFacturaBase.Enabled = False
        'Si existen facturas parciales
        If fdblTotalFacturasParciales(10, True, -1, True) > 0 Then
           chkFacturaBase.Value = 0
        Else
           chkFacturaBase.Value = 1
        End If
    Else
        If gintAseguradora = 1 Then
            cmdGrabarFacturaPaciente.Enabled = IIf(Val(Format(txtFPTotalPagar, "")) > 0, True, False)
            cmdPrefacturaPaciente.Enabled = IIf(Val(Format(txtFPTotalPagar, "")) > 0, True, False)
            pFacturaPacienteActiva
            
            If Val(Format(txtFPTotalPagar, "")) = 0 And Val(Format(txtFPTotalFactura, "")) > 0 And Val(Format(txtFPPagos, "")) > 0 And Val(Format(txtFPTotalFactura, "")) = Val(Format(txtFPPagos, "")) Then
                cmdGrabarFacturaPaciente.Enabled = True
                cmdPrefacturaPaciente.Enabled = True
                pFacturaPacienteActiva
            End If
            
            cmdLiquidaCuenta.Enabled = False
            chkFacturaBase.Enabled = False
            'Si existen facturas parciales
            If fdblTotalFacturasParciales(10, True, -1, True) > 0 Then
               chkFacturaBase.Value = 0
            Else
               chkFacturaBase.Value = 1
            End If
        Else
            cmdGrabarFacturaPaciente.Enabled = False
            cmdPrefacturaPaciente.Enabled = False
            pFacturaPacienteActiva
            cmdLiquidaCuenta.Enabled = False
            chkFacturaBase.Value = 0
            'Si existen facturas parciales
            If fdblTotalFacturasParciales(10, True, -1, True) > 0 Then
                chkFacturaBase.Enabled = False
                cmdGrabarFacturaPaciente.Enabled = True
                cmdPrefacturaPaciente.Enabled = True
                pFacturaPacienteActiva
            End If
        End If
    End If
End Sub

' Este procedimiento saca una fotografía del estado (Habilitado/deshabilitado)
' de los componentes de una forma y los guarda en un arreglo
Private Sub pObtieneEstadoComponentes()
    ReDim agstrEstadoComponentes(2, 31)
    
    agstrEstadoComponentes(0, 0) = "MSFGFacturasParciales"
    agstrEstadoComponentes(1, 0) = IIf(MSFGFacturasParciales.Enabled, 1, 0)
    agstrEstadoComponentes(2, 0) = 0
    MSFGFacturasParciales.Enabled = False
    agstrEstadoComponentes(0, 1) = "cmdAgregaDonativo"
    agstrEstadoComponentes(1, 1) = IIf(cmdAgregaDonativo.Enabled, 1, 0)
    agstrEstadoComponentes(2, 1) = 0
    cmdAgregaDonativo.Enabled = False
    agstrEstadoComponentes(0, 2) = "grdFacturaPaciente"
    agstrEstadoComponentes(1, 2) = IIf(grdFacturaPaciente.Enabled, 1, 0)
    agstrEstadoComponentes(2, 2) = 0
    grdFacturaPaciente.Enabled = False
    agstrEstadoComponentes(0, 3) = "cmdGrabarFacturaPaciente"
    agstrEstadoComponentes(1, 3) = IIf(cmdGrabarFacturaPaciente.Enabled, 1, 0)
    agstrEstadoComponentes(2, 3) = 0
    cmdGrabarFacturaPaciente.Enabled = False
    cmdPrefacturaPaciente.Enabled = False
    agstrEstadoComponentes(0, 4) = "chkConsultaGeneraFacturas"
    agstrEstadoComponentes(1, 4) = IIf(chkConsultaGeneraFacturas(0).Enabled, 1, 0)
    agstrEstadoComponentes(2, 4) = 0
    chkConsultaGeneraFacturas(0).Enabled = False
    agstrEstadoComponentes(0, 5) = "chkConsultaGeneraFacturas"
    agstrEstadoComponentes(1, 5) = IIf(chkConsultaGeneraFacturas(1).Enabled, 1, 0)
    agstrEstadoComponentes(2, 5) = 1
    chkConsultaGeneraFacturas(1).Enabled = False
    agstrEstadoComponentes(0, 6) = "chkFacturaBase"
    agstrEstadoComponentes(1, 6) = IIf(chkFacturaBase.Enabled, 1, 0)
    agstrEstadoComponentes(2, 6) = 0
    chkFacturaBase.Enabled = False
    agstrEstadoComponentes(0, 7) = "optDolares"
    agstrEstadoComponentes(1, 7) = IIf(optDolares(0).Enabled, 1, 0)
    agstrEstadoComponentes(2, 7) = 0
    optDolares(0).Enabled = False
    agstrEstadoComponentes(0, 8) = "optPesos"
    agstrEstadoComponentes(1, 8) = IIf(optPesos(0).Enabled, 1, 0)
    agstrEstadoComponentes(2, 8) = 0
    optPesos(0).Enabled = False
    agstrEstadoComponentes(0, 9) = "optTipoCliente"
    agstrEstadoComponentes(1, 9) = IIf(optTipoCliente(0).Enabled, 1, 0)
    agstrEstadoComponentes(2, 9) = 0
    optTipoCliente(0).Enabled = False
    agstrEstadoComponentes(0, 10) = "optTipoCliente"
    agstrEstadoComponentes(1, 10) = IIf(optTipoCliente(1).Enabled, 1, 0)
    agstrEstadoComponentes(2, 10) = 1
    optTipoCliente(1).Enabled = False
    agstrEstadoComponentes(0, 11) = "optTipoCliente"
    agstrEstadoComponentes(1, 11) = IIf(optTipoCliente(2).Enabled, 1, 0)
    agstrEstadoComponentes(2, 11) = 2
    optTipoCliente(2).Enabled = False
    agstrEstadoComponentes(0, 12) = "optTipoCliente"
    agstrEstadoComponentes(1, 12) = IIf(optTipoCliente(3).Enabled, 1, 0)
    agstrEstadoComponentes(2, 12) = 3
    optTipoCliente(3).Enabled = False
    agstrEstadoComponentes(0, 13) = "optTipoCliente"
    agstrEstadoComponentes(1, 13) = IIf(optTipoCliente(4).Enabled, 1, 0)
    agstrEstadoComponentes(2, 13) = 4
    optTipoCliente(4).Enabled = False
    agstrEstadoComponentes(0, 14) = "optTipoCliente"
    agstrEstadoComponentes(1, 14) = IIf(optTipoCliente(5).Enabled, 1, 0)
    agstrEstadoComponentes(2, 14) = 5
    optTipoCliente(5).Enabled = False
    agstrEstadoComponentes(0, 15) = "txtFPBuscaCliente"
    agstrEstadoComponentes(1, 15) = IIf(txtFPBuscaCliente.Enabled, 1, 0)
    agstrEstadoComponentes(2, 15) = 0
    txtFPBuscaCliente.Enabled = False
    agstrEstadoComponentes(0, 16) = "sstFacturacion"
    agstrEstadoComponentes(1, 16) = IIf(sstFacturacion.TabEnabled(0), 1, 0)
    agstrEstadoComponentes(2, 16) = 0
    sstFacturacion.TabEnabled(0) = False
    agstrEstadoComponentes(0, 17) = "sstFacturacion"
    agstrEstadoComponentes(1, 17) = IIf(sstFacturacion.TabEnabled(1), 1, 0)
    agstrEstadoComponentes(2, 17) = 1
    sstFacturacion.TabEnabled(1) = False
    agstrEstadoComponentes(0, 18) = "sstFacturacion"
    agstrEstadoComponentes(1, 18) = IIf(sstFacturacion.TabEnabled(2), 1, 0)
    agstrEstadoComponentes(2, 18) = 2
    sstFacturacion.TabEnabled(2) = False
    agstrEstadoComponentes(0, 19) = "sstFacturacion"
    agstrEstadoComponentes(1, 19) = IIf(sstFacturacion.TabEnabled(4), 1, 0)
    agstrEstadoComponentes(2, 19) = 4
    sstFacturacion.TabEnabled(4) = False
    agstrEstadoComponentes(0, 20) = "sstFacturacion"
    agstrEstadoComponentes(1, 20) = IIf(sstFacturacion.TabEnabled(5), 1, 0)
    agstrEstadoComponentes(2, 20) = 5
    sstFacturacion.TabEnabled(5) = False
    agstrEstadoComponentes(0, 21) = "lstFPBuscaCliente"
    agstrEstadoComponentes(1, 21) = IIf(lstFPBuscaCliente.Enabled, 1, 0)
    agstrEstadoComponentes(2, 21) = 0
    lstFPBuscaCliente.Enabled = False
    agstrEstadoComponentes(0, 22) = "txtFPDescuentos"
    agstrEstadoComponentes(1, 22) = IIf(txtFPDescuentos.Enabled, 1, 0)
    agstrEstadoComponentes(2, 22) = 0
    txtFPDescuentos.Enabled = False
    agstrEstadoComponentes(0, 23) = "txtFPSubtotal"
    agstrEstadoComponentes(1, 23) = IIf(txtFPSubtotal.Enabled, 1, 0)
    agstrEstadoComponentes(2, 23) = 0
    txtFPSubtotal.Enabled = False
    agstrEstadoComponentes(0, 24) = "txtFPIVA"
    agstrEstadoComponentes(1, 24) = IIf(txtFPIVA.Enabled, 1, 0)
    agstrEstadoComponentes(2, 24) = 0
    txtFPIVA.Enabled = False
    agstrEstadoComponentes(0, 25) = "txtFPTotalFactura"
    agstrEstadoComponentes(1, 25) = IIf(txtFPTotalFactura.Enabled, 1, 0)
    agstrEstadoComponentes(2, 25) = 0
    txtFPTotalFactura.Enabled = False
    agstrEstadoComponentes(0, 26) = "txtFPPagos"
    agstrEstadoComponentes(1, 26) = IIf(txtFPPagos.Enabled, 1, 0)
    agstrEstadoComponentes(2, 26) = 0
    txtFPPagos.Enabled = False
    agstrEstadoComponentes(0, 31) = "txtFPNotasCredito"
    agstrEstadoComponentes(1, 31) = IIf(txtFPNotasCredito.Enabled, 1, 0)
    agstrEstadoComponentes(2, 31) = 0
    txtFPNotasCredito.Enabled = False
    agstrEstadoComponentes(0, 27) = "txtFPTotalPagar"
    agstrEstadoComponentes(1, 27) = IIf(txtFPTotalPagar.Enabled, 1, 0)
    agstrEstadoComponentes(2, 27) = 0
    txtFPTotalPagar.Enabled = False
    agstrEstadoComponentes(0, 28) = "cmdAnteriorFactura"
    agstrEstadoComponentes(1, 28) = IIf(cmdAnteriorFactura(0).Enabled, 1, 0)
    agstrEstadoComponentes(2, 28) = 0
    cmdAnteriorFactura(0).Enabled = False
    agstrEstadoComponentes(0, 29) = "cmdSiguienteFactura"
    agstrEstadoComponentes(1, 29) = IIf(cmdSiguienteFactura(0).Enabled, 1, 0)
    agstrEstadoComponentes(2, 29) = 0
    cmdSiguienteFactura(0).Enabled = False
    agstrEstadoComponentes(0, 30) = "txtFacturasEncontradas"
    agstrEstadoComponentes(1, 30) = IIf(txtFacturasEncontradas(0).Enabled, 1, 0)
    agstrEstadoComponentes(2, 30) = 0
    txtFacturasEncontradas(0).Enabled = False
   
    fraParametrosFP.Visible = True
    pLlenaCboCF cboCFParaFacturaParcial
    txtCantidadFP.Text = "0.00"
    cboCFParaFacturaParcial.SetFocus
End Sub

' Este procedimiento reestablece los estados (Habilitado/Deshabilitado)
' previamente capturados en otras palabras regresa todo a su estado original
Private Sub pReestableceEstadoComponentes()
    Dim vlobjControl As Control  'Variable que contendrá a cada uno de los componentes de la forma
    Dim vlIntCont As Integer     'Variable que recorrerá el arreglo
    Dim vlintIndexAux As Integer 'Sirve para poder manejar el error y para los indices de los checks y de los option button
    
    For vlIntCont = 0 To UBound(agstrEstadoComponentes, 2)
        For Each vlobjControl In Controls 'Ciclo para recorrer los componentes de una forma
            If vlobjControl.Name = agstrEstadoComponentes(0, vlIntCont) Then
                On Error GoTo Error
                    'Intenta obtener el indice del componente.
                    'Esta es la manera en que yo puedo saber si un objeto forma parte de un arreglo o no
                    vlintIndexAux = vlobjControl.Index
                On Error GoTo 0
                If vlintIndexAux = agstrEstadoComponentes(2, vlIntCont) Then
                    If TypeOf vlobjControl Is SSTab Then
                        vlobjControl.TabEnabled(vlintIndexAux) = agstrEstadoComponentes(1, vlIntCont)
                    Else
                        vlobjControl.Enabled = agstrEstadoComponentes(1, vlIntCont)
                    End If
                    Exit For
                End If
            End If
        Next
    Next vlIntCont
    
    Exit Sub
Error:
    vlintIndexAux = agstrEstadoComponentes(2, vlIntCont)
    Resume Next
End Sub

Private Function fblnInfoCompletaPCE() As Boolean
On Error GoTo NotificaError

    Dim vlstrPacientesSinCodigo As String
    Dim vlstrSentencia As String
    
    fblnInfoCompletaPCE = True
    If optGrupoCuenta(0).Value Then
        vlstrPacientesSinCodigo = "G" & txtMovimientoPaciente.Text & "," & "|" & llngCveEmpresaPCE
    Else
        vlstrPacientesSinCodigo = IIf(OptTipoPaciente(0).Value, "I", "E") & Trim(txtMovimientoPaciente.Text) & "," & "|" & llngCveEmpresaPCE
    End If
  
    Set rsInformacionFaltantePCE = frsEjecuta_SP(vlstrPacientesSinCodigo, "sp_CcVerificarInfoFaltantePCE")
    Set rsInformacionFaltantePCE = frsUltimoRecordset(rsInformacionFaltantePCE)
    
    If rsInformacionFaltantePCE.RecordCount > 0 Then
        fblnInfoCompletaPCE = False
    End If

    Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":fblnInfoCompletaPCE"))
End Function

Private Sub pImprimirInfoFaltantePCE()
On Error GoTo NotificaError

    Dim alstrParametros(0) As String

    pInstanciaReporte vgrptReporte, "rptPacientesInfoFaltantePCE.rpt"

    alstrParametros(0) = "NombreHospital;" & Trim(vgstrNombreHospitalCH)
    pCargaParameterFields alstrParametros, vgrptReporte

    If rsInformacionFaltantePCE.RecordCount > 0 Then
        pImprimeReporte vgrptReporte, rsInformacionFaltantePCE, "P", "Pacientes sin código de PCE", False
    End If
                
    Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":pImprimirInfoFaltantePCE"))
End Sub

'-------------------------------------------------------------------------------------
'|  ÚNICA función que modifica y accede al arreglo global (audtPaquetesEnCuenta)
'-------------------------------------------------------------------------------------
'|  Esta función mantiene el control de los paquetes que pertenecen a cada cuenta,
'|  e indica si el paquete se debe sumar al total de la factura o no
'-------------------------------------------------------------------------------------
Public Function fblnCargaPaqueteACuenta(lngCuenta As Long, lngPaquete As Long)
    Dim intCont As Integer
    Dim blnEncontrado As Boolean
    
    blnEncontrado = False
    '|  Recorre la colección para identificar si ya se ha agregado el paquete a esa cuenta
    For intCont = 0 To UBound(audtPaquetesEnCuenta) - 1
        If audtPaquetesEnCuenta(intCont).lngCuenta = lngCuenta And audtPaquetesEnCuenta(intCont).lngPaquete = lngPaquete Then
            blnEncontrado = True
            Exit For
        End If
    Next
    '|  Si aún no existe en la colección
    If Not blnEncontrado Then
        ReDim Preserve audtPaquetesEnCuenta(UBound(audtPaquetesEnCuenta) + 1)
        audtPaquetesEnCuenta(UBound(audtPaquetesEnCuenta) - 1).lngCuenta = lngCuenta
        audtPaquetesEnCuenta(UBound(audtPaquetesEnCuenta) - 1).lngPaquete = lngPaquete
    End If
    fblnCargaPaqueteACuenta = blnEncontrado
End Function

Private Function fblnDescuentoValido() As Boolean
    fblnDescuentoValido = True
    If Val(txtDescuento.Text) > 100 Then
        '|  35  - Dato incorrecto: El porcentaje debe ser menor a 100%
        '|  644 - Los descuentos exceden el importe del concepto.
        MsgBox SIHOMsg(35), vbCritical, "Mensaje"
        pEnfocaTextBox txtDescuento
        fblnDescuentoValido = False
    End If
End Function

Private Sub cmdModificaCantidad_Click()
    Dim vldblTipoCambio As Double
    Dim vlblnFormaPago As Boolean
    Dim vldblPorcentajeProrrateado As Double
    Dim vllngCveColeccion As Long
    Dim vldblCantidadTecleada As Double
    Dim vldblCantidadPendiente As Double
    Dim vllngCveClienteCredito As Long
    Dim vlstrTipoClienteCredito As String
    Dim vllngCveDatosFiscales As Long
    Dim vlstrDFNombre As String
    Dim vlstrDFDireccion As String
    Dim vlstrDFNumeroExterior As String
    Dim vlstrDFNumeroInterior As String
    Dim lngCveCiudad As Long
    Dim vlstrDFTelefono As String
    Dim vlstrDFRFC As String
    Dim vlstrDFColonia As String
    Dim vlstrDFCP As String
    Dim vlFactParcAuxiliar As clsFacturaParcial
    
    With MSFGFacturasParciales
        If .RowData(1) <> -1 And MSFGFacturasParciales.TextMatrix(MSFGFacturasParciales.Row, 11) <> 1 Then  'Celda 11 <> 1 significa que la factura parcial aun no se ha grabado
            vldblTipoCambio = fdblTipoCambio(fdtmServerFecha, "V") 'Tipo de cambio a la Venta
            If vldblTipoCambio = 0 Then
                MsgBox SIHOMsg(231), vbCritical, "Mensaje" 'No está registrado el tipo de cambio del día.
                Exit Sub
            End If
            
            'Cantidad que falta por pagar EN PESOS
            vldblCantidadPendiente = vgdblTotalPagarPesosPaciente + .TextMatrix(.Row, 10)
            
            '***** MODIFICADO PARA CASO 6894 *****'
            'vlblnFormaPago = fblnFormasPagoPos(aFormasPago(), IIf(.TextMatrix(.Row, 9) = "", vldblCantidadPendiente, vldblCantidadPendiente / vldblTipoCambio), IIf(.TextMatrix(.Row, 9) = "", True, False), vldblTipoCambio, True, .TextMatrix(.Row, 0), .TextMatrix(.Row, 1), True)
            vlblnFormaPago = fblnFormasPagoPos(aFormasPago(), IIf(.TextMatrix(.Row, 9) = "", vldblCantidadPendiente, vldblCantidadPendiente / vldblTipoCambio), IIf(.TextMatrix(.Row, 9) = "", True, False), vldblTipoCambio, True, .TextMatrix(.Row, 0), .TextMatrix(.Row, 1), True, Trim(Replace(Replace(Replace(vlFactParcAuxiliar.strDFRFC, "-", ""), "_", ""), " ", "")), False, True)
            '*************************************'
            If vlblnFormaPago Then
                'Si la cantidad esta en dlls la convierte a pesos para trabajar todo en pesos
                vldblCantidadTecleada = IIf(.TextMatrix(.Row, 9) = "", fdblCantidadPagada(aFormasPago), fdblCantidadPagada(aFormasPago) * vldblTipoCambio)
                If vldblCantidadTecleada > 0 Then
                    'Comenté la línea de abajo porque ahora si se va a poder modificar la cantidad por más del total de la factura base
                    vllngCveColeccion = .RowData(.Row)
                    Set vlFactParcAuxiliar = fcolLocalizaFacturaParcial(vllngCveColeccion)
                    vllngCveClienteCredito = vlFactParcAuxiliar.intCveClienteCredito
                    vlstrTipoClienteCredito = vlFactParcAuxiliar.strTipoClienteCredito
                    vllngCveDatosFiscales = vlFactParcAuxiliar.intCveDatosFiscales
                    vlstrDFNombre = vlFactParcAuxiliar.strDFNombre
                    vlstrDFDireccion = vlFactParcAuxiliar.strDFDireccion
                    vlstrDFNumeroExterior = vlFactParcAuxiliar.strDFNumeroExterior
                    vlstrDFNumeroInterior = vlFactParcAuxiliar.strDFNumeroInterior
                    lngCveCiudad = vlFactParcAuxiliar.llngCveCiudad
                    vlstrDFTelefono = vlFactParcAuxiliar.strDFTelefono
                    vlstrDFRFC = vlFactParcAuxiliar.strDFRFC
                    vlstrDFColonia = vlFactParcAuxiliar.strDFColonia
                    vlstrDFCP = vlFactParcAuxiliar.strDFCP
                    pEliminaDeColeccion vllngCveColeccion
                    pAgregaColeccion aFormasPago, vllngCveColeccion, vllngCveClienteCredito, vlstrTipoClienteCredito, vllngCveDatosFiscales, vlstrDFNombre, vlstrDFDireccion, vlstrDFNumeroExterior, vlstrDFNumeroInterior, vlstrDFTelefono, vlstrDFRFC, lngCveCiudad, vlstrDFColonia, txtCPFactura.Text
                    vldblPorcentajeProrrateado = vldblCantidadTecleada / vgdblTotalPagarPesosPaciente 'Aqui no convierto porque todo esta en pesos aunque la factura este en dlls
                    
                    'La forma de desplegar depende si son dlls o pesos
                    .TextMatrix(.Row, 4) = "$ " & Format(IIf(.TextMatrix(.Row, 9) = "", CDbl(txtFPIVA.Text), CDbl(txtFPIVA.Text) / vldblTipoCambio) * vldblPorcentajeProrrateado, "###,###,##0.00") 'IVA
                    .TextMatrix(.Row, 5) = "$ " & Format(IIf(.TextMatrix(.Row, 9) = "", vldblCantidadTecleada, vldblCantidadTecleada / vldblTipoCambio), "###,###,##0.00") ' Total
                    .TextMatrix(.Row, 3) = "$ " & Format(CStr(CDbl(.TextMatrix(.Row, 5)) - CDbl(.TextMatrix(.Row, 4))), "###,###,##0.00") ' Cantidad
                    .TextMatrix(.Row, 7) = IIf(.TextMatrix(.Row, 9) = "", CDbl(txtFPIVA.Text), CDbl(txtFPIVA.Text) / vldblTipoCambio) * vldblPorcentajeProrrateado 'IVA
                    .TextMatrix(.Row, 8) = IIf(.TextMatrix(.Row, 9) = "", vldblCantidadTecleada, vldblCantidadTecleada / vldblTipoCambio) ' Total
                    .TextMatrix(.Row, 6) = .TextMatrix(.Row, 5) - .TextMatrix(.Row, 4) ' Cantidad
                    .TextMatrix(.Row, 10) = vldblCantidadTecleada

                    If vgintEmpresa = 0 Or blnExisteExcedente Then
                        pLlenaFacturasParticulares grdFacturaPaciente
                    Else
                        If gintAseguradora = 0 Then
                            pLlenaFacturasConvenio grdFacturaPaciente
                        Else
                            pLlenaFacturasConvenioAseguradora grdFacturaPaciente
                        End If
                    End If
                Else
                    MsgBox SIHOMsg(429), vbCritical, "Mensaje"
                End If
            End If
        End If
    End With
End Sub

'|  Verifica si se esta usando la facturación consolidada con cuentas de particulares
Private Function fintUsaFacturacionConsolidadaParticulares() As Integer
    Dim strSentencia As String
    Dim rsConcepto As New ADODB.Recordset

    fintUsaFacturacionConsolidadaParticulares = -1
    strSentencia = "SELECT Pvconceptopago.INTNUMCONCEPTO " & _
                   " FROM  PVCONCEPTOPAGO " & _
                   " INNER JOIN pvconceptopagoempresa ON pvconceptopago.intnumconcepto = pvconceptopagoempresa.intnumconcepto " & _
                   " WHERE PVCONCEPTOPAGOempresa.bitconceptoliquidacion = 1 and pvconceptopagoempresa.intcveempresa = " & vgintClaveEmpresaContable
    Set rsConcepto = frsRegresaRs(strSentencia, adLockReadOnly, adOpenForwardOnly)
    If rsConcepto.RecordCount > 0 Then fintUsaFacturacionConsolidadaParticulares = rsConcepto!intNumConcepto
End Function

Private Sub txtTotalDedCoaCop_Change()
    'Total a pagar:
     txtTotalPagarControl.Text = FormatCurrency(Val(Format(txtTotalNoFacturado.Text, "")) - Val(Format(txtExcluidosPagos.Text, "")), 2)
End Sub

'--------------------------------------------------------------------------------------------------------------------------
'|  Busca si la clave de un paquete(intCvePaquete) ya está almacenado para una cuenta (lngCuenta) en un arreglo (aryCuentaPaquete)
'--------------------------------------------------------------------------------------------------------------------------
Private Function fblnExistePaquete(aryCuentaPaquete() As typCuentaPaquete, intCvePaquete As Long, lngCuenta As Long) As Boolean
    Dim intCont As Integer
    Dim intMaximo As Integer
    
    fblnExistePaquete = False
    intMaximo = UBound(aryCuentaPaquete)
    For intCont = 1 To intMaximo
        If aryCuentaPaquete(intCont).lngCuenta = lngCuenta And aryCuentaPaquete(intCont).lngPaquete = intCvePaquete Then
            fblnExistePaquete = True
        End If
    Next
End Function

Private Function fblnExistePaquetePaciente(aryPaquetesPaciente() As typPaquetesPaciente, lngCvePaquete As Long) As Boolean
    Dim intCont As Integer
    Dim intMaximo As Integer
    
    fblnExistePaquetePaciente = False
    intMaximo = UBound(aryPaquetesPaciente)
    For intCont = 1 To intMaximo
        If aryPaquetesPaciente(intCont).lngPaquete = lngCvePaquete Then
            fblnExistePaquetePaciente = True
        End If
    Next
End Function

Public Function fstrFolioNota(vlintAumentaFolio As Integer, strSerie As String, strFolio As String, strNumeroAprobacionNota As String, strAnoAprobacionNota As String) As String
'Regresa el folio para nota de cargo o crédito
On Error GoTo NotificaError

    Dim alstrParametrosSalidaNota() As String
    Dim vllngFoliosRestantes As Long
    Dim vlstrFolioLocal As String
    Dim strSerielocal As String
    Dim strNumeroAprobacion As String
    Dim strAnoAprobacion As String
    
    vllngFoliosRestantes = 1
    vlstrFolioLocal = ""
    
    '| CFD
    pCargaArreglo alstrParametrosSalidaNota, vllngFoliosRestantes & "|" & ADODB.adBSTR & "|" & vlstrFolioLocal & "|" & ADODB.adBSTR & "|" & strSerielocal & "|" & ADODB.adBSTR & "|" & strNumeroAprobacion & "|" & ADODB.adBSTR & "|" & strAnoAprobacion & "|" & ADODB.adBSTR
    If intFolioUnico = 0 Then
        frsEjecuta_SP "NC|" & IIf(intSerieUnica = 1, -1, vgintNumeroDepartamento) & "|" & str(vlintAumentaFolio), "sp_gnFolios", , , alstrParametrosSalidaNota
    Else
        frsEjecuta_SP "CC|" & IIf(intSerieUnica = 1, -1, vgintNumeroDepartamento) & "|" & str(vlintAumentaFolio), "sp_gnFolios", , , alstrParametrosSalidaNota
    End If
    pObtieneValores alstrParametrosSalidaNota, vllngFoliosRestantes, vlstrFolioLocal, strSerielocal, strNumeroAprobacion, strAnoAprobacion
    '| /CFD
    If vllngFoliosRestantes > 0 Then
        MsgBox "Faltan " & Trim(str(vllngFoliosRestantes)) + " notas y será necesario aumentar folios!", vbOKOnly + vbExclamation, "Mensaje"
    End If
    '|  Si la serie está vacía el SP regresa un espacio en blanco por eso se debe de hacer el TRIM
    strSerie = Trim(strSerielocal)
    strFolio = vlstrFolioLocal
    fstrFolioNota = strSerie & vlstrFolioLocal
    strNumeroAprobacionNota = Trim(strNumeroAprobacion)
    strAnoAprobacionNota = Trim(strAnoAprobacion)
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":fstrFolioNota"))
End Function

Private Sub pPagosCS(ByRef vldblPagoDeducible As Double, ByRef vldblPagoCoaseguro As Double, ByRef vldblPagoCoaseguroAdicional As Double, ByRef vldblPagoCopago As Double, ByRef vldblTipoCambio As Double, ByRef vldblTotalPagarPesos As Double)
On Error GoTo NotificaError
    Dim rsPagosDedyCoa As New ADODB.Recordset

    vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & _
                        "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & _
                        "|" & IIf(optPesos(1).Value, "1", "0") & _
                        "|" & Trim(str(vldblTipoCambio))
    Set rsPagosDedyCoa = frsEjecuta_SP(vgstrParametrosSP, "Sp_PvSelPagosConceptosSeguro")
    Do While Not rsPagosDedyCoa.EOF
        If rsPagosDedyCoa!pago > 0 Then
            If grdFacturaEmpresa.RowData(1) <> -1 Then grdFacturaEmpresa.Rows = grdFacturaEmpresa.Rows + 1

            If rsPagosDedyCoa!tipo = "DE" Then
                vldblPagoDeducible = rsPagosDedyCoa!pago / vldblTipoCambio
                grdFacturaEmpresa.RowData(grdFacturaEmpresa.Rows - 1) = rsConceptosSeguro!CveDeducible    'Concepto para Deducible
                grdFacturaEmpresa.TextMatrix(grdFacturaEmpresa.Rows - 1, 1) = rsConceptosSeguro!ConceptoDeducible
                grdFacturaEmpresa.TextMatrix(grdFacturaEmpresa.Rows - 1, 3) = Format(vldblPagoDeducible, "$ ###,###,###,###.00") 'Abono de DEDUCIBLE
            ElseIf rsPagosDedyCoa!tipo = "CO" Then
                vldblPagoCoaseguro = rsPagosDedyCoa!pago / vldblTipoCambio
                grdFacturaEmpresa.RowData(grdFacturaEmpresa.Rows - 1) = rsConceptosSeguro!CveCoaseguro    'Concepto para Coaseguro
                grdFacturaEmpresa.TextMatrix(grdFacturaEmpresa.Rows - 1, 1) = rsConceptosSeguro!ConceptoCoaseguro
                grdFacturaEmpresa.TextMatrix(grdFacturaEmpresa.Rows - 1, 3) = Format(vldblPagoCoaseguro, "$ ###,###,###,###.00") 'Abono de COASEGURO
            ElseIf rsPagosDedyCoa!tipo = "CA" Then
                vldblPagoCoaseguroAdicional = rsPagosDedyCoa!pago / vldblTipoCambio
                grdFacturaEmpresa.RowData(grdFacturaEmpresa.Rows - 1) = rsConceptosSeguro!CveCoaseguroAdicional     'Concepto para Coaseguro
                grdFacturaEmpresa.TextMatrix(grdFacturaEmpresa.Rows - 1, 1) = rsConceptosSeguro!ConceptoCoaseguroAdicional
                grdFacturaEmpresa.TextMatrix(grdFacturaEmpresa.Rows - 1, 3) = Format(vldblPagoCoaseguroAdicional, "$ ###,###,###,###.00") 'Abono de COASEGURO ADICIONAL
            ElseIf rsPagosDedyCoa!tipo = "CP" Then
                vldblPagoCopago = rsPagosDedyCoa!pago / vldblTipoCambio
                grdFacturaEmpresa.RowData(grdFacturaEmpresa.Rows - 1) = rsConceptosSeguro!CveCopago       'Concepto para CoPago
                grdFacturaEmpresa.TextMatrix(grdFacturaEmpresa.Rows - 1, 1) = rsConceptosSeguro!ConceptoCoPago    'Clave del concepto para el Copago
                grdFacturaEmpresa.TextMatrix(grdFacturaEmpresa.Rows - 1, 3) = Format(vldblPagoCopago, "$ ###,###,###,###.00") 'Abono de COPAGO
            End If
            grdFacturaEmpresa.TextMatrix(grdFacturaEmpresa.Rows - 1, 5) = 0     'Este es el de los Descuentos (aqui no se puede tener descuentos)
            grdFacturaEmpresa.TextMatrix(grdFacturaEmpresa.Rows - 1, 6) = "OP"  'Este es el Tipo del Concepto "OP" = Otros Pagos (especiales, pueden ser Deducible, coaseguro, coaseguro adicional y copago)
            ' Variable de "TotalPesos"  Le RESTAMOS el Deducible, Coaseguro, Coaseguro adicional y el Copago
            vldblTotalPagarPesos = vldblTotalPagarPesos - rsPagosDedyCoa!pago
        End If
        rsPagosDedyCoa.MoveNext
    Loop
    rsPagosDedyCoa.Close
                
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":pPagosCS"))
End Sub

Private Sub pLlenaFacturasParciales()
On Error GoTo NotificaError
    Dim vlintcontador As Integer
    Dim dblIVA As Double

    'Llena el grid con las facturas parciales previamente capturadas
    vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & CStr(vgintClaveEmpresaContable) & "|0"
    Set rsTemp = frsEjecuta_SP(vgstrParametrosSP, "Sp_PvSelFacturasParciales")
    While Not rsTemp.EOF
        With MSFGFacturasParciales
            If MSFGFacturasParciales.RowData(1) <> -1 Then
                .Rows = .Rows + 1
                .Row = .Rows - 1
            End If
            .Row = .Rows - 1
            .RowData(.Row) = 0
            
            'Pone el renglon azul
            For vlintcontador = 3 To .Cols - 1
                .Col = vlintcontador
                MSFGFacturasParciales.CellForeColor = &H800000 'Azul
                .CellFontBold = False
            Next vlintcontador
            
            .TextMatrix(.Row, 0) = txtMovimientoPaciente.Text
            .TextMatrix(.Row, 1) = IIf(OptTipoPaciente(0).Value, "I", "E")
            .TextMatrix(.Row, 2) = rsTemp!FacturadoA
            .TextMatrix(.Row, 3) = Format(rsTemp!Subtotal, "$ ###,###,###,##0.00")
            .TextMatrix(.Row, 4) = Format(rsTemp!IVA, "$ ###,###,###,##0.00")
            .TextMatrix(.Row, 5) = Format(rsTemp!Total, "$ ###,###,###,##0.00")
            .TextMatrix(.Row, 6) = rsTemp!Subtotal
            .TextMatrix(.Row, 7) = rsTemp!IVA
            .TextMatrix(.Row, 8) = rsTemp!Total
            .TextMatrix(.Row, 9) = IIf(rsTemp!TipoDeCambio > 0, "x", "")
            .Col = 9
            .CellFontBold = True
            .TextMatrix(.Row, 10) = rsTemp!Total
            .TextMatrix(.Row, 11) = "1" 'Esta celda indica si está grabada previamente o si solo está en memoria
            .TextMatrix(.Row, 12) = rsTemp!CveConceptoFacturacion
            .TextMatrix(.Row, 13) = rsTemp!Folio
            .TextMatrix(.Row, 14) = Format(rsTemp!dtmFechahora, "dd/mm/yyyy")
            .TextMatrix(.Row, 15) = Trim(rsTemp!ConceptoFacturacion)
            .TextMatrix(.Row, 16) = rsTemp!ImporteGravado
            .TextMatrix(.Row, 17) = Format(rsTemp!Subtotal - Format(rsTemp!ImporteGravado, "############.00"), "############.00")
            .TextMatrix(.Row, 18) = Trim(rsTemp!ConceptoSeguro)
        End With
        rsTemp.MoveNext
    Wend
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":pLlenafacturasParciales"))
End Sub

Private Function fdblImportesSeguro() As Double
On Error GoTo NotificaError

    fdblImportesSeguro = 0
    
    If Val(Format(txtExcedenteSumaAsegurada.Text, "")) > 0 Then
        fdblImportesSeguro = fdblImportesSeguro + Format(Val(Format(txtExcedenteSumaAsegurada.Text, "")), "############.00")
    End If
    ' Deducible
    If Val(Format(txtDeducible.Text, "")) > 0 And chkFacturaDeducible.Value = 1 Then
        fdblImportesSeguro = fdblImportesSeguro + Format(Val(Format(txtDeducible.Text, "")), "############.00")
    End If
    ' Coaseguro
    If Val(Format(txtCoaseguro.Text, "")) > 0 And chkFacturaCoaseguro.Value = 1 Then
        fdblImportesSeguro = fdblImportesSeguro + Format(Val(Format(txtCoaseguro.Text, "")), "############.00")
    End If
    ' Coaseguro médico
    If Val(Format(txtTotalCoaseguroMedico.Text, "")) > 0 And chkFacturaCoaseguroMedico.Value = 1 Then
        fdblImportesSeguro = fdblImportesSeguro + Format(Val(Format(txtTotalCoaseguroMedico.Text, "")), "############.00")
    End If
    ' Coaseguro adicional
    If Val(Format(txtCoaseguroAdicional.Text, "")) > 0 And chkFacturaCoaseguroAdicional.Value = 1 Then
        fdblImportesSeguro = fdblImportesSeguro + Format(Val(Format(txtCoaseguroAdicional.Text, "")), "############.00")
    End If
    ' Copago
    If Val(Format(txtCopago.Text, "")) > 0 And chkFacturaCopago.Value = 1 Then
        fdblImportesSeguro = fdblImportesSeguro + Format(Val(Format(txtCopago.Text, "")), "############.00")
    End If
    
    'Si lo que se le va a facturar al paciente por CS es mayor a la cuenta
    
    ldblTotalCargosSINExcluidos = Val(Format(Val(Format(txtHonorarios.Text, "")) + ldblTotalCargosHospital, "")) - ldblTotalCargosExcluidos
    If fdblImportesSeguro > (ldblTotalCargosSINExcluidos - Val(Format(txtHonorarios.Text, ""))) Then
        blnExcedenteHonorarios = True
        
        'Excedente
        dblExcedenteHonorarios = fdblImportesSeguro - (CDbl(Val(Format(txtTotalSinExcluidos.Text, ""))) - CDbl(Val(Format(txtHonorarios.Text, ""))))
        If dblExcedenteHonorarios = 0 And fdblImportesSeguro = 0 Then
            dblFactorHonorarios = 1
        Else
            dblFactorHonorarios = dblExcedenteHonorarios / fdblImportesSeguro
        End If

        dblExcedenteH = Format(Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")) * dblFactorHonorarios, "############.00")
        
        'Deducible
        dblCantidadFactorExHonorarios = Val(Format(txtExcedenteSumaAsegurada.Text, "############.00"))
        dblFactorHonorarios = (dblExcedenteHonorarios - dblExcedenteH) / IIf((fdblImportesSeguro - dblCantidadFactorExHonorarios) = 0, 1, (fdblImportesSeguro - dblCantidadFactorExHonorarios))

        dblDeducibleH = Format(Val(Format(txtDeducible.Text, "############.00")) * dblFactorHonorarios, "############.00")
        
        'Coaseguro
        dblCantidadFactorExHonorarios = dblCantidadFactorExHonorarios + Val(Format(txtDeducible.Text, "############.00"))
        dblFactorHonorarios = (dblExcedenteHonorarios - (dblExcedenteH + dblDeducibleH)) / IIf((fdblImportesSeguro - dblCantidadFactorExHonorarios) = 0, 1, (fdblImportesSeguro - dblCantidadFactorExHonorarios))

        dblCoaseguroH = Format(IIf(intCoaseguroPorFactura = 1, Val(Format(txtCantidadMaximaCO.Text, "###############.00")), Val(Format(txtCoaseguro.Text, "###############.00"))) * dblFactorHonorarios, "############.00")

        'Coaseguro médico
        dblCantidadFactorExHonorarios = dblCantidadFactorExHonorarios + IIf(intCoaseguroPorFactura = 1, Val(Format(txtCantidadMaximaCO.Text, "###############.00")), Val(Format(txtCoaseguro.Text, "###############.00")))
        dblFactorHonorarios = (dblExcedenteHonorarios - (dblExcedenteH + dblDeducibleH + dblCoaseguroH)) / IIf((fdblImportesSeguro - dblCantidadFactorExHonorarios) = 0, 1, (fdblImportesSeguro - dblCantidadFactorExHonorarios))

        dblCoaseguroMH = Format(Val(Format(txtTotalCoaseguroMedico.Text, "############.00")) * dblFactorHonorarios, "############.00")
        
        'Coaseguro adicional
        dblCantidadFactorExHonorarios = dblCantidadFactorExHonorarios + Val(Format(txtTotalCoaseguroMedico.Text, "############.00"))
        dblFactorHonorarios = (dblExcedenteHonorarios - (dblExcedenteH + dblDeducibleH + dblCoaseguroH + dblCoaseguroMH)) / IIf((fdblImportesSeguro - dblCantidadFactorExHonorarios) = 0, 1, (fdblImportesSeguro - dblCantidadFactorExHonorarios))
        
        dblCoaseguroAH = Format(Val(Format(txtCoaseguroAdicional.Text, "############.00")) * dblFactorHonorarios, "############.00")
        
        'Copago
        dblCantidadFactorExHonorarios = dblCantidadFactorExHonorarios + Val(Format(txtCoaseguroAdicional.Text, "############.00"))
        dblFactorHonorarios = (dblExcedenteHonorarios - (dblExcedenteH + dblDeducibleH + dblCoaseguroH + dblCoaseguroMH + dblCoaseguroAH)) / IIf((fdblImportesSeguro - dblCantidadFactorExHonorarios) = 0, 1, (fdblImportesSeguro - dblCantidadFactorExHonorarios))
        
        dblCopagoH = Format(Val(Format(txtCopago.Text, "############.00")) * dblFactorHonorarios, "############.00")

        fdblImportesSeguro = fdblImportesSeguro - dblExcedenteHonorarios
    End If
        
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":fdblImportesSeguro"))
End Function

Private Sub pIVACS(dblSumaImportesSeguro As Double)
On Error GoTo NotificaError
    Dim dblIVA As Double
    Dim dblImportes As Double
    Dim dblDescuentoCS As Double
    Dim dblFactorCS As Double
    Dim dblIVACargos As Double

    'Calcular el IVA de los conceptos
    'Aqui no uso el Factor porque se supone que es 1 cuando hay excedente por honorarios
    dblIVA = 0
    dblImportes = 0
    dblDescuentoCS = 0
    dblFactorCS = 0
    
    If Not blnCalcularEnBaseACargos Then
        'IVA Excedente
        dblDescuentoCS = Format(fdblDescuentoConceptoSeguro(lngClaveEX, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")) - dblExcedenteH, "###############.00"), "EX"), "###############.00")
        dblIVAEX = (Format(dblIVACargosConvenio, "############.00") * ((Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")) - dblExcedenteH - dblDescuentoCS) / IIf(dblSumaImportesSeguro = 0, 1, dblSumaImportesSeguro)))
        dblIVAEXE = (Format(dblIVACargosConvenio, "############.00") * ((Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")) - dblExcedenteH) / IIf(dblSumaImportesSeguro = 0, 1, dblSumaImportesSeguro)))
        
        'IVA Deducible
        dblIVA = Format(dblIVAEXE, "############.00")
        dblImportes = Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")) - dblExcedenteH
        dblDescuentoCS = Format(fdblDescuentoConceptoSeguro(lngClaveDE, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(Val(Format(txtDeducible.Text, "############.00")) - dblDeducibleH, "###############.00"), "DE"), "###############.00")
        dblFactorCS = (Val(Format(txtDeducible.Text, "############.00")) - dblDeducibleH - dblDescuentoCS) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
        
        dblIVADE = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * dblFactorCS
        dblIVADEE = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * (Val(Format(txtDeducible.Text, "############.00")) - dblDeducibleH) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
        
        'IVA Coaseguro
        dblIVA = dblIVA + Format(dblIVADEE, "############.00")
        dblImportes = dblImportes + Val(Format(txtDeducible.Text, "############.00")) - dblDeducibleH
        dblDescuentoCS = Format(fdblDescuentoConceptoSeguro(lngClaveCO, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(IIf(intCoaseguroPorFactura = 1, Val(Format(txtCantidadMaximaCO.Text, "###############.00")), Val(Format(txtCoaseguro.Text, "###############.00"))) - dblCoaseguroH, "###############.00"), "CO"), "###############.00")
        
        dblFactorCS = (IIf(intCoaseguroPorFactura = 1, Val(Format(txtCantidadMaximaCO.Text, "###############.00")), Val(Format(txtCoaseguro.Text, "###############.00"))) - dblCoaseguroH - dblDescuentoCS) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
        
        dblIVACO = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * dblFactorCS
        dblIVACOE = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * (IIf(intCoaseguroPorFactura = 1, Val(Format(txtCantidadMaximaCO.Text, "###############.00")), Val(Format(txtCoaseguro.Text, "###############.00"))) - dblCoaseguroH) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
        
        'IVA Coaseguro médico
        dblIVA = dblIVA + Format(dblIVACOE, "############.00")
        dblImportes = dblImportes + IIf(intCoaseguroPorFactura = 1, Val(Format(txtCantidadMaximaCO.Text, "###############.00")), Val(Format(txtCoaseguro.Text, "###############.00"))) - dblCoaseguroH
        dblDescuentoCS = Format(fdblDescuentoConceptoSeguro(lngClaveCM, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(Val(Format(txtCoaseguroMedico.Text, "############.00")) - dblCoaseguroMH, "###############.00"), "CM"), "###############.00")
        dblFactorCS = (Val(Format(txtCoaseguroMedico.Text, "############.00")) - dblCoaseguroMH - dblDescuentoCS) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
        
        dblIVACM = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * dblFactorCS
        dblIVACME = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * (Val(Format(txtCoaseguroMedico.Text, "############.00")) - dblCoaseguroMH) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
            
        'IVA Coaseguro Adicional
        dblIVA = dblIVA + Format(dblIVACME, "############.00")
        dblImportes = dblImportes + Val(Format(txtCoaseguroMedico.Text, "############.00")) - dblCoaseguroMH
        
        dblDescuentoCS = Format(fdblDescuentoConceptoSeguro(lngClaveCA, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(Val(Format(txtCoaseguroAdicional.Text, "############.00")) - dblCoaseguroAH, "###############.00"), "CA"), "###############.00")
        dblFactorCS = (Val(Format(txtCoaseguroAdicional.Text, "############.00")) - dblCoaseguroAH - dblDescuentoCS) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
        
        dblIVACA = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * dblFactorCS
        dblIVACAE = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * (Val(Format(txtCoaseguroAdicional.Text, "############.00")) - dblCoaseguroAH) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
    
        'IVA Copago
        dblIVA = dblIVA + Format(dblIVACAE, "############.00")
        dblImportes = dblImportes + Val(Format(txtCoaseguroAdicional.Text, "############.00")) - dblCoaseguroAH
        dblDescuentoCS = Format(fdblDescuentoConceptoSeguro(lngClaveCP, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(Val(Format(txtCopago.Text, "############.00")) - dblCopagoH, "###############.00"), "CP"), "###############.00")
        dblFactorCS = (Val(Format(txtCopago.Text, "############.00")) - dblCopagoH - dblDescuentoCS) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
        
        dblIVACP = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * dblFactorCS
        dblIVACPE = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * (Val(Format(txtCopago.Text, "############.00")) - dblCopagoH) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
    Else
    'Los cálculos se hacen en base a los cargos seleccionados
        'IVA Excedente
        dblDescuentoCS = Format(fdblDescuentoConceptoSeguro(lngClaveEX, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")) - dblExcedenteH, "###############.00"), "EX"), "###############.00")
        dblIVAEX = (Format(dblIVACargosConvenio, "############.00") * ((Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")) - dblExcedenteH - dblDescuentoCS) / IIf(dblSumaImportesSeguro = 0, 1, dblSumaImportesSeguro)))
        dblIVAEXE = (Format(dblIVACargosConvenio, "############.00") * ((Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")) - dblExcedenteH) / IIf(dblSumaImportesSeguro = 0, 1, dblSumaImportesSeguro)))
        
        'IVA Deducible
        dblIVA = Format(dblIVAEXE, "############.00")
        dblImportes = Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")) - dblExcedenteH
        dblDescuentoCS = Format(fdblDescuentoConceptoSeguro(lngClaveDE, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(Val(Format(txtDeducible.Text, "############.00")) - dblDeducibleH, "###############.00"), "DE"), "###############.00")
        dblFactorCS = (Val(Format(txtDeducible.Text, "############.00")) - dblDeducibleH - dblDescuentoCS) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
        
        dblIVADE = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * dblFactorCS
        dblIVADEE = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * (Val(Format(txtDeducible.Text, "############.00")) - dblDeducibleH) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
        
        'IVA Coaseguro
        dblIVA = dblIVA + Format(dblIVADEE, "############.00")
        dblImportes = dblImportes + Val(Format(txtDeducible.Text, "############.00")) - dblDeducibleH
        dblDescuentoCS = Format(fdblDescuentoConceptoSeguro(lngClaveCO, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(IIf(intCoaseguroPorFactura = 1, Val(Format(txtCantidadMaximaCO.Text, "###############.00")), Val(Format(txtCoaseguro.Text, "###############.00"))) - dblCoaseguroH, "###############.00"), "CO"), "###############.00")
        dblFactorCS = (IIf(intCoaseguroPorFactura = 1, Val(Format(txtCantidadMaximaCO.Text, "###############.00")), Val(Format(txtCoaseguro.Text, "###############.00"))) - dblCoaseguroH - dblDescuentoCS) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
        
        dblIVACO = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * dblFactorCS
        dblIVACOE = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * (IIf(intCoaseguroPorFactura = 1, Val(Format(txtCantidadMaximaCO.Text, "###############.00")), Val(Format(txtCoaseguro.Text, "###############.00"))) - dblCoaseguroH) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
        
        'IVA Coaseguro médico
        dblIVA = dblIVA + Format(dblIVACOE, "############.00")
        dblImportes = dblImportes + IIf(intCoaseguroPorFactura = 1, Val(Format(txtCantidadMaximaCO.Text, "###############.00")), Val(Format(txtCoaseguro.Text, "###############.00"))) - dblCoaseguroH
        dblDescuentoCS = Format(fdblDescuentoConceptoSeguro(lngClaveCM, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(Val(Format(txtCoaseguroMedico.Text, "############.00")) - dblCoaseguroMH, "###############.00"), "CM"), "###############.00")
        dblFactorCS = (Val(Format(txtCoaseguroMedico.Text, "############.00")) - dblCoaseguroMH - dblDescuentoCS) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
        
        dblIVACM = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * dblFactorCS
        dblIVACME = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * (Val(Format(txtCoaseguroMedico.Text, "############.00")) - dblCoaseguroMH) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
            
        'IVA Coaseguro Adicional
        dblIVA = dblIVA + Format(dblIVACME, "############.00")
        dblImportes = dblImportes + Val(Format(txtCoaseguroMedico.Text, "############.00")) - dblCoaseguroMH
        
        dblDescuentoCS = Format(fdblDescuentoConceptoSeguro(lngClaveCA, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(Val(Format(txtCoaseguroAdicional.Text, "############.00")) - dblCoaseguroAH, "###############.00"), "CA"), "###############.00")
        dblFactorCS = (Val(Format(txtCoaseguroAdicional.Text, "############.00")) - dblCoaseguroAH - dblDescuentoCS) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
        
        dblIVACA = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * dblFactorCS
        dblIVACAE = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * (Val(Format(txtCoaseguroAdicional.Text, "############.00")) - dblCoaseguroAH) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
    
        'IVA Copago
        dblIVA = dblIVA + Format(dblIVACAE, "############.00")
        dblImportes = dblImportes + Val(Format(txtCoaseguroAdicional.Text, "############.00")) - dblCoaseguroAH
        dblDescuentoCS = Format(fdblDescuentoConceptoSeguro(lngClaveCP, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(Val(Format(txtCopago.Text, "############.00")) - dblCopagoH, "###############.00"), "CP"), "###############.00")
        dblFactorCS = (Val(Format(txtCopago.Text, "############.00")) - dblCopagoH - dblDescuentoCS) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
        
        dblIVACP = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * dblFactorCS
        dblIVACPE = (Format(dblIVACargosConvenio, "############.00") - dblIVA) * (Val(Format(txtCopago.Text, "############.00")) - dblCopagoH) / IIf((dblSumaImportesSeguro - dblImportes) = 0, 1, (dblSumaImportesSeguro - dblImportes))
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":pIVACS"))
End Sub

Private Sub pLlenaFacturasParticulares(grdGrid As MSHFlexGrid)
    Dim chrTipoConceptoParcial As String
    Dim vlaryTempParciales() As String          'Guarda temporalmente las facturas parciales agregadas
    Dim vlstrSentencia As String
    
    Dim rsConcepto As New ADODB.Recordset
    Dim rsIVAPaquete As New ADODB.Recordset
    
    Dim vlblnFacturasSinGrabar As Boolean
    Dim vlblnconceptoconiva As Boolean
    Dim blnExistePaquete As Boolean             'Bandera para ver si ya existe el paquete en la cuenta
    Dim vlblnBand As Boolean
    
    Dim vldblSubtotalFacturaParcial As Double
    Dim dblSubtotalFacturaParcialP As Double    'Subtotal de la factura parcial en pesos
    Dim dblImporteGravaParticular As Double     'Para el importegravado de los pacientes particulares
    Dim vldblIVAFacturaParcial As Double
    Dim dblIVAFacturaParcialP As Double         'IVA de la factura parcial en pesos
    Dim vldblTotalPagarPesos As Double          'Variable para calcular el total en Pesos de las facturas de Paciente y empresa
    Dim vldblDescuentosCargo As Double          'Descuentos originales del cargo
    Dim vllngCantidadCargo As Double            'Cantidad original del cargo
    Dim vldblPrecioPaquete As Double            'Precio del paquete
    Dim vldblTotDescuento As Double
    Dim vldblPrecioCargo As Double              'Precio original del Cargo
    Dim vldblIVAPaquete As Double               'IVA del paquete
    Dim dblIVAPacienteP As Double               'IVA del paciente en pesos
    Dim vldblTipoCambio As Double               'El tipo de Cambio. Si es en pesos su valor es 1
    Dim dblSTGravadoFP As Double
    Dim dblDescuentosP As Double                'Descuentos en pesos
    Dim vldblCantidad As Double                 'Esta es una temporal que utilizo para varias cosas
    Dim vldblSubtotal As Double
    Dim vldblSubtotalPesos As Double
    Dim vldblIVACargo As Double                 'IVA original del cargo
    Dim vltipocambio As Double                  'Para las facturas parciales
    Dim dblSubTotalP As Double                  'Subtotal en pesos
    
    Dim vllngCantidadPaquete As Long            'Cantidad que esta dentro del paquete
    Dim vllngConceptoFactura As Long            'Concepto de facturación que puede ser del cargo o del Paquete
    Dim vllngConceptoFact As Long
    Dim lngCvePaquete As Long                   'Clave del paquete asignado al cargo
    
    Dim vlintPosicionArreglo As Integer
    Dim intTotalPaquetes As Integer
    Dim intConceptoNuevo As Integer             'Indica si el concepto de la factura parcial se encuientra o en los conceptos de la factura base
    Dim vlintPosicion2 As Integer               'Para la posicion de donde se encuentra un cargo según los el Concepto y el Departamentos que cargo
    Dim vlintPosicion As Integer                'Para la posicion de donde se encuentra un cargo según los conceptos de facturación
    Dim vlintcontador As Integer
    Dim vlintContadorCargos As Integer
    Dim vlintConta2 As Integer                  'Igual que el de arriba pero secundario
    
    Dim vlExisteConcepto As Boolean
    Dim vlintRenglon As Integer
    Dim vlintRenglonCargos As Integer
    
    Dim dblImporteFactura As Double
    Dim dblImporteFacturaPesos As Double
    
    Dim dblDescuentoFactura As Double
    Dim dblDescuentoFacturaPesos As Double
    
    '--------------------------------------------------
    'Tipos de conceptos en la factura (Campo 6 del Grid de las facturas)
    '--------------------------------------------------
    ' NO    = Concepto normal (Conceptos derivados de los cargos del paciente)
    ' OC    = Otros Conceptos (Conceptos para facturar Deducible, Coaseguro, Copago y Excedente en Suma asegurada)
    ' DE    = Descuentos Normales (Descuentos derivados de los cargos del paciente)
    ' OD    = Otros Descuentos (Descuentos para la cuenta de la empresa en el caso de que se factura Deducible,Coaseguro, Copago y/o el Excedente en Suma asegurada)
    ' PA    = Pagos normales (Generados como abonos a la cuenta del paciente)
    ' OP    = Otros Pagos (Pagos por concepto de Deducible, Coaseguro y/o Copago)
    '--------------------------------------------------
    
    'Inicialización de variables y controles
    ReDim audtPaquetesEnCuenta(0)                   'Inicialización del arreglo para relacionar cuentas con paquetes
    ReDim aCPCargosPoliza(0)                        'Inicalización del arreglo para llenar la póliza
    ReDim alngNotasPaciente(0)
    
    pLimpiaGrid grdGrid
    
    ldblHonorariosAFacturar = 0
    
    vldblsubtotalNogravado = 0
    vldblsubtotalExento = 0
    vldbldescuentogravado = 0
    vldbldescuentoexento = 0
    vldblsubtotalgravado = 0
    vldblsubtotalgravadoSinRound = 0
    vldbldescuentototal = 0

    dblIVAPaciente = 0
    ldblIVACargosSelConvenio = 0                     'Esta variable es solo para el IVA de los cargos seleccionados de la cuenta de la empresa
    ldblIVACargosSelConvenioExDE = 0
    dblNotasCreditoPaciente = 0
    dblNotasCreditoCS = 0
    dblIVANotasCreditoCS = 0
    
    dblSubtotalFacturaParcialP = 0
    dblSubtotalGravadoP = 0
    dblSubTotalP = 0
    vldblsubtotalgravadoSinFormat = 0
    dblSubtotalGravadoPSinFormat = 0
    
    dblIVAFacturaParcialP = 0
    dblIVAPacienteP = 0
    dblIVAP = 0
    
    ldblDescuentosFactura = 0
    dblDescuentosP = 0
    
    vldblTipoCambio = IIf(optPesos(0).Value, 1, fdblTipoCambio(fdtmServerFecha, "V"))
    
    txtFPDescuentos.Text = Format(0, "$ ###,###,###,###.00")
    txtFPSubtotal.Text = Format(0, "$ ###,###,###,###.00")
    txtFPIVA.Text = Format(0, "$ ###,###,###,###.00")
    txtFPTotalFactura.Text = Format(0, "$ ###,###,###,###.00")
    txtFPPagos.Text = Format(0, "$ ###,###,###,###.00")
    txtFPNotasCredito.Text = Format(0, "$ ###,###,###,###.00")
    txtFPTotalPagar.Text = Format(0, "$ ###,###,###,###.00")
    
    ldblImporteNoGravaSelConvenio = 0
    ldblImporteExentoSelConvenio = 0
    vldblTotalPagarPesos = 0
    ldblDescuentos = 0
    ldblDescuentosExentos = 0
    dblDescuentosP = 0
    
    ldblImporteNoGravaSelConvenioExDE = 0
    
    'Excluidos de descuento especial
    dblImporteFacturaExcluidosDE = 0
    dblDescuentoFacturaExcluidoDE = 0
    
    '***************************************************************************************************
    ' 1).- RECORRIDO DE CARGOS SELECCIONADOS PARA FACTURAR
    '***************************************************************************************************
    pLlenaCargosAFacturar grdGrid, dblDescuentosP, vldblTotalPagarPesos
    
    vldbldescuentototal = Format(ldblDescuentos, "")
    vldbldescuentogravado = Format(vldbldescuentogravado, "")
    vldbldescuentoexento = Format(ldblDescuentosExentos, "")
    
    dblIVAPaciente = vldblsubtotalgravado * vgdblCantidadIvaGeneral / 100
    dblIVAPacienteP = dblSubtotalGravadoP * vgdblCantidadIvaGeneral / 100
        
    '***************************************************************************************************
    ' 2).- DESCUENTOS
    '***************************************************************************************************
    If ldblDescuentos > 0 Then
        grdGrid.Rows = grdGrid.Rows + 1
        grdGrid.RowData(grdGrid.Rows - 1) = -2 'Clave interna para descuentos
        grdGrid.TextMatrix(grdGrid.Rows - 1, 1) = "DESCUENTOS"
        grdGrid.TextMatrix(grdGrid.Rows - 1, 3) = Format(((ldblDescuentos)), "$ ###,###,###,###.00") 'Cantidad Descuentos
        grdGrid.TextMatrix(grdGrid.Rows - 1, 11) = Format(((dblDescuentosP)), "############.00")  'Cantidad Descuentos en pesos
        grdGrid.TextMatrix(grdGrid.Rows - 1, 5) = 0
        grdGrid.TextMatrix(grdGrid.Rows - 1, 6) = "DE"  'Descuentos normales
    End If
    
    '***************************************************************************************************
    ' 3).- PAGOS
    '***************************************************************************************************
    If Val(Format(txtPagos.Text, "")) <> 0 Then
        If grdGrid.RowData(1) <> -1 Then grdGrid.Rows = grdGrid.Rows + 1
        grdGrid.RowData(grdGrid.Rows - 1) = 0 'Los pagos no tienen numero de concepto
        grdGrid.TextMatrix(grdGrid.Rows - 1, 1) = "PAGOS"
        vldblCantidad = Format((Val(Format(txtPagos.Text, ""))), "###############.00")
        grdGrid.TextMatrix(grdGrid.Rows - 1, 3) = IIf(optPesos(0).Value, Format(((vldblCantidad)), "############.00"), Format(ConvertirDolaresACantidad(vldblCantidad), "$ ###,###,###,###.00"))  'Cantidad pagos
        grdGrid.TextMatrix(grdGrid.Rows - 1, 11) = Format(((vldblCantidad)), "############.00")   'Cantidad del pago en pesos
        grdGrid.TextMatrix(grdGrid.Rows - 1, 5) = 0
        grdGrid.TextMatrix(grdGrid.Rows - 1, 6) = "PA" 'Pago normal
        vldblTotalPagarPesos = vldblTotalPagarPesos - Val(Format(txtPagos.Text, ""))
    End If
    
    '***************************************************************************************************
    ' EXCEDENTES POR USO DE GRUPOS DE CARGOS
    '***************************************************************************************************
    ' Guarda el renglon actual de los cargos y los conceptos de facturacion
    vlintRenglon = grdGrid.Row
    vlintRenglonCargos = grdCargos.Row
    If Not rsExcedentes.EOF Then
        rsExcedentes.MoveFirst
        Do While Not rsExcedentes.EOF ' Recorre los excedentes generados
            grdCargos.Row = 1
            For vlintContadorCargos = 1 To grdCargos.Rows - 1
                If grdCargos.RowData(vlintContadorCargos) = rsExcedentes!IntNumCargo And grdCargos.TextMatrix(vlintContadorCargos, 0) = "*" Then
                    vlExisteConcepto = False
                    For vlintcontador = 1 To grdGrid.Rows - 1
                        If grdGrid.RowData(vlintcontador) = rsExcedentes!smicveconcepto Then
                            grdGrid.TextMatrix(vlintcontador, 2) = Format(grdGrid.TextMatrix(vlintcontador, 2) + (rsExcedentes!mnyexcedente / vldblTipoCambio), "$ ###,###,###,###.00")
                            grdGrid.TextMatrix(vlintcontador, 9) = grdGrid.TextMatrix(vlintcontador, 9) + (rsExcedentes!mnyexcedente / vldblTipoCambio)
                            grdGrid.TextMatrix(vlintcontador, 10) = Format(grdGrid.TextMatrix(vlintcontador, 10) + (rsExcedentes!mnyexcedente / vldblTipoCambio), "###############.00")
                            grdGrid.TextMatrix(vlintcontador, 12) = grdGrid.TextMatrix(vlintcontador, 12) + (rsExcedentes!mnyexcedente / vldblTipoCambio)
                            vlExisteConcepto = True
                            Exit For
                        End If
                    Next vlintcontador
                    
                    If vlExisteConcepto = False Then
                        If grdGrid.RowData(grdGrid.Rows - 1) <> -1 Then
                            grdGrid.Rows = grdGrid.Rows + 1
                        End If
                        grdGrid.RowData(grdGrid.Rows - 1) = rsExcedentes!smicveconcepto
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 1) = rsExcedentes!chrdescripcionconcept
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 2) = Format(rsExcedentes!mnyexcedente / vldblTipoCambio, "$ ###,###,###,###.00")
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 9) = rsExcedentes!mnyexcedente / vldblTipoCambio
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 4) = 0
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 5) = 0
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 6) = "OC"
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 7) = ""
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 8) = 0
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 10) = Format(rsExcedentes!mnyexcedente, "###############.00")
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 12) = rsExcedentes!mnyexcedente
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 13) = 0
                    End If
                End If
            Next vlintContadorCargos
            rsExcedentes.MoveNext
        Loop
        rsExcedentes.MoveFirst
    End If
    grdCargos.Row = vlintRenglonCargos
    grdGrid.Row = vlintRenglon
    
    '***************************************************************************************************
    ' 4).- Cálculo de totales (DESPUES DE DESCUENTOS ESPECIALES)
    '***************************************************************************************************
    vldblSubtotal = 0
    vldblSubtotalPesos = 0
    ldblDescuentos = 0
    ldblDescuentosExentos = 0
    dblDescuentosP = 0
    dblSubTotalP = 0
    dblImporteGravaParticular = 0
    dblImporteFactura = 0
    dblImporteFacturaPesos = 0
    dblDescuentoFactura = 0
    dblDescuentoFacturaPesos = 0
    
    For vlintcontador = 1 To grdGrid.Rows - 1
        'Cargos
        If Val(Format(grdGrid.TextMatrix(vlintcontador, 2), "")) > 0 Then
            vldblSubtotal = vldblSubtotal + Val(Format(grdGrid.TextMatrix(vlintcontador, 2), ""))
            dblImporteFactura = dblImporteFactura + Val(Format(grdGrid.TextMatrix(vlintcontador, 2), ""))
            dblImporteFacturaPesos = dblImporteFacturaPesos + Val(Format(grdGrid.TextMatrix(vlintcontador, 10), ""))
            dblSubTotalP = dblSubTotalP + Val(Format(grdGrid.TextMatrix(vlintcontador, 10), ""))
            'Si el concepto Grava, sumar a dblImporteGravaParticular (en pesos)
            dblImporteGravaParticular = IIf(Val(Format(grdGrid.TextMatrix(vlintcontador, 13), "")) > 0, dblImporteGravaParticular + Val(Format(grdGrid.TextMatrix(vlintcontador, 10), "")), dblImporteGravaParticular)
       'Abonos
        ElseIf grdGrid.TextMatrix(vlintcontador, 6) = "DE" Or grdGrid.TextMatrix(vlintcontador, 6) = "OD" Then
            vldblSubtotal = vldblSubtotal - Val(Format(grdGrid.TextMatrix(vlintcontador, 3), ""))
            dblDescuentoFactura = dblDescuentoFactura + Val(Format(grdGrid.TextMatrix(vlintcontador, 3), ""))
            dblDescuentoFacturaPesos = dblDescuentoFacturaPesos + Val(Format(grdGrid.TextMatrix(vlintcontador, 11), ""))
            ldblDescuentos = ldblDescuentos + Val(Format(grdGrid.TextMatrix(vlintcontador, 3), ""))
            dblSubTotalP = dblSubTotalP - Val(Format(grdGrid.TextMatrix(vlintcontador, 11), ""))
            dblDescuentosP = dblDescuentosP + Val(Format(grdGrid.TextMatrix(vlintcontador, 11), ""))
        End If
        
        'Descuentos y excedente en suma asegurada
        txtFPDescuentos.Text = Format(ldblDescuentos, "$ ###,###,###,###.00")

        ldblDescuentosFactura = ldblDescuentos
        
        'Sólo los Particulares o excluidos tienen PAGOS
        If grdGrid.TextMatrix(vlintcontador, 6) = "PA" Then 'PAGOS
            If grdGrid.Name = "grdFacturaPaciente" Then
                txtFPPagos.Text = grdGrid.TextMatrix(vlintcontador, 3)
            Else
                txtFEPagos.Text = grdGrid.TextMatrix(vlintcontador, 3)
            End If
        End If
    Next vlintcontador
    
    'Si es paciente particular se calcula el importeGravado
    dblSubtotalGravadoP = Format(dblImporteGravaParticular, "############.00") - Format(vldbldescuentogravado * vldblTipoCambio, "############.00")
    vldblsubtotalgravado = Format(dblImporteGravaParticular / vldblTipoCambio, "############.00") - Format(vldbldescuentogravado, "############.00")
    vldblsubtotalgravadoSinRound = (dblImporteGravaParticular / vldblTipoCambio) - vldbldescuentogravado
    
    'Por aquello de los centavitos voladores
    'Subtotal - Subtotal gravado
    If Format(Abs(vldblSubtotal - vldblsubtotalgravado), "############.00") > 0 And Format(Abs(vldblSubtotal - vldblsubtotalgravado), "############.00") <= 0.02 Then
        vldblsubtotalgravado = vldblSubtotal
        dblSubtotalGravadoP = dblSubTotalP
    End If
    
    'Subtotal gravado - Descuento gravado
    If Format(Abs(vldblsubtotalgravado - Format(vldbldescuentogravado, "############.00")), "############.00") > 0 And Format(Abs(vldblsubtotalgravado - Format(vldbldescuentogravado, "############.00")), "############.00") <= 0.02 Then
        vldbldescuentogravado = vldblsubtotalgravado
    End If
    
    dblIVAPaciente = vldblsubtotalgravado * vgdblCantidadIvaGeneral / 100
    dblIVAPacienteP = dblSubtotalGravadoP * vgdblCantidadIvaGeneral / 100
    
    '***************************************************************************************************
    ' 5).- FACTURAS PARCIALES
    '***************************************************************************************************
    ReDim vlaryTempParciales(19, 0)
    vlaryTempParciales(0, 0) = -1
    
    MSFGFacturasParciales.Row = 1
    vlblnFacturasSinGrabar = False
    vlintConta2 = 0
    
    For vlintcontador = 1 To MSFGFacturasParciales.Rows - 1
        'Llena el arreglo con datos del grid de facturas parciales (datos de la factura parcial a generar)
        If MSFGFacturasParciales.RowData(1) <> -1 And MSFGFacturasParciales.RowData(MSFGFacturasParciales.Row) <> 0 And Val(MSFGFacturasParciales.TextMatrix(MSFGFacturasParciales.Row, 11)) = 0 Then
            vlaryTempParciales(0, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 0)         'Número de cuenta?
            vlaryTempParciales(1, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 1)         'Tipo de paciente
            vlaryTempParciales(2, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 2)         'Facturado a
            vlaryTempParciales(3, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 3)         'Subtotal
            vlaryTempParciales(4, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 4)         'IVA
            vlaryTempParciales(5, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 5)         'Total
            vlaryTempParciales(6, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 6)         'Subtotal sin formato
            vlaryTempParciales(7, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 7)         'IVA sin formato
            vlaryTempParciales(8, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 8)         'Total sin formato
            vlaryTempParciales(9, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 9)         'Moneda x:dólares
            vlaryTempParciales(10, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 10)     'Total
            vlaryTempParciales(11, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 11)     'Indica si está grabada o en meoria 0:Memoria 1:Grabada
            vlaryTempParciales(12, vlintConta2) = MSFGFacturasParciales.RowData(vlintcontador)            'Clave concepto
            vlaryTempParciales(13, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 12)     'Clave concepto de facturación
            vlaryTempParciales(14, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 13)     'Folio de factura
            vlaryTempParciales(15, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 14)     'Fecha hora de la factura
            vlaryTempParciales(16, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 15)     'Descripcion del concepto de facturación
            vlaryTempParciales(17, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 16)     'Importe gravado
            vlaryTempParciales(18, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 17)     'Importe no gravado
            vlaryTempParciales(19, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 18)     'Concepto de seguro
         
            If vlintcontador <= MSFGFacturasParciales.Rows - 1 Then ReDim Preserve vlaryTempParciales(19, vlintConta2 + 1)
            vlblnFacturasSinGrabar = True
            vlintConta2 = vlintConta2 + 1
        End If
        
        MSFGFacturasParciales.Row = IIf(MSFGFacturasParciales.Rows > MSFGFacturasParciales.Row + 1, MSFGFacturasParciales.Row + 1, MSFGFacturasParciales.Row)
    Next vlintcontador
                
    pHabilitaGrabacionFacturaPaciente
    pLimpiaGrid MSFGFacturasParciales
    'Llena el grid con las facturas parciales previamente capturadas
    pLlenaFacturasParciales
    
    'Carga las facturas parciales que no aún no se han grabado
    vlintcontador = 0
    If vlaryTempParciales(0, 0) <> -1 Then
        For vlintcontador = 0 To UBound(vlaryTempParciales, 2) - 1
            With MSFGFacturasParciales
                If .RowData(.Row) <> -1 Then
                    .Rows = .Rows + 1
                    .Row = .Rows - 1
                End If
                
                .TextMatrix(.Row, 0) = vlaryTempParciales(0, vlintcontador)     'Número de cuenta
                .TextMatrix(.Row, 1) = vlaryTempParciales(1, vlintcontador)     'Tipo de paciente
                .TextMatrix(.Row, 2) = vlaryTempParciales(2, vlintcontador)     'Facturado a
                .TextMatrix(.Row, 3) = vlaryTempParciales(3, vlintcontador)     'Subtotal
                .TextMatrix(.Row, 4) = vlaryTempParciales(4, vlintcontador)     'IVA
                .TextMatrix(.Row, 5) = vlaryTempParciales(5, vlintcontador)     'Total
                .TextMatrix(.Row, 6) = vlaryTempParciales(6, vlintcontador)     'Subtotal sin formato
                .TextMatrix(.Row, 7) = vlaryTempParciales(7, vlintcontador)     'IVA sin formato
                .TextMatrix(.Row, 8) = vlaryTempParciales(8, vlintcontador)     'Total sin formato
                .TextMatrix(.Row, 9) = vlaryTempParciales(9, vlintcontador)     'Moneda x:Dólares
                .CellFontBold = True
                .TextMatrix(.Row, 10) = vlaryTempParciales(10, vlintcontador)   'Total
                .TextMatrix(.Row, 11) = vlaryTempParciales(11, vlintcontador)   'Indica si ya se facturó o está en memoria 0:Memoria 1:Grabada
                .TextMatrix(.Row, 12) = vlaryTempParciales(13, vlintcontador)   'Clave del concepto de facturación
                .TextMatrix(.Row, 13) = vlaryTempParciales(14, vlintcontador)   'Folio de la factura
                .TextMatrix(.Row, 14) = vlaryTempParciales(15, vlintcontador)   'Fecha
                .TextMatrix(.Row, 15) = vlaryTempParciales(16, vlintcontador)   'Descripción del concepto de facturación
                .TextMatrix(.Row, 16) = vlaryTempParciales(17, vlintcontador)   'Importe gravado
                .TextMatrix(.Row, 17) = vlaryTempParciales(18, vlintcontador)   'Importe no gravado
                .TextMatrix(.Row, 18) = vlaryTempParciales(19, vlintcontador)   'Tipo de concepto X:Normal, EX,DE,CO,CA,CP:Conceptos de seguro
                
                .RowData(.Row) = CInt(vlaryTempParciales(12, vlintcontador))
            End With
        Next vlintcontador
    End If
        
    vldblSubtotalFacturaParcial = 0
    dblSubtotalFacturaParcialP = 0
    
    vldblIVAFacturaParcial = 0
    dblIVAFacturaParcialP = 0
                
    vlblnBand = False
    While Not vlblnBand
        vllngConceptoFact = 0
        
        'Busca los conceptos de facturación de las facturas parciales que aún no han sido considerados
        For vlintcontador = 1 To MSFGFacturasParciales.Rows - 1
            If CLng(Val(MSFGFacturasParciales.TextMatrix(vlintcontador, 12))) > 0 Then
                vllngConceptoFact = MSFGFacturasParciales.TextMatrix(vlintcontador, 12)
                Exit For
            End If
        Next
        
        If vllngConceptoFact = 0 Then
        'No hay facturas parciales no consideradas?
            vlblnBand = True
        Else
            'Busca el concepto de facturación como descuento o otros descuentos
            vlintPosicion = fintBuscaConceptoFacturacionDescuento(vllngConceptoFact)
            
            intConceptoNuevo = vlintPosicion
            If vlintPosicion = -1 Then
            'No existe el concepto de fact. en el grid
                vlintPosicion = IIf(grdGrid.RowData(1) <> -1, grdGrid.Rows, 1)
                grdGrid.Rows = IIf(grdGrid.RowData(1) <> -1, grdGrid.Rows + 1, grdGrid.Rows)
            End If
            
            grdGrid.RowData(vlintPosicion) = vllngConceptoFact 'Clave del Concepto
            
            ' La Descripcion del concepto
            If intConceptoNuevo = -1 Then
                vlstrSentencia = "Select PvConceptoFacturacion.chrDescripcion From PvConceptoFacturacion Where PvConceptoFacturacion.smiCveConcepto = " & vllngConceptoFact
                Set rsTemp = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
                grdGrid.TextMatrix(vlintPosicion, 1) = Trim(rsTemp!chrDescripcion)
            End If
            
            ' La 3 es el ABONO
            grdGrid.TextMatrix(vlintPosicion, 3) = Format(fdblTotalFacturasParciales(3, True, vllngConceptoFact) _
                                                        / IIf(optPesos(0).Value, 1, vldblTipoCambio), "$ ###,###,###,##0.00")
            ' El 4 es el IVA
            'Negativo par los descuentos
            grdGrid.TextMatrix(vlintPosicion, 4) = Format(fdblTotalFacturasParciales(4, True, vllngConceptoFact) / IIf(optPesos(0).Value, 1, vldblTipoCambio) * -1, "###########0.00")
            
            ' El 5 son los DESCUENTOS, no aplica
            grdGrid.TextMatrix(vlintPosicion, 5) = 0
            
            ' El 6 es el TIPO de CONCEPTO
            grdGrid.TextMatrix(vlintPosicion, 6) = "DE"
            
            ' El 7 es el TIPO de Otro CONCEPTO (No aplica para conceptos normales por eso es un "")
            grdGrid.TextMatrix(vlintPosicion, 7) = IIf(intConceptoNuevo = -1, "", grdGrid.TextMatrix(vlintPosicion, 7)) 'Cual de los otros conceptos es: Deducible, Coaseguro, Copago o Excedente
            
            ' El 8 es la clave del Paquete, No aplica
            grdGrid.TextMatrix(vlintPosicion, 8) = 0
            
            'El 9 son los Cargos con decimales (en el caso de las facturas parciales se ponen solo 2)
            'No se restan los descuentos si es una parcial
            'No aplica porque las parciales son abonos no cargos, no se pone 0
            
            'El 10 son los Cargos en pesos
            'No aplica porque las parciales son abonos no cargos, no se pone 0
            
            'El 11 Son los descuentos en pesos
            grdGrid.TextMatrix(vlintPosicion, 11) = IIf(intConceptoNuevo = -1, fdblTotalFacturasParciales(3, True, vllngConceptoFact), grdGrid.TextMatrix(vlintPosicion, 11))
            
            'El 12 Son los cargos en pesos con decimales (en el caso de las facturas parciales se ponen solo 2)
            'No aplica porque las parciales son abonos no cargos, no se pone 0
            
            'El 13 es la tasa de IVA
            grdGrid.TextMatrix(vlintPosicion, 13) = IIf(intConceptoNuevo = -1 And fdblTotalFacturasParciales(4, True, vllngConceptoFact) > 0, vgdblCantidadIvaGeneral, grdGrid.TextMatrix(vlintPosicion, 13))
            
            ReDim Preserve aCPCargosPoliza(UBound(aCPCargosPoliza) + 1)
            vlintPosicionArreglo = UBound(aCPCargosPoliza) - 1
            
            aCPCargosPoliza(vlintPosicionArreglo).lngConceptoFacturacion = vllngConceptoFact
            aCPCargosPoliza(vlintPosicionArreglo).lngDepartamento = vgintNumeroDepartamento
            aCPCargosPoliza(vlintPosicionArreglo).lngCuentaIngreso = 0         'La cuenta del concepto del fact. del descuento por la factura parcial
            aCPCargosPoliza(vlintPosicionArreglo).lngCuentaDescuento = flngCuentaConceptoDepartamento(vllngConceptoFact, vgintNumeroDepartamento, "INGRESO")     'Para la cuenta del DESCUENTO, La cuenta del INGRESO de la factura parcial
            aCPCargosPoliza(vlintPosicionArreglo).dblCantidadIngreso = 0
            aCPCargosPoliza(vlintPosicionArreglo).dblIVADescuento = 0
            aCPCargosPoliza(vlintPosicionArreglo).dblCantidadDescuento = CDbl(IIf(optPesos(0).Value, fdblTotalFacturasParciales(6, True, vllngConceptoFact), fdblTotalFacturasParciales(6, True, vllngConceptoFact))) 'Cantidad
            
            'Actualiza el concepto de facturación que se acaba de agregar al arreglo con el signo negativo para no tomarlos en cuenta la siguiente vuelta del ciclo
            For vlintcontador = 1 To MSFGFacturasParciales.Rows - 1
                If CLng(MSFGFacturasParciales.TextMatrix(vlintcontador, 12)) = vllngConceptoFact Then
                    MSFGFacturasParciales.TextMatrix(vlintcontador, 12) = CLng(MSFGFacturasParciales.TextMatrix(vlintcontador, 12)) * -1
                End If
            Next
        End If
    Wend
    
    'Pone otra vez signos positivos para usarlos correctamente en el resto del proceso
    For vlintcontador = 1 To MSFGFacturasParciales.Rows - 1
        MSFGFacturasParciales.TextMatrix(vlintcontador, 12) = CLng(Val(MSFGFacturasParciales.TextMatrix(vlintcontador, 12))) * -1
    Next
        
    '***************************************************************************************************
    ' 6).- NOTAS DE CRÉDITO DEL PACIENTE
    '***************************************************************************************************
    'Obtener las notas de crédito que no se han descontado al paciente
     Set rsTemp = frsEjecuta_SP(txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E"), "sp_PvSelNotasCreditoSinFactura")
     Do While Not rsTemp.EOF
         ReDim Preserve alngNotasPaciente(UBound(alngNotasPaciente) + 1)
         alngNotasPaciente(UBound(alngNotasPaciente)) = rsTemp!Consecutivo
         dblNotasCreditoPaciente = dblNotasCreditoPaciente + rsTemp!Importe
         rsTemp.MoveNext
     Loop
        
    '***************************************************************************************************
    ' 7).- TOTALES
    '***************************************************************************************************
    vldblSubtotalFacturaParcial = Format(IIf(optPesos(0).Value, fdblTotalFacturasParciales(6, True, -1), fdblTotalFacturasParciales(6, True, -1) / vldblTipoCambio), "###,###,##0.00")
    dblSubtotalFacturaParcialP = Format(fdblTotalFacturasParciales(6, True, -1), "###########0.00")
    
    vldblIVAFacturaParcial = Format(IIf(optPesos(0).Value, fdblTotalFacturasParciales(7, True, -1), fdblTotalFacturasParciales(7, True, -1) / vldblTipoCambio), "###,###,##0.00")
    dblIVAFacturaParcialP = Format(fdblTotalFacturasParciales(7, True, -1), "###########0.00")
        
    dblDescuentosP = dblSubtotalFacturaParcialP + dblDescuentosP
    dblSubTotalP = Format(dblSubTotalP - dblSubtotalFacturaParcialP, "##############0.00")
    dblIVAP = Format(dblIVAPacienteP - dblIVAFacturaParcialP, "###########0.00")
    dblTotalFacturaP = Format(dblSubTotalP + dblIVAP, "##############0.00")
    
    vldblSubtotal = Round(dblImporteFactura, 2) - Round(dblDescuentoFactura, 2)
    dblTotalFactura = vldblSubtotal + Format(dblIVAP / vldblTipoCambio, "###############.00")
            
    vldblSubtotalPesos = Round(dblImporteFacturaPesos, 2) - Round(dblDescuentoFacturaPesos, 2)
    dblTotalFacturaPesos = vldblSubtotalPesos + Format(dblIVAP, "###############.00")
                       
    'cuando es en dólares que tenga 3 decimales, para que cuando se convierta a pesos, no se pierdan decimales
    If optPesos(0).Value Then
        txtFPSubtotal.Text = Format(vldblSubtotal - vldblSubtotalFacturaParcial, "$ ###,###,###,###.00")
        txtFPDescuentos.Text = Format((vldblSubtotalFacturaParcial) + Val(Format(txtFPDescuentos.Text, "")), "$ ###,###,###,###.00")
        ldblDescuentosFactura = fdblTotalFacturasParciales(10, True, -1) + Val(Format(txtFPDescuentos.Text, ""))
        If CDbl(Format(dblIVAPaciente - vldblIVAFacturaParcial, "$ ###,###,###,###.00")) > 0 Then
            txtFPIVA.Text = Format(dblIVAPaciente - vldblIVAFacturaParcial, "$ ###,###,###,###.00")
        Else
            txtFPIVA.Text = Format(0, "$ ###,###,###,###.00")
        End If
        txtFPTotalFactura.Text = Format(Val(Format(txtFPSubtotal.Text, "")) + Val(Format(txtFPIVA.Text, "")), "$ ###,###,###,###.00")
        txtFPNotasCredito.Text = Format((dblNotasCreditoPaciente + dblNotasCreditoCS + dblIVANotasCreditoCS), "$ ###,###,###,###.00")
        txtFPTotalPagar.Text = Format(Val(Format(txtFPTotalFactura.Text, "")) - Val(Format(txtFPNotasCredito.Text, "")) - Val(Format(txtFPPagos.Text, "")), "$ ###,###,###,###.00")
        vgdblTotalPagarPesosPaciente = Val(Format(txtFPTotalPagar.Text, ""))
    Else
'        txtFPSubtotal.Text = Format(dblSubTotalP / vldblTipoCambio, "$ ###,###,###,###.00")
'        txtFPDescuentos.Text = Format(dblDescuentosP / vldblTipoCambio, "$ ###,###,###,###.00")
'        ldblDescuentosFactura = (fdblTotalFacturasParciales(10, True, -1) / vldblTipoCambio) + Val(Format(txtFPDescuentos.Text, ""))
'        txtFPIVA.Text = Format(dblIVAP / vldblTipoCambio, "$ ###,###,###,###.00")
'        txtFPTotalFactura.Text = Format(dblTotalFacturaP / vldblTipoCambio, "$ ###,###,###,###.00")
'        txtFPNotasCredito.Text = Format(((dblNotasCreditoPaciente + dblNotasCreditoCS + dblIVANotasCreditoCS) / vldblTipoCambio), "$ ###,###,###,###.00")
'        txtFPTotalPagar.Text = Format(Val(Format(txtFPTotalFactura.Text, "")) - Val(Format(txtFPPagos.Text, "")) - Val(Format(txtFPNotasCredito.Text, "")), "$ ###,###,###,###.00")
        
        txtFPSubtotal.Text = Format(vldblSubtotal, "$ ###,###,###,###.00")
        txtFPDescuentos.Text = Format(dblDescuentosP / vldblTipoCambio, "$ ###,###,###,###.00")
        ldblDescuentosFactura = (fdblTotalFacturasParciales(10, True, -1) / vldblTipoCambio) + Val(Format(txtFPDescuentos.Text, ""))
        txtFPIVA.Text = Format(dblIVAP / vldblTipoCambio, "$ ###,###,###,###.00")
        txtFPTotalFactura.Text = Format(dblTotalFactura, "$ ###,###,###,###.00")
        txtFPNotasCredito.Text = Format(((dblNotasCreditoPaciente + dblNotasCreditoCS + dblIVANotasCreditoCS) / vldblTipoCambio), "$ ###,###,###,###.00")
        txtFPTotalPagar.Text = Format(Val(Format(txtFPTotalFactura.Text, "")) - Val(Format(txtFPPagos.Text, "")) - Val(Format(txtFPNotasCredito.Text, "")), "$ ###,###,###,###.00")
        
    End If
        
    dblSTGravadoFP = 0
    vltipocambio = fdblTipoCambio(fdtmServerFecha, "V")

    For vlintcontador = 1 To MSFGFacturasParciales.Rows - 1
        If CLng(Val(MSFGFacturasParciales.TextMatrix(vlintcontador, 8))) > 0 Then
            'Factura base en pesos
            If vldblTipoCambio = 1 Then
                dblSTGravadoFP = dblSTGravadoFP + Format(CDbl(MSFGFacturasParciales.TextMatrix(vlintcontador, 16)) * IIf(Trim(MSFGFacturasParciales.TextMatrix(vlintcontador, 9)) = "x", vltipocambio, vldblTipoCambio), "############.00")
            Else
            'Factura base en dólares
                dblSTGravadoFP = dblSTGravadoFP + Format(CDbl(MSFGFacturasParciales.TextMatrix(vlintcontador, 16)) / IIf(Trim(MSFGFacturasParciales.TextMatrix(vlintcontador, 9)) = "x", 1, vldblTipoCambio), "############.00")
            End If
        End If
    Next

    vldblsubtotalgravado = vldblsubtotalgravado - dblSTGravadoFP
    vldblsubtotalgravadoSinRound = vldblsubtotalgravadoSinRound - dblSTGravadoFP
    dblIVAPaciente = dblIVAPaciente - vldblIVAFacturaParcial
    
    'Si (Subtotal-STParcial) - STGravado < 0.02 Entonces
    'Igualar el STGravado al ST
    If Format(Abs((IIf(optPesos(0).Value, (vldblSubtotal - vldblSubtotalFacturaParcial), Format(dblSubTotalP / vldblTipoCambio, "###############.00"))) - Format(vldblsubtotalgravado, "###############.00")), "###############.00") <= 0.02 Then
        vldblsubtotalNogravado = 0
        vldblsubtotalgravado = IIf(optPesos(0).Value, vldblSubtotal - vldblSubtotalFacturaParcial, (dblSubTotalP / vldblTipoCambio))
    Else
        vldblsubtotalNogravado = (IIf(optPesos(0).Value, (vldblSubtotal - vldblSubtotalFacturaParcial), (dblSubTotalP / vldblTipoCambio))) - Format(vldblsubtotalgravado, "###############.00")
    End If
    
    vldblTotalPagarPesos = vldblTotalPagarPesos - fdblTotalFacturasParciales(10, True, -1)
    txtExcluidosPagos.Text = txtFPPagos.Text
    
    MSFGFacturasParciales.Redraw = True
    If vlblnFacturasSinGrabar Then
        chkFacturaBase.Value = vbUnchecked
        chkFacturaBase.Enabled = False
        cmdEliminaDonativo.Enabled = True
    Else
        pIniciaChkFacturaBase
        cmdEliminaDonativo.Enabled = False
        pHabilitaGrabacionFacturaPaciente
    End If
    
    grdGrid.Col = 2
    
    vgdblTotalPagarPesosPaciente = vldblTotalPagarPesos
    
    'Visualizar el botón de devoluciones de dinero en caso que el total a pagar sea negativo
    If CDbl(txtFPTotalPagar.Text) < 0 Then
        If Len(txtFPTotalPagar.Text) > 10 Then txtFPTotalPagar.FontBold = False
        cmdDevolucionesDinero.Visible = True
    Else
        txtFPTotalPagar.FontBold = True
        cmdDevolucionesDinero.Visible = False
    End If
End Sub

Private Sub pLlenaFacturasConvenio(grdGrid As MSHFlexGrid)
    Dim vlaryTempParciales() As String              'Guarda temporalmente las facturas parciales agregadas
    Dim vlstrSentencia As String
    
    Dim rsConcepto As New ADODB.Recordset
    Dim rsIVAPaquete As New ADODB.Recordset
    
    Dim vlblnFacturasSinGrabar As Boolean
    Dim vlblnconceptoconiva As Boolean
    Dim blnExistePaquete As Boolean                 'Bandera para ver si ya existe el paquete en la cuenta
    Dim vlblnBand As Boolean
    
    Dim vldblSubtotalFacturaParcial As Double
    Dim dblSubtotalFacturaParcialP As Double        'Subtotal de la factura parcial en pesos
    Dim dblIVACargosSelConvenioP As Double          'IVA del convenio en pesos
    Dim vldblIVAFacturaParcial As Double
    Dim dblIVAFacturaParcialP As Double             'IVA de la factura parcial en pesos
    Dim vldblTotalPagarPesos As Double              'Variable para calcular el total en Pesos de las facturas de Paciente y empresa
    Dim vldblDescuentosCargo As Double              'Descuentos originales del cargo
    Dim vldblPrecioPaquete As Double                'Precio del paquete
    Dim vllngCantidadCargo As Double                'Cantidad original del cargo
    Dim vldblTotDescuento As Double
    Dim vldblPrecioCargo As Double                  'Precio original del Cargo
    Dim vldblIVAPaquete As Double                   'IVA del paquete
    Dim vldblTipoCambio As Double                   'El tipo de Cambio. Si es en pesos su valor es 1
    Dim dblIVAPacienteP As Double                   'IVA del paciente en pesos
    Dim dblDescuentosP As Double                    'Descuentos en pesos
    Dim dblSTGravadoFP As Double
    Dim vldblIVACargo As Double                     'IVA original del cargo
    Dim vldblSubtotal As Double
    Dim vldblCantidad As Double                     'Esta es una temporal que utilizo para varias cosas
    Dim dblSubTotalP As Double                      'Subtotal en pesos
    Dim vltipocambio As Double                      'Para las facturas parciales
    
    Dim vllngCantidadPaquete As Long                'Cantidad que esta dentro del paquete
    Dim vllngConceptoFactura As Long                'Concepto de facturación que puede ser del cargo o del Paquete
    Dim vllngConceptoFact As Long
    Dim lngCvePaquete As Long                       'Clave del paquete asignado al cargo
    
    Dim vlintPosicionArreglo As Integer
    Dim intTotalPaquetes As Integer
    Dim intConceptoNuevo As Integer                 'Indica si el concepto de la factura parcial se encuientra o en los conceptos de la factura base
    Dim vlintPosicion2 As Integer                   'Para la posicion de donde se encuentra un cargo según los el Concepto y el Departamentos que cargo
    Dim intTasaPaquete As Integer                   'Para la tasa de IVA del Paquete
    Dim vlintcontador As Integer
    Dim vlintPosicion As Integer                    'Para la posicion de donde se encuentra un cargo según los conceptos de facturación
    Dim vlintConta2 As Integer
    
    Dim vlintContadorCargos As Integer
    Dim vlExisteConcepto As Boolean
    Dim vlintRenglon As Integer
    Dim vlintRenglonCargos As Integer
    
    Dim DblDescuentoEspecialP As Double  'descuento especial en pesos
    Dim DblDescEspecialG As Double 'descuento especial al importe gravado
    Dim DblDescEspecialNG As Double 'descuento especial al importe no gravado
    Dim dblPorcentajeDescEspecial As Double
    
    Dim dblImporteFactura As Double
    Dim dblDescuentoFactura As Double
    Dim vldblImporteRetNew As Double
    Dim vldblSubtotalExcluidoDE As Double
    
    '--------------------------------------------------
    'Tipos de conceptos en la factura (Campo 6 del Grid de las facturas)
    '--------------------------------------------------
    ' NO    = Concepto normal (Conceptos derivados de los cargos del paciente)
    ' OC    = Otros Conceptos (Conceptos para facturar Deducible, Coaseguro, Copago y Excedente en Suma asegurada)
    ' DE    = Descuentos Normales (Descuentos derivados de los cargos del paciente)
    ' OD    = Otros Descuentos (Descuentos para la cuenta de la empresa en el caso de que se factura Deducible,Coaseguro, Copago y/o el Excedente en Suma asegurada)
    ' PA    = Pagos normales (Generados como abonos a la cuenta del paciente)
    ' OP    = Otros Pagos (Pagos por concepto de Deducible, Coaseguro y/o Copago)
    '--------------------------------------------------
    
    'Inicialización de variables y controles
    ReDim audtPaquetesEnCuenta(0)                   'Inicialización del arreglo para relacionar cuentas con paquetes
    ReDim aCPCargosPoliza(0)                        'Inicalización del arreglo para llenar la póliza
    ReDim vlaryCuentaPaquete(0)                     'Inicializa el arreglo para almacenar los paquetes que corresponden a cada cuenta
    ReDim alngFacturasParciales(0)                  'Inicializa el arreglo para los consecutivos de las facturas parciales que se van a descontar a la empresa
    ReDim alngNotasPaciente(0)
    
    pLimpiaGrid grdGrid
    
    ldblHonorariosAFacturar = 0
    
    vldblsubtotalgravado = 0
    vldblsubtotalgravadoSinRound = 0
    vldblsubtotalNogravado = 0
    vldblsubtotalExento = 0
    vldbldescuentogravado = 0
    vldbldescuentoexento = 0
    vldbldescuentototal = 0
    
    dblIVAPaciente = 0
    ldblIVACargosSelConvenio = 0                     'Esta variable es solo para el IVA de los cargos seleccionados de la cuenta de la empresa
    ldblIVAExcluidoSeleccionado = 0
    ldblIVACargosSelConvenioExDE = 0
    dblDescuentosP = 0

    dblNotasCreditoPaciente = 0
    
    ldblImporteGravaSelConvenio = 0
    ldblImporteGravaSelConvenioExDE = 0
    
    dblSubtotalFacturaParcialP = 0
    dblSubtotalGravadoP = 0
    dblSubTotalP = 0
    vldblsubtotalgravadoSinFormat = 0
    dblSubtotalGravadoPSinFormat = 0
    
    dblIVAFacturaParcialP = 0
    dblIVAPacienteP = 0
    dblIVACargosSelConvenioP = 0
    dblIVAP = 0
    
    vlblnCargosMenoresaConcepSegurosNOGravados = False
    vlblnCargosMenoresaConcepSegurosGravados = False
    vldblSubtotalExcluidoDE = 0
    
    ldblDescuentosFactura = 0
    vldblTipoCambio = IIf(grdGrid.Name = "grdFacturaPaciente", IIf(optPesos(0).Value, 1, fdblTipoCambio(fdtmServerFecha, "V")), IIf(optPesos(1).Value, 1, fdblTipoCambio(fdtmServerFecha, "V")))
    
    If grdGrid.Name = "grdFacturaPaciente" Then
        txtFPDescuentos.Text = Format(0, "$ ###,###,###,###.00")
        txtFPSubtotal.Text = Format(0, "$ ###,###,###,###.00")
        txtFPIVA.Text = Format(0, "$ ###,###,###,###.00")
        txtFPTotalFactura.Text = Format(0, "$ ###,###,###,###.00")
        txtFPPagos.Text = Format(0, "$ ###,###,###,###.00")
        txtFPNotasCredito.Text = Format(0, "$ ###,###,###,###.00")
        txtRetenionServ.Text = Format(0, "$ ###,###,###,###.00")
        txtFPTotalPagar.Text = Format(0, "$ ###,###,###,###.00")
    Else
        txtFEPagos.Text = Format(0, "$ ###,###,###,###.00")
        txtFEDescuentos.Text = Format(0, "$ ###,###,###,###.00")
        txtFEDescuentoEspecial.Text = Format(0, "$ ###,###,###,###.00")
        txtFESubtotal.Text = Format(0, "$ ###,###,###,###.00")
        txtFEIVA.Text = Format(0, "$ ###,###,###,###.00")
        txtFETotalFactura.Text = Format(0, "$ ###,###,###,###.00")
        txtRetenionServ.Text = Format(0, "$ ###,###,###,###.00")
        txtFETotalPagar.Text = Format(0, "$ ###,###,###,###.00")
    End If
    
    ldblImporteNoGravaSelConvenio = 0
    ldblImporteExentoSelConvenio = 0
    vldblTotalPagarPesos = 0
    ldblDescuentos = 0
    ldblDescuentosExentos = 0
    dblDescuentosP = 0
    'Excluidos de descuento especial
    dblImporteFacturaExcluidosDE = 0
    dblDescuentoFacturaExcluidoDE = 0
    ldblImporteNoGravaSelConvenioExDE = 0
    
    '***************************************************************************************************
    ' 1).- RECORRIDO DE CARGOS SELECCIONADOS PARA FACTURAR
    '***************************************************************************************************
    pLlenaCargosAFacturar grdGrid, dblDescuentosP, vldblTotalPagarPesos
    
    If grdGrid.Name = "grdFacturaEmpresa" Then
        vldblsubtotalgravado = CDbl(Format(ldblImporteGravaSelConvenio, "###############.00")) / vldblTipoCambio
        vldblsubtotalgravadoSinRound = ldblImporteGravaSelConvenio / vldblTipoCambio
        ldblImporteNoGravaSelConvenio = ldblImporteNoGravaSelConvenio / vldblTipoCambio
    End If
    
    'Para que el iva quede con 2 decimales
    dblIVACargosSelConvenioP = Format(ldblIVACargosSelConvenio, "###############.00")
    ldblIVACargosSelConvenio = Format(ldblIVACargosSelConvenio / vldblTipoCambio, "###############.00")
    ldblIVAExcluidoSeleccionado = Format(ldblIVAExcluidoSeleccionado, "###############.00")
    
    vldbldescuentototal = Format(ldblDescuentos, "")
    vldbldescuentogravado = Format(vldbldescuentogravado, "")
    vldbldescuentoexento = Format(ldblDescuentosExentos, "")
    
    If grdGrid.Name = "grdFacturaPaciente" Then
        dblIVAPaciente = vldblsubtotalgravado * vgdblCantidadIvaGeneral / 100
        dblIVAPacienteP = dblSubtotalGravadoP * vgdblCantidadIvaGeneral / 100
    End If
    
    '***************************************************************************************************
    ' 2).- DESCUENTOS
    '***************************************************************************************************
    If ldblDescuentos > 0 Then
        grdGrid.Rows = grdGrid.Rows + 1
        grdGrid.RowData(grdGrid.Rows - 1) = -2 'Clave interna para descuentos
        grdGrid.TextMatrix(grdGrid.Rows - 1, 1) = "DESCUENTOS"
        grdGrid.TextMatrix(grdGrid.Rows - 1, 3) = Format(((ldblDescuentos)), "$ ###,###,###,###.00####") 'Cantidad Descuentos
        grdGrid.TextMatrix(grdGrid.Rows - 1, 11) = Format(((dblDescuentosP)), "############.00####")  'Cantidad Descuentos en pesos
        grdGrid.TextMatrix(grdGrid.Rows - 1, 5) = 0
        grdGrid.TextMatrix(grdGrid.Rows - 1, 6) = "DE"  'Descuentos normales
    End If
        
    If grdGrid.Name = "grdFacturaPaciente" Then
    '***************************************************************************************************
    ' EXCEDENTES POR USO DE GRUPOS DE CARGOS
    '***************************************************************************************************
        ' Guarda el renglon actual de los cargos y los conceptos de facturacion
        vlintRenglon = grdGrid.Row
        vlintRenglonCargos = grdCargos.Row
        If Not rsExcedentes.EOF Then
            rsExcedentes.MoveFirst
            Do While Not rsExcedentes.EOF ' Recorre los excedentes generados
                grdCargos.Row = 1
                For vlintContadorCargos = 1 To grdCargos.Rows - 1
                    If grdCargos.RowData(vlintContadorCargos) = rsExcedentes!IntNumCargo And grdCargos.TextMatrix(vlintContadorCargos, 0) = "*" Then
                        vlExisteConcepto = False
                        For vlintcontador = 1 To grdGrid.Rows - 1
                            If grdGrid.RowData(vlintcontador) = rsExcedentes!smicveconcepto Then
                                grdGrid.TextMatrix(vlintcontador, 2) = Format(grdGrid.TextMatrix(vlintcontador, 2) + (rsExcedentes!mnyexcedente / vldblTipoCambio), "$ ###,###,###,###.00")
                                grdGrid.TextMatrix(vlintcontador, 9) = grdGrid.TextMatrix(vlintcontador, 9) + (rsExcedentes!mnyexcedente / vldblTipoCambio)
                                grdGrid.TextMatrix(vlintcontador, 10) = Format(grdGrid.TextMatrix(vlintcontador, 10) + (rsExcedentes!mnyexcedente / vldblTipoCambio), "###############.00")
                                grdGrid.TextMatrix(vlintcontador, 12) = grdGrid.TextMatrix(vlintcontador, 12) + (rsExcedentes!mnyexcedente / vldblTipoCambio)
                                vlExisteConcepto = True
                                Exit For
                            End If
                        Next vlintcontador
                        If vlExisteConcepto = False Then
                            If grdGrid.RowData(grdGrid.Rows - 1) <> -1 Then
                                grdGrid.Rows = grdGrid.Rows + 1
                            End If
                            grdGrid.RowData(grdGrid.Rows - 1) = rsExcedentes!smicveconcepto
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 1) = rsExcedentes!chrdescripcionconcept
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 2) = Format(rsExcedentes!mnyexcedente / vldblTipoCambio, "$ ###,###,###,###.00")
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 9) = rsExcedentes!mnyexcedente / vldblTipoCambio
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 4) = 0
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 5) = 0
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 6) = "OC"
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 7) = ""
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 8) = 0
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 10) = Format(rsExcedentes!mnyexcedente, "###############.00")
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 12) = rsExcedentes!mnyexcedente
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 13) = 0
                        End If
                    End If
                Next vlintContadorCargos
                rsExcedentes.MoveNext
            Loop
            rsExcedentes.MoveFirst
        End If
        grdCargos.Row = vlintRenglonCargos
        grdGrid.Row = vlintRenglon
    End If
        
    '***************************************************************************************************
    ' 3).- PAGOS
    '***************************************************************************************************
    If grdGrid.Name = "grdFacturaPaciente" Then
        If Val(Format(txtPagos.Text, "")) <> 0 Then
            If grdGrid.RowData(1) <> -1 Then grdGrid.Rows = grdGrid.Rows + 1
            grdGrid.RowData(grdGrid.Rows - 1) = 0 'Los pagos no tienen numero de concepto
            grdGrid.TextMatrix(grdGrid.Rows - 1, 1) = "PAGOS"
            vldblCantidad = Format((Val(Format(txtPagos.Text, ""))), "###############.00")
            grdGrid.TextMatrix(grdGrid.Rows - 1, 3) = IIf(optPesos(0).Value, Format(((vldblCantidad)), "############.00"), Format(vldblCantidad / lngTipoCambioAnticipo, "$ ###,###,###,###.00"))  'Cantidad pagos
            grdGrid.TextMatrix(grdGrid.Rows - 1, 11) = Format(((vldblCantidad)), "############.00")   'Cantidad del pago en pesos
            grdGrid.TextMatrix(grdGrid.Rows - 1, 5) = 0
            grdGrid.TextMatrix(grdGrid.Rows - 1, 6) = "PA" 'Pago normal
            vldblTotalPagarPesos = vldblTotalPagarPesos - Val(Format(txtPagos.Text, ""))
        End If
    End If
    
    
    '***************************************************************************************************
    ' 4).- Cálculo de totales (DESPUES DE DESCUENTOS ESPECIALES)
    '***************************************************************************************************
    vldblSubtotal = 0
    ldblDescuentos = 0
    ldblDescuentosExentos = 0
    dblDescuentosP = 0
    dblSubTotalP = 0
    dblImporteFactura = 0
    dblDescuentoFactura = 0
    
    For vlintcontador = 1 To grdGrid.Rows - 1
        'Cargos
        If Val(Format(grdGrid.TextMatrix(vlintcontador, 2), "")) > 0 Then
            vldblSubtotal = vldblSubtotal + Val(Format(grdGrid.TextMatrix(vlintcontador, 2), ""))
            dblImporteFactura = dblImporteFactura + Val(Format(grdGrid.TextMatrix(vlintcontador, 2), ""))
            dblSubTotalP = dblSubTotalP + Val(Format(grdGrid.TextMatrix(vlintcontador, 10), ""))
       'Abonos
        ElseIf grdGrid.TextMatrix(vlintcontador, 6) = "DE" Or grdGrid.TextMatrix(vlintcontador, 6) = "OD" Then
            vldblSubtotal = vldblSubtotal - Val(Format(grdGrid.TextMatrix(vlintcontador, 3), ""))
            dblDescuentoFactura = dblDescuentoFactura + Val(Format(grdGrid.TextMatrix(vlintcontador, 3), ""))
            ldblDescuentos = ldblDescuentos + Val(Format(grdGrid.TextMatrix(vlintcontador, 3), ""))
            dblSubTotalP = dblSubTotalP - Val(Format(grdGrid.TextMatrix(vlintcontador, 11), ""))
            dblDescuentosP = dblDescuentosP + Val(Format(grdGrid.TextMatrix(vlintcontador, 11), ""))
        End If
        
        'Descuentos y excedente en suma asegurada
        If grdGrid.Name = "grdFacturaPaciente" Then
            txtFPDescuentos.Text = Format(ldblDescuentos, "$ ###,###,###,###.00")
            txtFEDedyCoa.Text = Format(0, "$ ###,###,###,###.00")
        Else
            txtFEDescuentos.Text = Format(ldblDescuentos, "$ ###,###,###,###.00")
        End If

        ldblDescuentosFactura = ldblDescuentos
        
        'Sólo los Particulares o excluidos tienen PAGOS
        If grdGrid.Name = "grdFacturaPaciente" Or optTipoFacturacion(0).Value Then
            If grdGrid.TextMatrix(vlintcontador, 6) = "PA" Then 'PAGOS
                If grdGrid.Name = "grdFacturaPaciente" Then
                    txtFPPagos.Text = grdGrid.TextMatrix(vlintcontador, 3)
                Else
                    txtFEPagos.Text = grdGrid.TextMatrix(vlintcontador, 3)
                End If
            End If
        End If
    Next vlintcontador
    
    '***************************************************************************************************
    ' 5).- FACTURAS PARCIALES
    '***************************************************************************************************
    If grdGrid.Name = "grdFacturaPaciente" Then
        ReDim vlaryTempParciales(19, 0)
        vlaryTempParciales(0, 0) = -1
        
        MSFGFacturasParciales.Row = 1
        vlblnFacturasSinGrabar = False
        vlintConta2 = 0
        
        For vlintcontador = 1 To MSFGFacturasParciales.Rows - 1
            'Llena el arreglo con datos del grid de facturas parciales (datos de la factura parcial a generar)
            If MSFGFacturasParciales.RowData(1) <> -1 And MSFGFacturasParciales.RowData(MSFGFacturasParciales.Row) <> 0 And Val(MSFGFacturasParciales.TextMatrix(MSFGFacturasParciales.Row, 11)) = 0 Then
                vlaryTempParciales(0, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 0)         'Número de cuenta?
                vlaryTempParciales(1, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 1)         'Tipo de paciente
                vlaryTempParciales(2, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 2)         'Facturado a
                vlaryTempParciales(3, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 3)         'Subtotal
                vlaryTempParciales(4, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 4)         'IVA
                vlaryTempParciales(5, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 5)         'Total
                vlaryTempParciales(6, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 6)         'Subtotal sin formato
                vlaryTempParciales(7, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 7)         'IVA sin formato
                vlaryTempParciales(8, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 8)         'Total sin formato
                vlaryTempParciales(9, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 9)         'Moneda x:dólares
                vlaryTempParciales(10, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 10)     'Total
                vlaryTempParciales(11, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 11)     'Indica si está grabada o en meoria 0:Memoria 1:Grabada
                vlaryTempParciales(12, vlintConta2) = MSFGFacturasParciales.RowData(vlintcontador)            'Clave concepto
                vlaryTempParciales(13, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 12)     'Clave concepto de facturación
                vlaryTempParciales(14, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 13)     'Folio de factura
                vlaryTempParciales(15, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 14)     'Fecha hora de la factura
                vlaryTempParciales(16, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 15)     'Descripcion del concepto de facturación
                vlaryTempParciales(17, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 16)     'Importe gravado
                vlaryTempParciales(18, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 17)     'Importe no gravado
                vlaryTempParciales(19, vlintConta2) = MSFGFacturasParciales.TextMatrix(vlintcontador, 18)     'Concepto de seguro
             
                If vlintcontador <= MSFGFacturasParciales.Rows - 1 Then ReDim Preserve vlaryTempParciales(19, vlintConta2 + 1)
                vlblnFacturasSinGrabar = True
                vlintConta2 = vlintConta2 + 1
            End If
            
            MSFGFacturasParciales.Row = IIf(MSFGFacturasParciales.Rows > MSFGFacturasParciales.Row + 1, MSFGFacturasParciales.Row + 1, MSFGFacturasParciales.Row)
        Next vlintcontador
                
        pHabilitaGrabacionFacturaPaciente
        pLimpiaGrid MSFGFacturasParciales
        'Llena el grid con las facturas parciales previamente capturadas
        pLlenaFacturasParciales
        
        'Carga las facturas parciales que no aún no se han grabado
        vlintcontador = 0
        If vlaryTempParciales(0, 0) <> -1 Then
            For vlintcontador = 0 To UBound(vlaryTempParciales, 2) - 1
                With MSFGFacturasParciales
                    If .RowData(.Row) <> -1 Then
                        .Rows = .Rows + 1
                        .Row = .Rows - 1
                    End If
                    
                    .TextMatrix(.Row, 0) = vlaryTempParciales(0, vlintcontador)     'Número de cuenta
                    .TextMatrix(.Row, 1) = vlaryTempParciales(1, vlintcontador)     'Tipo de paciente
                    .TextMatrix(.Row, 2) = vlaryTempParciales(2, vlintcontador)     'Facturado a
                    .TextMatrix(.Row, 3) = vlaryTempParciales(3, vlintcontador)     'Subtotal
                    .TextMatrix(.Row, 4) = vlaryTempParciales(4, vlintcontador)     'IVA
                    .TextMatrix(.Row, 5) = vlaryTempParciales(5, vlintcontador)     'Total
                    .TextMatrix(.Row, 6) = vlaryTempParciales(6, vlintcontador)     'Subtotal sin formato
                    .TextMatrix(.Row, 7) = vlaryTempParciales(7, vlintcontador)     'IVA sin formato
                    .TextMatrix(.Row, 8) = vlaryTempParciales(8, vlintcontador)     'Total sin formato
                    .TextMatrix(.Row, 9) = vlaryTempParciales(9, vlintcontador)     'Moneda x:Dólares
                    .CellFontBold = True
                    .TextMatrix(.Row, 10) = vlaryTempParciales(10, vlintcontador)   'Total
                    .TextMatrix(.Row, 11) = vlaryTempParciales(11, vlintcontador)   'Indica si ya se facturó o está en memoria 0:Memoria 1:Grabada
                    .TextMatrix(.Row, 12) = vlaryTempParciales(13, vlintcontador)   'Clave del concepto de facturación
                    .TextMatrix(.Row, 13) = vlaryTempParciales(14, vlintcontador)   'Folio de la factura
                    .TextMatrix(.Row, 14) = vlaryTempParciales(15, vlintcontador)   'Fecha
                    .TextMatrix(.Row, 15) = vlaryTempParciales(16, vlintcontador)   'Descripción del concepto de facturación
                    .TextMatrix(.Row, 16) = vlaryTempParciales(17, vlintcontador)   'Importe gravado
                    .TextMatrix(.Row, 17) = vlaryTempParciales(18, vlintcontador)   'Importe no gravado
                    .TextMatrix(.Row, 18) = vlaryTempParciales(19, vlintcontador)   'Tipo de concepto X:Normal, EX,DE,CO,CA,CP:Conceptos de seguro
                    
                    .RowData(.Row) = CInt(vlaryTempParciales(12, vlintcontador))
                End With
            Next vlintcontador
        End If
        
        vldblSubtotalFacturaParcial = 0
        dblSubtotalFacturaParcialP = 0
        
        vldblIVAFacturaParcial = 0
        dblIVAFacturaParcialP = 0
        
        vlblnBand = False
        While Not vlblnBand
            vllngConceptoFact = 0
            'Busca los conceptos de facturación de las facturas parciales que aún no han sido considerados
            For vlintcontador = 1 To MSFGFacturasParciales.Rows - 1
                If CLng(Val(MSFGFacturasParciales.TextMatrix(vlintcontador, 12))) > 0 Then
                    vllngConceptoFact = MSFGFacturasParciales.TextMatrix(vlintcontador, 12)
                    Exit For
                End If
            Next
            
            If vllngConceptoFact = 0 Then
            'No hay facturas parciales no consideradas?
                vlblnBand = True
            Else
                'Busca el concepto de facturación como descuento o otros descuentos
                vlintPosicion = fintBuscaConceptoFacturacionDescuento(vllngConceptoFact)
                
                intConceptoNuevo = vlintPosicion
                If vlintPosicion = -1 Then
                'No existe el concepto de fact. en el grid
                    vlintPosicion = IIf(grdGrid.RowData(1) <> -1, grdGrid.Rows, 1)
                    grdGrid.Rows = IIf(grdGrid.RowData(1) <> -1, grdGrid.Rows + 1, grdGrid.Rows)
                End If
                
                grdGrid.RowData(vlintPosicion) = vllngConceptoFact 'Clave del Concepto
                
                ' La Descripcion del concepto
                If intConceptoNuevo = -1 Then
                    vlstrSentencia = "Select PvConceptoFacturacion.chrDescripcion From PvConceptoFacturacion Where PvConceptoFacturacion.smiCveConcepto = " & vllngConceptoFact
                    Set rsTemp = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
                    grdGrid.TextMatrix(vlintPosicion, 1) = Trim(rsTemp!chrDescripcion)
                End If
                
                ' La 3 es el ABONO
                grdGrid.TextMatrix(vlintPosicion, 3) = Format(fdblTotalFacturasParciales(3, True, vllngConceptoFact) _
                                                            / IIf(optPesos(0).Value, 1, vldblTipoCambio), "$ ###,###,###,##0.00")
                ' El 4 es el IVA
                'Negativo para los descuentos
                grdGrid.TextMatrix(vlintPosicion, 4) = Format(fdblTotalFacturasParciales(4, True, vllngConceptoFact) / IIf(optPesos(0).Value, 1, vldblTipoCambio) * -1, "###########0.00")
                
                ' El 5 son los DESCUENTOS, no aplica
                grdGrid.TextMatrix(vlintPosicion, 5) = 0
                
                ' El 6 es el TIPO de CONCEPTO
                grdGrid.TextMatrix(vlintPosicion, 6) = "DE"
                
                ' El 7 es el TIPO de Otro CONCEPTO (No aplica para conceptos normales por eso es un "")
                grdGrid.TextMatrix(vlintPosicion, 7) = IIf(intConceptoNuevo = -1, "", grdGrid.TextMatrix(vlintPosicion, 7)) 'Cual de los otros conceptos es: Deducible, Coaseguro, Copago o Excedente
                
                ' El 8 es la clave del Paquete, No aplica
                grdGrid.TextMatrix(vlintPosicion, 8) = 0
                
                'El 9 son los Cargos con decimales (en el caso de las facturas parciales se ponen solo 2)
                'No se restan los descuentos si es una parcial? chkr o
                'No aplica porque las parciales son abonos no cargos, no se pone 0
                
                'El 10 son los Cargos en pesos
                'No aplica porque las parciales son abonos no cargos, no se pone 0
                
                'El 11 Son los descuentos en pesos
                grdGrid.TextMatrix(vlintPosicion, 11) = IIf(intConceptoNuevo = -1, fdblTotalFacturasParciales(3, True, vllngConceptoFact), grdGrid.TextMatrix(vlintPosicion, 11))
                
                'El 12 Son los cargos en pesos con decimales (en el caso de las facturas parciales se ponen solo 2)
                'No aplica porque las parciales son abonos no cargos, no se pone 0
                
                'El 13 es la tasa de IVA
                grdGrid.TextMatrix(vlintPosicion, 13) = IIf(intConceptoNuevo = -1 And fdblTotalFacturasParciales(4, True, vllngConceptoFact) > 0, vgdblCantidadIvaGeneral, grdGrid.TextMatrix(vlintPosicion, 13))
                
                
                
                ReDim Preserve aCPCargosPoliza(UBound(aCPCargosPoliza) + 1)
                vlintPosicionArreglo = UBound(aCPCargosPoliza) - 1
                
                aCPCargosPoliza(vlintPosicionArreglo).lngConceptoFacturacion = vllngConceptoFact
                aCPCargosPoliza(vlintPosicionArreglo).lngDepartamento = vgintNumeroDepartamento
                aCPCargosPoliza(vlintPosicionArreglo).lngCuentaIngreso = 0         'La cuenta del concepto del fact. del descuento por la factura parcial
                aCPCargosPoliza(vlintPosicionArreglo).lngCuentaDescuento = flngCuentaConceptoDepartamento(vllngConceptoFact, vgintNumeroDepartamento, "INGRESO")     'Para la cuenta del DESCUENTO, La cuenta del INGRESO de la factura parcial
                aCPCargosPoliza(vlintPosicionArreglo).dblCantidadIngreso = 0
                aCPCargosPoliza(vlintPosicionArreglo).dblIVADescuento = 0
                aCPCargosPoliza(vlintPosicionArreglo).dblCantidadDescuento = CDbl(IIf(optPesos(0).Value, fdblTotalFacturasParciales(6, True, vllngConceptoFact), fdblTotalFacturasParciales(6, True, vllngConceptoFact))) 'Cantidad
                'Actualiza el concepto de facturación que se acaba de agregar al arreglo con el signo negativo para no tomarlos en cuenta la siguiente vuelta del ciclo
                For vlintcontador = 1 To MSFGFacturasParciales.Rows - 1
                    If CLng(MSFGFacturasParciales.TextMatrix(vlintcontador, 12)) = vllngConceptoFact Then
                        MSFGFacturasParciales.TextMatrix(vlintcontador, 12) = CLng(MSFGFacturasParciales.TextMatrix(vlintcontador, 12)) * -1
                    End If
                Next
            End If
        Wend
        
        'Pone otra vez signos positivos para usarlos correctamente en el resto del proceso
        For vlintcontador = 1 To MSFGFacturasParciales.Rows - 1
            MSFGFacturasParciales.TextMatrix(vlintcontador, 12) = CLng(Val(MSFGFacturasParciales.TextMatrix(vlintcontador, 12))) * -1
        Next
        
        '***************************************************************************************************
        ' 6).- NOTAS DE CRÉDITO DEL PACIENTE
        '***************************************************************************************************
        If grdGrid.Name = "grdFacturaPaciente" Then
            'ReDim alngNotasPaciente(0)
            'Obtener las notas de crédito que no se han descontado al paciente
            Set rsTemp = frsEjecuta_SP(txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E"), "sp_PvSelNotasCreditoSinFactura")
            Do While Not rsTemp.EOF
                ReDim Preserve alngNotasPaciente(UBound(alngNotasPaciente) + 1)
                alngNotasPaciente(UBound(alngNotasPaciente)) = rsTemp!Consecutivo
                dblNotasCreditoPaciente = dblNotasCreditoPaciente + rsTemp!Importe
                rsTemp.MoveNext
            Loop
        End If
        
        '***************************************************************************************************
        ' 7).- TOTALES
        '***************************************************************************************************
        vldblSubtotalFacturaParcial = Format(IIf(optPesos(0).Value, fdblTotalFacturasParciales(6, True, -1), fdblTotalFacturasParciales(6, True, -1) / vldblTipoCambio), "###,###,##0.00")
        dblSubtotalFacturaParcialP = Format(fdblTotalFacturasParciales(6, True, -1), "###########0.00")
        
        vldblIVAFacturaParcial = Format(IIf(optPesos(0).Value, fdblTotalFacturasParciales(7, True, -1), fdblTotalFacturasParciales(7, True, -1) / vldblTipoCambio), "###,###,##0.00")
        dblIVAFacturaParcialP = Format(fdblTotalFacturasParciales(7, True, -1), "###########0.00")
        
        dblDescuentosP = dblSubtotalFacturaParcialP + dblDescuentosP
        dblSubTotalP = Format(dblSubTotalP - dblSubtotalFacturaParcialP, "##############0.00")
        dblIVAP = Format(dblIVAPacienteP - dblIVAFacturaParcialP, "###########0.00")
        dblTotalFacturaP = Format(dblSubTotalP + dblIVAP, "##############0.00")
        
        'cuando es en dólares que tenga 3 decimales, para que cuando se convierta a pesos, no se pierdan decimales
        If optPesos(0).Value Then
            txtFPSubtotal.Text = Format(vldblSubtotal - vldblSubtotalFacturaParcial, "$ ###,###,###,###.00")
            txtFPDescuentos.Text = Format((vldblSubtotalFacturaParcial) + Val(Format(txtFPDescuentos.Text, "")), "$ ###,###,###,###.00")
            ldblDescuentosFactura = fdblTotalFacturasParciales(10, True, -1) + Val(Format(txtFPDescuentos.Text, ""))
            If CDbl(Format(dblIVAPaciente - vldblIVAFacturaParcial, "$ ###,###,###,###.00")) > 0 Then
                txtFPIVA.Text = Format(dblIVAPaciente - vldblIVAFacturaParcial, "$ ###,###,###,###.00")
            Else
                txtFPIVA.Text = Format(0, "$ ###,###,###,###.00")
            End If
            txtFPTotalFactura.Text = Format(Val(Format(txtFPSubtotal.Text, "")) + Val(Format(txtFPIVA.Text, "")), "$ ###,###,###,###.00")
            txtFPNotasCredito.Text = Format((dblNotasCreditoPaciente + dblNotasCreditoCS + dblIVANotasCreditoCS), "$ ###,###,###,###.00")
            txtRetenionServ.Text = Format((vldblImporteRetencionServ / IIf(optPesos(1).Value, 1, vldblTipoCambio)), "$ ###,###,###,###.00")
            txtFPTotalPagar.Text = Format(Val(Format(txtFPTotalFactura.Text, "")) - Val(Format(txtFPNotasCredito.Text, "")) - Val(Format(txtFPPagos.Text, "")), "$ ###,###,###,###.00")
        Else
            txtFPSubtotal.Text = Format(dblSubTotalP / vldblTipoCambio, "$ ###,###,###,###.00")
            txtFPDescuentos.Text = Format(dblDescuentosP / vldblTipoCambio, "$ ###,###,###,###.00")
            ldblDescuentosFactura = (fdblTotalFacturasParciales(10, True, -1) / vldblTipoCambio) + Val(Format(txtFPDescuentos.Text, ""))
            txtFPIVA.Text = Format(dblIVAP / vldblTipoCambio, "$ ###,###,###,###.00")
            txtFPTotalFactura.Text = Format(dblTotalFacturaP / vldblTipoCambio, "$ ###,###,###,###.00")
            txtFPNotasCredito.Text = Format(((dblNotasCreditoPaciente + dblNotasCreditoCS + dblIVANotasCreditoCS) / vldblTipoCambio), "$ ###,###,###,###.00")
            txtRetenionServ.Text = Format((vldblImporteRetencionServ), "$ ###,###,###,###.00")
            txtFPTotalPagar.Text = Format(Val(Format(txtFPTotalFactura.Text, "")) - Val(Format(txtFPPagos.Text, "")) - Val(Format(txtFPNotasCredito.Text, "")), "$ ###,###,###,###.00")
        End If
        
        dblSTGravadoFP = 0
        vltipocambio = fdblTipoCambio(fdtmServerFecha, "V")

        For vlintcontador = 1 To MSFGFacturasParciales.Rows - 1
          If CLng(Val(MSFGFacturasParciales.TextMatrix(vlintcontador, 8))) > 0 Then
                'Factura base en pesos
                If vldblTipoCambio = 1 Then
                    dblSTGravadoFP = dblSTGravadoFP + Format(CDbl(MSFGFacturasParciales.TextMatrix(vlintcontador, 16)) * IIf(Trim(MSFGFacturasParciales.TextMatrix(vlintcontador, 9)) = "x", vltipocambio, vldblTipoCambio), "############.00")
                Else
                'Factura base en dólares
                    dblSTGravadoFP = dblSTGravadoFP + Format(CDbl(MSFGFacturasParciales.TextMatrix(vlintcontador, 16)) / IIf(Trim(MSFGFacturasParciales.TextMatrix(vlintcontador, 9)) = "x", 1, vldblTipoCambio), "############.00")
                End If
          End If
        Next

        vldblsubtotalgravado = vldblsubtotalgravado - dblSTGravadoFP
        vldblsubtotalgravadoSinRound = vldblsubtotalgravadoSinRound - dblSTGravadoFP
        dblIVAPaciente = dblIVAPaciente - vldblIVAFacturaParcial
        
        'Si (Subtotal-STParcial) - STGravado < 0.02 Entonces
        'Igualar el STGravado al ST
        If Format(Abs((IIf(optPesos(0).Value, (vldblSubtotal - vldblSubtotalFacturaParcial), Format(dblSubTotalP / vldblTipoCambio, "###############.00"))) - Format(vldblsubtotalgravado, "###############.00")), "###############.00") <= 0.02 Then
            vldblsubtotalNogravado = 0
            vldblsubtotalgravado = IIf(optPesos(0).Value, vldblSubtotal - vldblSubtotalFacturaParcial, (dblSubTotalP / vldblTipoCambio))
        Else
            vldblsubtotalNogravado = (IIf(optPesos(0).Value, (vldblSubtotal - vldblSubtotalFacturaParcial), (dblSubTotalP / vldblTipoCambio))) - Format(vldblsubtotalgravado, "###############.00")
        End If
        
        vldblTotalPagarPesos = vldblTotalPagarPesos - fdblTotalFacturasParciales(10, True, -1)
        txtExcluidosPagos.Text = txtFPPagos.Text
        
        MSFGFacturasParciales.Redraw = True
        If vlblnFacturasSinGrabar Then
            chkFacturaBase.Value = 0
            chkFacturaBase.Enabled = False
            cmdEliminaDonativo.Enabled = True
        Else
            pIniciaChkFacturaBase
            cmdEliminaDonativo.Enabled = False
            pHabilitaGrabacionFacturaPaciente
        End If
    Else
    'Empresa
        dblSubTotalP = Format(dblSubTotalP, "###############.00")
        dblIVAP = dblIVACargosSelConvenioP - CDbl(Format(dblIVAPacienteP, "###############.00"))
        dblTotalFacturaP = dblSubTotalP + Format(dblIVAP, "###############.00")
        
        vldblSubtotal = Round(dblImporteFactura, 2) - Round(dblDescuentoFactura, 2)
        dblTotalFactura = vldblSubtotal + Format(dblIVAP / vldblTipoCambio, "###############.00")
        
        vldblImporteRetNew = dblSubtotalGravadoPSinFormat * vldblRetencionServicios
        If vldblImporteRetNew <> vldblImporteRetencionServ Then pcambiaREtencion vldblImporteRetNew, grdFacturaEmpresa
        
        'cuando es en dólares que tenga 3 decimales, para que cuando se convierta a pesos, no se pierdan decimales
        If optPesos(0).Value Then
            txtRetenionServ.Text = Format((vldblImporteRetencionServ / vldblTipoCambio), "$ ###,###,###,###.00")
            txtFESubtotal.Text = Format(vldblSubtotal, "$ ###,###,###,###.00")
            txtFEIVA.Text = Format(ldblIVACargosSelConvenio - dblIVAPaciente, "$ ###,###,###,###.00")
            txtFETotalFactura.Text = Format(Val(Format(txtFESubtotal.Text, "")) + Val(Format(txtFEIVA.Text, "")), "$ ###,###,###,###.00")
        Else
'            txtFESubtotal.Text = Format(dblSubTotalP / vldblTipoCambio, "$ ###,###,###,###.00")
'            txtFEIVA.Text = Format(dblIVAP / vldblTipoCambio, "$ ###,###,###,###.00")
'            txtFETotalFactura.Text = Format(dblTotalFacturaP / vldblTipoCambio, "$ ###,###,###,###.00")
            txtRetenionServ.Text = Format((vldblImporteRetencionServ), "$ ###,###,###,###.00")
            txtFESubtotal.Text = Format(vldblSubtotal, "$ ###,###,###,###.00")
            txtFEIVA.Text = Format(dblIVAP / vldblTipoCambio, "$ ###,###,###,###.00")
            txtFETotalFactura.Text = Format(dblTotalFactura, "$ ###,###,###,###.00")
        End If
        
        If Format(Abs(vldblSubtotal - vldblsubtotalgravado), "############.00") <= 0.02 Then
            vldblsubtotalgravado = vldblSubtotal
        End If
        
        '-------------------------------------------------------------------------------------------------------------------------------------------------------------
        'Descuento especial
        '-------------------------------------------------------------------------------------------------------------------------------------------------------------
        dblDescuentoEspecial = 0
        dblPorcentajeDescEspecial = fdblDescuentoEspecial(vldblSubtotal, dblSubTotalP, CLng(vgintEmpresa), optPesos(1).Value)
        If dblPorcentajeDescEspecial > 0 Then
            '-- 16085
            '-- Al SubTotal de la cuenta se resta el "Medicamento y material excluido" que es:
            '-- La sumatoria de todos los artículos de la cuenta (Importe menos descuento) que tengan marcada la casilla de selección Excluir del descuento especial
            If vlblnConsiderarExcluidosDescEsp Then
                vldblSubtotalExcluidoDE = dblImporteFacturaExcluidosDE - dblDescuentoFacturaExcluidoDE
                ' Se valida de nuevo la configuración para determinar si aplica el monto aplicable al descuento especial (Subtotal - Excluidos)
                dblPorcentajeDescEspecial = fdblDescuentoEspecial((vldblSubtotal - vldblSubtotalExcluidoDE), (dblSubTotalP - vldblSubtotalExcluidoDE), CLng(vgintEmpresa), optPesos(1).Value)
                If dblPorcentajeDescEspecial > 0 Then
                    dblDescuentoEspecial = Round((vldblSubtotal - vldblSubtotalExcluidoDE) * dblPorcentajeDescEspecial, 2)
                End If
            Else
               dblDescuentoEspecial = Round(vldblSubtotal * dblPorcentajeDescEspecial, 2)
            End If
            If dblDescuentoEspecial > 0 Then
                txtFEDescuentoEspecial.Text = Format(dblDescuentoEspecial, "$ ###,###,###,###.00")
                vldblsubtotalgravado = vldblsubtotalgravado - (dblDescuentoEspecial * (vldblsubtotalgravado / vldblSubtotal))
                vldblsubtotalgravadoSinRound = vldblsubtotalgravadoSinRound - (dblDescuentoEspecial * (vldblsubtotalgravadoSinRound / vldblSubtotal))
                
                vldblImporteRetNew = vldblsubtotalgravado * vldblRetencionServicios
                'ldblImporteNoGravaSelConvenio = ldblImporteNoGravaSelConvenio - ((dblSubTotalP * dblPorcentajeDescEspecial) * (ldblImporteNoGravaSelConvenio / dblSubTotalP))
                txtFESubtotal.Text = Format((vldblSubtotal - dblDescuentoEspecial), "$ ###,###,###,###.00")
                If vlblnConsiderarExcluidosDescEsp Then
                    'ldblImporteNoGravaSelConvenio = ldblImporteNoGravaSelConvenio - ((dblSubTotalP * dblPorcentajeDescEspecial) * (ldblImporteNoGravaSelConvenio / dblSubTotalP))
                    'ldblImporteNoGravaSelConvenio = ldblImporteNoGravaSelConvenioExDE + ldblImporteNoGravaSelConvenioNoExDE
                    ldblImporteNoGravaSelConvenio = ldblImporteNoGravaSelConvenio - (ldblImporteNoGravaSelConvenioNoExDE_AntesDE - ldblImporteNoGravaSelConvenioNoExDE)
                    ldblIVACargosSelConvenio = ldblIVACargosSelConvenio - (ldblIVACargosSelConvenioNoExDE - dblIVACargosSelDespuesDescEsp)    '+ ldblIVACargosSelConvenioExDE
                    txtFEIVA.Text = Format((ldblIVACargosSelConvenio), "$ ###,###,###,###.00")
                    'dblIVAP = ((dblSubTotalP - (dblSubTotalP * dblPorcentajeDescEspecial)) * dblIVAP) / dblSubTotalP
                Else
                    ldblImporteNoGravaSelConvenio = ldblImporteNoGravaSelConvenio - ((dblSubTotalP * dblPorcentajeDescEspecial) * (ldblImporteNoGravaSelConvenio / dblSubTotalP))
                    If Val(Format(txtFEIVA.Text, "")) > 0 Then
                       txtFEIVA.Text = Format(((vldblSubtotal - dblDescuentoEspecial) * Val(Format(txtFEIVA.Text, ""))) / vldblSubtotal, "$ ###,###,###,###.00")
                       ldblIVACargosSelConvenio = Format(txtFEIVA.Text, "")
                       dblIVAP = ((dblSubTotalP - (dblSubTotalP * dblPorcentajeDescEspecial)) * dblIVAP) / dblSubTotalP
                    End If
                End If
                '------------------------------------
                'Recorremos el arreglo de las polizas
                '------------------------------------
                pAjusteDescuentoEspecial vldblSubtotal
                '------------------------------------
                vldblSubtotal = vldblSubtotal - dblDescuentoEspecial
                dblSubTotalP = dblSubTotalP - (dblSubTotalP * dblPorcentajeDescEspecial)
                dblTotalFacturaP = Format(dblSubTotalP + dblIVAP, "##############0.00")
                txtFETotalFactura.Text = Format(Val(Format(txtFESubtotal.Text, "")) + Val(Format(txtFEIVA.Text, "")), "$ ###,###,###,###.00")
            End If
        End If
        pAjustaFrameTotalesFE IIf(dblPorcentajeDescEspecial > 0, True, False)
        '--------------------------------------------------------------------------------------------------------------------------------------------------
           
        If optTipoFacturacion(0).Value Then
            'Factura Consolidada
            'Considerar en que moneda esta la factura del paciente al pasar los pagos a la factura de la empresa
            If optPesos(1).Value Then 'Factura de empresa en pesos
                txtFEPagos.Text = IIf(optPesos(0).Value, txtFPPagos.Text, Format((CDbl(txtFPPagos.Text) * fdblTipoCambio(fdtmServerFecha, "V")), "$ ###,###,###,###.00"))
            Else
                'Factura de empresa en dólares
                txtFEPagos.Text = IIf(optPesos(0).Value, Format((CDbl(txtFPPagos.Text) * vldblTipoCambio), "$ ###,###,###,###.00"), txtFPPagos.Text)
            End If
            txtFETotalPagar.Text = Format(Val(Format(txtFETotalFactura.Text, "")) - Val(Format(txtFEDedyCoa.Text, "")) - Val(Format(txtFEPagos.Text, "")) - Val(Format(txtRetenionServ.Text)), "$ ###,###,###,###.00")
            vldblTotalPagarPesos = CDbl(txtFETotalPagar.Text) * vldblTipoCambio
        Else
            'Factura separada
'            txtFEPagos.Text = Format(0, "$ ###,###,###,###.00")
'            txtFETotalPagar.Text = Format(vldblSubtotal - Val(Format(txtFEDedyCoa.Text, "")) + (ldblIVACargosSelConvenio - dblIVAPaciente), "$ ###,###,###,###.00")
'            vldblTotalPagarPesos = CDbl(txtFETotalPagar.Text) * vldblTipoCambio
            
            txtFEPagos.Text = Format(0, "$ ###,###,###,###.00")
            txtFETotalPagar.Text = Format(vldblSubtotal - Val(Format(txtFEDedyCoa.Text, "")) - Val(Format(txtRetenionServ.Text)) + (ldblIVACargosSelConvenio - dblIVAPaciente), "$ ###,###,###,###.00")
            vldblTotalPagarPesos = CDbl(txtFETotalPagar.Text) * vldblTipoCambio
            
        End If
    End If
    
    grdGrid.Col = 2
    
    If grdGrid.Name = "grdFacturaPaciente" Then
        vgdblTotalPagarPesosPaciente = vldblTotalPagarPesos
    End If
    
    'Visualizar el botón de devoluciones de dinero en caso que el total a pagar sea negativo
    If CDbl(txtFPTotalPagar.Text) < 0 Then
        If Len(txtFPTotalPagar.Text) > 10 Then txtFPTotalPagar.FontBold = False
        cmdDevolucionesDinero.Visible = True
    Else
        txtFPTotalPagar.FontBold = True
        cmdDevolucionesDinero.Visible = False
    End If
End Sub
Private Function fdblIvaFacturadoEmpresa() As Double
Dim rsiva As New ADODB.Recordset
    'Iva facturado a la empresa donde se incluyeron los conceptos de seguro
    fdblIvaFacturadoEmpresa = 0
    Set rsiva = frsRegresaRs("select nvl(sum(pvFactura.smyIva),0) iva from pvfactura where pvfactura.chrEstatus <> 'C' and pvFactura.chrTipoFactura = 'E' and pvfactura.intMovPaciente = " & Trim(txtMovimientoPaciente.Text) & " and pvfactura.chrTipoPaciente = " & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & _
                            "and trim(pvfactura.CHRFOLIOFACTURA) in (select trim(pvDetalleFactura.CHRFOLIOFACTURA) from pvDetalleFactura inner join pvFactura on trim(pvfactura.CHRFOLIOFACTURA) = trim(pvDetalleFactura.CHRFOLIOFACTURA) " & _
                            "where pvDetalleFactura.ChrTipo = 'OD'and pvfactura.chrEstatus <> 'C' and pvFactura.chrTipoFactura = 'E' and pvfactura.intMovPaciente = " & Trim(txtMovimientoPaciente.Text) & " and pvfactura.chrTipoPaciente = " & IIf(OptTipoPaciente(0).Value, "'I'", "'E'") & " ) ")
    If rsiva.RecordCount <> 0 Then
        If Not IsNull(rsiva!IVA) Then
            fdblIvaFacturadoEmpresa = rsiva!IVA
        End If
    End If
End Function

Private Sub pLlenaFacturasConvenioAseguradora(grdGrid As MSHFlexGrid)
On Error GoTo NotificaError

    Dim rsParcialesNoDescontadas As ADODB.Recordset
    Dim rsConceptosDedCoaCP As ADODB.Recordset  'RecordSet que trae las descripciones de los conceptos para Deducible, coaseguro y Copago
    Dim rsParcialesCS As ADODB.Recordset        'Para las facturas parciales por conceptos de seguro
    Dim rsFacturado As ADODB.Recordset
    Dim rsNotasCS As ADODB.Recordset
    
    Dim vlaryTempParciales() As String              'Guarda temporalmente las facturas parciales agregadas
    Dim vlstrSentencia As String
    
    Dim blnParcialesSinDescontar As Boolean         'Indica si hay facturas parciales pendientes de descontar a la empresa
    Dim vlblnFacturasSinGrabar As Boolean
    Dim blnFacturasParciales As Boolean             'Indica si el paciente tiene facturas parciales por conceptos de seguro
    Dim blnMostrarConcepto As Boolean               'Indica si el concepto de seguro se muestra en la factura de la empresa
    Dim blnDesglosaIVACS As Boolean                 'Para saber si se desglosa el IVA en todos los conceptos de seguro
    Dim blnFacturaBase As Boolean                   'Indica si existe factura base
    Dim vlblnBand As Boolean
    
    'Totales
    Dim dblTotalNoFactConvenio As Double            'Total de los cargos no facturados de la cuenta de convenio
    Dim vldblTotalPagarPesos As Double              'Variable para calcular el total en Pesos de las facturas de Paciente y empresa
    Dim dblTotalSelConvenio As Double               'Total de los cargos seleccionados de la cuenta de convenio
    Dim dblTotalConvenio As Double                  'Total de los cargos de la cuenta de convenio
    Dim dblTotalNotaCS As Double
    Dim dblTotalConvenio2 As Double                 'Total de los cargos de la cuenta de convenio, sin considerar opción por empresa "Incluir en los conceptos de seguro Descuento/IVA"
    
    'Subtotales
    Dim vldblSubtotalFacturaParcial As Double
    Dim dblSubtotalFacturaParcialP As Double        'Subtotal de la factura parcial en pesos
    Dim dblSubtotalDescontarCS As Double            'Importe en pesos a descontar a la empresa por el concepto de seguro
    Dim dblSubtotalFacturado As Double              'Para el subtotal por CS que ya se facturó al paciente en factura base o parcial que ya se descontó en una base
    Dim dblSTGravadoFP As Double
    Dim vldblSubtotal As Double
    Dim dblSubTotalP As Double                      'Subtotal en pesos
    Dim dblSTNotaCS As Double
    Dim vldblSubtotalExcluidoDE As Double
    
    'IVA's
    Dim dblIVACargosSelConvenioP As Double          'IVA del convenio en pesos
    Dim vldblIVAFacturaParcial As Double
    Dim dblIVAFacturaParcialP As Double             'IVA de la factura parcial en pesos
    Dim dblIVARealConcepto As Double                'IVA que corresponde al concepto de aserguradora, sin aplicar el descuento
    Dim dblIVADescontarCS As Double                 'IVA en pesos a descontar a la empresa por el concepto de seguro
    Dim dblIVAFacturarPac As Double                 'IVA que se le va a facturar al paciente
    Dim dblIVAFacturadoEX As Double                 'IVA de excedente que ya se facturó al paciente
    Dim dblIVAFacturadoDE As Double                 'IVA de deducible que ya se facturó al paciente
    Dim dblIVAFacturadoCO As Double                 'IVA de coaseguro que ya se facturó al paciente
    Dim dblIVAFacturadoCM As Double                 'IVA de coaseguro médico que ya se facturó al paciente
    Dim dblIVAFacturadoCA As Double                 'IVA de coaseguro adicional que ya se facturó al paciente
    Dim dblIVAFacturadoCP As Double
    Dim dblIVAFacturado As Double                   'Para el IVA por CS que ya se facturó al paciente en factura base o parcial que ya se descontó en una base
    Dim dblIVAPacienteP As Double                   'IVA del paciente en pesos
    Dim dblIVAConceptoP As Double                   'IVA del concepto en pesos
    Dim dblIVAConcepto As Double                    'IVA del concepto
    Dim dblIVAParcial As Double                     'Para el IVA de las facturas parciales a descontar en la factura de la empresa
    Dim dblIVANotaCS As Double
    
    'Descuentos
    Dim dblDescuentoConceptoSeguroP As Double       'Descuento del concepto de seguro, en pesos
    Dim dblDescuentoConceptoSeguro As Double        'Descuento en cantidad aplicado a un concepto de seguro (excedente, deducible, coaseguro, coaseguro adicional y/o copago)
    Dim dblDescuentosP As Double                    'Descuentos en pesos
    Dim dblDescuentoFactura As Double
    
    'Importes gravados
    Dim dblImporteGravaConcepto As Double           'Para el importe que grava del concepto de seguro
    Dim dblGravaDescontarCS As Double               'Importe gravado en pesos a descontar a la empresa por el concepto de seguro
    Dim dblImporteGravaPac As Double                'Importe que grava de la cuenta del paciente
    Dim dblGravaParcial As Double                   'Para el el importe gravado de las facturas parciales a descontar en la factura de la empresa
    
    'Pagos
    Dim vldblPagoCoaseguroAdicional As Double       '76Lo que el paciente pagó por concepto de Coaseguro adicional
    Dim vldblPagoDeducible As Double                'Lo que el paciente pagó por concepto de Deducible
    Dim vldblPagoCoaseguro As Double                'Lo que el paciente pagó por concepto de Coaseguro
    Dim vldblPagoCopago As Double                   'Lo que el paciente pagó por concepto de CoPago
    
    'Importes
    Dim dblSumaImportesSeguroFacturar As Double     'Monto total a facturar de Conceptos de seguro
    Dim dblSumaImportesSeguro As Double             'Monto total de Conceptos de Descuento por Deducible, Coaseguro, Copago
    Dim dblImporteNoGravaCS As Double               'Para el importe que no grava de los conceptos de seguro que se descuentan en la factura de la empresa
    Dim dblImporteConceptoP As Double
    Dim dblImporteConcepto As Double                'Para guardar el importe del concepto del seguro sin el IVA
    Dim dblImporteParcial As Double                 'Para el subtotal de las facturas parciales a descontar en la factura de la empresa
    Dim dblImporteGravaCS As Double                 'Para el importe que grava de los conceptos de seguro que se descuentan en la factura de la empresa
    Dim dblImporteFactura As Double
    
    'Conceptos por cargos
    Dim dblCoaseguroAdicionalCargos As Double
    Dim dblExcedenteCargos As Double
    Dim dblDeducibleCargos As Double
    Dim dblCoaseguroCargos As Double
    Dim dblCopagoCargos As Double
    
    Dim dblDescuentoNotaCS As Double                'Indica el descuento en nota de credito por conceptos deseguro
    Dim strTipoDescuentoNotaCS As String            'Indica si el descuento en nota es por P = porcentaje, C = cantidad
    
    Dim dblCoaseguroMedicoF As Double               'Coaseguro médico a facturar
    Dim vldblTipoCambio As Double                   'El tipo de Cambio. Si es en pesos su valor es 1
    Dim dblLimiteNotaCS As Double
'    Dim dblFactorNotaCS As Double
    Dim dblExcedenteCS As Double
    Dim vldblCantidad As Double                     'Esta es una temporal que utilizo para varias cosas
    Dim dblFactorIVA As Double                      'Factor para prorrateo de IVA's por conceptos de seguro
    Dim vltipocambio As Double                      'Para las facturas parciales
    
    Dim vllngConceptoFact As Long
    Dim lngConsecutivoB As Long
    Dim lngConsecutivoP As Long
    
    Dim vlintPosicionArreglo As Integer
    Dim intConceptoNuevo As Integer                 'Indica si el concepto de la factura parcial se encuientra o en los conceptos de la factura base
    Dim vlintPosicion2 As Integer           'Para la posicion de donde se encuentra un cargo según el Concepto y el Departamentos que cargo
    Dim vlintPosicion As Integer            'Para la posicion de donde se encuentra un cargo según los conceptos de facturación
    Dim vlintcontador As Integer
    Dim vlintConta2 As Integer              'Igual que el de arriba pero secundario
    
    Dim DblDescuentoEspecialP As Double  'descuento especial en pesos
    Dim DblDescEspecialG As Double 'descuento especial al importe gravado
    Dim DblDescEspecialNG As Double 'descuento especial al importe no gravado
    Dim dblPorcentajeDescEspecial As Double
    Dim vldblImporteRetNew As Double    'por si hay algun cambio con el control de la aseguradora se reajuste la cantidad
    
    Dim dblIVARealConceptoDeducible As Double

    '-------------------------------------------------------------------------------------------------------------'
    '                   Tipos de conceptos en la factura (Campo 6 del Grid de las facturas)                       '
    '-------------------------------------------------------------------------------------------------------------'
    ' NO = Concepto normal (Conceptos derivados de los cargos del paciente)
    ' OC = Otros Conceptos (Conceptos para facturar Deducible, Coaseguro, Copago y Excedente en Suma asegurada)
    ' DE = Descuentos Normales (Descuentos derivados de los cargos del paciente)
    ' OD = Otros Descuentos (Descuentos para la cuenta de la empresa en el caso de que se factura Deducible,Coaseguro, Copago y/o el Excedente en Suma asegurada)
    ' PA = Pagos normales (Generados como abonos a la cuenta del paciente)
    ' OP = Otros Pagos (Pagos por concepto de Deducible, Coaseguro y/o Copago)
    '-------------------------------------------------------------------------------------------------------------'
    
    'Inicialización de variables y controles
    ReDim audtPaquetesEnCuenta(0)                   'Inicialización del arreglo para relacionar cuentas con paquetes
    ReDim aCPCargosPoliza(0)                        'Inicalización del arreglo para llenar la póliza
    ReDim vlaryCuentaPaquete(0)                     'Inicializa el arreglo para almacenar los paquetes que corresponden a cada cuenta
    ReDim alngFacturasParciales(0)                  'Inicializa el arreglo para los consecutivos de las facturas parciales que se van a descontar a la empresa
    ReDim aNotasCredito(0)                          'Inicalización del arreglo de las notas de crédito
    ReDim alngNotasPaciente(0)
    
    pLimpiaGrid grdGrid
    
    ldblHonorariosAFacturar = 0
    vldblTotalPagarPesos = 0
    dblTotalFacturaP = 0
        
    'Cargos excluídos
    ldblIVAExcluidoSeleccionado = 0
    ldblDescuentoExcluidoNoFact = 0
    ldblImporteExcluidoNoFact = 0
    ldblIVAExcluidoNoFact = 0
    
    'Subtotales
    dblSubtotalFacturaParcialP = 0
    vldblsubtotalNogravado = 0
    vldblsubtotalExento = 0
    ldblSTConvenioNoFact = 0
    ldblSTConvenioNoFactSinDesc = 0
    vldblsubtotalgravado = 0
    vldblsubtotalgravadoSinRound = 0
    dblSubtotalGravadoP = 0
    ldblSTSelConvenio = 0
    vldblSubtotal = 0
    dblSubTotalP = 0
    ldblTSelConvenio = 0
    dblTotalConvenio = 0
    dblTotalConvenio2 = 0
    vldblsubtotalgravadoSinFormat = 0
    dblSubtotalGravadoPSinFormat = 0
    vldblSubtotalExcluidoDE = 0
    
    ldblImporteNoGravaSelConvenio = 0
    ldblImporteExentoSelConvenio = 0
    ldblImporteGravaSelConvenio = 0
    ldblImporteGravaSelConvenioExDE = 0
    ldblImporteNoGravaSelConvenioExDE = 0
    
    'Descuentos
    vldbldescuentogravado = 0
    vldbldescuentoexento = 0
    ldblDescuentosFactura = 0
    vldbldescuentototal = 0
    vldbldescuentototalP = 0
    ldblDescuentos = 0
    ldblDescuentosExentos = 0
    dblDescuentosP = 0
    
    'Conceptos de seguro
    dblSumaImportesSeguro = 0
    dblImporteNoGravaCS = 0
    dblImporteGravaCS = 0
    dblFactorIVA = 0
    
    'IVA's
    ldblIVACargosConvenioNoFact = 0                  'Para el IVA de todos los cargos de la cuenta de convenio no facturados
    ldblIVACargosSelConvenio = 0                     'Para el IVA de los cargos seleccionados de la cuenta de la empresa
    dblIVACargosSelConvenioP = 0                     'Para el IVA en pesos, de los cargos seleccionados de la cuenta de la empresa
    dblIVAFacturaParcialP = 0
    dblIVAFacturarPac = 0
    dblExcedenteDeIVA = 0
    dblIVAConceptoP = 0
    dblIVAPacienteP = 0
    dblIVAPaciente = 0
    dblIVAP = 0
    ldblIVACargosSelConvenioExDE = 0
    
    dblIVAFacturadoEX = 0
    dblIVAFacturadoDE = 0
    dblIVAFacturadoCO = 0
    dblIVAFacturadoCM = 0
    dblIVAFacturadoCA = 0
    dblIVAFacturadoCP = 0
    
    dblIVAEX = 0
    dblIVADE = 0
    dblIVACO = 0
    dblIVACM = 0
    dblIVACA = 0
    dblIVACP = 0
    dblIVAEXE = 0
    dblIVADEE = 0
    dblIVACOE = 0
    dblIVACME = 0
    dblIVACAE = 0
    dblIVACPE = 0
    
    'Nostas de crédito
    dblNotasCreditoPaciente = 0
    dblIVANotasCreditoCS = 0
    dblNotasCreditoCS = 0
    
    'Excedente por honorarios
    blnExcedenteHonorarios = False
    dblCantidadFactorExHonorarios = 0
    dblExcedenteHonorarios = 0
    dblFactorHonorarios = 0
    
    dblExcedenteH = 0
    dblDeducibleH = 0
    dblCoaseguroH = 0
    dblCoaseguroMH = 0
    dblCoaseguroAH = 0
    dblCopagoH = 0
    
    'Excluidos de descuento especial
    dblImporteFacturaExcluidosDE = 0
    dblDescuentoFacturaExcluidoDE = 0
        
    'Para verificar si los cargos son menores a los conceptos de seguro a descontar
    'vlblnCargosMenoresaConcepSegurosNOGravados = False
    
    vldblTipoCambio = IIf(grdGrid.Name = "grdFacturaPaciente", IIf(optPesos(0).Value, 1, fdblTipoCambio(fdtmServerFecha, "V")), IIf(optPesos(1).Value, 1, fdblTipoCambio(fdtmServerFecha, "V")))
            
'    If grdGrid.Name = "grdFacturaPaciente" Then
'        txtFPDescuentos.Text = Format(0, "$ ###,###,###,###.00")
'        txtFPSubtotal.Text = Format(0, "$ ###,###,###,###.00")
'        txtFPIVA.Text = Format(0, "$ ###,###,###,###.00")
'        txtFPTotalFactura.Text = Format(0, "$ ###,###,###,###.00")
'        txtFPPagos.Text = Format(0, "$ ###,###,###,###.00")
'        txtFPNotasCredito.Text = Format(0, "$ ###,###,###,###.00")
'        txtFPTotalPagar.Text = Format(0, "$ ###,###,###,###.00")
'
'        If blnCalcularEnBaseACargos Then
'            Frame13.Enabled = False
'        Else
'            Frame13.Enabled = True
'        End If
'    Else
'        txtFEDescuentos.Text = Format(0, "$ ###,###,###,###.00")
'        txtFEDescuentoEspecial.Text = Format(0, "$ ###,###,###,###.00")
'        txtFESubtotal.Text = Format(0, "$ ###,###,###,###.00")
'        txtFEIVA.Text = Format(0, "$ ###,###,###,###.00")
'        txtFETotalFactura.Text = Format(0, "$ ###,###,###,###.00")
'        txtFEDedyCoa.Text = Format(0, "$ ###,###,###,###.00")
'        txtFEPagos.Text = Format(0, "$ ###,###,###,###.00")
'        txtFETotalPagar.Text = Format(0, "$ ###,###,###,###.00")
'    End If
    pIniciaVariables (grdGrid.Name)
    
    '***************************************************************************************************
    ' 1).- RECORRIDO DE CARGOS SELECCIONADOS PARA FACTURAR
    '***************************************************************************************************
    pLlenaCargosAFacturar grdGrid, dblDescuentosP, vldblTotalPagarPesos
    
    If grdGrid.Name = "grdFacturaEmpresa" Then
        'ldblTmpDescuentoAFactPaciente = IIf(vlintbitConcepSeguroSinDescuentoIVA = 1, dblDescuentosP, 0)
        'ldblTmpDescuentoAFactPaciente = IIf(vlintbitCalculaConcSegconDescuento = 0, dblDescuentosP, 0)
        ldblTmpDescuentoAFactPaciente = IIf(vlintbitCalculaConcSegconDescuento = 0, dblDescuentoCargosConvenio, 0)
    End If
          
    '***************************************************************************************************
    ' 2).- CONCEPTOS DE SEGURO Y FACTOR DE PRORRATEO DE IVA
    '***************************************************************************************************
    dblSumaImportesSeguro = fdblImportesSeguro
    
    'Coaseguro médico
    If chkFacturaCoaseguroMedico.Value = 1 Then
        If grdGrid.Name = "grdFacturaPaciente" Then
            dblCoaseguroMedicoF = Val(Format(txtCoaseguroMedico.Text, ""))
        Else
            dblCoaseguroMedicoF = Val(Format(txtTotalCoaseguroMedico.Text, "")) - dblCoaseguroMFacturadoEmpresa
        End If
    Else
        dblCoaseguroMedicoF = 0
    End If
    
    If Not blnCalcularEnBaseACargos Then
    'Si los cálculos se hacen sobre la cuenta
        'Excedente en suma asegurada:
        vlstrSentencia = "SELECT smiCveConcepto cveConcepto, chrDescripcion Descripcion, " & _
                        " 'EX' Tipo," & _
                        Format(Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")) - dblExcedenteH, "############.00") & " Cantidad, bitexentoIVA " & _
                        " From pvConceptoFacturacion " & _
                        " WHERE (smiCveConcepto = (Select intConceptoSumaAsegurada From pvParametro where tnyclaveempresa = " & vgintClaveEmpresaContable & " )) "
        'Deducible:
        vlstrSentencia = vlstrSentencia & "UNION SELECT smiCveConcepto cveConcepto, chrDescripcion Descripcion, " & _
                            " 'DE' Tipo," & _
                            Format(Val(Format(txtDeducible.Text, "############.00")) - dblDeducibleH, "############.00") & " Cantidad, bitexentoIVA " & _
                            " From pvConceptoFacturacion " & _
                            " WHERE (smiCveConcepto = (Select intConceptoDeducible From pvParametro where tnyclaveempresa = " & vgintClaveEmpresaContable & " )) "
        'Coaseguro:
        vlstrSentencia = vlstrSentencia & "UNION SELECT smiCveConcepto cveConcepto, chrDescripcion Descripcion, " & _
                            " 'CO' Tipo," & _
                            Format(Val(Format(txtCoaseguro.Text, "############.00")) - dblCoaseguroH, "############.00") & " Cantidad, bitexentoIVA " & _
                            " From pvConceptoFacturacion " & _
                            " WHERE (smiCveConcepto = (Select intConceptoCoaseguro From PvParametro where tnyclaveempresa = " & vgintClaveEmpresaContable & " )) "
        'Coaseguro adicional:
        vlstrSentencia = vlstrSentencia & "UNION SELECT smiCveConcepto cveConcepto, chrDescripcion Descripcion, " & _
                            " 'CA' Tipo," & _
                            Format(Val(Format(txtCoaseguroAdicional.Text, "############.00")) - dblCoaseguroAH, "############.00") & " Cantidad, bitexentoIVA " & _
                            " From pvConceptoFacturacion " & _
                            " WHERE (smiCveConcepto = (Select intConceptoCoaseguroAdicional From pvParametro where tnyclaveempresa = " & vgintClaveEmpresaContable & " )) "
        'Copago
        vlstrSentencia = vlstrSentencia & "UNION SELECT smiCveConcepto cveConcepto, chrDescripcion Descripcion, " & _
                            " 'CP' Tipo," & _
                            Format(Val(Format(txtCopago.Text, "############.00")) - dblCopagoH, "############.00") & " Cantidad, bitexentoIVA " & _
                            " From pvConceptoFacturacion " & _
                            " WHERE (smiCveConcepto = (Select intConceptoCopago From pvParametro where tnyclaveempresa = " & vgintClaveEmpresaContable & " )) "
        'Coaseguro médico
        vlstrSentencia = vlstrSentencia & "UNION SELECT smiCveConcepto cveConcepto, chrDescripcion Descripcion, " & _
                            " 'CM' Tipo," & _
                            Format(Val(Format(txtTotalCoaseguroMedico.Text, "############.00")) - dblCoaseguroMH, "############.00") & " Cantidad, bitexentoIVA " & _
                            " From PvConceptoFacturacion " & _
                            " WHERE (smiCveConcepto = (Select intConceptoCoaseguroMedico From PvParametro Where tnyclaveempresa = " & vgintClaveEmpresaContable & " )) "

'        vlstrSentencia = vlstrSentencia & "UNION SELECT smiCveConcepto cveConcepto, chrDescripcion Descripcion, " & _
'                            " 'CM' Tipo," & _
'                            Format(dblCoaseguroMedicoF - dblCoaseguroMH, "############.00") & " Cantidad, bitexentoIVA " & _
'                            " From PvConceptoFacturacion " & _
'                            " WHERE (smiCveConcepto = (Select intConceptoCoaseguroMedico From PvParametro Where tnyclaveempresa = " & vgintClaveEmpresaContable & " )) "
    
    Else
    'Si los cálculos se hacen sobre los cargos seleccionados
        ldblHonorariosAFacturar = Val(Format(txtHonorariosAFacturar.Text, "############.00")) '- Format(IIf(grdGrid.Name = "grdFacturaPaciente", ldblHonorariosFacturadosPac, ldblHonorariosFacturadosEmp), "############.00")
'        If vlintbitConcepSeguroSinDescuentoIVA = 0 Then
'            dblTotalSelConvenio = Val(Format(ldblSTSelConvenio, "############.00")) + Val(Format(ldblIVACargosSelConvenio, "############.00"))
'        ElseIf vlintbitConcepSeguroSinDescuentoIVA = 1 Then
'            dblTotalSelConvenio = Val(Format(ldblSTSelConvenio, "############.00"))
'        End If
        If vlintbitCalculaConceptoSeguroconIVA = 1 Then
            dblTotalSelConvenio = Val(Format(ldblSTSelConvenio, "############.00")) + Val(Format(ldblIVACargosSelConvenio, "############.00"))
        ElseIf vlintbitCalculaConceptoSeguroconIVA = 0 Then
            dblTotalSelConvenio = Val(Format(ldblSTSelConvenio, "############.00"))
        End If
        'ldblTSelConvenio = Val(Format(ldblTSelConvenio, "############.00")) + Val(Format(ldblIVACargosSelConvenio, "############.00"))
        ldblTSelConvenio = Val(Format(ldblTSelConvenio, "############.00")) + Val(ldblIVACargosSelConvenio)
'        If vlintbitConcepSeguroSinDescuentoIVA = 0 Then
'            dblTotalConvenio = Val(Format(dblSTCargosConvenio, "############.00")) + Val(Format(dblIVACargosConvenio, "############.00"))
'        ElseIf vlintbitConcepSeguroSinDescuentoIVA = 1 Then
'            dblTotalConvenio = Val(Format(dblSTCargosConvenio, "############.00"))
'        End If
        If vlintbitCalculaConceptoSeguroconIVA = 1 Then
            dblTotalConvenio = Val(Format(dblSTCargosConvenio, "############.00")) + Val(Format(dblIVACargosConvenio, "############.00"))
        ElseIf vlintbitCalculaConceptoSeguroconIVA = 0 Then
            dblTotalConvenio = Val(Format(dblSTCargosConvenio, "############.00"))
        End If
        dblTotalConvenio2 = Val(Format(dblSTCargosConvenio, "############.00")) + Val(Format(dblIVACargosConvenio, "############.00"))
        
'        If vlintbitConcepSeguroSinDescuentoIVA = 0 Then
'            dblTotalNoFactConvenio = Val(Format(ldblSTConvenioNoFact, "############.00")) + Val(Format(ldblIVACargosConvenioNoFact, "############.00"))
'        ElseIf vlintbitConcepSeguroSinDescuentoIVA = 1 Then
'            dblTotalNoFactConvenio = Val(Format(ldblSTConvenioNoFactSinDesc, "############.00"))
'        End If
        'If vlintbitCalculaConcSegconDescuento = 1 Then
        '    If vlintbitCalculaConceptoSeguroconIVA = 1 Then
        '        dblTotalNoFactConvenio = Val(Format(ldblSTConvenioNoFact, "############.00")) + Val(Format(ldblIVACargosConvenioNoFact, "############.00"))
        '    ElseIf vlintbitCalculaConceptoSeguroconIVA = 0 Then
        '        dblTotalNoFactConvenio = Val(Format(ldblSTConvenioNoFact, "############.00"))
        '    End If
        'ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
        '    If vlintbitCalculaConceptoSeguroconIVA = 1 Then
        '        dblTotalNoFactConvenio = Val(Format(ldblSTConvenioNoFactSinDesc, "############.00")) + Val(Format(ldblIVACargosConvenioNoFact, "############.00"))
        '    ElseIf vlintbitCalculaConceptoSeguroconIVA = 0 Then
        '        dblTotalNoFactConvenio = Val(Format(ldblSTConvenioNoFactSinDesc, "############.00"))
        '    End If
        'End If
        dblTotalNoFactConvenio = Val(Format(ldblSTConvenioNoFact, "############.00")) + Val(Format(ldblIVACargosConvenioNoFact, "############.00"))
        
        dblDeducibleCargos = 0
        dblCoaseguroCargos = 0
        dblCoaseguroAdicionalCargos = 0
        dblCopagoCargos = 0
        dblCoaseguroMedicoCargos = 0
        
        If grdGrid.Name = "grdFacturaPaciente" Then
            'Excedente. Se prorratea
'            dblExcedenteCargos = Format((Val(Format(txtExcedenteSumaAsegurada.Text, "")) - dblExcedenteFacturado) _
'                                 / IIf((dblTotalConvenio - dblCargosFacturadosPaciente) = 0, 1, (dblTotalConvenio - dblCargosFacturadosPaciente)) _
'                                 * dblTotalSelConvenio, "############.00")
            dblExcedenteCargos = Format((Val(Format(txtExcedenteSumaAsegurada.Text, "")) - dblExcedenteFacturado) _
                                 / IIf((dblTotalConvenio2 - dblCargosFacturadosPaciente) = 0, 1, (dblTotalConvenio2 - dblCargosFacturadosPaciente)) _
                                 * ldblTSelConvenio, "############.00")
            'Deducible
            'If optTipoDeducible(0).Value Then
            'Si es cantidad se prorratea
'               dblDeducibleCargos = Format((Val(Format(txtDeducible.Text, "")) - dblDeducibleFacturado) _
'                                    / IIf((dblTotalConvenio - dblCargosFacturadosPaciente) = 0, 1, (dblTotalConvenio - dblCargosFacturadosPaciente)) _
'                                    * dblTotalSelConvenio, "############.00")
               dblDeducibleCargos = Format((Val(Format(txtDeducible.Text, "")) - dblDeducibleFacturado) _
                                    / IIf((dblTotalConvenio2 - dblCargosFacturadosPaciente) = 0, 1, (dblTotalConvenio2 - dblCargosFacturadosPaciente)) _
                                    * ldblTSelConvenio, "############.00")
            'Else
            '    dblDeducibleCargos = Format((dblTotalSelConvenio - dblExcedenteCargos) * (Val(txtPorcentajeDeducible.Text) / 100), "############.00")
                'dblDeducibleCargos = Format((ldblTSelConvenio - dblExcedenteCargos) * (Val(txtPorcentajeDeducible.Text) / 100), "############.00")
            'End If
            
            'Coaseguro
            'If optTipoCoaseguro(0).Value Then
                'dblCoaseguroCargos = Format((dblTotalSelConvenio - dblExcedenteCargos - dblDeducibleCargos) * (Val(txtPorcentajeCoaseguro.Text) / 100), "############.00")
                dblCoaseguroCargos = Format((Val(Format(txtCoaseguro.Text, "")) - dblCoaseguroFacturado) _
                                     / IIf((dblTotalConvenio2 - dblCargosFacturadosPaciente) = 0, 1, (dblTotalConvenio2 - dblCargosFacturadosPaciente)) _
                                     * ldblTSelConvenio, "############.00")
            'Else
                'dblCoaseguroCargos = Format((dblTotalSelConvenio - dblExcedenteCargos) * (Val(txtPorcentajeCoaseguro.Text) / 100), "############.00")
                'dblDeducibleCargos = Format((ldblTSelConvenio - dblExcedenteCargos) * (Val(txtPorcentajeDeducible.Text) / 100), "############.00")
            'End If
            
            If intCoaseguroPorFactura = 0 Then
                If Val(Format(txtCantidadMaximaCO.Text, "############.00")) > 0 And (dblCoaseguroFacturado + dblCoaseguroCargos) > Val(Format(txtCantidadMaximaCO.Text, "############.00")) Then
                    dblCoaseguroCargos = Format(Val(Format(txtCantidadMaximaCO.Text, "############.00")) - dblCoaseguroFacturado, "############.00")
                End If
            Else
                dblCoaseguroCargos = Format(Val(Format(txtCoaseguro.Text, "############.00")) - dblCoaseguroFacturado, "############.00")
            End If
            
            'Coaseguro adicional
            'dblCoaseguroAdicionalCargos = Format((dblTotalSelConvenio - dblExcedenteCargos - dblDeducibleCargos - dblCoaseguroCargos) * (Val(txtPorcentajeCoaseguroAdicional.Text) / 100), "############.00")
            dblCoaseguroAdicionalCargos = Format((Val(Format(txtCoaseguroAdicional.Text, "")) - dblCoaseguroAFacturado) _
                                 / IIf((dblTotalConvenio2 - dblCargosFacturadosPaciente) = 0, 1, (dblTotalConvenio2 - dblCargosFacturadosPaciente)) _
                                 * ldblTSelConvenio, "############.00")
            
            'Copago
            'dblCopagoCargos = Format((dblTotalSelConvenio - dblExcedenteCargos - dblDeducibleCargos - dblCoaseguroCargos - dblCoaseguroAdicionalCargos) * (Val(txtPorcentajeCopago.Text) / 100), "############.00")
            dblCopagoCargos = Format((Val(Format(txtCopago.Text, "")) - dblCopagoFacturado) _
                                 / IIf((dblTotalConvenio2 - dblCargosFacturadosPaciente) = 0, 1, (dblTotalConvenio2 - dblCargosFacturadosPaciente)) _
                                 * ldblTSelConvenio, "############.00")
        
            'Coaseguro médico
            dblCoaseguroMedicoCargos = Format((Val(Format(txtTotalCoaseguroMedico.Text, "")) - dblCoaseguroMFacturado) _
                                 / IIf((dblTotalConvenio2 - dblCargosFacturadosPaciente) = 0, 1, (dblTotalConvenio2 - dblCargosFacturadosPaciente)) _
                                 * ldblTSelConvenio, "############.00")
        
        Else
            'Excedente. Se prorratea
'            dblExcedenteCargos = Format((Val(Format(txtExcedenteSumaAsegurada.Text, "")) - dblExcedenteFacturadoEmpresa) _
'                                 / IIf(dblTotalNoFactConvenio = 0, 1, dblTotalNoFactConvenio) _
'                                 * dblTotalSelConvenio, "############.00")
            dblExcedenteCargos = Format((Val(Format(txtExcedenteSumaAsegurada.Text, "")) - dblExcedenteFacturadoEmpresa) _
                                 / IIf(dblTotalNoFactConvenio = 0, 1, dblTotalNoFactConvenio) _
                                 * ldblTSelConvenio, "############.00")

            'Deducible
            'If optTipoDeducible(0).Value Then
            'Si es cantidad se prorratea
'               dblDeducibleCargos = Format((Val(Format(txtDeducible.Text, "")) - dblDeducibleFacturadoEmpresa) _
'                                    / IIf(dblTotalNoFactConvenio = 0, 1, dblTotalNoFactConvenio) _
'                                    * dblTotalSelConvenio, "############.00")
               dblDeducibleCargos = Format((Val(Format(txtDeducible.Text, "")) - dblDeducibleFacturadoEmpresa) _
                                    / IIf(dblTotalNoFactConvenio = 0, 1, dblTotalNoFactConvenio) _
                                    * ldblTSelConvenio, "############.00")
            'Else
            '    dblDeducibleCargos = Format((dblTotalSelConvenio - dblExcedenteCargos) * (Val(txtPorcentajeDeducible.Text) / 100), "############.00")
            'End If
            
            'Coaseguro
            'dblCoaseguroCargos = Format((dblTotalSelConvenio - dblExcedenteCargos - dblDeducibleCargos) * (Val(txtPorcentajeCoaseguro.Text) / 100), "############.00")
            dblCoaseguroCargos = Format((Val(Format(txtCoaseguro.Text, "")) - dblCoaseguroFacturadoEmpresa) _
                                 / IIf(dblTotalNoFactConvenio = 0, 1, dblTotalNoFactConvenio) _
                                 * ldblTSelConvenio, "############.00")
                        
            If intCoaseguroPorFactura = 0 Then
                If Val(Format(txtCantidadMaximaCO.Text, "############.00")) > 0 And (dblCoaseguroFacturadoEmpresa + dblCoaseguroCargos) > Val(Format(txtCantidadMaximaCO.Text, "############.00")) Then
                    dblCoaseguroCargos = Format(Val(Format(txtCantidadMaximaCO.Text, "############.00")) - dblCoaseguroFacturadoEmpresa, "############.00")
                End If
            Else
                'dblCoaseguroCargos = Format(Val(Format(txtCoaseguro.Text, "############.00")) - dblCoaseguroFacturado, "############.00")
                dblCoaseguroCargos = Format(Val(Format(txtCoaseguro.Text, "############.00")) - dblCoaseguroFacturadoEmpresa, "############.00")
            End If
            
            'Coaseguro adicional
            'dblCoaseguroAdicionalCargos = Format((dblTotalSelConvenio - dblExcedenteCargos - dblDeducibleCargos - dblCoaseguroCargos) * (Val(txtPorcentajeCoaseguroAdicional.Text) / 100), "############.00")
            dblCoaseguroAdicionalCargos = Format((Val(Format(txtCoaseguroAdicional.Text, "")) - dblCoaseguroAFacturadoEmpresa) _
                                 / IIf(dblTotalNoFactConvenio = 0, 1, dblTotalNoFactConvenio) _
                                 * ldblTSelConvenio, "############.00")
            
            'Copago
            'dblCopagoCargos = Format((dblTotalSelConvenio - dblExcedenteCargos - dblDeducibleCargos - dblCoaseguroCargos - dblCoaseguroAdicionalCargos) * (Val(txtPorcentajeCopago.Text) / 100), "############.00")
            dblCopagoCargos = Format((Val(Format(txtCopago.Text, "")) - dblCopagoFacturadoEmpresa) _
                                 / IIf(dblTotalNoFactConvenio = 0, 1, dblTotalNoFactConvenio) _
                                 * ldblTSelConvenio, "############.00")
            
            'Coaseguro médico
            dblCoaseguroMedicoCargos = Format((Val(Format(txtTotalCoaseguroMedico.Text, "")) - dblCoaseguroMFacturadoEmpresa) _
                                 / IIf(dblTotalNoFactConvenio = 0, 1, dblTotalNoFactConvenio) _
                                 * ldblTSelConvenio, "############.00")
        End If
        
        'Excedente en suma asegurada:
        vlstrSentencia = "SELECT smiCveConcepto cveConcepto, chrDescripcion Descripcion, " & _
                        " 'EX' Tipo," & _
                        Format(dblExcedenteCargos, "############.00") & " Cantidad, bitexentoIVA " & _
                        " From pvConceptoFacturacion " & _
                        " WHERE (smiCveConcepto = (Select intConceptoSumaAsegurada From pvParametro where tnyclaveempresa = " & vgintClaveEmpresaContable & " )) "
        'Deducible:
        vlstrSentencia = vlstrSentencia & "UNION SELECT smiCveConcepto cveConcepto, chrDescripcion Descripcion, " & _
                            " 'DE' Tipo," & _
                            Format(dblDeducibleCargos, "############.00") & " Cantidad, bitexentoIVA " & _
                            " From pvConceptoFacturacion " & _
                            " WHERE (smiCveConcepto = (Select intConceptoDeducible From pvParametro where tnyclaveempresa = " & vgintClaveEmpresaContable & " )) "
        'Coaseguro:
        vlstrSentencia = vlstrSentencia & "UNION SELECT smiCveConcepto cveConcepto, chrDescripcion Descripcion, " & _
                            " 'CO' Tipo," & _
                            Format(dblCoaseguroCargos, "############.00") & " Cantidad, bitexentoIVA " & _
                            " From pvConceptoFacturacion " & _
                            " WHERE (smiCveConcepto = (Select intConceptoCoaseguro From PvParametro where tnyclaveempresa = " & vgintClaveEmpresaContable & " )) "
        'Coaseguro adicional:
        vlstrSentencia = vlstrSentencia & "UNION SELECT smiCveConcepto cveConcepto, chrDescripcion Descripcion, " & _
                            " 'CA' Tipo," & _
                            Format(dblCoaseguroAdicionalCargos, "############.00") & " Cantidad, bitexentoIVA " & _
                            " From pvConceptoFacturacion " & _
                            " WHERE (smiCveConcepto = (Select intConceptoCoaseguroAdicional From pvParametro where tnyclaveempresa = " & vgintClaveEmpresaContable & " )) "
        'Copago
        vlstrSentencia = vlstrSentencia & "UNION SELECT smiCveConcepto cveConcepto, chrDescripcion Descripcion, " & _
                            " 'CP' Tipo," & _
                            Format(dblCopagoCargos, "############.00") & " Cantidad, bitexentoIVA " & _
                            " From pvConceptoFacturacion " & _
                            " WHERE (smiCveConcepto = (Select intConceptoCopago From pvParametro where tnyclaveempresa = " & vgintClaveEmpresaContable & " )) "
        'Coaseguro médico
'        vlstrSentencia = vlstrSentencia & "UNION SELECT smiCveConcepto cveConcepto, chrDescripcion Descripcion, " & _
'                            " 'CM' Tipo," & _
'                            Format(dblCoaseguroMedicoF, "############.00") & " Cantidad " & _
'                            " From PvConceptoFacturacion " & _
'                            " WHERE (smiCveConcepto = (Select intConceptoCoaseguroMedico From PvParametro Where tnyclaveempresa = " & vgintClaveEmpresaContable & " )) "
        vlstrSentencia = vlstrSentencia & "UNION SELECT smiCveConcepto cveConcepto, chrDescripcion Descripcion, " & _
                            " 'CM' Tipo," & _
                            Format(dblCoaseguroMedicoCargos, "############.00") & " Cantidad, bitexentoIVA " & _
                            " From PvConceptoFacturacion " & _
                            " WHERE (smiCveConcepto = (Select intConceptoCoaseguroMedico From PvParametro Where tnyclaveempresa = " & vgintClaveEmpresaContable & " )) "
    
        'Excedente de IVA
        vlstrSentencia = vlstrSentencia & "UNION SELECT smiCveConcepto cveConcepto, chrDescripcion Descripcion, " & _
                        " 'EI' Tipo, 0 Cantidad, bitexentoIVA " & _
                        " From PvConceptoFacturacion " & _
                        " WHERE (smiCveConcepto = (Select intExcedenteIVA From PvParametro Where tnyclaveempresa = " & vgintClaveEmpresaContable & " )) "
            
'        dblSumaImportesSeguroFacturar = dblExcedenteCargos + dblDeducibleCargos + dblCoaseguroCargos + dblCoaseguroAdicionalCargos + dblCopagoCargos + dblCoaseguroMedicoF
        dblSumaImportesSeguroFacturar = dblExcedenteCargos + dblDeducibleCargos + dblCoaseguroCargos + dblCoaseguroAdicionalCargos + dblCopagoCargos + dblCoaseguroMedicoCargos
    End If
    
    Set rsConceptosDedCoaCP = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
    
    'Si el IVA de los conceptos se desglosa a la tasa del hospital
    If intIVATasaHospi = 1 Then
        'Se calcula el IVA de los conceptos solo para ver si es menor al IVA de la cuenta del convenio
        'Aqui no se deben de tomar en cuenta los descuentos
        'porque para restar el IVA del paciente a la empresa, no se consideran los descuentos
        Do While Not rsConceptosDedCoaCP.EOF
            If Not blnCalcularEnBaseACargos Then
                vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & _
                                    CStr(vgintClaveEmpresaContable) & "|" & rsConceptosDedCoaCP!tipo & "|0|" & claveCarta
                Set rsParcialesCS = frsEjecuta_SP(vgstrParametrosSP, "Sp_PvSelFacturasConceptoSeguro")
                Do While Not rsParcialesCS.EOF
                    Select Case rsConceptosDedCoaCP!tipo
                        Case "EX"
                            dblIVAFacturadoEX = dblIVAFacturadoEX + rsParcialesCS!IVA
                        Case "DE"
                            dblIVAFacturadoDE = dblIVAFacturadoDE + rsParcialesCS!IVA
                        Case "CO"
                            dblIVAFacturadoCO = dblIVAFacturadoCO + rsParcialesCS!IVA
                        Case "CM"
                            dblIVAFacturadoCM = dblIVAFacturadoCM + rsParcialesCS!IVA
                        Case "CA"
                            dblIVAFacturadoCA = dblIVAFacturadoCA + rsParcialesCS!IVA
                        Case "CP"
                            dblIVAFacturadoCP = dblIVAFacturadoCP + rsParcialesCS!IVA
                    End Select
                    rsParcialesCS.MoveNext
                Loop
                rsParcialesCS.Close
            End If
            
            'Si hay parciales se resta el IVA de las parciales
            If rsConceptosDedCoaCP!tipo = "EX" And lintDesglosaIVAExcedente = 1 Then
            'Excedente
                dblIVAFacturarPac = dblIVAFacturarPac + Format((rsConceptosDedCoaCP!cantidad) - ((rsConceptosDedCoaCP!cantidad) / (1 + (fdblTasaIVAEmpresa(vgintEmpresa) / 100))), "############.00") - dblIVAFacturadoEX
            ElseIf rsConceptosDedCoaCP!tipo = "DE" And lintDesglosaIVADeducible = 1 Then
            'Deducible
                dblIVAFacturarPac = dblIVAFacturarPac + Format((rsConceptosDedCoaCP!cantidad) - ((rsConceptosDedCoaCP!cantidad) / (1 + (fdblTasaIVAEmpresa(vgintEmpresa) / 100))), "############.00") - dblIVAFacturadoDE
            ElseIf rsConceptosDedCoaCP!tipo = "CO" And lintDesglosaIVACoaseguro = 1 Then
            'Coaseguro
                dblIVAFacturarPac = dblIVAFacturarPac + Format((rsConceptosDedCoaCP!cantidad) - ((rsConceptosDedCoaCP!cantidad) / (1 + (fdblTasaIVAEmpresa(vgintEmpresa) / 100))), "############.00") - dblIVAFacturadoCO
            ElseIf rsConceptosDedCoaCP!tipo = "CM" And lintDesglosaIVACoaseguroMedico = 1 Then
            'Coaseguro médico
                dblIVAFacturarPac = dblIVAFacturarPac + Format((rsConceptosDedCoaCP!cantidad) - ((rsConceptosDedCoaCP!cantidad) / (1 + (fdblTasaIVAEmpresa(vgintEmpresa) / 100))), "############.00") - dblIVAFacturadoCM
            ElseIf rsConceptosDedCoaCP!tipo = "CA" And lintDesglosaIVACoaseguroAdicional = 1 Then
            'Coaseguro adicional
                dblIVAFacturarPac = dblIVAFacturarPac + Format((rsConceptosDedCoaCP!cantidad) - ((rsConceptosDedCoaCP!cantidad) / (1 + (fdblTasaIVAEmpresa(vgintEmpresa) / 100))), "############.00") - dblIVAFacturadoCA
            ElseIf rsConceptosDedCoaCP!tipo = "CP" And lintDesglosaIVACopago = 1 Then
            'Copago
                dblIVAFacturarPac = dblIVAFacturarPac + Format((rsConceptosDedCoaCP!cantidad) - ((rsConceptosDedCoaCP!cantidad) / (1 + (fdblTasaIVAEmpresa(vgintEmpresa) / 100))), "############.00") - dblIVAFacturadoCP
            End If
            rsConceptosDedCoaCP.MoveNext
        Loop
        
        If rsConceptosDedCoaCP.RecordCount > 0 Then rsConceptosDedCoaCP.MoveFirst
    End If
    
    'Factor del cálculo para los conceptos de seguro
    If dblSumaImportesSeguro > 0 Then
        If Not blnCalcularEnBaseACargos Then
            'El factor es en base a todos los cargos de la cuenta, facturados y no facturados
            'Si hay excedente por honorarios el factor debe ser 1 porque el paciente va a pagar todo
            'dblFactorIVA = IIf(blnExcedenteHonorarios, 1, dblSumaImportesSeguro / IIf(Val(Format(txtTotalSinExcluidos.Text, "")) = 0, 1, (Val(Format(txtTotalSinExcluidos.Text, "")) - Val(Format(txtHonorarios.Text, "")))))
            'ldblTotalCargosSINExcluidos = Val(Format(Val(Format(txtHonorarios.Text, "")) + ldblTotalCargosHospital, "")) - ldblTotalCargosExcluidos
            'If vlintbitCalculaConceptoSeguroconIVA = 1 Then
            '    ldblTotalCargosConvenioSinExcluidos = Val(Format(dblSTCargosConvenio + dblIVACargosConvenio, ""))
            'ElseIf vlintbitCalculaConceptoSeguroconIVA = 0 Then
            '    ldblTotalCargosConvenioSinExcluidos = Val(Format(dblSTCargosConvenio, ""))
            'End If
            'ldblTotalCargosConvenioSinExcluidos = ldblTotalCargosConvenioSinExcluidos + dblIVACargosConvenio
            'dblFactorIVA = IIf(blnExcedenteHonorarios, 1, dblSumaImportesSeguro / IIf(ldblTotalCargosSINExcluidos = 0, 1, (ldblTotalCargosSINExcluidos - Val(Format(txtHonorarios.Text, "")) - ldblTmpDescuentoAFactPaciente)))
            dblFactorIVA = IIf(blnExcedenteHonorarios, 1, dblSumaImportesSeguro / IIf(ldblTotalCargosConvenioSinExcluidos = 0, 1, ldblTotalCargosConvenioSinExcluidos))
       Else
            'dblFactorIVA = dblSumaImportesSeguroFacturar / IIf(dblTotalSelConvenio = 0, 1, dblTotalSelConvenio)
            dblFactorIVA = dblSumaImportesSeguroFacturar / IIf(ldblTSelConvenio = 0, 1, ldblTSelConvenio)
        End If
    End If

    'Para saber si desglosa IVA en todos los conceptos
    If lintDesglosaIVAExcedente = 1 _
    And lintDesglosaIVADeducible = 1 _
    And lintDesglosaIVACoaseguro = 1 _
    And lintDesglosaIVACoaseguroMedico = 1 _
    And lintDesglosaIVACoaseguroAdicional = 1 _
    And lintDesglosaIVACopago = 1 Then blnDesglosaIVACS = True
        
    '-------------------------------------
    ' IVA, que quede con 2 decimales
    '-------------------------------------
    'No se usa el Round porque con ese el .5 baja y con el Format .5 si sube
    'dblIVACargosSelConvenioP = Format(ldblIVACargosSelConvenio, "###############.00")
    dblIVACargosSelConvenioP = ldblIVACargosSelConvenio
    ldblIVACargosSelConvenio = Format(ldblIVACargosSelConvenio / vldblTipoCambio, "###############.00")
    ldblIVAExcluidoSeleccionado = Format(ldblIVAExcluidoSeleccionado, "###############.00")
    
    lblnCanceloFacturaPaciente = fblnSoloFacPacienteCancelada(sstFacturacion.TabEnabled(2), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(txtMovimientoPaciente.Text))
    If Not blnCalcularEnBaseACargos Then
        If lblnCanceloFacturaPaciente Then
'            intDesglosaIVAPaciente = IIf(fdblIvaFacturadoEmpresa() >= Format(dblIVAFacturarPac, "############.00"), 1, 0)

            intDesglosaIVAPaciente = IIf(dblIVAFacturarPac > 0, 1, 0)
        Else
            intDesglosaIVAPaciente = IIf(ldblIVACargosConvenioNoFact >= Format(dblIVAFacturarPac, "############.00"), 1, 0)
        End If
    Else
        intDesglosaIVAPaciente = IIf(Val(Format(dblIVACargosSelConvenioP, "###############.00")) >= Val(Format(dblIVAFacturarPac, "############.00")), 1, 0)
        If intIVATasaHospi = 1 And intDesglosaIVAPaciente = 0 Then
            dblExcedenteDeIVA = Val(Format(dblIVAFacturarPac, "############.00")) - Val(Format(dblIVACargosSelConvenioP, "###############.00"))
            intDesglosaIVAPaciente = 1
        End If
    End If
    
    'Esto es para que cuando el IVA se desglosa a la tasa del hospital y hay excedente por honorarios, entonces el IVA se prorratee
    'O para cuando se calcula en base a cargos y no se alcanza a desglosar el IVA de los conceptos a la tasa del hospital
    If blnExcedenteHonorarios And intIVATasaHospi = 1 Then intIVATasaHospi = 0
   
    vldbldescuentototal = Format(ldblDescuentos, "")
    vldbldescuentogravado = Format(vldbldescuentogravado, "")
    vldbldescuentoexento = Format(ldblDescuentosExentos, "")
    vldbldescuentototalP = Format(dblDescuentosP, "")
    
    If grdGrid.Name = "grdFacturaPaciente" Then pAgregaExcedente vldblTipoCambio
    
    '***************************************************************************************************
    ' 3).- EXCEDENTE, DEDUCIBLE, COASEGURO, COASEGURO MÉDICO, COASEGURO ADICIONAL y COPAGO
    '      PARA FACTURA DEL PACIENTE
    '***************************************************************************************************
    If grdGrid.Name = "grdFacturaPaciente" Then
        dblImporteConceptoP = 0
        dblImporteGravaPac = 0
        
        ldblExcedenteGrava = 0
        ldblDeducibleGrava = 0
        ldblCoaseguroGrava = 0
        ldblCoaseguroMedicoGrava = 0
        ldblCoaseguroAdicionalGrava = 0
        ldblCopagoGrava = 0
        
        dblIVAExcedente = 0
        dblIVADeducible = 0
        dblIVACoaseguro = 0
        dblIVACoaseguroMedico = 0
        dblIVACoaseguroAdicional = 0
        dblIVACopago = 0
        
        dblIVAPaciente = 0
        dblIVAPacienteP = 0
        dblIVARealConcepto = 0
        
        ldblDesctoExcedente = 0
        ldblDesctoDeducible = 0
        ldblDesctoCoaseguro = 0
        ldblDesctoCoaseguroMedico = 0
        ldblDesctoCoaseguroAdicional = 0
        ldblDesctoCopago = 0
        
        dblDescuentoNotaCS = 0
        dblLimiteNotaCS = 0
        
        dblImporteGravaPac = IIf(blnCalcularEnBaseACargos, ldblImporteGravaSelConvenio, dblImporteGravaConvenio) * dblFactorIVA / vldblTipoCambio
        
        
        Do While Not rsConceptosDedCoaCP.EOF
            If (rsConceptosDedCoaCP!cantidad > 0 And Not lblnExcedenteFacturado And rsConceptosDedCoaCP!tipo = "EX") _
                Or (rsConceptosDedCoaCP!cantidad > 0 And Not lblnDeducibleFacturado And rsConceptosDedCoaCP!tipo = "DE" And chkFacturaDeducible.Value = 1) _
                Or (rsConceptosDedCoaCP!cantidad > 0 And Not lblnCoaseguroFacturado And rsConceptosDedCoaCP!tipo = "CO" And chkFacturaCoaseguro.Value = 1) _
                Or (rsConceptosDedCoaCP!cantidad > 0 And Not lblnCoaseguroMedicoFacturado And rsConceptosDedCoaCP!tipo = "CM" And chkFacturaCoaseguroMedico.Value = 1) _
                Or (rsConceptosDedCoaCP!cantidad > 0 And Not lblnCoaseguroAdicionalFacturado And rsConceptosDedCoaCP!tipo = "CA" And chkFacturaCoaseguroAdicional.Value = 1) _
                Or (rsConceptosDedCoaCP!cantidad > 0 And Not lblnCopagoFacturado And rsConceptosDedCoaCP!tipo = "CP" And chkFacturaCopago.Value = 1) Then

                blnFacturaBase = False
                
                dblSubtotalFacturado = 0
                dblIVAFacturado = 0
                
                If Not blnCalcularEnBaseACargos Then
                    'Revisa si hay factura Base
                    vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & "|" & _
                                        IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & _
                                        CStr(vgintClaveEmpresaContable) & "|" & _
                                        rsConceptosDedCoaCP!tipo & "|" & claveCarta
                    Set rsFacturado = frsEjecuta_SP(vgstrParametrosSP, "Sp_PvSelFacturaBaseCS")
                    If rsFacturado.RecordCount > 0 Then
                    'Cuando ya hay factura base se descuenta lo que ya se facturó en las bases y las parciales que ya se descontaron en una base
                        blnFacturaBase = Not IsNull(rsFacturado!st)
    
                        'Estas son cantidades en pesos
                        dblSubtotalFacturado = IIf(blnFacturaBase, rsFacturado!st, 0)
                        dblIVAFacturado = IIf(IsNull(rsFacturado!IVA), 0, rsFacturado!IVA)
                    End If 'Factura base
                    rsFacturado.Close
                End If
                
                dblExcedenteCS = 0
                'Si la cuenta es menor al total de conceptos de seguro
                If blnExcedenteHonorarios Then
                    Select Case rsConceptosDedCoaCP!tipo
                        Case "EX"
                            dblExcedenteCS = dblExcedenteH
                        Case "DE"
                            dblExcedenteCS = dblDeducibleH
                        Case "CO"
                            dblExcedenteCS = dblCoaseguroH
                        Case "CM"
                            dblExcedenteCS = dblCoaseguroMH
                        Case "CA"
                            dblExcedenteCS = dblCoaseguroAH
                        Case "CP"
                            dblExcedenteCS = dblCopagoH
                    End Select
                End If
                
                If (rsConceptosDedCoaCP!tipo = "EX" And (lintDesglosaIVAExcedente = 1 Or blnExcedenteHonorarios)) _
                    Or (rsConceptosDedCoaCP!tipo = "DE" And (lintDesglosaIVADeducible = 1 Or blnExcedenteHonorarios)) _
                    Or (rsConceptosDedCoaCP!tipo = "CO" And (lintDesglosaIVACoaseguro = 1 Or blnExcedenteHonorarios)) _
                    Or (rsConceptosDedCoaCP!tipo = "CM" And (lintDesglosaIVACoaseguroMedico = 1 Or blnExcedenteHonorarios)) _
                    Or (rsConceptosDedCoaCP!tipo = "CA" And (lintDesglosaIVACoaseguroAdicional = 1 Or blnExcedenteHonorarios)) _
                    Or (rsConceptosDedCoaCP!tipo = "CP" And (lintDesglosaIVACopago = 1 Or blnExcedenteHonorarios)) Then
               
                    'Lo que ya se facturó parcialmente del concepto se abona en el 9
                    dblImporteConceptoP = rsConceptosDedCoaCP!cantidad
                    dblDescuentoConceptoSeguroP = Format(fdblDescuentoConceptoSeguro(rsConceptosDedCoaCP!cveConcepto, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(dblImporteConceptoP, "###############.00"), rsConceptosDedCoaCP!tipo), "###############.00")
                    
                    'Si el IVA se prorratea
                    If intIVATasaHospi = 0 Then
                        If blnExcedenteHonorarios Then
                            pIVACS dblSumaImportesSeguro
                            
                            Select Case rsConceptosDedCoaCP!tipo
                                Case "EX"
                                    dblIVAConceptoP = dblIVAEX
                                    dblIVARealConcepto = dblIVAEXE
                                Case "DE"
                                    dblIVAConceptoP = dblIVADE
                                    dblIVARealConcepto = dblIVADEE
                                Case "CO"
                                    dblIVAConceptoP = dblIVACO
                                    dblIVARealConcepto = dblIVACOE
                                Case "CM"
                                    dblIVAConceptoP = dblIVACM
                                    dblIVARealConcepto = dblIVACME
                                Case "CA"
                                    dblIVAConceptoP = dblIVACA
                                    dblIVARealConcepto = dblIVACAE
                                Case "CP"
                                    dblIVAConceptoP = dblIVACP
                                    dblIVARealConcepto = dblIVACPE
                            End Select
                            
                            dblIVAConceptoP = dblIVAConceptoP - dblIVAFacturado
                            dblIVARealConcepto = dblIVARealConcepto - dblIVAFacturado
                        Else
                            'Si los cálculos se hacen en base al total de la cuenta
                            If Not blnCalcularEnBaseACargos Then
                                'El IVA que va a pagar el paciente se debe calcular en base al importe del concepto menos el descuento
                                dblIVAConceptoP = (dblIVACargosConvenio * dblFactorIVA * ((dblImporteConceptoP - dblDescuentoConceptoSeguroP) / IIf(dblSumaImportesSeguro = 0, 1, dblSumaImportesSeguro))) - dblIVAFacturado
                                
                                'Ese es el IVA que se le descontará a la empresa por el cocepto y no se toma en cuenta el descuento, siempre está en pesos
                                dblIVARealConcepto = (dblIVACargosConvenio * dblFactorIVA * (dblImporteConceptoP / IIf(dblSumaImportesSeguro = 0, 1, dblSumaImportesSeguro))) - dblIVAFacturado
                            Else
                            'Los cálculos se hacen en base a los cargos seleccionados
                                'El IVA que va a pagar el paciente se debe calcular en base al importe del concepto menos el descuento
                                dblIVAConceptoP = (dblIVACargosSelConvenioP * dblFactorIVA * ((dblImporteConceptoP - dblDescuentoConceptoSeguroP) / IIf(dblSumaImportesSeguroFacturar = 0, 1, dblSumaImportesSeguroFacturar)))
                                
                                'Ese es el IVA que se le descontará a la empresa por el cocepto y no se toma en cuenta el descuento, siempre está en pesos
                                'Checar aqui porque cuando se calcula en base a los cargos y el IVA se prorratea el IG no corresponde al IVA o al revés :S
                                dblIVARealConcepto = (dblIVACargosSelConvenioP * dblFactorIVA * (dblImporteConceptoP / IIf(dblSumaImportesSeguroFacturar = 0, 1, dblSumaImportesSeguroFacturar))) ' - dblIVAFacturado
                            End If
                        End If
                    Else
                    'Si el IVA se desglosa a la tasa del hospital
                        'Si se desglosa IVA al paciente
                        If intDesglosaIVAPaciente = 1 Then
                            'Aqui no se deben tomar en cuenta las facturas paciales, solo el descuento
                            'IVA del concepto = Importe del concepto - Descuento  - (Importe del concepto / 1 + tasa de IVA del hospital)
                            dblIVAConceptoP = ((dblImporteConceptoP - dblDescuentoConceptoSeguroP) - ((dblImporteConceptoP - dblDescuentoConceptoSeguroP) / (1 + (fdblTasaIVAEmpresa(vgintEmpresa) / 100)))) - dblIVAFacturado
                            dblIVARealConcepto = (dblImporteConceptoP - (dblImporteConceptoP / (1 + (fdblTasaIVAEmpresa(vgintEmpresa) / 100)))) - dblIVAFacturado
                    
                        'Si no se va a facturar IVA por conceptos de seguro al paciente porque es mayor que el IVA de la cuenta
                        Else
                            dblIVAConceptoP = 0
                            dblIVARealConcepto = 0
                            dblIVAExcedente = 0
                            dblIVADeducible = 0
                            dblIVACoaseguro = 0
                            dblIVACoaseguroMedico = 0
                            dblIVACoaseguroAdicional = 0
                            dblIVACopago = 0
                        End If
                    End If
                    
                    dblDescuentoConceptoSeguro = Format(dblDescuentoConceptoSeguroP, "###############.00") / vldblTipoCambio
                    
                    'Aqui ya no se le resta lo facturado porque a dblIVAConceptoP ya se le restó
                    dblIVAConcepto = dblIVAConceptoP / vldblTipoCambio
                    
                    'Importe concepto = Cantidad del concepto - IVA que se cobrará del concepto - Importe facturado en factura base - IVA Facturado
                    dblImporteConcepto = ((dblImporteConceptoP - dblSubtotalFacturado - dblIVAFacturado) / vldblTipoCambio) - dblIVAConcepto
                    dblImporteConceptoP = dblImporteConceptoP - dblIVAConceptoP - dblSubtotalFacturado - dblIVAFacturado
                Else
                'No se desglosa IVA
                    dblIVAConcepto = 0
                    dblIVAConceptoP = 0
                    
                    dblImporteConcepto = (rsConceptosDedCoaCP!cantidad - dblSubtotalFacturado) / vldblTipoCambio
                    dblImporteConceptoP = rsConceptosDedCoaCP!cantidad - dblSubtotalFacturado
                    
                    dblDescuentoConceptoSeguroP = Format(fdblDescuentoConceptoSeguro(rsConceptosDedCoaCP!cveConcepto, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(rsConceptosDedCoaCP!cantidad, "###############.00"), rsConceptosDedCoaCP!tipo), "###############.00")
                    dblDescuentoConceptoSeguro = dblDescuentoConceptoSeguroP / vldblTipoCambio
                End If
                
                dblImporteGravaConcepto = 0
'                dblFactorNotaCS = 0
                dblTotalNotaCS = 0
                dblSTNotaCS = 0
                dblIVANotaCS = 0
                
                If rsConceptosDedCoaCP!tipo = "EX" Then
                'Excedente:
                    dblDescuentoNotaCS = dblPorcentajeEXNota
                    dblLimiteNotaCS = dblLimiteNotaEX
                    strTipoDescuentoNotaCS = strTipoDesctoNotaExcedente

                    dblIVAExcedente = IIf(lintDesglosaIVAExcedente = 1 Or blnExcedenteHonorarios, dblIVARealConcepto, 0)
                    If (lintDesglosaIVAExcedente = 1 Or blnExcedenteHonorarios) And dblIVAConcepto > 0 Then
                        If intIVATasaHospi = 0 Then
                        'Si el IVA se prorratea
                            dblImporteGravaConcepto = dblImporteGravaPac * ((dblImporteConceptoP - dblDescuentoConceptoSeguroP + dblIVAConceptoP) / IIf(IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro) = 0, 1, IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro)))
                        Else
                            If intDesglosaIVAPaciente = 1 Then dblImporteGravaConcepto = dblImporteConcepto - (dblDescuentoConceptoSeguroP / vldblTipoCambio)
                        End If
                        
                        'Parchecillo por aquello del centavo volador
                        If Format(Abs(dblImporteGravaConcepto - dblImporteConcepto), "############.00") <= 0.01 And (dblImporteGravaConcepto - dblImporteConcepto) <> 0 Then
                             ldblExcedenteGrava = dblImporteConcepto
                             dblImporteGravaConcepto = ldblExcedenteGrava
                        Else
                             ldblExcedenteGrava = dblImporteGravaConcepto
                        End If
                    Else
                        ldblExcedenteGrava = 0
                    End If
                    ldblDesctoExcedente = Format(fdblDescuentoConceptoSeguro(rsConceptosDedCoaCP!cveConcepto, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtExcedenteSumaAsegurada.Text, "############.00")), rsConceptosDedCoaCP!tipo), "###############.00")

                ElseIf rsConceptosDedCoaCP!tipo = "DE" Then
                'Deducible:
                    dblDescuentoNotaCS = dblPorcentajeDENota
                    dblLimiteNotaCS = dblLimiteNotaDE
                    strTipoDescuentoNotaCS = strTipoDesctoNotaDeducible

                    dblIVADeducible = IIf(lintDesglosaIVADeducible = 1 Or blnExcedenteHonorarios, dblIVARealConcepto, 0)
                    If (lintDesglosaIVADeducible = 1 Or blnExcedenteHonorarios) And dblIVAConcepto > 0 Then

                        If intIVATasaHospi = 0 Then
                        'Si el IVA se prorratea
                            dblImporteGravaConcepto = dblImporteGravaPac * ((dblImporteConceptoP - dblDescuentoConceptoSeguroP + dblIVAConceptoP) / IIf(IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro) = 0, 1, IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro)))
                            'dblImporteGravaConcepto = dblImporteGravaPac * ((dblImporteConceptoP - dblDescuentoConceptoSeguroP) / IIf(IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro) = 0, 1, IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro)))
                        Else
                            If intDesglosaIVAPaciente = 1 Then dblImporteGravaConcepto = dblImporteConcepto - (dblDescuentoConceptoSeguroP / vldblTipoCambio)
                        End If
                        
                        'Parcecillo por aquello del centavo volador
                        If Format(Abs(dblImporteGravaConcepto - dblImporteConcepto), "############.00") <= 0.01 And (dblImporteGravaConcepto - dblImporteConcepto) <> 0 Then
                            ldblDeducibleGrava = dblImporteConcepto
                            dblImporteGravaConcepto = ldblDeducibleGrava
                        Else
                            ldblDeducibleGrava = dblImporteGravaConcepto
                        End If
                    Else
                        ldblDeducibleGrava = 0
                    End If
                    ldblDesctoDeducible = Format(fdblDescuentoConceptoSeguro(rsConceptosDedCoaCP!cveConcepto, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtDeducible.Text, "############.00")), rsConceptosDedCoaCP!tipo), "###############.00")

                ElseIf rsConceptosDedCoaCP!tipo = "CO" Then
                'Coaseguro:
                    dblDescuentoNotaCS = dblPorcentajeCONota
                    dblLimiteNotaCS = dblLimiteNotaCO
                    strTipoDescuentoNotaCS = strTipoDesctoNotaCoaseguro

                    dblIVACoaseguro = IIf(lintDesglosaIVACoaseguro = 1 Or blnExcedenteHonorarios, dblIVARealConcepto, 0)
                    If (lintDesglosaIVACoaseguro = 1 Or blnExcedenteHonorarios) And dblIVAConcepto > 0 Then
                        If intIVATasaHospi = 0 Then
                        'Si el IVA se prorratea
                            dblImporteGravaConcepto = dblImporteGravaPac * ((dblImporteConceptoP - dblDescuentoConceptoSeguroP + dblIVAConceptoP) / IIf(IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro) = 0, 1, IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro)))
                            'dblImporteGravaConcepto = dblImporteGravaPac * ((dblImporteConceptoP - dblDescuentoConceptoSeguroP) / IIf(IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro) = 0, 1, IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro)))
                        Else
                            If intDesglosaIVAPaciente = 1 Then dblImporteGravaConcepto = dblImporteConcepto - (dblDescuentoConceptoSeguroP / vldblTipoCambio)
                        End If
                        
                        'Parcecillo por aquello del centavo volador
                        If Format(Abs(dblImporteGravaConcepto - dblImporteConcepto), "############.00") <= 0.01 And (dblImporteGravaConcepto - dblImporteConcepto) <> 0 Then
                            ldblCoaseguroGrava = dblImporteConcepto
                            dblImporteGravaConcepto = ldblCoaseguroGrava
                        Else
                            ldblCoaseguroGrava = dblImporteGravaConcepto
                        End If
                    Else
                        ldblCoaseguroGrava = 0
                    End If
                    ldblDesctoCoaseguro = Format(fdblDescuentoConceptoSeguro(rsConceptosDedCoaCP!cveConcepto, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtCoaseguro.Text, "###############.00")), rsConceptosDedCoaCP!tipo), "###############.00####")
                    
                ElseIf rsConceptosDedCoaCP!tipo = "CM" Then
                'Coaseguro médico:
                    dblDescuentoNotaCS = dblPorcentajeCMNota
                    dblLimiteNotaCS = dblLimiteNotaCM
                    strTipoDescuentoNotaCS = strTipoDesctoNotaCoaMedico

                    dblIVACoaseguroMedico = IIf(lintDesglosaIVACoaseguroMedico = 1, dblIVARealConcepto, 0)
                    If (lintDesglosaIVACoaseguroMedico = 1) And dblIVAConcepto > 0 Then
                        If intIVATasaHospi = 0 Then
                        'Si el IVA se prorratea
                            dblImporteGravaConcepto = dblImporteGravaPac * ((dblImporteConceptoP - dblDescuentoConceptoSeguroP + dblIVAConceptoP) / IIf(IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro) = 0, 1, IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro)))
                        Else
                            If intDesglosaIVAPaciente = 1 Then dblImporteGravaConcepto = dblImporteConcepto - (dblDescuentoConceptoSeguroP / vldblTipoCambio)
                        End If
                        
                        'Parcecillo por aquello del centavo volador
                        If Format(Abs(dblImporteGravaConcepto - dblImporteConcepto), "############.00") <= 0.01 And (dblImporteGravaConcepto - dblImporteConcepto) <> 0 Then
                            ldblCoaseguroMedicoGrava = dblImporteConcepto
                            dblImporteGravaConcepto = ldblCoaseguroMedicoGrava
                        Else
                            ldblCoaseguroMedicoGrava = dblImporteGravaConcepto
                        End If
                    Else
                        ldblCoaseguroMedicoGrava = 0
                    End If

                    'ldblDesctoCoaseguroMedico = Format(fdblDescuentoConceptoSeguro(rsConceptosDedCoaCP!cveConcepto, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(Val(Format(txtHonorarios.Text, "############.00")) * (Val(Format(txtPorcentajeCoaseguroMed.Text, "###.00")) / 100), "############.00"), rsConceptosDedCoaCP!tipo), "###############.00")
                    ldblDesctoCoaseguroMedico = Format(fdblDescuentoConceptoSeguro(rsConceptosDedCoaCP!cveConcepto, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Format(Val(Format(txtHonorarios.Text, "############.00")) * (Val(Format(txtPorcentajeCoaseguroMed.Text, "###.00")) / 100), "############.00"), rsConceptosDedCoaCP!tipo), "###############.00####")
                    
                ElseIf rsConceptosDedCoaCP!tipo = "CA" Then
                'Coaseguro adicional:
                    dblDescuentoNotaCS = dblPorcentajeCANota
                    dblLimiteNotaCS = dblLimiteNotaCA
                    strTipoDescuentoNotaCS = strTipoDesctoNotaCoaAdicional

                    dblIVACoaseguroAdicional = IIf(lintDesglosaIVACoaseguroAdicional = 1 Or blnExcedenteHonorarios, dblIVARealConcepto, 0)
                    If (lintDesglosaIVACoaseguroAdicional = 1 Or blnExcedenteHonorarios) And dblIVAConcepto > 0 Then
                        If intIVATasaHospi = 0 Then
                        'Si el IVA se prorratea
                            dblImporteGravaConcepto = dblImporteGravaPac * ((dblImporteConceptoP - dblDescuentoConceptoSeguroP + dblIVAConceptoP) / IIf(IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro) = 0, 1, IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro)))
                        Else
                            If intDesglosaIVAPaciente = 1 Then dblImporteGravaConcepto = dblImporteConcepto - (dblDescuentoConceptoSeguroP / vldblTipoCambio)
                        End If
                        
                        'Parcecillo por aquello del centavo volador
                        If Format(Abs(dblImporteGravaConcepto - dblImporteConcepto), "############.00") <= 0.01 And (dblImporteGravaConcepto - dblImporteConcepto) <> 0 Then
                            ldblCoaseguroAdicionalGrava = dblImporteConcepto
                            dblImporteGravaConcepto = ldblCoaseguroAdicionalGrava
                        Else
                            ldblCoaseguroAdicionalGrava = dblImporteGravaConcepto
                        End If
                    Else
                        ldblCoaseguroAdicionalGrava = 0
                    End If
                    ldblDesctoCoaseguroAdicional = Format(fdblDescuentoConceptoSeguro(rsConceptosDedCoaCP!cveConcepto, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtCoaseguroAdicional.Text, "############.00")), rsConceptosDedCoaCP!tipo), "###############.00####")
                    
                ElseIf rsConceptosDedCoaCP!tipo = "CP" Then
                'Copago:
                    dblDescuentoNotaCS = dblPorcentajeCPNota
                    dblLimiteNotaCS = dblLimiteNotaCP
                    strTipoDescuentoNotaCS = strTipoDesctoNotaCopago

                    dblIVACopago = IIf(lintDesglosaIVACopago = 1 Or blnExcedenteHonorarios, dblIVARealConcepto, 0)
                    If (lintDesglosaIVACopago = 1 Or blnExcedenteHonorarios) And dblIVAConcepto > 0 Then
                        If intIVATasaHospi = 0 Then
                        'Si el IVA se prorratea
                            dblImporteGravaConcepto = dblImporteGravaPac * ((dblImporteConceptoP - dblDescuentoConceptoSeguroP + dblIVAConceptoP) / IIf(IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro) = 0, 1, IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro)))
                        Else
                            If intDesglosaIVAPaciente = 1 Then dblImporteGravaConcepto = dblImporteConcepto - (dblDescuentoConceptoSeguroP / vldblTipoCambio)
                        End If
                        
                        'Parcecillo por aquello del centavo volador
                        If Format(Abs(dblImporteGravaConcepto - dblImporteConcepto), "############.00") <= 0.01 And (dblImporteGravaConcepto - dblImporteConcepto) <> 0 Then
                            ldblCopagoGrava = dblImporteConcepto
                            dblImporteGravaConcepto = ldblCopagoGrava
                        Else
                            ldblCopagoGrava = dblImporteGravaConcepto
                        End If
                    Else
                        ldblCopagoGrava = 0
                    End If
                    
                    ldblDesctoCopago = Format(fdblDescuentoConceptoSeguro(rsConceptosDedCoaCP!cveConcepto, Val(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(Format(txtCopago.Text, "############.00")), rsConceptosDedCoaCP!tipo), "###############.00####")
                End If
                
                ldblDescuentos = ldblDescuentos + dblDescuentoConceptoSeguro
                dblDescuentosP = dblDescuentosP + dblDescuentoConceptoSeguroP
                
                'dblIVAPaciente = dblIVAPaciente + (Format(dblIVAConcepto, "###############.00"))
                'dblIVAPacienteP = dblIVAPacienteP + Format(dblIVAConceptoP, "###############.00")
                dblIVAPaciente = dblIVAPaciente + (Format(dblIVAConcepto, "###############.00####"))
                dblIVAPacienteP = dblIVAPacienteP + Format(dblIVAConceptoP, "###############.00####")
                
                vldblTotalPagarPesos = vldblTotalPagarPesos + rsConceptosDedCoaCP!cantidad - dblSubtotalFacturado - dblIVAFacturado
                'If Int(dblImporteConcepto - dblDescuentoConceptoSeguro) <> 0 Then
                If Format(dblImporteConcepto - dblDescuentoConceptoSeguro, "###############.00") <> 0 Then
                    'vldblsubtotalgravado = vldblsubtotalgravado + IIf(dblIVAConcepto = 0, dblIVAConcepto, Format(dblImporteGravaConcepto, "###############.00"))
                    vldblsubtotalgravado = vldblsubtotalgravado + IIf(dblIVAConcepto = 0, dblIVAConcepto, Format(dblImporteGravaConcepto, "###############.00####"))
                    vldblsubtotalgravadoSinRound = vldblsubtotalgravadoSinRound + IIf(dblIVAConcepto = 0, dblIVAConcepto, dblImporteGravaConcepto)
                    
                    dblSubtotalGravadoPSinFormat = dblSubtotalGravadoPSinFormat + IIf(dblIVAConcepto = 0, dblIVAConcepto, dblImporteGravaConcepto) '1
                End If
                
                If CDbl(Format(CStr(dblImporteConcepto), "############.00")) > 0 Then
                    If grdGrid.RowData(1) <> -1 Then grdGrid.Rows = grdGrid.Rows + 1
                    
                    'dblImporteConceptoP = Format(dblImporteConceptoP, "############.00") + dblExcedenteCS
                    'dblImporteConcepto = Format(dblImporteConcepto, "############.00") + (dblExcedenteCS / vldblTipoCambio)
                    dblImporteConceptoP = dblImporteConceptoP + dblExcedenteCS
                    dblImporteConcepto = dblImporteConcepto + (dblExcedenteCS / vldblTipoCambio)
                    
                    'Si esta activo el bit cuando el deducible tenga descuento del 100%
                    If rsConceptosDedCoaCP!Descripcion = "DEDUCIBLE" Then
                        If blnDeducibleSinIVA Then
                            If ldblDesctoDeducible = Val(Format(txtDeducible.Text, "############.00")) Then
                                dblImporteConcepto = dblImporteConcepto - dblIVARealConcepto
                                dblIVARealConceptoDeducible = dblIVARealConcepto
                            End If
                        End If
                    End If
                    'Clave
                    grdGrid.RowData(grdGrid.Rows - 1) = rsConceptosDedCoaCP!cveConcepto
                    'Descripcion
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 1) = rsConceptosDedCoaCP!Descripcion
                    'Importe
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 2) = Format(dblImporteConcepto, "$ ###,###,###,###.00####")
                    'Importe sin formato
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 9) = dblImporteConcepto
                    'IVA
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 4) = dblIVAConcepto
                    'Descuentos
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 5) = dblDescuentoConceptoSeguro
                    'Otros Conceptos
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 6) = "OC"
                    'Excedente, Deducible, Coaseguro, Coaseguro médico, Coaseguro adicional o Copago
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 7) = rsConceptosDedCoaCP!tipo
                    'Cargos en pesos
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 10) = Format(rsConceptosDedCoaCP!cantidad + dblExcedenteCS - dblIVAConceptoP - dblSubtotalFacturado - dblIVAFacturado, "###############.00####")
                    'Cargos con todos los decimales
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 12) = (rsConceptosDedCoaCP!cantidad + dblExcedenteCS - dblIVAConceptoP - dblSubtotalFacturado - dblIVAFacturado)
                    
                    vlintPosicion2 = fintPosicion(rsConceptosDedCoaCP!cveConcepto, CLng(vgintNumeroDepartamento))
                    
                    If vlintPosicion2 = -1 Then
                        ReDim Preserve aCPCargosPoliza(UBound(aCPCargosPoliza) + 1)
                        aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngConceptoFacturacion = rsConceptosDedCoaCP!cveConcepto
                        aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngDepartamento = vgintNumeroDepartamento
                        aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaIngreso = flngCuentaConceptoDepartamento(rsConceptosDedCoaCP!cveConcepto, vgintNumeroDepartamento, "INGRESO")
                        aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaDescuento = flngCuentaConceptoDepartamento(rsConceptosDedCoaCP!cveConcepto, vgintNumeroDepartamento, "DESCUENTO")
                        aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadIngreso = dblImporteConceptoP - dblExcedenteCS
                        aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadDescuento = dblDescuentoConceptoSeguroP
                    Else
                        aCPCargosPoliza(vlintPosicion2).dblCantidadIngreso = aCPCargosPoliza(vlintPosicion2).dblCantidadIngreso + dblImporteConceptoP - dblExcedenteCS
                        aCPCargosPoliza(vlintPosicion2).dblCantidadDescuento = (aCPCargosPoliza(vlintPosicion2).dblCantidadDescuento + 0)
                    End If
                    
                    'Si se genera nota de crédito para el concepto de seguro
                    If dblDescuentoNotaCS > 0 Then
                    'Las notas siempre son en pesos
                        'Calcular el ST y el IVA
                        If strTipoDescuentoNotaCS = "P" Then
                            dblTotalNotaCS = Format(rsConceptosDedCoaCP!cantidad * Format(dblDescuentoNotaCS / 100, "#.00"), "############.00")
                        Else
                            dblTotalNotaCS = dblDescuentoNotaCS
                        End If
                        If blnCalcularEnBaseACargos Then
                        'Obtiene las notas de crédito que se le han hecho a la cuenta por el concepto de seguro
                            vgstrParametrosSP = txtMovimientoPaciente.Text & "|" & _
                                                IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & _
                                                rsConceptosDedCoaCP!tipo & "|" & _
                                                CStr(vgintClaveEmpresaContable)
                            Set rsNotasCS = frsEjecuta_SP(vgstrParametrosSP, "Sp_PvSelNotasCreditoCS")
                            If rsNotasCS.RecordCount > 0 Then
                                If strTipoDescuentoNotaCS = "P" Then
                                    If rsNotasCS!Importe + dblTotalNotaCS > dblLimiteNotaCS And dblLimiteNotaCS > 0 Then
                                        dblTotalNotaCS = dblLimiteNotaCS - rsNotasCS!Importe
    '                                    dblFactorNotaCS = dblTotalNotaCS / rsConceptosDedCoaCP!cantidad
    '                                Else
    '                                    dblFactorNotaCS = Format(dblDescuentoNotaCS / 100, "#.00")
                                    End If
                                Else
                                    If (dblDescuentoNotaCS > rsConceptosDedCoaCP!cantidad) Then dblTotalNotaCS = rsConceptosDedCoaCP!cantidad
                                    dblTotalNotaCS = dblTotalNotaCS - rsNotasCS!Importe
    '                                dblFactorNotaCS = dblTotalNotaCS / rsConceptosDedCoaCP!cantidad
                                End If
                            End If
                        Else
                            If strTipoDescuentoNotaCS = "P" Then
                                If dblTotalNotaCS > dblLimiteNotaCS And dblLimiteNotaCS > 0 Then
                                    dblTotalNotaCS = dblLimiteNotaCS
    '                                dblFactorNotaCS = dblTotalNotaCS / rsConceptosDedCoaCP!cantidad
                                Else
    '                                dblFactorNotaCS = Format(dblDescuentoNotaCS / 100, "#.00")
                                End If
                            Else
                                If (dblDescuentoNotaCS > rsConceptosDedCoaCP!cantidad) Then dblTotalNotaCS = rsConceptosDedCoaCP!cantidad
    '                            dblFactorNotaCS = dblTotalNotaCS / rsConceptosDedCoaCP!cantidad
                            End If
                        End If
                        
                        If dblIVAConceptoP <> 0 Then
                            dblSTNotaCS = Format(dblTotalNotaCS / (1 + (fdblTasaIVAEmpresa(vgintEmpresa) / 100)), "###############.00")
                            dblIVANotaCS = Format(dblTotalNotaCS - dblSTNotaCS, "###############.00")
                        Else
                            dblIVANotaCS = Format(0, "###############.00")
                            dblSTNotaCS = Format(dblTotalNotaCS, "###############.00")
                        End If
                        
    '                    dblIVANotaCS = Format(dblFactorNotaCS * dblIVAConceptoP, "###############.00")
    '                    dblSTNotaCS = Format(dblTotalNotaCS - dblIVANotaCS, "###############.00")
                        
                        'Se agrega al arreglo
                        ReDim Preserve aNotasCredito(UBound(aNotasCredito) + 1)
                        aNotasCredito(UBound(aNotasCredito)).lngCveConcepto = rsConceptosDedCoaCP!cveConcepto
                        aNotasCredito(UBound(aNotasCredito)).dblSubTotal = dblSTNotaCS
                        aNotasCredito(UBound(aNotasCredito)).dblIVA = dblIVANotaCS
                        aNotasCredito(UBound(aNotasCredito)).lngCuentaDescuento = flngCuentaConceptoDepartamento(rsConceptosDedCoaCP!cveConcepto, vgintNumeroDepartamento, "DESCUENTO")
                        
                        'Se van sumando las cantidades de las notas
                        dblNotasCreditoCS = dblNotasCreditoCS + dblSTNotaCS
                        dblIVANotasCreditoCS = dblIVANotasCreditoCS + dblIVANotaCS
                    End If
                End If
            End If
            rsConceptosDedCoaCP.MoveNext
        Loop
        
        dblIVAPaciente = dblIVAPaciente + (ldblIVAExcluidoSeleccionado / vldblTipoCambio)
        dblIVAPacienteP = dblIVAPacienteP + ldblIVAExcluidoSeleccionado
    End If
    
    '***************************************************************************************************
    ' 4).- DESCUENTOS
    '***************************************************************************************************
    If ldblDescuentos > 0 Then
        If blnDeducibleSinIVA Then
            If ldblDesctoDeducible = Val(Format(txtDeducible.Text, "############.00")) Then
                ldblDescuentos = ldblDescuentos - dblIVARealConceptoDeducible
            End If
        End If
        grdGrid.Rows = grdGrid.Rows + 1
        grdGrid.RowData(grdGrid.Rows - 1) = -2 'Clave interna para descuentos
        grdGrid.TextMatrix(grdGrid.Rows - 1, 1) = "DESCUENTOS"
        grdGrid.TextMatrix(grdGrid.Rows - 1, 3) = Format(((ldblDescuentos)), "$ ###,###,###,###.00####") 'Cantidad Descuentos
        grdGrid.TextMatrix(grdGrid.Rows - 1, 11) = Format(((dblDescuentosP)), "############.00####")  'Cantidad Descuentos en pesos
        grdGrid.TextMatrix(grdGrid.Rows - 1, 5) = 0
        grdGrid.TextMatrix(grdGrid.Rows - 1, 6) = "DE"  'Descuentos normales
    End If
    
    '***************************************************************************************************
    ' 5).- PAGOS
    '***************************************************************************************************
   
    If grdGrid.Name = "grdFacturaPaciente" Then
        If Val(Format(txtPagos.Text, "")) <> 0 Then
            If grdGrid.RowData(1) <> -1 Then grdGrid.Rows = grdGrid.Rows + 1
            grdGrid.RowData(grdGrid.Rows - 1) = 0 'Los pagos no tienen numero de concepto
            grdGrid.TextMatrix(grdGrid.Rows - 1, 1) = "PAGOS"
            vldblCantidad = Format((Val(Format(txtPagos.Text, ""))), "###############.00")
           grdGrid.TextMatrix(grdGrid.Rows - 1, 3) = IIf(optPesos(0).Value, Format(((vldblCantidad)), "############.00"), Format(ConvertirDolaresACantidad(vldblCantidad), "$ ###,###,###,###.00"))  'Cantidad pagos
            grdGrid.TextMatrix(grdGrid.Rows - 1, 11) = Format(((vldblCantidad)), "############.00")   'Cantidad del pago en pesos
            grdGrid.TextMatrix(grdGrid.Rows - 1, 5) = 0
            grdGrid.TextMatrix(grdGrid.Rows - 1, 6) = "PA" 'Pago normal
            vldblTotalPagarPesos = vldblTotalPagarPesos - Val(Format(txtPagos.Text, ""))
        End If
    End If
    
    '***************************************************************************************************
    ' 6).- DEDUCIBLE, COASEGURO, COASEGURO ADICIONAL y COPAGO
    '      PARA LA EMPRESA CUANDO NO SON FACTURADOS AL PACIENTE
    '***************************************************************************************************
    If grdGrid.Name = "grdFacturaEmpresa" And gintAseguradora = 1 Then
        If rsControlSeguro.RecordCount > 0 Then
            If rsControlSeguro!MNYCANTIDADDEDUCIBLE > 0 Or rsControlSeguro!MNYCANTIDADCOASEGURO > 0 Or rsControlSeguro!MNYCANTIDADCOASEGUROADICIONAL > 0 Or rsControlSeguro!MNYCANTIDADCOPAGO > 0 Then
                vldblPagoDeducible = 0
                vldblPagoCoaseguro = 0
                vldblPagoCoaseguroAdicional = 0
                vldblPagoCopago = 0
                
                pPagosCS vldblPagoDeducible, vldblPagoCoaseguro, vldblPagoCoaseguroAdicional, vldblPagoCopago, vldblTipoCambio, vldblTotalPagarPesos
            End If
        End If
    End If
    
    '***************************************************************************************************
    ' 7).- EXCEDENTE, DEDUCIBLE, COASEGURO, COASEGURO MÉDICO, COASEGURO ADICIONAL y COPAGO
    '      PARA FACTURA DE LA EMPRESA
    '***************************************************************************************************
    If grdGrid.Name = "grdFacturaEmpresa" And gintAseguradora = 1 And (Val(Format(txtCargosHospitalNoFacturados, "############.00")) - Val(Format(txtCargosExcluidosNoFacturados, "############.00")) > 0) Then
        'Si no se ha facturado al paciente estonces se hacen los cálculos para mostrar los abonos
        If grdFacturaPaciente.RowData(1) > 0 _
        And (Val(Format(txtFPDescuentos.Text, "")) <> 0 _
        Or Val(Format(txtFPSubtotal.Text, "")) <> 0) Then
        'Todo esto es sólo para no quitar funcionalidad pfff
            ldblExcedenteGrava = 0
            ldblDeducibleGrava = 0
            ldblCoaseguroGrava = 0
            ldblCoaseguroMedicoGrava = 0
            ldblCoaseguroAdicionalGrava = 0
            ldblCopagoGrava = 0
    
            dblIVAPaciente = 0
            dblIVAPacienteP = 0
            
            blnParciales = False
    
            dblImporteGravaPac = IIf(blnCalcularEnBaseACargos, ldblImporteGravaSelConvenio, dblImporteGravaConvenio) * dblFactorIVA / vldblTipoCambio
            vldblImporteRetNew = IIf(blnCalcularEnBaseACargos, ldblImporteGravaSelConvenio, dblImporteGravaConvenio) * vldblRetencionServicios
            If vldblImporteRetNew <> vldblImporteRetencionServ Then vldblImporteRetencionServ = vldblImporteRetNew
            
            ReDim alngFacturasParciales(0)
            blnFacturasParciales = False
            
            vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & "|" & _
                                IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & _
                                CStr(vgintClaveEmpresaContable)
            Set rsParcialesCS = frsEjecuta_SP(vgstrParametrosSP, "Sp_PvSelFacturasParcialesPac")
            If rsParcialesCS.RecordCount > 0 Then
                blnFacturasParciales = True
            End If
            rsParcialesCS.Close
                        
            Do While Not rsConceptosDedCoaCP.EOF
                If (rsConceptosDedCoaCP!cantidad > 0 And rsConceptosDedCoaCP!tipo = "EX") _
                    Or (rsConceptosDedCoaCP!cantidad > 0 And rsConceptosDedCoaCP!tipo = "DE" And chkFacturaDeducible.Value = 1) _
                    Or (rsConceptosDedCoaCP!cantidad > 0 And rsConceptosDedCoaCP!tipo = "CO" And chkFacturaCoaseguro.Value = 1) _
                    Or (rsConceptosDedCoaCP!cantidad > 0 And rsConceptosDedCoaCP!tipo = "CM" And chkFacturaCoaseguroMedico.Value = 1) _
                    Or (rsConceptosDedCoaCP!cantidad > 0 And rsConceptosDedCoaCP!tipo = "CA" And chkFacturaCoaseguroAdicional.Value = 1) _
                    Or (rsConceptosDedCoaCP!cantidad > 0 And rsConceptosDedCoaCP!tipo = "CP" And chkFacturaCopago.Value = 1) _
                    Or (dblExcedenteDeIVA > 0 And rsConceptosDedCoaCP!tipo = "EI") Then
                
                    dblImporteParcial = 0
                    dblIVAParcial = 0
                    dblGravaParcial = 0
                    
                    lngConsecutivoB = 0
                    lngConsecutivoP = 0
                    
                    blnParcialesSinDescontar = False
                    blnMostrarConcepto = False
                    blnFacturaBase = False
                    
                    If rsConceptosDedCoaCP!tipo <> "EI" Then
                        If blnFacturasParciales Then
                        'Si el paciente tiene facturas parciales de algún concepto de seguro
                            'Si hay facturas parciales sin descontar del CS
                            vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & "|" & _
                                                IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & _
                                                CStr(vgintClaveEmpresaContable) & "|" & _
                                                rsConceptosDedCoaCP!tipo
                            Set rsParcialesNoDescontadas = frsEjecuta_SP(vgstrParametrosSP, "Sp_PvSelParcialesNoDescontadas")
                            If rsParcialesNoDescontadas.RecordCount > 0 Then
                                blnParcialesSinDescontar = Not IsNull(rsParcialesNoDescontadas!IdFactura)
                                blnMostrarConcepto = blnParcialesSinDescontar
                                blnParciales = blnParcialesSinDescontar
                                If blnParcialesSinDescontar Then
                                    'Revisa si hay factura base y obtiene el consecutivo mayor
                                    vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & "|" & _
                                                         IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & _
                                                         CStr(vgintClaveEmpresaContable) & "|" & _
                                                         rsConceptosDedCoaCP!tipo
                                    Set rsParcialesCS = frsEjecuta_SP(vgstrParametrosSP, "Sp_PvSelFacturasParcialesBase")
                                    If rsParcialesCS.RecordCount > 0 Then
                                        blnFacturaBase = Not IsNull(rsParcialesCS!Consecutivo)
                                        lngConsecutivoB = IIf(IsNull(rsParcialesCS!Consecutivo), 0, rsParcialesCS!Consecutivo)
                                    End If
                                    rsParcialesCS.Close
                                
                                    lngConsecutivoP = rsParcialesNoDescontadas!IdFactura
                                    
                                    For lintContador = 0 To rsParcialesNoDescontadas.RecordCount - 1
                                        ReDim Preserve alngFacturasParciales(UBound(alngFacturasParciales) + 1)
                                        alngFacturasParciales(UBound(alngFacturasParciales)) = rsParcialesNoDescontadas!IdFactura
                                        
                                        lngConsecutivoP = IIf(rsParcialesNoDescontadas!IdFactura < lngConsecutivoP, rsParcialesNoDescontadas!IdFactura, lngConsecutivoP)
                                        'Estas son cantidades en pesos
                                        dblImporteParcial = dblImporteParcial + rsParcialesNoDescontadas!st
                                        dblIVAParcial = dblIVAParcial + rsParcialesNoDescontadas!IVA
                                        dblGravaParcial = dblGravaParcial + rsParcialesNoDescontadas!IG
        
                                        rsParcialesNoDescontadas.MoveNext
                                    Next lintContador
                                    
                                    If blnFacturaBase Then
                                        If lngConsecutivoB > lngConsecutivoP Then
                                        'Osea que hay factura base de las facturas parciales pendientes de descontar
                                            dblImporteParcial = 0
                                            dblIVAParcial = 0
                                            dblGravaParcial = 0
                                            'Obtener los importes ya facturados
                                            vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & "|" & _
                                                                IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & _
                                                                CStr(vgintClaveEmpresaContable) & "|" & _
                                                                rsConceptosDedCoaCP!tipo & "|" & claveCarta
                                            Set rsFacturado = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelImportesFacturadosECS")
                                            If rsFacturado.RecordCount > 0 Then
                                                If Not IsNull(rsFacturado!st) Then
                                                    'Estas son cantidades en pesos
                                                    dblImporteParcial = dblImporteParcial + rsFacturado!st
                                                    dblIVAParcial = dblIVAParcial + rsFacturado!IVA
                                                    dblGravaParcial = dblGravaParcial + rsFacturado!IG
                                                End If
                                            End If
                                            rsFacturado.Close
                                        Else
                                            blnFacturaBase = False
                                        End If
                                    End If
                                End If
                            Else
                            'No hay facturas parciales sin descontar
                                'Revisa si hay factura base
                                vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & "|" & _
                                                    IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & _
                                                    CStr(vgintClaveEmpresaContable) & "|" & _
                                                    rsConceptosDedCoaCP!tipo & "|" & claveCarta
                                Set rsParcialesCS = frsEjecuta_SP(vgstrParametrosSP, "Sp_PvSelFacturaBaseCS")
                                If rsParcialesCS.RecordCount > 0 Then
                                    If Not IsNull(rsParcialesCS!Consecutivo) Then
                                        'Obtener los importes ya facturados
                                        vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & "|" & _
                                                            IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & _
                                                            CStr(vgintClaveEmpresaContable) & "|" & _
                                                            rsConceptosDedCoaCP!tipo & "|" & claveCarta
                                        Set rsFacturado = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelImportesFacturadosECS")
                                        If rsFacturado.RecordCount > 0 Then
                                            If Not IsNull(rsFacturado!Consecutivo) Then
                                            'Estas son cantidades en pesos
                                                dblImporteParcial = dblImporteParcial + rsFacturado!st
                                                dblIVAParcial = dblIVAParcial + rsFacturado!IVA
                                                dblGravaParcial = dblGravaParcial + rsFacturado!IG
                                            End If
                                        End If
                                        rsFacturado.Close
                                        
                                        'Si no hay facturas parciales de Conceptos de seguro y hay base,
                                        'entonces se resta lo que no se ha facturado
                                        If rsConceptosDedCoaCP!cantidad > (dblImporteParcial + dblIVAParcial) Then blnMostrarConcepto = True
                                    End If
                                End If
                                rsParcialesCS.Close
                            End If
                        Else
                        'Si no hay facturas parciales de CS, o es EI
                        'entonces se debe faturar el importe del CS - lo que ya se facturo anteriormente
                            If Not blnCalcularEnBaseACargos Then
                                'Obtener los importes ya facturados
                                vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & "|" & _
                                                    IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & _
                                                    CStr(vgintClaveEmpresaContable) & "|" & _
                                                    rsConceptosDedCoaCP!tipo & "|" & claveCarta
                                Set rsFacturado = frsEjecuta_SP(vgstrParametrosSP, "sp_PvSelImportesFacturadosECS")
                                If rsFacturado.RecordCount > 0 Then
                                    If Not IsNull(rsFacturado!Consecutivo) Then
                                        'Estas son cantidades en pesos
                                        dblImporteParcial = dblImporteParcial + rsFacturado!st
                                        dblIVAParcial = dblIVAParcial + rsFacturado!IVA
                                        dblGravaParcial = dblGravaParcial + rsFacturado!IG
                                    End If
                                End If
                                rsFacturado.Close
                            End If
                            
                            ' Si no hay facturas parciales de Conceptos de seguro, entonces se resta todo
                            blnMostrarConcepto = True
                        End If
                    
                    Else
                    'Excedente de IVA
                        blnMostrarConcepto = True
                    End If
                    
                    If blnMostrarConcepto Or blnFacturaBase Then
                        'Si se desglosa el IVA
                        If (rsConceptosDedCoaCP!tipo = "EX" And (lintDesglosaIVAExcedente = 1 Or blnExcedenteHonorarios)) _
                            Or (rsConceptosDedCoaCP!tipo = "DE" And (lintDesglosaIVADeducible = 1 Or blnExcedenteHonorarios)) _
                            Or (rsConceptosDedCoaCP!tipo = "CO" And (lintDesglosaIVACoaseguro = 1 Or blnExcedenteHonorarios)) _
                            Or (rsConceptosDedCoaCP!tipo = "CM" And (lintDesglosaIVACoaseguroMedico = 1 Or blnExcedenteHonorarios)) _
                            Or (rsConceptosDedCoaCP!tipo = "CA" And (lintDesglosaIVACoaseguroAdicional = 1 Or blnExcedenteHonorarios)) _
                            Or (rsConceptosDedCoaCP!tipo = "CP" And (lintDesglosaIVACopago = 1 Or blnExcedenteHonorarios)) Then
'                            'Or (dblExcedenteDeIVA > 0 And rsConceptosDedCoaCP!Tipo = "EI") Then
                        
                            If rsConceptosDedCoaCP!tipo <> "EI" Then
                                'Si existen facturas parciales sin descontar, se descuenta solo lo de las parciales
                                If blnParcialesSinDescontar And Not blnFacturaBase Then
                                    dblImporteConcepto = dblImporteParcial / vldblTipoCambio
                                    dblIVAConcepto = dblIVAParcial / vldblTipoCambio
                                    dblIVAConceptoP = dblIVAParcial
                                Else
                                'Si no hay facturas parciales o si ya se debe descontar todo
                                'entonces a la cantidad del concepto(subtotal, sin el descuento que se le pudo haber hecho al paciente)
                                'se le resta la cantidad (subtotal) ya descontada por facturas parciales
        
                                    'Si el IVA se prorratea
                                    If intIVATasaHospi = 0 Then
                                    'Aqui no se debe tomar en cuenta el descuento que se le asignó al paciente
                                    'Si tiene parciales sin descontar, se descuentan
                                        If blnExcedenteHonorarios Then
                                            pIVACS dblSumaImportesSeguro
                                            
                                            Select Case rsConceptosDedCoaCP!tipo
                                                Case "EX"
                                                    dblIVAConceptoP = dblIVAEXE
                                                Case "DE"
                                                    dblIVAConceptoP = dblIVADEE
                                                Case "CO"
                                                    dblIVAConceptoP = dblIVACOE
                                                Case "CM"
                                                    dblIVAConceptoP = dblIVACME
                                                Case "CA"
                                                    dblIVAConceptoP = dblIVACAE
                                                Case "CP"
                                                    dblIVAConceptoP = dblIVACPE
                                            End Select
                                            
                                            dblImporteConcepto = (rsConceptosDedCoaCP!cantidad - dblIVAConceptoP - dblImporteParcial) / vldblTipoCambio
                                            
                                            dblIVAConcepto = (dblIVAConceptoP - dblIVAParcial) / vldblTipoCambio
                                            dblIVAConceptoP = dblIVAConceptoP - dblIVAParcial
                                        Else
                                            dblImporteConcepto = (rsConceptosDedCoaCP!cantidad - (IIf(blnCalcularEnBaseACargos, dblIVACargosSelConvenioP, dblIVACargosConvenio) * dblFactorIVA * (rsConceptosDedCoaCP!cantidad / IIf(blnCalcularEnBaseACargos, IIf(dblSumaImportesSeguroFacturar = 0, 1, dblSumaImportesSeguroFacturar), IIf(dblSumaImportesSeguro = 0, 1, dblSumaImportesSeguro)))) - dblImporteParcial) / vldblTipoCambio
                                            
                                            dblIVAConceptoP = (IIf(blnCalcularEnBaseACargos, dblIVACargosSelConvenioP, dblIVACargosConvenio) * dblFactorIVA * (rsConceptosDedCoaCP!cantidad / IIf(blnCalcularEnBaseACargos, IIf(dblSumaImportesSeguroFacturar = 0, 1, dblSumaImportesSeguroFacturar), IIf(dblSumaImportesSeguro = 0, 1, dblSumaImportesSeguro))) - dblIVAParcial)
                                            dblIVAConcepto = dblIVAConceptoP / vldblTipoCambio
                                        End If
                                    Else
                                    'El IVA se desglosa a la tasa del hospital
                                        'Si el IVA de los conceptos de facturación son menores que el IVA de la cuenta
                                        If intDesglosaIVAPaciente = 1 Then
                                            'cantidad - (facturado)
                                            dblImporteConcepto = ((rsConceptosDedCoaCP!cantidad / (1 + (fdblTasaIVAEmpresa(vgintEmpresa) / 100))) - dblImporteParcial) / vldblTipoCambio
                                            dblIVAConceptoP = (rsConceptosDedCoaCP!cantidad - (rsConceptosDedCoaCP!cantidad / (1 + (fdblTasaIVAEmpresa(vgintEmpresa) / 100))) - dblIVAParcial)
                                            dblIVAConcepto = dblIVAConceptoP / vldblTipoCambio
                                        Else
                                        'Si el IVA de los conceptos de seguro es mayor al IVA de los cargos que cubre el convenio,
                                        'entonces no se factura IVA al paciente
                                            dblImporteConcepto = rsConceptosDedCoaCP!cantidad - (dblImporteParcial + dblIVAParcial) / vldblTipoCambio
                                            dblIVAConceptoP = 0
                                            dblIVARealConcepto = 0
                                            dblIVAExcedente = 0
                                            dblIVADeducible = 0
                                            dblIVACoaseguro = 0
                                            dblIVACoaseguroMedico = 0
                                            dblIVACoaseguroAdicional = 0
                                            dblIVACopago = 0
                                        End If
                                    End If
                                End If
                            End If
    
                            dblImporteGravaConcepto = 0
    
                            If rsConceptosDedCoaCP!tipo = "EX" Then
                            'Excedente
                                If (lintDesglosaIVAExcedente = 1 Or blnExcedenteHonorarios) And dblIVAConcepto > 0 Then
                                   'Si se descuentan solo las parciales
                                    If blnParcialesSinDescontar And Not blnFacturaBase Then
                                        ldblExcedenteGrava = dblGravaParcial / vldblTipoCambio
                                    Else
                                        'Si el IVA se prorratea
                                        If intIVATasaHospi = 0 Then
                                            ldblExcedenteGrava = (dblImporteGravaPac * (rsConceptosDedCoaCP!cantidad / IIf(dblSumaImportesSeguro = 0, 1, dblSumaImportesSeguro)))
                                        Else
                                            ldblExcedenteGrava = dblImporteConcepto
                                        End If
    
                                        ldblExcedenteGrava = ldblExcedenteGrava - (dblGravaParcial / vldblTipoCambio)
    
                                        'Parchecillo por aquello del centavito volador
                                        If Format(Abs(ldblExcedenteGrava - dblImporteConcepto), "############.00") <= 0.01 And (ldblExcedenteGrava - dblImporteConcepto) <> 0 Then
                                            ldblExcedenteGrava = dblImporteConcepto
                                        End If
                                    End If
                                Else
                                    ldblExcedenteGrava = 0
                                End If
                                dblImporteGravaConcepto = ldblExcedenteGrava
                                
                            ElseIf rsConceptosDedCoaCP!tipo = "DE" Then
                            'Deducible
                                If (lintDesglosaIVADeducible = 1 Or blnExcedenteHonorarios) And dblIVAConcepto > 0 Then
                                    'Si se descuentan solo las parciales
                                    If blnParcialesSinDescontar And Not blnFacturaBase Then
                                        ldblDeducibleGrava = dblGravaParcial / vldblTipoCambio
                                    Else
                                        If intIVATasaHospi = 0 Then
                                        'Si el IVA se prorratea
                                            'ldblDeducibleGrava = (dblImporteGravaPac * (rsConceptosDedCoaCP!cantidad / IIf(dblSumaImportesSeguro = 0, 1, dblSumaImportesSeguro)))
                                            ldblDeducibleGrava = (dblImporteGravaPac * (rsConceptosDedCoaCP!cantidad / IIf(IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro) = 0, 1, IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro))))
                                        Else
                                            ldblDeducibleGrava = dblImporteConcepto
                                        End If
    
                                        ldblDeducibleGrava = ldblDeducibleGrava - (dblGravaParcial / vldblTipoCambio)
    
                                        If Format(Abs(ldblDeducibleGrava - dblImporteConcepto), "############.00") <= 0.01 And (ldblDeducibleGrava - dblImporteConcepto) <> 0 Then
                                            ldblDeducibleGrava = dblImporteConcepto
                                        End If
                                    End If
                                Else
                                    ldblDeducibleGrava = 0
                                End If
                                dblImporteGravaConcepto = ldblDeducibleGrava
                                
                            ElseIf rsConceptosDedCoaCP!tipo = "CO" Then
                            'Coaseguro
                                If (lintDesglosaIVACoaseguro = 1 Or blnExcedenteHonorarios) And dblIVAConcepto > 0 Then
                                    'Si se descuentan solo las parciales
                                    If blnParcialesSinDescontar And Not blnFacturaBase Then
                                        ldblCoaseguroGrava = dblGravaParcial / vldblTipoCambio
                                    Else
                                        If intIVATasaHospi = 0 Then
                                        'Si el IVA se prorratea
                                            'ldblCoaseguroGrava = (dblImporteGravaPac * (rsConceptosDedCoaCP!cantidad / IIf(dblSumaImportesSeguro = 0, 1, dblSumaImportesSeguro)))
                                            ldblCoaseguroGrava = (dblImporteGravaPac * (rsConceptosDedCoaCP!cantidad / IIf(IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro) = 0, 1, IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro))))
                                        Else
                                            ldblCoaseguroGrava = dblImporteConcepto
                                        End If
    
                                        ldblCoaseguroGrava = ldblCoaseguroGrava - (dblGravaParcial / vldblTipoCambio)
                                        
                                        If Format(Abs(ldblCoaseguroGrava - dblImporteConcepto), "############.00") <= 0.01 And (ldblCoaseguroGrava - dblImporteConcepto) <> 0 Then
                                            ldblCoaseguroGrava = dblImporteConcepto
                                        End If
                                    End If
                                Else
                                    ldblCoaseguroGrava = 0
                                End If
                                dblImporteGravaConcepto = ldblCoaseguroGrava
                            
                            ElseIf rsConceptosDedCoaCP!tipo = "CM" Then
                            'Coaseguro médico
                                If lintDesglosaIVACoaseguroMedico = 1 And dblIVAConcepto > 0 Then
                                    'Si se descuentan solo las parciales
                                    If blnParcialesSinDescontar And Not blnFacturaBase Then
                                        ldblCoaseguroMedicoGrava = dblGravaParcial / vldblTipoCambio
                                    Else
                                        If intIVATasaHospi = 0 Then
                                        'Si el IVA se prorratea
                                            'ldblCoaseguroMedicoGrava = (dblImporteGravaPac * (rsConceptosDedCoaCP!cantidad / IIf(dblSumaImportesSeguro = 0, 1, dblSumaImportesSeguro)))
                                            ldblCoaseguroMedicoGrava = (dblImporteGravaPac * (rsConceptosDedCoaCP!cantidad / IIf(IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro) = 0, 1, IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro))))
                                        Else
                                            ldblCoaseguroMedicoGrava = dblImporteConcepto
                                        End If
    
                                        ldblCoaseguroMedicoGrava = ldblCoaseguroMedicoGrava - (dblGravaParcial / vldblTipoCambio)
                                        
                                        If Format(Abs(ldblCoaseguroMedicoGrava - dblImporteConcepto), "############.00") <= 0.01 And (ldblCoaseguroMedicoGrava - dblImporteConcepto) <> 0 Then
                                            ldblCoaseguroMedicoGrava = dblImporteConcepto
                                        End If
                                    End If
                                Else
                                    ldblCoaseguroMedicoGrava = 0
                                End If
                                dblImporteGravaConcepto = ldblCoaseguroMedicoGrava
    
                            ElseIf rsConceptosDedCoaCP!tipo = "CA" Then
                            'Coaseguro adicional
                                If (lintDesglosaIVACoaseguroAdicional = 1 Or blnExcedenteHonorarios) And dblIVAConcepto > 0 Then
                                    'Si se descuentan solo las parciales
                                    If blnParcialesSinDescontar And Not blnFacturaBase Then
                                        ldblCoaseguroAdicionalGrava = dblGravaParcial / vldblTipoCambio
                                    Else
                                        If intIVATasaHospi = 0 Then
                                        'Si el IVA se prorratea
                                            'ldblCoaseguroAdicionalGrava = (dblImporteGravaPac * (rsConceptosDedCoaCP!cantidad / IIf(dblSumaImportesSeguro = 0, 1, dblSumaImportesSeguro)))
                                            ldblCoaseguroAdicionalGrava = (dblImporteGravaPac * (rsConceptosDedCoaCP!cantidad / IIf(IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro) = 0, 1, IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro))))
                                        Else
                                            ldblCoaseguroAdicionalGrava = dblImporteConcepto
                                        End If
    
                                        ldblCoaseguroAdicionalGrava = ldblCoaseguroAdicionalGrava - (dblGravaParcial / vldblTipoCambio)
    
                                        If Format(Abs(ldblCoaseguroAdicionalGrava - dblImporteConcepto), "############.00") <= 0.01 And (ldblCoaseguroAdicionalGrava - dblImporteConcepto) <> 0 Then
                                            ldblCoaseguroAdicionalGrava = dblImporteConcepto
                                        End If
                                    End If
                                Else
                                    ldblCoaseguroAdicionalGrava = 0
                                End If
                                dblImporteGravaConcepto = ldblCoaseguroAdicionalGrava
    
                            ElseIf rsConceptosDedCoaCP!tipo = "CP" Then
                            'Copago
                                If (lintDesglosaIVACopago = 1 Or blnExcedenteHonorarios) And dblIVAConcepto > 0 Then
                                    'Si se descuentan solo las parciales
                                    If blnParcialesSinDescontar And Not blnFacturaBase Then
                                        ldblCopagoGrava = dblGravaParcial / vldblTipoCambio
                                    Else
                                        If intIVATasaHospi = 0 Then
                                        'Si el IVA se prorratea
                                            'ldblCopagoGrava = (dblImporteGravaPac * (rsConceptosDedCoaCP!cantidad / IIf(dblSumaImportesSeguro = 0, 1, dblSumaImportesSeguro)))
                                            ldblCopagoGrava = (dblImporteGravaPac * (rsConceptosDedCoaCP!cantidad / IIf(IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro) = 0, 1, IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro))))
                                        Else
                                            ldblCopagoGrava = dblImporteConcepto ' - (dblGravaParcial / vldblTipoCambio)
                                        End If
    
                                        ldblCopagoGrava = ldblCopagoGrava - (dblGravaParcial / vldblTipoCambio)
    
                                        If Format(Abs(ldblCopagoGrava - dblImporteConcepto), "############.00") <= 0.01 And (ldblCopagoGrava - dblImporteConcepto) <> 0 Then
                                            ldblCopagoGrava = dblImporteConcepto
                                        End If
                                    End If
                                Else
                                    ldblCopagoGrava = 0
                                End If
                                dblImporteGravaConcepto = ldblCopagoGrava
                            End If
                            
                        Else
                            If rsConceptosDedCoaCP!tipo = "EI" Then
                            'Excedente de IVA
                                dblImporteConcepto = dblExcedenteDeIVA / vldblTipoCambio
                            Else
                            'Si existen facturas parciales sin descontar y no hay factura base, se descuenta solo lo de las parciales
                                dblImporteConcepto = IIf((blnParcialesSinDescontar And Not blnFacturaBase), dblImporteParcial, (rsConceptosDedCoaCP!cantidad - dblImporteParcial)) / vldblTipoCambio
                            End If
                            
                            dblIVAConcepto = 0
                            dblIVAConceptoP = 0
                            dblImporteGravaConcepto = 0
                        End If
                        
                        dblImporteNoGravaCS = dblImporteNoGravaCS + (Format(dblImporteConcepto, "###############.00") - Format(dblImporteGravaConcepto, "###############.00"))
                        dblImporteGravaCS = dblImporteGravaCS + (Format(dblImporteGravaConcepto, "###############.00"))

    
                        If CDbl(Format(CStr(dblImporteConcepto), "############.00")) > 0 Then
                            '------------------------------------------------------------------------------
                            '     Esto es para todos cuando se va a descontar el concepto a la empresa
                            '------------------------------------------------------------------------------
                            If grdGrid.RowData(grdGrid.Rows - 1) <> -1 Then grdGrid.Rows = grdGrid.Rows + 1
            
                            grdGrid.RowData(grdGrid.Rows - 1) = rsConceptosDedCoaCP!cveConcepto 'Clave del concepto
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 1) = rsConceptosDedCoaCP!Descripcion  'Descripción del concepto
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 3) = Format(dblImporteConcepto, "$ ###,###,###,###.00") 'Importe del concepto
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 4) = dblIVAConcepto
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 5) = 0 'Descuento
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 6) = "OD"  'Descuentos por conceptos de seguro
                            grdGrid.TextMatrix(grdGrid.Rows - 1, 7) = rsConceptosDedCoaCP!tipo 'Tipo de descuento
                            'Importe en pesos
                            If rsConceptosDedCoaCP!tipo <> "EI" Then
                                grdGrid.TextMatrix(grdGrid.Rows - 1, 11) = Format(IIf(blnParcialesSinDescontar And Not blnFacturaBase, dblImporteParcial, Format(rsConceptosDedCoaCP!cantidad, "############.00") - dblIVAConceptoP - dblIVAParcial), "###############.00")
                            Else
                                grdGrid.TextMatrix(grdGrid.Rows - 1, 11) = Format(dblExcedenteDeIVA, "###############.00")
                            End If
                            
                            vldblsubtotalgravado = vldblsubtotalgravado - IIf(dblIVAConcepto = 0, dblIVAConcepto, Format(dblImporteGravaConcepto, "###############.00"))
                            vldblsubtotalgravadoSinRound = vldblsubtotalgravadoSinRound - IIf(dblIVAConcepto = 0, dblIVAConcepto, dblImporteGravaConcepto)
                            
                            dblSubtotalGravadoPSinFormat = dblSubtotalGravadoPSinFormat - IIf(dblIVAConcepto = 0, dblIVAConcepto, dblImporteGravaConcepto)
                            
                            dblIVAPaciente = dblIVAPaciente + Format(dblIVAConcepto, "###############.00")
                            dblIVAPacienteP = dblIVAPacienteP + Format(dblIVAConceptoP, "###############.00")
                            
                            'Y este es para separar cargos por Concepto y Departamento para cargar en la poliza
                            vlintPosicion2 = fintPosicion(rsConceptosDedCoaCP!cveConcepto, CLng(vgintNumeroDepartamento))
                            
                            If vlintPosicion2 = -1 Then
                                ReDim Preserve aCPCargosPoliza(UBound(aCPCargosPoliza) + 1)
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngConceptoFacturacion = rsConceptosDedCoaCP!cveConcepto    'El concepto del Deducible, Coaseguro o Copago segun sea el caso
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngDepartamento = vgintNumeroDepartamento            'El departamento no importa mucho en este caso
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaIngreso = flngCuentaConceptoDepartamento(rsConceptosDedCoaCP!cveConcepto, vgintNumeroDepartamento, "INGRESO")         'La cuenta del concepto del Deducible, Coaseguro o Copago segun sea el caso
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaDescuento = flngCuentaConceptoDepartamento(rsConceptosDedCoaCP!cveConcepto, vgintNumeroDepartamento, "DESCUENTO")     'La cuenta de descuento del Deducible, Coaseguro o Copago segun sea el caso
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadIngreso = 0
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblIVADescuento = dblIVAConcepto
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadDescuento = dblImporteConcepto
                            Else
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblIVADescuento = aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblIVADescuento + dblIVAConcepto
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadDescuento = aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadDescuento + dblImporteConcepto
                            End If
                        End If
                    End If
                Else
                'No se factura el concepto,
                'Solo se dará un recibo de pago y no es necesario obtener ningún Iva
                    dblImporteConcepto = rsConceptosDedCoaCP!cantidad / vldblTipoCambio
                    dblIVAConcepto = 0
                    dblIVAConceptoP = 0
                End If
                rsConceptosDedCoaCP.MoveNext
            Loop
    
            'Variable de "TotalPesos"  le restamos el concepto de deducible, coaseguro y copago
            vldblTotalPagarPesos = vldblTotalPagarPesos - dblSumaImportesSeguro
        Else
        'Si ya se facturó al paciente
            ldblExcedenteGrava = 0
            ldblDeducibleGrava = 0
            ldblCoaseguroGrava = 0
            ldblCoaseguroMedicoGrava = 0
            ldblCoaseguroAdicionalGrava = 0
            ldblCopagoGrava = 0
    
            dblIVAPaciente = 0
            dblIVAPacienteP = 0
            
            dblSubtotalDescontarCS = 0
            dblIVADescontarCS = 0
            dblGravaDescontarCS = 0
            
            blnParciales = False
    
            ReDim alngFacturasParciales(0)
            blnFacturasParciales = False
            
            vldblsubtotalgravado = ldblImporteGravaSelConvenio / vldblTipoCambio
            vldblsubtotalgravadoSinRound = ldblImporteGravaSelConvenio / vldblTipoCambio
            
            Do While Not rsConceptosDedCoaCP.EOF
                'Si se factura el concepto
                If (rsConceptosDedCoaCP!cantidad > 0 And rsConceptosDedCoaCP!tipo = "EX") _
                    Or (rsConceptosDedCoaCP!cantidad > 0 And rsConceptosDedCoaCP!tipo = "DE" And chkFacturaDeducible.Value = 1) _
                    Or (rsConceptosDedCoaCP!cantidad > 0 And rsConceptosDedCoaCP!tipo = "CO" And chkFacturaCoaseguro.Value = 1) _
                    Or (rsConceptosDedCoaCP!cantidad > 0 And rsConceptosDedCoaCP!tipo = "CM" And chkFacturaCoaseguroMedico.Value = 1) _
                    Or (rsConceptosDedCoaCP!cantidad > 0 And rsConceptosDedCoaCP!tipo = "CA" And chkFacturaCoaseguroAdicional.Value = 1) _
                    Or (rsConceptosDedCoaCP!cantidad > 0 And rsConceptosDedCoaCP!tipo = "CP" And chkFacturaCopago.Value = 1) _
                    Or (dblExcedenteDeIVA > 0 And rsConceptosDedCoaCP!tipo = "EI") Then
                    
                    dblImporteGravaConcepto = 0
                                        
                    If rsConceptosDedCoaCP!tipo <> "EI" Then
                        pCargaArreglo vlaryResultados, "|" & vbDouble & "||" & vbDouble & "||" & vbDouble
                        vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & "|" & _
                                            IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & _
                                            CStr(vgintClaveEmpresaContable) & "|" & _
                                            rsConceptosDedCoaCP!tipo & "|" & _
                                            CStr(fdblTasaIVAEmpresa(vgintEmpresa)) & "|" & claveCarta
        
                        frsEjecuta_SP vgstrParametrosSP, "Sp_PvSelImporteFacturarCS", False, , vlaryResultados
                        pObtieneValores vlaryResultados, dblSubtotalDescontarCS, dblIVADescontarCS, dblGravaDescontarCS
                    End If
                    
                    'Si se desglosa el IVA
                    If (rsConceptosDedCoaCP!tipo = "EX" And (lintDesglosaIVAExcedente = 1 Or blnExcedenteHonorarios)) _
                        Or (rsConceptosDedCoaCP!tipo = "DE" And (lintDesglosaIVADeducible = 1 Or blnExcedenteHonorarios)) _
                        Or (rsConceptosDedCoaCP!tipo = "CO" And (lintDesglosaIVACoaseguro = 1 Or blnExcedenteHonorarios)) _
                        Or (rsConceptosDedCoaCP!tipo = "CM" And (lintDesglosaIVACoaseguroMedico = 1 Or blnExcedenteHonorarios)) _
                        Or (rsConceptosDedCoaCP!tipo = "CA" And (lintDesglosaIVACoaseguroAdicional = 1 Or blnExcedenteHonorarios)) _
                        Or (rsConceptosDedCoaCP!tipo = "CP" And (lintDesglosaIVACopago = 1 Or blnExcedenteHonorarios)) Then
                        
                        dblImporteConcepto = dblSubtotalDescontarCS / vldblTipoCambio
                        
                        dblImporteGravaConcepto = dblGravaDescontarCS / vldblTipoCambio
                        
                        dblIVAConcepto = dblIVADescontarCS / vldblTipoCambio
                        dblIVAConceptoP = dblIVADescontarCS
                        
                        If rsConceptosDedCoaCP!tipo = "EX" Then
                        'Excedente
                            ldblExcedenteGrava = dblImporteGravaConcepto
            
                        ElseIf rsConceptosDedCoaCP!tipo = "DE" Then
                        'Deducible
                            ldblDeducibleGrava = dblImporteGravaConcepto
            
                        ElseIf rsConceptosDedCoaCP!tipo = "CO" Then
                        'Coaseguro
                            ldblCoaseguroGrava = dblImporteGravaConcepto
            
                        ElseIf rsConceptosDedCoaCP!tipo = "CM" Then
                        'Coaseguro médico
                            ldblCoaseguroMedicoGrava = dblImporteGravaConcepto
            
                        ElseIf rsConceptosDedCoaCP!tipo = "CA" Then
                        'Coaseguro adicional
                            ldblCoaseguroAdicionalGrava = dblImporteGravaConcepto
            
                        ElseIf rsConceptosDedCoaCP!tipo = "CP" Then
                        'Copago
                            ldblCopagoGrava = dblImporteGravaConcepto
                        End If
                    Else
                    'No se desglosa IVA
                        If dblExcedenteDeIVA > 0 And rsConceptosDedCoaCP!tipo = "EI" Then
                        'Excedente de IVA
                            dblImporteConcepto = dblExcedenteDeIVA / vldblTipoCambio
                            dblSubtotalDescontarCS = dblExcedenteDeIVA
                        Else
                        'Si existen facturas parciales sin descontar y no hay factura base, se descuenta solo lo de las parciales
                            dblImporteConcepto = dblSubtotalDescontarCS / vldblTipoCambio + dblIVADescontarCS / vldblTipoCambio
                        End If
                        
                        dblImporteGravaConcepto = 0
                        dblIVAConcepto = 0
                        dblIVAConceptoP = 0
                    End If
                        
                    dblImporteNoGravaCS = dblImporteNoGravaCS + (Format(dblImporteConcepto, "###############.00") - Format(dblImporteGravaConcepto, "###############.00"))
                    dblImporteGravaCS = dblImporteGravaCS + (Format(dblImporteGravaConcepto, "###############.00"))
                    
                    If CDbl(Format(CStr(dblImporteConcepto), "############.00")) > 0 Then
                        '------------------------------------------------------------------------------
                        '     Esto es para todos cuando se va a descontar el concepto a la empresa
                        '------------------------------------------------------------------------------
                        If grdGrid.RowData(grdGrid.Rows - 1) <> -1 Then grdGrid.Rows = grdGrid.Rows + 1
        
                        grdGrid.RowData(grdGrid.Rows - 1) = rsConceptosDedCoaCP!cveConcepto 'Clave del concepto
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 1) = rsConceptosDedCoaCP!Descripcion  'Descripción del concepto
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 3) = Format(dblImporteConcepto, "$ ###,###,###,###.00") 'Importe del concepto
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 4) = dblIVAConcepto
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 5) = 0 'Descuento
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 6) = "OD"  'Descuentos por conceptos de seguro
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 7) = rsConceptosDedCoaCP!tipo 'Tipo de descuento
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 11) = Format(dblSubtotalDescontarCS, "###############.00")  'importe en pesos
                        
                        vldblsubtotalgravado = vldblsubtotalgravado - Format(dblImporteGravaConcepto, "###############.00")
                        vldblsubtotalgravadoSinRound = vldblsubtotalgravadoSinRound - dblImporteGravaConcepto
                        
                        dblSubtotalGravadoPSinFormat = dblSubtotalGravadoPSinFormat - dblImporteGravaConcepto
            
                        dblIVAPaciente = dblIVAPaciente + Format(dblIVAConcepto, "###############.00")
                        dblIVAPacienteP = dblIVAPacienteP + Format(dblIVAConceptoP, "###############.00")
                        
                        'Y este es para separar cargos por Concepto y Departamento para cargar en la poliza
                        vlintPosicion2 = fintPosicion(rsConceptosDedCoaCP!cveConcepto, CLng(vgintNumeroDepartamento))
                        
                        If vlintPosicion2 = -1 Then
                            ReDim Preserve aCPCargosPoliza(UBound(aCPCargosPoliza) + 1)
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngConceptoFacturacion = rsConceptosDedCoaCP!cveConcepto    'El concepto del Deducible, Coaseguro o Copago segun sea el caso
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngDepartamento = vgintNumeroDepartamento            'El departamento no importa mucho en este caso
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaIngreso = flngCuentaConceptoDepartamento(rsConceptosDedCoaCP!cveConcepto, vgintNumeroDepartamento, "INGRESO")         'La cuenta del concepto del Deducible, Coaseguro o Copago segun sea el caso
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaDescuento = flngCuentaConceptoDepartamento(rsConceptosDedCoaCP!cveConcepto, vgintNumeroDepartamento, "DESCUENTO")     'La cuenta de descuento del Deducible, Coaseguro o Copago segun sea el caso
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadIngreso = 0
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblIVADescuento = dblIVAConcepto
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadDescuento = dblImporteConcepto
                        Else
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblIVADescuento = aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblIVADescuento + dblIVAConcepto
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadDescuento = aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadDescuento + dblImporteConcepto
                        End If
                    End If
                Else
                'No se factura el concepto
                'Solo se dará un recibo de pago y no es necesario obtener ningún IVA
                    dblImporteConcepto = rsConceptosDedCoaCP!cantidad / vldblTipoCambio
                    dblIVAConcepto = 0
                    dblIVAConceptoP = 0
                End If
                rsConceptosDedCoaCP.MoveNext
            Loop
  
            'Variable de "TotalPesos"  le restamos el concepto de deducible, coaseguro y copago
            vldblTotalPagarPesos = vldblTotalPagarPesos - IIf(blnCalcularEnBaseACargos, dblSumaImportesSeguroFacturar, dblSumaImportesSeguro)
        End If
    End If

    '***************************************************************************************************
    ' 8).- Cálculo de totales (DESPUES DE DESCUENTOS ESPECIALES)
    '***************************************************************************************************
    vldblSubtotal = 0
    ldblDescuentos = 0
    dblDescuentosP = 0
    dblSubTotalP = 0
    dblImporteFactura = 0
    dblDescuentoFactura = 0
    
    For vlintcontador = 1 To grdGrid.Rows - 1
        'Cargos
        'If Val(Format(grdGrid.TextMatrix(vlintContador, 2), "")) > 0 Then
        If Val(Format(grdGrid.TextMatrix(vlintcontador, 9), "")) > 0 Then
            'vldblSubtotal = vldblSubtotal + Val(Format(grdGrid.TextMatrix(vlintContador, 2), ""))
            vldblSubtotal = vldblSubtotal + Val(Format(grdGrid.TextMatrix(vlintcontador, 9), ""))
            dblImporteFactura = dblImporteFactura + Val(Format(grdGrid.TextMatrix(vlintcontador, 9), ""))
            'dblSubTotalP = dblSubTotalP + Val(Format(grdGrid.TextMatrix(vlintContador, 10), ""))
            dblSubTotalP = dblSubTotalP + Val(Format(grdGrid.TextMatrix(vlintcontador, 12), ""))
        'Abonos
        ElseIf grdGrid.TextMatrix(vlintcontador, 6) = "DE" Or grdGrid.TextMatrix(vlintcontador, 6) = "OD" Then
            vldblSubtotal = vldblSubtotal - Val(Format(grdGrid.TextMatrix(vlintcontador, 3), ""))
            dblDescuentoFactura = dblDescuentoFactura + Val(Format(grdGrid.TextMatrix(vlintcontador, 3), ""))
            'vldblSubtotal = vldblSubtotal - vldbldescuentototal
            dblSubTotalP = dblSubTotalP - Val(Format(grdGrid.TextMatrix(vlintcontador, 11), ""))
            'dblSubTotalP = dblSubTotalP - vldbldescuentototalP
            If grdGrid.TextMatrix(vlintcontador, 6) = "DE" Then '(CR) Agregado para que no tome conceptos de seguro como descuentos
                ldblDescuentos = ldblDescuentos + Val(Format(grdGrid.TextMatrix(vlintcontador, 3), ""))
                dblDescuentosP = dblDescuentosP + Val(Format(grdGrid.TextMatrix(vlintcontador, 11), ""))
                'ldblDescuentos = ldblDescuentos + vldbldescuentototal
                'dblDescuentosP = dblDescuentosP + vldbldescuentototalP
            End If
        End If
        
        'Descuentos y excedente en suma asegurada
        If grdGrid.Name = "grdFacturaPaciente" Then
            txtFPDescuentos.Text = Format(ldblDescuentos, "$ ###,###,###,###.00")
            txtFEDedyCoa.Text = Format(0, "$ ###,###,###,###.00")
        Else
            txtFEDescuentos.Text = Format(ldblDescuentos, "$ ###,###,###,###.00")
            txtFEDedyCoa.Text = Format(vldblPagoDeducible + vldblPagoCoaseguro + vldblPagoCoaseguroAdicional + vldblPagoCopago, "$ ###,###,###,###.00")
        End If

        ldblDescuentosFactura = ldblDescuentos
        
        'Sólo los Particulares o excluidos tienen PAGOS
        If grdGrid.Name = "grdFacturaPaciente" Or optTipoFacturacion(0).Value Then
            If grdGrid.TextMatrix(vlintcontador, 6) = "PA" Then 'PAGOS
                If grdGrid.Name = "grdFacturaPaciente" Then
                    txtFPPagos.Text = grdGrid.TextMatrix(vlintcontador, 3)
                Else
                    txtFEPagos.Text = grdGrid.TextMatrix(vlintcontador, 3)
                End If
            End If
        End If
    Next vlintcontador
    
    If grdGrid.Name = "grdFacturaPaciente" Then
        vldblSubtotalFacturaParcial = 0
        dblSubtotalFacturaParcialP = 0
        
        vldblIVAFacturaParcial = 0
        dblIVAFacturaParcialP = 0
        
    '***************************************************************************************************
    ' 9).- FACTURAS PARCIALES
    '***************************************************************************************************
        If Not blnCalcularEnBaseACargos Then
            ReDim vlaryTempParciales(19, 0)
            vlaryTempParciales(0, 0) = -1
            
            MSFGFacturasParciales.Row = 1
            vlblnFacturasSinGrabar = False
            vlintConta2 = 0
            
            For vlintcontador = 1 To MSFGFacturasParciales.Rows - 1
                'Llena el arreglo con datos del grid de facturas parciales (datos de la factura parcial a generar)
                If MSFGFacturasParciales.RowData(1) <> -1 And MSFGFacturasParciales.RowData(MSFGFacturasParciales.Row) <> 0 And Val(MSFGFacturasParciales.TextMatrix(MSFGFacturasParciales.Row, 11)) = 0 Then
                    
                    pLlenaArregloFacPacrciales vlintConta2, vlintcontador, vlaryTempParciales
                    
                    If vlintcontador <= MSFGFacturasParciales.Rows - 1 Then ReDim Preserve vlaryTempParciales(19, vlintConta2 + 1)
                    vlblnFacturasSinGrabar = True
                    vlintConta2 = vlintConta2 + 1
                End If
                
                MSFGFacturasParciales.Row = IIf(MSFGFacturasParciales.Rows > MSFGFacturasParciales.Row + 1, MSFGFacturasParciales.Row + 1, MSFGFacturasParciales.Row)
            Next vlintcontador
                
            pHabilitaGrabacionFacturaPaciente
            pLimpiaGrid MSFGFacturasParciales
            'Llena el grid con las facturas parciales previamente capturadas
            pLlenaFacturasParciales
            
            'Carga las facturas parciales que no aún no se han grabado
            pCargaFactParc vlaryTempParciales
            
            vlblnBand = False
            While Not vlblnBand
                vllngConceptoFact = 0
                'Busca los conceptos de facturación de las facturas parciales que aún no han sido considerados
                For vlintcontador = 1 To MSFGFacturasParciales.Rows - 1
                    If CLng(Val(MSFGFacturasParciales.TextMatrix(vlintcontador, 12))) > 0 Then
                        vllngConceptoFact = MSFGFacturasParciales.TextMatrix(vlintcontador, 12)
                        Exit For
                    End If
                Next
                
                If vllngConceptoFact = 0 Then
                'No hay facturas parciales no consideradas?
                    vlblnBand = True
                Else
                    'Busca el concepto de facturación como descuento o otros descuentos
                    vlintPosicion = fintBuscaConceptoFacturacionDescuento(vllngConceptoFact)
                    
                    intConceptoNuevo = vlintPosicion
                    If vlintPosicion = -1 Then
                    'No existe el concepto de fact. en el grid
                        vlintPosicion = IIf(grdGrid.RowData(1) <> -1, grdGrid.Rows, 1)
                        grdGrid.Rows = IIf(grdGrid.RowData(1) <> -1, grdGrid.Rows + 1, grdGrid.Rows)
                    End If
                    
                    grdGrid.RowData(vlintPosicion) = vllngConceptoFact 'Clave del Concepto
                    
                    ' La Descripcion del concepto
                    If intConceptoNuevo = -1 Then
                        vlstrSentencia = "Select PvConceptoFacturacion.chrDescripcion From PvConceptoFacturacion Where PvConceptoFacturacion.smiCveConcepto = " & vllngConceptoFact
                        Set rsTemp = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
                        grdGrid.TextMatrix(vlintPosicion, 1) = Trim(rsTemp!chrDescripcion)
                    End If
                    
                    ' La 3 es el ABONO
                    grdGrid.TextMatrix(vlintPosicion, 3) = Format(IIf(intDesglosaIVAPaciente = 1, _
                                                                    fdblTotalFacturasParciales(3, True, vllngConceptoFact), _
                                                                    fdblTotalFacturasParciales(5, True, vllngConceptoFact)) _
                                                                / IIf(optPesos(0).Value, 1, vldblTipoCambio), "$ ###,###,###,##0.00")
                    ' El 4 es el IVA
                    'Negativo par los descuentos
                    grdGrid.TextMatrix(vlintPosicion, 4) = Format(IIf(intDesglosaIVAPaciente = 1, fdblTotalFacturasParciales(4, True, vllngConceptoFact) / IIf(optPesos(0).Value, 1, vldblTipoCambio) * -1, 0), "###########0.00")
                    
                    ' El 5 son los DESCUENTOS, no aplica
                    grdGrid.TextMatrix(vlintPosicion, 5) = 0
                    
                    ' El 6 es el TIPO de CONCEPTO
                    grdGrid.TextMatrix(vlintPosicion, 6) = "DE"
                    
                    ' El 7 es el TIPO de Otro CONCEPTO (No aplica para conceptos normales por eso es un "")
                    grdGrid.TextMatrix(vlintPosicion, 7) = IIf(intConceptoNuevo = -1, "", grdGrid.TextMatrix(vlintPosicion, 7)) 'Cual de los otros conceptos es: Deducible, Coaseguro, Copago o Excedente
                    
                    ' El 8 es la clave del Paquete, No aplica
                    grdGrid.TextMatrix(vlintPosicion, 8) = 0
                    
                    'El 9 son los Cargos con decimales
                    'No aplica porque las parciales son abonos no cargos
                    
                    'El 10 son los Cargos en pesos
                    'No aplica porque las parciales son abonos no cargos
                    
                    'El 11 Son los descuentos en pesos
                    grdGrid.TextMatrix(vlintPosicion, 11) = IIf(intConceptoNuevo = -1, fdblTotalFacturasParciales(3, True, vllngConceptoFact), grdGrid.TextMatrix(vlintPosicion, 11))
                    
                    'El 12 Son los cargos en pesos con decimales
                    'No aplica porque las parciales son abonos no cargos
                    
                    'El 13 es la tasa de IVA
                    grdGrid.TextMatrix(vlintPosicion, 13) = IIf(intConceptoNuevo = -1 And fdblTotalFacturasParciales(4, True, vllngConceptoFact) > 0, fdblTasaIVAEmpresa(vgintEmpresa), grdGrid.TextMatrix(vlintPosicion, 13))
    
                    ReDim Preserve aCPCargosPoliza(UBound(aCPCargosPoliza) + 1)
                    vlintPosicionArreglo = UBound(aCPCargosPoliza) - 1
                    
                    aCPCargosPoliza(vlintPosicionArreglo).lngConceptoFacturacion = vllngConceptoFact
                    aCPCargosPoliza(vlintPosicionArreglo).lngDepartamento = vgintNumeroDepartamento
                    aCPCargosPoliza(vlintPosicionArreglo).lngCuentaIngreso = 0         'La cuenta del concepto del fact. del descuento por la factura parcial
                    aCPCargosPoliza(vlintPosicionArreglo).lngCuentaDescuento = flngCuentaConceptoDepartamento(vllngConceptoFact, vgintNumeroDepartamento, "INGRESO")     'Para la cuenta del DESCUENTO, La cuenta del INGRESO de la factura parcial
                    aCPCargosPoliza(vlintPosicionArreglo).dblCantidadIngreso = 0
                    aCPCargosPoliza(vlintPosicionArreglo).dblIVADescuento = 0
                    aCPCargosPoliza(vlintPosicionArreglo).dblCantidadDescuento = CDbl(IIf(optPesos(0).Value, fdblTotalFacturasParciales(6, True, vllngConceptoFact), fdblTotalFacturasParciales(6, True, vllngConceptoFact))) 'Cantidad
                    'Actualiza el concepto de facturación que se acaba de agregar al arreglo con el signo negativo para no tomarlos en cuenta la siguiente vuelta del ciclo
                    For vlintcontador = 1 To MSFGFacturasParciales.Rows - 1
                        If CLng(MSFGFacturasParciales.TextMatrix(vlintcontador, 12)) = vllngConceptoFact Then
                            MSFGFacturasParciales.TextMatrix(vlintcontador, 12) = CLng(MSFGFacturasParciales.TextMatrix(vlintcontador, 12)) * -1
                        End If
                    Next
                End If
            Wend
            
            'Pone otra vez signos positivos para usarlos correctamente en el resto del proceso
            For vlintcontador = 1 To MSFGFacturasParciales.Rows - 1
                MSFGFacturasParciales.TextMatrix(vlintcontador, 12) = CLng(Val(MSFGFacturasParciales.TextMatrix(vlintcontador, 12))) * -1
            Next
        End If
        
        '***************************************************************************************************
        ' 10).- NOTAS DE CRÉDITO DEL PACIENTE
        '***************************************************************************************************
        'Obtener las notas de crédito que no se han descontado al paciente
        Set rsTemp = frsEjecuta_SP(txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E"), "sp_PvSelNotasCreditoSinFactura")
        Do While Not rsTemp.EOF
            ReDim Preserve alngNotasPaciente(UBound(alngNotasPaciente) + 1)
            alngNotasPaciente(UBound(alngNotasPaciente)) = rsTemp!Consecutivo
            dblNotasCreditoPaciente = dblNotasCreditoPaciente + rsTemp!Importe
            rsTemp.MoveNext
        Loop
        
        '***************************************************************************************************
        ' 11).- TOTALES
        '***************************************************************************************************
        vldblSubtotalFacturaParcial = Format(IIf(optPesos(0).Value, fdblTotalFacturasParciales(6, True, -1), fdblTotalFacturasParciales(6, True, -1) / vldblTipoCambio), "###,###,##0.00")
        dblSubtotalFacturaParcialP = Format(fdblTotalFacturasParciales(6, True, -1), "###########0.00")
        
        vldblIVAFacturaParcial = Format(IIf(optPesos(0).Value, fdblTotalFacturasParciales(7, True, -1), fdblTotalFacturasParciales(7, True, -1) / vldblTipoCambio), "###,###,##0.00")
        dblIVAFacturaParcialP = Format(fdblTotalFacturasParciales(7, True, -1), "###########0.00")
        
        If intDesglosaIVAPaciente = 0 Then
            vldblSubtotalFacturaParcial = Format(fdblTotalFacturasParciales(5, True, -1), "###########0.00") / vldblTipoCambio
            dblSubtotalFacturaParcialP = Format(fdblTotalFacturasParciales(5, True, -1), "###########0.00")
            vldblIVAFacturaParcial = 0
            dblIVAFacturaParcialP = 0
        End If
        
        dblDescuentosP = dblSubtotalFacturaParcialP + dblDescuentosP
        dblSubTotalP = Format(dblSubTotalP - dblSubtotalFacturaParcialP, "##############0.00")
        
        dblIVAP = Format(dblIVAPacienteP - dblIVAFacturaParcialP, "###########0.00")
        dblTotalFacturaP = Format(dblSubTotalP + dblIVAP, "##############0.00")
        
        vldblSubtotal = Round(dblImporteFactura, 2) - Round(dblDescuentoFactura, 2)
        dblTotalFactura = vldblSubtotal + Format(dblIVAP / vldblTipoCambio, "###############.00")
        
        'Cuando es en dólares que tenga 3 decimales, para que cuando se convierta a pesos, no se pierdan decimales
        If optPesos(0).Value Then
            txtFPSubtotal.Text = Format(vldblSubtotal - vldblSubtotalFacturaParcial, "$ ###,###,###,###.00")
            txtFPDescuentos.Text = Format((vldblSubtotalFacturaParcial) + Val(Format(txtFPDescuentos.Text, "")), "$ ###,###,###,###.00")
            ldblDescuentosFactura = fdblTotalFacturasParciales(10, True, -1) + Val(Format(txtFPDescuentos.Text, ""))
            If CDbl(Format(dblIVAPaciente - vldblIVAFacturaParcial, "$ ###,###,###,###.00")) > 0 Then
                txtFPIVA.Text = Format(dblIVAPaciente - vldblIVAFacturaParcial, "$ ###,###,###,###.00")
            Else
                txtFPIVA.Text = Format(0, "$ ###,###,###,###.00")
            End If
            txtFPTotalFactura.Text = Format(Val(Format(txtFPSubtotal.Text, "")) + Val(Format(txtFPIVA.Text, "")), "$ ###,###,###,###.00")
            txtFPNotasCredito.Text = Format((dblNotasCreditoPaciente + dblNotasCreditoCS + dblIVANotasCreditoCS), "$ ###,###,###,###.00")
            txtRetenionServ.Text = Format((vldblImporteRetencionServ / IIf(optPesos(1).Value, 1, vldblTipoCambio)), "$ ###,###,###,###.00")
            txtFPTotalPagar.Text = Format(Val(Format(txtFPTotalFactura.Text, "")) - Val(Format(txtFPNotasCredito.Text, "")) - Val(Format(txtFPPagos.Text, "")), "$ ###,###,###,###.00")
            vgdblTotalPagarPesosPaciente = Val(Format(txtFPTotalPagar.Text, ""))
        Else
'            txtFPSubtotal.Text = Format(dblSubTotalP / vldblTipoCambio, "$ ###,###,###,###.00")
'            txtFPDescuentos.Text = Format(dblDescuentosP / vldblTipoCambio, "$ ###,###,###,###.00")
'            ldblDescuentosFactura = (fdblTotalFacturasParciales(10, True, -1) / vldblTipoCambio) + Val(Format(txtFPDescuentos.Text, ""))
'            txtFPIVA.Text = Format(dblIVAP / vldblTipoCambio, "$ ###,###,###,###.00")
'            txtFPTotalFactura.Text = Format(dblTotalFacturaP / vldblTipoCambio, "$ ###,###,###,###.00")
'            txtFPNotasCredito.Text = Format(((dblNotasCreditoPaciente + dblNotasCreditoCS + dblIVANotasCreditoCS) / vldblTipoCambio), "$ ###,###,###,###.00")
'            txtFPTotalPagar.Text = Format(Val(Format(txtFPTotalFactura.Text, "")) - Val(Format(txtFPPagos.Text, "")) - Val(Format(txtFPNotasCredito.Text, "")), "$ ###,###,###,###.00")
            txtFPSubtotal.Text = Format(vldblSubtotal, "$ ###,###,###,###.00")
            txtFPDescuentos.Text = Format(dblDescuentoFactura, "$ ###,###,###,###.00")
            ldblDescuentosFactura = (fdblTotalFacturasParciales(10, True, -1) / vldblTipoCambio) + Val(Format(txtFPDescuentos.Text, ""))
            txtFPIVA.Text = Format(dblIVAP / vldblTipoCambio, "$ ###,###,###,###.00")
            txtFPTotalFactura.Text = Format(dblTotalFactura, "$ ###,###,###,###.00")
            txtFPNotasCredito.Text = Format(((dblNotasCreditoPaciente + dblNotasCreditoCS + dblIVANotasCreditoCS) / vldblTipoCambio), "$ ###,###,###,###.00")
            txtRetenionServ.Text = Format((vldblImporteRetencionServ), "$ ###,###,###,###.00")
            txtFPTotalPagar.Text = Format(Val(Format(txtFPTotalFactura.Text, "")) - Val(Format(txtFPPagos.Text, "")) - Val(Format(txtFPNotasCredito.Text, "")), "$ ###,###,###,###.00")
        End If
        
        dblSTGravadoFP = 0
        vltipocambio = fdblTipoCambio(fdtmServerFecha, "V")

        For vlintcontador = 1 To MSFGFacturasParciales.Rows - 1
            If CLng(Val(MSFGFacturasParciales.TextMatrix(vlintcontador, 8))) > 0 And intDesglosaIVAPaciente = 1 Then
                'Factura base en pesos
                If vldblTipoCambio = 1 Then
                    dblSTGravadoFP = dblSTGravadoFP + Format(CDbl(MSFGFacturasParciales.TextMatrix(vlintcontador, 16)) * IIf(Trim(MSFGFacturasParciales.TextMatrix(vlintcontador, 9)) = "x", vltipocambio, vldblTipoCambio), "############.00")
                Else
                'Factura base en dólares
                    dblSTGravadoFP = dblSTGravadoFP + Format(CDbl(MSFGFacturasParciales.TextMatrix(vlintcontador, 16)) / IIf(Trim(MSFGFacturasParciales.TextMatrix(vlintcontador, 9)) = "x", 1, vldblTipoCambio), "############.00")
                End If
            End If
        Next

        vldblsubtotalgravado = vldblsubtotalgravado - dblSTGravadoFP
        vldblsubtotalgravadoSinRound = vldblsubtotalgravadoSinRound - dblSTGravadoFP
        dblIVAPaciente = dblIVAPaciente - vldblIVAFacturaParcial
        
        'Si (Subtotal-STParcial) - STGravado < 0.02 Entonces
        'Igualar el STGravado al ST
        If Format(Abs((IIf(optPesos(0).Value, (vldblSubtotal - vldblSubtotalFacturaParcial), Format(dblSubTotalP / vldblTipoCambio, "###############.00"))) - Format(vldblsubtotalgravado, "###############.00")), "###############.00") <= 0.02 Then
            vldblsubtotalNogravado = 0
            vldblsubtotalgravado = IIf(optPesos(0).Value, vldblSubtotal - vldblSubtotalFacturaParcial, (dblSubTotalP / vldblTipoCambio))
        Else
            vldblsubtotalNogravado = (IIf(optPesos(0).Value, (vldblSubtotal - vldblSubtotalFacturaParcial), (dblSubTotalP / vldblTipoCambio))) - Format(vldblsubtotalgravado, "###############.00")
        End If
        
        vldblTotalPagarPesos = vldblTotalPagarPesos - fdblTotalFacturasParciales(10, True, -1)
        txtExcluidosPagos.Text = txtFPPagos.Text
        
        MSFGFacturasParciales.Redraw = True
                        
        pHabilitaGrabacionFactura (vlblnFacturasSinGrabar)
                
    Else
    'Empresa
        dblSubTotalP = Format(dblSubTotalP, "###############.00")
        dblIVAP = IIf(dblExcedenteDeIVA > 0, 0, dblIVACargosSelConvenioP - CDbl(Format(dblIVAPacienteP, "###############.00")))
        dblTotalFacturaP = dblSubTotalP + Format(dblIVAP, "###############.00")
        
        vldblSubtotal = Round(dblImporteFactura, 2) - Round(dblDescuentoFactura, 2)
        dblTotalFactura = vldblSubtotal + Format(dblIVAP / vldblTipoCambio, "###############.00")
                                             
        vldblImporteRetNew = dblSubtotalGravadoPSinFormat * vldblRetencionServicios
        If vldblImporteRetNew <> vldblImporteRetencionServ Then pcambiaREtencion vldblImporteRetNew, grdFacturaEmpresa

        'cuando es en dólares que tenga 3 decimales, para que cuando se convierta a pesos, no se pierdan decimales
        If optPesos(1).Value Then
            txtFESubtotal.Text = Format(vldblSubtotal, "$ ###,###,###,###.00")
             txtRetenionServ.Text = Format((vldblImporteRetencionServ), "$ ###,###,###,###.00")
            If intIVATasaHospi = 1 And dblExcedenteDeIVA > 0 Then
                txtFEIVA.Text = Format(0, "$ ###,###,###,###.00")
            Else
                txtFEIVA.Text = Format(dblIVACargosSelConvenioP - dblIVAPaciente, "$ ###,###,###,###.00")
            End If
            txtFETotalFactura.Text = Format(Val(Format(txtFESubtotal.Text, "")) + Val(Format(txtFEIVA.Text, "")), "$ ###,###,###,###.00")
        Else
'            txtFESubtotal.Text = Format(dblSubTotalP / vldblTipoCambio, "$ ###,###,###,###.00")
'            If intIVATasaHospi = 1 And dblExcedenteDeIVA > 0 Then
'                txtFEIVA.Text = Format(0, "$ ###,###,###,###.00")
'                txtFETotalFactura.Text = Format(Val(Format(txtFESubtotal.Text, "")) + Val(Format(txtFEIVA.Text, "")), "$ ###,###,###,###.00")
'            Else
'                txtFEIVA.Text = Format(dblIVAP / vldblTipoCambio, "$ ###,###,###,###.00")
'                txtFETotalFactura.Text = Format(dblTotalFacturaP / vldblTipoCambio, "$ ###,###,###,###.00")
'            End If
            txtRetenionServ.Text = Format((vldblImporteRetencionServ / IIf(optPesos(1).Value, 1, vldblTipoCambio)), "$ ###,###,###,###.00")
            txtFESubtotal.Text = Format(vldblSubtotal, "$ ###,###,###,###.00")
            If intIVATasaHospi = 1 And dblExcedenteDeIVA > 0 Then
                txtFEIVA.Text = Format(0, "$ ###,###,###,###.00")
                txtFETotalFactura.Text = Format(Val(Format(txtFESubtotal.Text, "")) + Val(Format(txtFEIVA.Text, "")), "$ ###,###,###,###.00")
            Else
                txtFEIVA.Text = Format(dblIVAP / vldblTipoCambio, "$ ###,###,###,###.00")
                txtFETotalFactura.Text = Format(dblTotalFactura, "$ ###,###,###,###.00")
            End If

        End If
        
        If Format(Abs(vldblSubtotal - vldblsubtotalgravado), "############.00") <= 0.02 Then
            vldblsubtotalgravado = vldblSubtotal
        End If

        'Para verificar si los cargos son menores a los conceptos de seguro a descontar
        vlblnCargosMenoresaConcepSegurosNOGravados = False
        vlblnCargosMenoresaConcepSegurosGravados = False
        
        'Parche feo
        'Si lo que se va a descontar a la empresa por conceptos deseguro que no desglosaron IVA
        'Es mayor que los conceptos que no gravan de la cuenta
        If dblImporteNoGravaCS > ((ldblImporteNoGravaSelConvenio + ldblImporteExentoSelConvenio) / vldblTipoCambio) Then
            If Format(Abs(dblImporteNoGravaCS - ((ldblImporteNoGravaSelConvenio + ldblImporteExentoSelConvenio) / vldblTipoCambio)), "############.00") > 0.02 Then
                vlblnCargosMenoresaConcepSegurosNOGravados = True
                If blnDeducibleSinIVA Then
                    If Val(Format(txtDeducible.Text, "")) = dblDeducibleFacturado Then
                        vlblnCargosMenoresaConcepSegurosNOGravados = False
                    End If
                End If
                'El importe no gravado de los cargos seleccionados, es menor al importe no gravado de los conceptos de seguro a descontar
                'Si se desglosa IVA en todos los conceptos
                If blnDesglosaIVACS Then
                    vldblsubtotalgravado = vldblSubtotal
                    
                    ldblImporteNoGravaSelConvenio = 0
                    ldblImporteNoGravaSelConvenioExDE = 0
                'Else
                'Si no se desglosa IVA en todos los conceptos
                'El importe no gravado es el importe no gravado de la cuenta
                End If
            End If
        ElseIf dblImporteNoGravaCS < 0 Then
            If Format(Abs(dblImporteNoGravaCS), "############.00") > 0.02 Then
                vlblnCargosMenoresaConcepSegurosNOGravados = True
            End If
        Else
'            If ldblImporteNoGravaSelConvenio <> 0 Then
                ldblImporteNoGravaSelConvenio = (ldblImporteNoGravaSelConvenio / vldblTipoCambio) - dblImporteNoGravaCS
'            End If
        End If
        
        If dblImporteGravaCS > ldblImporteGravaSelConvenio Then
            If Format(Abs(dblImporteGravaCS - ldblImporteGravaSelConvenio), "############.00") > 0.02 Then
                vlblnCargosMenoresaConcepSegurosGravados = True
            End If
        ElseIf dblImporteGravaCS < 0 Then
            If Format(Abs(dblImporteGravaCS), "############.00") > 0.02 Then
                vlblnCargosMenoresaConcepSegurosGravados = True
            End If
        End If
                
        '-------------------------------------------------------------------------------------------------------------------------------------------------------------
        'Descuento especial
        '-------------------------------------------------------------------------------------------------------------------------------------------------------------
        dblDescuentoEspecial = 0
        dblPorcentajeDescEspecial = fdblDescuentoEspecial(vldblSubtotal, dblSubTotalP, CLng(vgintEmpresa), optPesos(1).Value)
        If dblPorcentajeDescEspecial > 0 Then
            '-- 16805
            '-- Al SubTotal de la cuenta se resta el "Medicamento y material excluido" que es:
            '-- La sumatoria de todos los artículos de la cuenta (Importe menos descuento) que tengan marcada la casilla de selección Excluir del descuento especial
            If vlblnConsiderarExcluidosDescEsp Then
                vldblSubtotalExcluidoDE = dblImporteFacturaExcluidosDE - dblDescuentoFacturaExcluidoDE
                ' Se valida de nuevo la configuración para determinar si aplica el monto aplicable al descuento especial (Subtotal - Excluidos)
                dblPorcentajeDescEspecial = fdblDescuentoEspecial((vldblSubtotal - vldblSubtotalExcluidoDE), (dblSubTotalP - vldblSubtotalExcluidoDE), CLng(vgintEmpresa), optPesos(1).Value)
                If dblPorcentajeDescEspecial > 0 Then
                    dblDescuentoEspecial = Round((vldblSubtotal - vldblSubtotalExcluidoDE) * dblPorcentajeDescEspecial, 2)
                End If
            Else
               dblDescuentoEspecial = Round(vldblSubtotal * dblPorcentajeDescEspecial, 2)
            End If
            If dblDescuentoEspecial > 0 Then
                txtFEDescuentoEspecial.Text = Format(dblDescuentoEspecial, "$ ###,###,###,###.00")
                If vldblImporteRetNew <> vldblImporteRetencionServ Then pcambiaREtencion vldblImporteRetNew, grdFacturaEmpresa
                
                'ldblImporteNoGravaSelConvenio = ldblImporteNoGravaSelConvenio - ((dblSubTotalP * dblPorcentajeDescEspecial) * (ldblImporteNoGravaSelConvenio / dblSubTotalP))
                txtFESubtotal.Text = Format((vldblSubtotal - dblDescuentoEspecial), "$ ###,###,###,###.00")
                If vlblnConsiderarExcluidosDescEsp Then
                    ldblImporteNoGravaSelConvenio = ldblImporteNoGravaSelConvenio - (ldblImporteNoGravaSelConvenioNoExDE_AntesDE - ldblImporteNoGravaSelConvenioNoExDE)
                    ldblIVACargosSelConvenio = ldblIVACargosSelConvenio - (ldblIVACargosSelConvenioNoExDE - dblIVACargosSelDespuesDescEsp)    '+ ldblIVACargosSelConvenioExDE
                    txtFEIVA.Text = Format((ldblIVACargosSelConvenio), "$ ###,###,###,###.00")
                    'dblIVAP = ((dblSubTotalP - (dblSubTotalP * dblPorcentajeDescEspecial)) * dblIVAP) / dblSubTotalP
                Else
                    ldblImporteNoGravaSelConvenio = ldblImporteNoGravaSelConvenio - ((dblSubTotalP * dblPorcentajeDescEspecial) * (ldblImporteNoGravaSelConvenio / dblSubTotalP))
                    If Val(Format(txtFEIVA.Text, "")) > 0 Then
                       txtFEIVA.Text = Format(((vldblSubtotal - dblDescuentoEspecial) * Val(Format(txtFEIVA.Text, ""))) / vldblSubtotal, "$ ###,###,###,###.00")
                       ldblIVACargosSelConvenio = Format(txtFEIVA.Text, "")
                       dblIVAP = ((dblSubTotalP - (dblSubTotalP * dblPorcentajeDescEspecial)) * dblIVAP) / dblSubTotalP
                    End If
                End If
                '------------------------------------
                'Recorremos el arreglo de las polizas
                '------------------------------------
                pAjusteDescuentoEspecial (vldblSubtotal)
                vldblSubtotal = vldblSubtotal - dblDescuentoEspecial
                dblSubTotalP = dblSubTotalP - (dblSubTotalP * dblPorcentajeDescEspecial)
                dblTotalFacturaP = Format(dblSubTotalP + dblIVAP, "##############0.00")
                txtFETotalFactura.Text = Format(Val(Format(txtFESubtotal.Text, "")) + Val(Format(txtFEIVA.Text, "")), "$ ###,###,###,###.00")
            End If
        End If
        pAjustaFrameTotalesFE IIf(dblPorcentajeDescEspecial > 0, True, False)
        '-------------------------------------------------------------------------------------------------------------------------------------------------------------
                                
'        If optTipoFacturacion(0).Value Then
'            'Factura Consolidada
'            'Considerar en que moneda esta la factura del paciente al pasar los pagos a la factura de la empresa
'            If optPesos(1).Value Then 'Factura de empresa en pesos
'                txtFEPagos.Text = IIf(optPesos(0).Value, txtFPPagos.Text, Format((CDbl(txtFPPagos.Text) * fdblTipoCambio(fdtmServerFecha, "V")), "$ ###,###,###,###.00"))
'            Else
'                'Factura de empresa en dólares
'                txtFEPagos.Text = IIf(optPesos(0).Value, Format((CDbl(txtFPPagos.Text) * vldblTipoCambio), "$ ###,###,###,###.00"), txtFPPagos.Text)
'            End If
'            txtFETotalPagar.Text = Format(Val(Format(txtFETotalFactura.Text, "")) - Val(Format(txtFEDedyCoa.Text, "")) - Val(Format(txtFEPagos.Text, "")) - Val(Format(txtRetenionServ.Text, "")), "$ ###,###,###,###.00")
'        Else
'            'Factura separada
'            txtFEPagos.Text = Format(0, "$ ###,###,###,###.00")
'            If intIVATasaHospi = 1 And dblExcedenteDeIVA > 0 Then
'                txtFETotalPagar.Text = Format(Val(Format(txtFETotalFactura.Text, "")) - Val(Format(txtFEDedyCoa.Text, "")) - Val(Format(txtRetenionServ.Text, "")), "$ ###,###,###,###.00")
'            Else
'''                txtFETotalPagar.Text = Format(vldblSubtotal - Val(Format(txtFEDedyCoa.Text, "")) + (ldblIVACargosSelConvenio - dblIVAPaciente), "$ ###,###,###,###.00")
'                'txtFETotalPagar = Format(Format(Format(dblSubTotalP, "###############.00") / vldblTipoCambio, "###############.00") - Val(Format(txtFEDedyCoa.Text, "")) + Val(Format(txtFEIVA.Text, "")), "$ ###,###,###,###.00")
'                txtFETotalPagar = Format(vldblSubtotal - Val(Format(txtFEDedyCoa.Text, "")) + Val(Format(txtFEIVA.Text, "")) - Val(Format(txtRetenionServ.Text, "")), "$ ###,###,###,###.00")
'            End If
'        End If
        pCalculaTotalPagar vldblTipoCambio, vldblSubtotal
        txtCargosHospitalNoFacturados.Text = FormatCurrency(Val(Format(ldblSTConvenioNoFact, "############.00")) + Val(Format(ldblIVACargosConvenioNoFact, "############.00")) + Val(Format(txtCargosExcluidosNoFacturados.Text, "")), 2)
    End If
    
    grdGrid.Col = 2
    
    If gintAseguradora = 1 Then rsConceptosDedCoaCP.Close
    
'    'Visualizar el botón de devoluciones de dinero en caso que el total a pagar sea negativo
'    If CDbl(txtFPTotalPagar.Text) < 0 Then
'        If Len(txtFPTotalPagar.Text) > 10 Then txtFPTotalPagar.FontBold = False
'        cmdDevolucionesDinero.Visible = True
'    Else
'        txtFPTotalPagar.FontBold = True
'        cmdDevolucionesDinero.Visible = False
'    End If
    pMuestraDevolucionDinero
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":pLlenaFacturasConvenioAseguradora"))
End Sub
Private Sub pLlenaArregloFacPacrciales(intCont1 As Integer, intCont2 As Integer, ByRef vlaryTempParciales() As String)
    vlaryTempParciales(0, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 0)         'Número de cuenta?
    vlaryTempParciales(1, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 1)         'Tipo de paciente
    vlaryTempParciales(2, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 2)         'Facturado a
    vlaryTempParciales(3, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 3)         'Subtotal
    vlaryTempParciales(4, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 4)         'IVA
    vlaryTempParciales(5, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 5)         'Total
    vlaryTempParciales(6, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 6)         'Subtotal sin formato
    vlaryTempParciales(7, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 7)         'IVA sin formato
    vlaryTempParciales(8, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 8)         'Total sin formato
    vlaryTempParciales(9, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 9)         'Moneda x:dólares
    vlaryTempParciales(10, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 10)     'Total
    vlaryTempParciales(11, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 11)     'Indica si está grabada o en meoria 0:Memoria 1:Grabada
    vlaryTempParciales(12, intCont1) = MSFGFacturasParciales.RowData(intCont2)            'Clave concepto
    vlaryTempParciales(13, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 12)     'Clave concepto de facturación
    vlaryTempParciales(14, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 13)     'Folio de factura
    vlaryTempParciales(15, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 14)     'Fecha hora de la factura
    vlaryTempParciales(16, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 15)     'Descripcion del concepto de facturación
    vlaryTempParciales(17, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 16)     'Importe gravado
    vlaryTempParciales(18, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 17)     'Importe no gravado
    vlaryTempParciales(19, intCont1) = MSFGFacturasParciales.TextMatrix(intCont2, 18)     'Concepto de seguro
End Sub
Private Sub pAjustaFrameTotalesFE(blnDescuentoEspecial As Boolean)
       If blnDescuentoEspecial Then
          'acomodamos el frame, los labels y los textbox
           Me.Frame14.Top = 6370
           Me.Frame14.Height = 3550
           Label51(0).Top = 270
           Label51(4).Visible = True
           Label51(4).Top = 630
           Label51(1).Top = 990
           Label51(2).Top = 1354
           Label51(3).Top = 1710
           Label51(6).Top = 2070
           Label51(7).Top = 2430
           Label51(9).Top = 2783
           Label51(5).Top = 3136
           '-----------------
           txtFEDescuentos.Top = 240
           txtFEDescuentoEspecial.Visible = True
           txtFEDescuentoEspecial.Top = 600
           txtFESubtotal.Top = 960
           txtFEIVA.Top = 1320
           txtFETotalFactura.Top = 1680
           txtFEDedyCoa.Top = 2040
           txtFEPagos.Top = 2400
           txtRetenionServ.Top = 2760
           txtFETotalPagar.Top = 3120
        Else
           'acomodamos el frame, los labels y los textbox
           Me.Frame14.Top = 6370
           Me.Frame14.Height = 3300
           Label51(0).Top = 270
           Label51(4).Visible = False
           Label51(4).Top = 630
           Label51(1).Top = 630
           Label51(2).Top = 990
           Label51(3).Top = 1354
           Label51(6).Top = 1710
           Label51(7).Top = 2070
           Label51(9).Top = 2430
           Label51(5).Top = 2783
           '-----------------
           txtFEDescuentos.Top = 240
           txtFEDescuentoEspecial.Visible = False
           txtFEDescuentoEspecial.Top = 600
           txtFESubtotal.Top = 600
           txtFEIVA.Top = 960
           txtFETotalFactura.Top = 1320
           txtFEDedyCoa.Top = 1680
           txtFEPagos.Top = 2040
           txtRetenionServ.Top = 2400
           txtFETotalPagar.Top = 2760
        End If
End Sub
Private Sub pLlenaCargosAFacturar(grdGrid As MSHFlexGrid, ByRef dblDescuentosP As Double, ByRef vldblTotalPagarPesos As Double)
On Error GoTo NotificaError

    Dim rs As New ADODB.Recordset
    Dim rsTemp As New ADODB.Recordset
    Dim rsTotalCargosPaquete As New ADODB.Recordset
    Dim rsTotalCtasPrecioPaqueteMal As New ADODB.Recordset
    Dim rsConcepto As New ADODB.Recordset
    Dim rsIVAPaquete As New ADODB.Recordset
    Dim rsIVAConceptoHospital As New ADODB.Recordset
    Dim rsPaqueteAddenda As New ADODB.Recordset
    Dim rsDeptoCargoExcedente As New ADODB.Recordset
    
    Dim blnExistePaquete As Boolean         'Bandera para ver si ya existe el paquete en la cuenta
    Dim blnConceptoConIVA As Boolean
    Dim lngCveDeptoConcepto As Long
   
    
    Dim intcontador As Integer              'Contador para recorrer el grid de los cargos
    Dim vlintConta2 As Integer
    Dim vlintPosicion As Integer
    Dim vlintPosicion2 As Integer
    Dim intTotalPaquetes As Integer
    Dim intTasaIVAPaquete As Integer        'Tasa de IVA del paquete
    Dim intCveDeptoCargoExcedente As Integer
    
    Dim lngCvePaquete As Long               'Clave del paquete
    Dim lngCantidadCargo As Long            'Cantidad original del cargo
    Dim lngCantidadPaquete As Long          'Cantidad que dentro del paquete (cantidad original + cantidad extra)
    Dim lngConceptoFactura As Long          'Concepto de facturación que puede ser del cargo o del Paquete
    
    Dim dblIVACargo As Double               'IVA del cargo
    Dim dblCantidad As Double
    Dim dblIVAPaquete As Double             'IVA del paquete
    Dim dblPrecioCargo As Double            'Precio original del cargo
    Dim vldblTipoCambio As Double
    Dim dblPrecioPaquete As Double          'Precio del paquete
    Dim dblDescuentoCargo As Double         'Descuento original del cargo
    Dim dblDescuentoPaquete As Double       'Descuento del paquete
    Dim vlVerificaArreglo As Long
    Dim dblPrecioCantidad As Double         'Precio por cantidad
    
    Dim dblPrecioPaquetePorCargo As Double
    Dim intCtasPrecioPaqueteMal As Long
    
    Dim vlCuentaPaquetesXCargos As Long
    Dim vlTipoCuentaPaquetesXCargos As String
    
    Dim ldblDescEspCargoSelConvenio As Double
    Dim ldblImporteCargoSelConvenioDE As Double
    Dim ldblDescEspPaqueteSelConvenio As Double
    Dim vlstrsql As String
    Dim rsDeptoRequisIngreso As New ADODB.Recordset

'Recorre los cargos del paciente y llena el grid del paciente o empresa, según sea el caso
'cargando y abonando los importes de los cargos seleccionados.

    blnExistePaquete = False
    blnCargosSinFacturar = False
    blnCargosNoSeleccionados = False
    
    dblIVAPolizaPCE = 0
    ldblImporteGravaSelConvenioNoExDE = 0
    ldblImporteNoGravaSelConvenioExDE = 0
    ldblImporteNoGravaSelConvenioNoExDE = 0
    dblIVACargosSelDespuesDescEsp = 0
'    ldblImporteCargoSelConvenio = 0
    ldblDescEspCargoSelConvenio = 0
    ldblImporteCargoSelConvenioDE = 0
    dblImporteFacturaExcluidosDE = 0
    dblDescuentoFacturaExcluidoDE = 0
    ldblImporteGravaSelConvenioExDE = 0
    ldblIVACargosSelConvenioNoExDE = 0
    ldblImporteNoGravaSelConvenioNoExDE_AntesDE = 0
    
    If grdGrid.Name = "grdFacturaPaciente" Then
        vldblTipoCambio = IIf(optPesos(0).Value, 1, (fdblTipoCambio(fdtmServerFecha, "V")))
    Else
        vldblTipoCambio = IIf(optPesos(1).Value, 1, (fdblTipoCambio(fdtmServerFecha, "V")))
    End If
    
    'Asignar valores a variables de trabajo
    For intcontador = 1 To grdCargos.Rows - 1
        ldblDescEspCargoSelConvenio = 0
        ldblDescEspPaqueteSelConvenio = 0
    
    'Cantidad original del cargo
        lngCantidadCargo = Val(Format(grdCargos.TextMatrix(intcontador, 4), ""))
        
    'Precio original del Cargo
        dblPrecioCargo = CDbl(Val(grdCargos.TextMatrix(intcontador, cintColPrecioCargo)))
        
    'Precio original del cargo por la cantidad
        dblPrecioCantidad = CDbl(Val(grdCargos.TextMatrix(intcontador, cintColPrecioCantidad)))
    
    'Descuentos originales del cargo
        dblDescuentoCargo = CDbl(Val(grdCargos.TextMatrix(intcontador, cintColDescuentoCargo)))
        
    'IVA del cargo
        dblIVACargo = IIf(CDbl(Val(grdCargos.TextMatrix(intcontador, cintColIVACargo))) > 0, CDbl(Val(grdCargos.TextMatrix(intcontador, cintColIVACargo))), 0)
        
    'Cantidad que esta dentro del paquete (Original+Extra)
        lngCantidadPaquete = Val(grdCargos.TextMatrix(intcontador, 31)) + Val(grdCargos.TextMatrix(intcontador, 32))
        
    'Precio del paquete
        dblPrecioPaquete = CDbl(Val(grdCargos.TextMatrix(intcontador, cintColPrecioPaquete)))
        
    'Descuento del Paquete
        dblDescuentoPaquete = CDbl(Val(grdCargos.TextMatrix(intcontador, cintColDescuentopaquete))) * Val(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete))
        
    'IVA del paquete
        If Val(grdCargos.TextMatrix(intcontador, 30)) > 0 Then
            'Busca el IVA del concepto de facturación del paquete
            Set rsIVAPaquete = frsEjecuta_SP(Val(grdCargos.TextMatrix(intcontador, 30)), "sp_PvSelIVAPaquete")
            If rsIVAPaquete.RecordCount > 0 Then
                dblIVAPaquete = ((dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)) - dblDescuentoPaquete) * rsIVAPaquete!IVA
                intTasaIVAPaquete = rsIVAPaquete!IVA * 100
            End If
        Else
            dblIVAPaquete = 0
        End If
        
    'Clave del paquete
        lngCvePaquete = Val(grdCargos.TextMatrix(intcontador, 30))
        
        
        'Validación de addenda por paquetes
        vlstrsql = "SELECT * From GNADDENDAPAQUETE WHERE IDADDENDA = " & vglngCveAddenda & " and IDEMPRESA = " & vgintEmpresa & " and IDPAQUETE = " & lngCvePaquete
        Set rsPaqueteAddenda = frsRegresaRs(vlstrsql, adLockReadOnly, adOpenStatic)
        If vglngCveAddenda <> 0 And rsPaqueteAddenda.RecordCount > 0 And vgblnPaqueteAddenda = True And vglngPaqueteAddenda = 0 Then 'Si usa paquetes y tiene paquetes registrados y se encontro un paquete en los cargos
            vglngPaqueteAddenda = lngCvePaquete
            cmdAddenda.Enabled = True
        ElseIf vglngCveAddenda <> 0 And rsPaqueteAddenda.RecordCount > 0 And vgblnPaqueteAddenda = True And vglngPaqueteAddenda <> 0 Then 'Si usa paquetes y tiene paquetes registrados y ya se ha encontrado al menos un paquete

        ElseIf vglngCveAddenda <> 0 And rsPaqueteAddenda.RecordCount = 0 And vgblnPaqueteAddenda = True And vglngPaqueteAddenda = 0 Then 'Si usa paquetes y no tiene paquetes registrados
            vglngPaqueteAddenda = 0
            cmdAddenda.Enabled = False
        ElseIf vglngCveAddenda <> 0 And rsPaqueteAddenda.RecordCount = 0 And vgblnPaqueteAddenda = False Then 'Si no usa paquetes
            vglngPaqueteAddenda = 0
            cmdAddenda.Enabled = True
        End If
        
        
        'Aqui se asigna valor a algunas de las variables que se usan para los cálculos
        'Solo los cargos que no están facturados de cuentas de convenio
        If (vgintEmpresa <> 0 And Trim(grdCargos.TextMatrix(intcontador, 0)) <> "F") Or vgSocio = True Then
            'Cargos excluídos
            If Trim(grdCargos.TextMatrix(intcontador, clbytColumnaExclusion)) = "X" Then
                'Sumar los cargos excluidos:
                'ldblImporteExcluidoNoFact = ldblImporteExcluidoNoFact + lngCantidadCargo * dblPrecioCargo
                ldblImporteExcluidoNoFact = ldblImporteExcluidoNoFact + dblPrecioCantidad
                ldblDescuentoExcluidoNoFact = ldblDescuentoExcluidoNoFact + dblDescuentoCargo
                ldblIVAExcluidoNoFact = ldblIVAExcluidoNoFact + dblIVACargo
                ldblIVAExcluidoSeleccionado = ldblIVAExcluidoSeleccionado + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", dblIVACargo, 0)
            Else
            'Sumar el total a facturar a la empresa, para hacer el cálculo en el control de aseguradoras:
                'Cargos normales
                If lngCvePaquete = 0 Then
                    ldblSTConvenioNoFact = ldblSTConvenioNoFact + (dblPrecioCantidad - dblDescuentoCargo)
                    If vlintbitCalculaConcSegconDescuento = 0 Then
                        ldblSTConvenioNoFactSinDesc = ldblSTConvenioNoFactSinDesc + dblPrecioCantidad
                    End If
                    ldblIVACargosConvenioNoFact = ldblIVACargosConvenioNoFact + dblIVACargo

                    If grdGrid.Name = "grdFacturaPaciente" Then
                        If vlintbitCalculaConcSegconDescuento = 1 Then
                            ldblSTSelConvenio = ldblSTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", (dblPrecioCantidad - dblDescuentoCargo), 0)
                        ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
                            ldblSTSelConvenio = ldblSTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", dblPrecioCantidad, 0)
                        End If
                        ldblIVACargosSelConvenio = ldblIVACargosSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", dblIVACargo, 0)
                        ldblImporteGravaSelConvenio = ldblImporteGravaSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0" And dblIVACargo > 0, (dblPrecioCantidad - dblDescuentoCargo), 0)
                        vldblImporteRetencionServ = ldblImporteGravaSelConvenio * vldblRetencionServicios
                        If grdCargos.TextMatrix(intcontador, cintColConceptoExento) = "-1" Then
                            ldblImporteExentoSelConvenio = ldblImporteExentoSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", IIf(dblIVACargo > 0, 0, (dblPrecioCantidad - dblDescuentoCargo)), 0)
                        Else
                            ldblImporteNoGravaSelConvenio = ldblImporteNoGravaSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", IIf(dblIVACargo > 0, 0, (dblPrecioCantidad - dblDescuentoCargo)), 0)
                        End If
                        
                        ldblTSelConvenio = ldblTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", (dblPrecioCantidad - dblDescuentoCargo), 0)
                    Else
                        If vlintbitCalculaConcSegconDescuento = 1 Then
                            ldblSTSelConvenio = ldblSTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", (dblPrecioCantidad - dblDescuentoCargo), 0)
                        ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
                            ldblSTSelConvenio = ldblSTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", (dblPrecioCantidad), 0)
                        End If
                        ldblIVACargosSelConvenio = ldblIVACargosSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", dblIVACargo, 0)
                        ldblImporteGravaSelConvenio = ldblImporteGravaSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And dblIVACargo > 0, (dblPrecioCantidad - dblDescuentoCargo), 0)
                        vldblImporteRetencionServ = ldblImporteGravaSelConvenio * vldblRetencionServicios
                        If grdCargos.TextMatrix(intcontador, cintColConceptoExento) = "-1" Then
                            ldblImporteExentoSelConvenio = ldblImporteExentoSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", IIf(dblIVACargo > 0, 0, (dblPrecioCantidad - dblDescuentoCargo)), 0)
                        Else
                            ldblImporteNoGravaSelConvenio = ldblImporteNoGravaSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", IIf(dblIVACargo > 0, 0, (dblPrecioCantidad - dblDescuentoCargo)), 0)
                        End If
                        
                        ldblTSelConvenio = ldblTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", (dblPrecioCantidad - dblDescuentoCargo), 0)
                    
                        '----------------------------------
                        '--16805
                        If grdCargos.TextMatrix(intcontador, cintColExcluirDescuento) = "X" Then
                            dblImporteFacturaExcluidosDE = dblImporteFacturaExcluidosDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", (dblPrecioCantidad), 0)
                            dblDescuentoFacturaExcluidoDE = dblDescuentoFacturaExcluidoDE + ((dblDescuentoCargo / vldblTipoCambio) / lngCantidadCargo) * (lngCantidadCargo)
                            ldblImporteGravaSelConvenioExDE = ldblImporteGravaSelConvenioExDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And dblIVACargo > 0, (dblPrecioCantidad - dblDescuentoCargo), 0)
                            If grdCargos.TextMatrix(intcontador, cintColConceptoExento) <> "-1" Then
                                ldblImporteNoGravaSelConvenioExDE = ldblImporteNoGravaSelConvenioExDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", IIf(dblIVACargo > 0, 0, (dblPrecioCantidad - dblDescuentoCargo)), 0)
                            End If
                            ldblIVACargosSelConvenioExDE = ldblIVACargosSelConvenioExDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", dblIVACargo, 0)
                        Else
                            'IVA del cargo despues del descuento especial
                            'ldblImporteCargoSelConvenio = dblPrecioCantidad - dblDescuentoCargo
                            ldblDescEspCargoSelConvenio = (dblPrecioCantidad - dblDescuentoCargo) * dblPorcentajeDescEspecial
                            ldblImporteCargoSelConvenioDE = (dblPrecioCantidad - dblDescuentoCargo) - ldblDescEspCargoSelConvenio
                            If grdCargos.TextMatrix(intcontador, 0) = "*" Then
                                If dblIVACargo > 0 Then
                                    dblIVACargosSelDespuesDescEsp = dblIVACargosSelDespuesDescEsp + (ldblImporteCargoSelConvenioDE * (Val(grdCargos.TextMatrix(intcontador, 19) / 100)))
                                    ldblImporteGravaSelConvenioNoExDE = ldblImporteGravaSelConvenioNoExDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And dblIVACargo > 0, ((dblPrecioCantidad - dblDescuentoCargo) - ldblDescEspCargoSelConvenio), 0)
                                Else
                                    If grdCargos.TextMatrix(intcontador, cintColConceptoExento) <> "-1" Then
                                        ldblImporteNoGravaSelConvenioNoExDE_AntesDE = ldblImporteNoGravaSelConvenioNoExDE_AntesDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", IIf(dblIVACargo > 0, 0, ((dblPrecioCantidad - dblDescuentoCargo))), 0)
                                        ldblImporteNoGravaSelConvenioNoExDE = ldblImporteNoGravaSelConvenioNoExDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", IIf(dblIVACargo > 0, 0, ((dblPrecioCantidad - dblDescuentoCargo) - ldblDescEspCargoSelConvenio)), 0)
                                    End If
                                End If
                            End If
                            ldblIVACargosSelConvenioNoExDE = ldblIVACargosSelConvenioNoExDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", dblIVACargo, 0)
                        End If
                        '----------------------------------
                    End If
                Else
                'Paquetes
                    On Error Resume Next
                    vlVerificaArreglo = UBound(vlaryCuentaPaquete)
                    If Err.Number = 9 Then
                        ReDim vlaryCuentaPaquete(0)
                    End If

                    If Not fblnExistePaquete(vlaryCuentaPaquete, lngCvePaquete, grdCargos.TextMatrix(intcontador, cintColCuenta)) Then
                        intTotalPaquetes = UBound(vlaryCuentaPaquete) + 1
                        ReDim Preserve vlaryCuentaPaquete(intTotalPaquetes)
                        vlaryCuentaPaquete(intTotalPaquetes).lngCuenta = grdCargos.TextMatrix(intcontador, cintColCuenta)
                        vlaryCuentaPaquete(intTotalPaquetes).lngPaquete = lngCvePaquete

                        'Sumar el importe del paquete:
                        ldblSTConvenioNoFact = ldblSTConvenioNoFact + (dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)) - dblDescuentoPaquete
                        If vlintbitCalculaConcSegconDescuento = 0 Then
                            ldblSTConvenioNoFactSinDesc = ldblSTConvenioNoFactSinDesc + (dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete))
                        End If

                        ldblIVACargosConvenioNoFact = ldblIVACargosConvenioNoFact + dblIVAPaquete

                        If grdGrid.Name = "grdFacturaPaciente" Then
                            If vlintbitCalculaConcSegconDescuento = 1 Then
                                ldblSTSelConvenio = ldblSTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", (dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)) - dblDescuentoPaquete, 0)
                            ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
                                ldblSTSelConvenio = ldblSTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", (dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)), 0)
                            End If
                            ldblIVACargosSelConvenio = IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", ldblIVACargosSelConvenio + dblIVAPaquete, ldblIVACargosSelConvenio)
                            ldblImporteGravaSelConvenio = ldblImporteGravaSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0" And dblIVAPaquete > 0, (dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)) - dblDescuentoPaquete, 0)
                            
                            If grdCargos.TextMatrix(intcontador, cintColConceptoExento) = "-1" Then
                                ldblImporteExentoSelConvenio = ldblImporteExentoSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", IIf(dblIVAPaquete > 0, 0, (dblPrecioPaquete * IIf(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete) = 0, 1, Val(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete))) - dblDescuentoPaquete)), 0)
                            Else
                                ldblImporteNoGravaSelConvenio = ldblImporteNoGravaSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", IIf(dblIVAPaquete > 0, 0, (dblPrecioPaquete * IIf(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete) = 0, 1, Val(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete))) - dblDescuentoPaquete)), 0)
                            End If
                                                                                                            
                            ldblTSelConvenio = ldblTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", (dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)) - dblDescuentoPaquete, 0)
                        Else
                            If vlintbitCalculaConcSegconDescuento = 1 Then
                                ldblSTSelConvenio = ldblSTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", (dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)) - dblDescuentoPaquete, 0)
                            ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
                                ldblSTSelConvenio = ldblSTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", (dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)), 0)
                            End If
                            ldblIVACargosSelConvenio = IIf(grdCargos.TextMatrix(intcontador, 0) = "*", ldblIVACargosSelConvenio + dblIVAPaquete, ldblIVACargosSelConvenio)
                            ldblImporteGravaSelConvenio = ldblImporteGravaSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And dblIVAPaquete > 0, (dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)) - dblDescuentoPaquete, 0)
                            vldblImporteRetencionServ = ldblImporteGravaSelConvenio * vldblRetencionServicios
                            If grdCargos.TextMatrix(intcontador, cintColConceptoExento) = "-1" Then
                                ldblImporteExentoSelConvenio = ldblImporteExentoSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", IIf(dblIVAPaquete > 0, 0, (dblPrecioPaquete * IIf(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete) = 0, 1, Val(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete))) - dblDescuentoPaquete)), 0)
                            Else
                                ldblImporteNoGravaSelConvenio = ldblImporteNoGravaSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", IIf(dblIVAPaquete > 0, 0, (dblPrecioPaquete * IIf(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete) = 0, 1, Val(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete))) - dblDescuentoPaquete)), 0)
                            End If

                            ldblTSelConvenio = ldblTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", (dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)) - dblDescuentoPaquete, 0)
                        
                            '----------------------------------
                            '--16805
                            'IVA del cargo despues del descuento especial
                            'ldblImporteCargoSelConvenio = dblPrecioCantidad - dblDescuentoCargo
                            ldblDescEspCargoSelConvenio = ((dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)) - dblDescuentoPaquete) * dblPorcentajeDescEspecial
                            ldblDescEspPaqueteSelConvenio = ((dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)) - dblDescuentoPaquete) * dblPorcentajeDescEspecial
                            ldblImporteCargoSelConvenioDE = ((dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)) - dblDescuentoPaquete) - ldblDescEspCargoSelConvenio
                            If grdCargos.TextMatrix(intcontador, 0) = "*" Then
                                If dblIVAPaquete > 0 Then
                                    dblIVACargosSelDespuesDescEsp = dblIVACargosSelDespuesDescEsp + (ldblImporteCargoSelConvenioDE * (Val(grdCargos.TextMatrix(intcontador, 19) / 100)))
                                    ldblImporteGravaSelConvenioNoExDE = ldblImporteGravaSelConvenioNoExDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And dblIVAPaquete > 0, (((dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)) - dblDescuentoPaquete) - ldblDescEspCargoSelConvenio), 0)
                                Else
                                    If grdCargos.TextMatrix(intcontador, cintColConceptoExento) <> "-1" Then
                                        ldblImporteNoGravaSelConvenioNoExDE_AntesDE = ldblImporteNoGravaSelConvenioNoExDE_AntesDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", IIf(dblIVAPaquete > 0, 0, (dblPrecioPaquete * IIf(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete) = 0, 1, Val(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete))) - dblDescuentoPaquete)), 0)
                                        ldblImporteNoGravaSelConvenioNoExDE = ldblImporteNoGravaSelConvenioNoExDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", IIf(dblIVAPaquete > 0, 0, (dblPrecioPaquete * IIf(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete) = 0, 1, Val(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete))) - dblDescuentoPaquete)), 0) - ldblDescEspCargoSelConvenio
                                    End If
                                End If
                            End If
                            ldblIVACargosSelConvenioNoExDE = ldblIVACargosSelConvenioNoExDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", dblIVAPaquete, 0)
                            '----------------------------------
                        End If
                    End If

                    'Sumar lo que excede al paquete:
                    If lngCantidadCargo > lngCantidadPaquete Then
                        ldblSTConvenioNoFact = ldblSTConvenioNoFact + (((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)))
                        If vlintbitCalculaConcSegconDescuento = 0 Then
                            ldblSTConvenioNoFactSinDesc = ldblSTConvenioNoFactSinDesc + (((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo))
                        End If
                        ldblIVACargosConvenioNoFact = ldblIVACargosConvenioNoFact + ((dblIVACargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete))

                        If grdGrid.Name = "grdFacturaPaciente" Then
                            If vlintbitCalculaConcSegconDescuento = 1 Then
                                ldblSTSelConvenio = ldblSTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", (((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete))), 0)
                            ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
                                ldblSTSelConvenio = ldblSTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", (((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo)), 0)
                            End If
                            ldblIVACargosSelConvenio = IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", ldblIVACargosSelConvenio + ((dblIVACargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)), ldblIVACargosSelConvenio)
                            ldblImporteGravaSelConvenio = ldblImporteGravaSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0" And dblIVACargo > 0, (((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete))), 0)
                            
                            If grdCargos.TextMatrix(intcontador, cintColConceptoExento) = "-1" Then
                                ldblImporteExentoSelConvenio = ldblImporteExentoSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", IIf(dblIVACargo > 0, 0, ((dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete)) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)))), 0)
                            Else
                                ldblImporteNoGravaSelConvenio = ldblImporteNoGravaSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", IIf(dblIVACargo > 0, 0, ((dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete)) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)))), 0)
                            End If
                         
                            ldblTSelConvenio = ldblTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And grdCargos.TextMatrix(intcontador, cintColMarcadoParaFacturar) = "0", (((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete))), 0)
                        Else
                            If vlintbitCalculaConcSegconDescuento = 1 Then
                                ldblSTSelConvenio = ldblSTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", (((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete))), 0)
                            ElseIf vlintbitCalculaConcSegconDescuento = 0 Then
                                ldblSTSelConvenio = ldblSTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", (((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo)), 0)
                            End If
                            ldblIVACargosSelConvenio = IIf(grdCargos.TextMatrix(intcontador, 0) = "*", ldblIVACargosSelConvenio + ((dblIVACargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)), ldblIVACargosSelConvenio)
                            ldblImporteGravaSelConvenio = ldblImporteGravaSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And dblIVACargo > 0, (((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete))), 0)
                            
                            If grdCargos.TextMatrix(intcontador, cintColConceptoExento) = "-1" Then
                                ldblImporteExentoSelConvenio = ldblImporteExentoSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", IIf(dblIVACargo > 0, 0, ((dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete)) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)))), 0)
                            Else
                                ldblImporteNoGravaSelConvenio = ldblImporteNoGravaSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", IIf(dblIVACargo > 0, 0, ((dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete)) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)))), 0)
                            End If
                                                                                
                            ldblTSelConvenio = ldblTSelConvenio + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", (((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete))), 0)
                        
                            '----------------------------------
                            '--16805
                            If grdCargos.TextMatrix(intcontador, cintColExcluirDescuento) = "X" Then
                                dblImporteFacturaExcluidosDE = dblImporteFacturaExcluidosDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", (((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo)), 0)
                                dblDescuentoFacturaExcluidoDE = dblDescuentoFacturaExcluidoDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)), 0)
                                ldblImporteGravaSelConvenioExDE = ldblImporteGravaSelConvenioExDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And dblIVACargo > 0, (((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete))), 0)
                                If grdCargos.TextMatrix(intcontador, cintColConceptoExento) <> "-1" Then
                                    ldblImporteNoGravaSelConvenioExDE = ldblImporteNoGravaSelConvenioExDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", IIf(dblIVACargo > 0, 0, (((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)))), 0)
                                End If
                                ldblIVACargosSelConvenioExDE = IIf(grdCargos.TextMatrix(intcontador, 0) = "*", ldblIVACargosSelConvenioExDE + ((dblIVACargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)), ldblIVACargosSelConvenioExDE)
                            Else
                                'IVA del cargo despues del descuento especial
                                'ldblImporteCargoSelConvenio = dblPrecioCantidad - dblDescuentoCargo
                                ldblDescEspCargoSelConvenio = (((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete))) * dblPorcentajeDescEspecial
                                ldblImporteCargoSelConvenioDE = (((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete))) - ldblDescEspCargoSelConvenio
                                If grdCargos.TextMatrix(intcontador, 0) = "*" Then
                                    If dblIVACargo > 0 Then
                                        dblIVACargosSelDespuesDescEsp = dblIVACargosSelDespuesDescEsp + (ldblImporteCargoSelConvenioDE * (Val(grdCargos.TextMatrix(intcontador, 19) / 100)))
                                        ldblImporteGravaSelConvenioNoExDE = ldblImporteGravaSelConvenioNoExDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*" And dblIVACargo > 0, ((((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete))) - ldblDescEspCargoSelConvenio), 0)
                                    Else
                                        If grdCargos.TextMatrix(intcontador, cintColConceptoExento) <> "-1" Then
                                            ldblImporteNoGravaSelConvenioNoExDE_AntesDE = ldblImporteNoGravaSelConvenioNoExDE_AntesDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", IIf(dblIVACargo > 0, 0, ((((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete))))), 0)
                                            ldblImporteNoGravaSelConvenioNoExDE = ldblImporteNoGravaSelConvenioNoExDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", IIf(dblIVACargo > 0, 0, ((((lngCantidadCargo - lngCantidadPaquete) * dblPrecioCargo) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete))) - ldblDescEspCargoSelConvenio)), 0)
                                        End If
                                    End If
                                End If
                                ldblIVACargosSelConvenioNoExDE = ldblIVACargosSelConvenioNoExDE + IIf(grdCargos.TextMatrix(intcontador, 0) = "*", ((dblIVACargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)), 0)
                            End If
                            '----------------------------------
                        End If
                    End If
                End If
                                
                'Para saber si hay algún cargo sin marcar
                If grdCargos.TextMatrix(intcontador, 0) <> "*" Then
                    blnCargosNoSeleccionados = True
                End If
            End If
        End If
        
        txtCargosExcluidosNoFacturados.Text = FormatCurrency(Format(ldblImporteExcluidoNoFact, "############.00") - Format(ldblDescuentoExcluidoNoFact, "############.00") + Format(ldblIVAExcluidoNoFact, "############.00"), 2)
        
        'Cargos sin marcar para facturar
        If intcontador = 1 Then
            If grdCargos.TextMatrix(intcontador, 0) = "" And grdCargos.TextMatrix(intcontador, 1) <> "" Then blnCargosSinFacturar = True
        Else
            If grdCargos.TextMatrix(intcontador, 0) = "" Then blnCargosSinFacturar = True
        End If
        'Se llena el grid del paciente o empresa según sea el caso
        'Sólo los seleccionados y que correspondan a la factura de Paciente o Empresa
        If grdCargos.TextMatrix(intcontador, 0) = "*" And ((((vgintEmpresa = 0 And vgSocio = False) Or (vgSocio = True And grdCargos.TextMatrix(intcontador, 18) = "X") Or (grdCargos.TextMatrix(intcontador, 18) = "X")) And grdGrid.Name = "grdFacturaPaciente" And optTipoFacturacion(1).Value) _
              Or (((vgintEmpresa <> 0 Or vgSocio = True) And (grdCargos.TextMatrix(intcontador, 18) <> "X" Or optTipoFacturacion(0).Value)) And grdGrid.Name = "grdFacturaEmpresa")) Then
    
            If lngCantidadCargo - lngCantidadPaquete > 0 Then
            'Esto es que si queda algo del cargo FUERA del paquete
                lngConceptoFactura = Val(grdCargos.TextMatrix(intcontador, 20)) 'Concepto de facturación del cargo
               
                'Este es para separar cargos por Concepto para llenar la facturacion
                vlintPosicion = 0
                For vlintConta2 = 1 To grdGrid.Rows - 1
                    If lngConceptoFactura = grdGrid.RowData(vlintConta2) Then
                        vlintPosicion = vlintConta2
                        Exit For
                    End If
                Next
                
                'Y este es para separar cargos por Concepto y Departamento para cargar en la poliza
                If vgintEmpresa <> 0 And llngCveEmpresaPCE = vgintEmpresa And grdGrid.Name = "grdFacturaEmpresa" Then
                'Cuando es PCE, para los movimientos contables se utilizan las cuentas contables de ingreso, descuento
                'y excepciones contables de los conceptos de facturación del hospital
                    
                    vlintPosicion2 = fintPosicion(CLng(Val(grdCargos.TextMatrix(intcontador, cintColConceptoHospital))), CLng(grdCargos.TextMatrix(intcontador, 24)))
                    
                    If vgintEmpresa = llngCveEmpresaPCE Then
                        'Si se trata de una configuración de catálgo de cargos por empresa, toma el IVA directamente de lo que trae el grid, el cual ya trae el IVA dependiendo del concepto de facturación que se le configuró para la empresa
                        dblIVAPolizaPCE = dblIVAPolizaPCE + dblIVACargo
                    Else
                        'Tasa de IVA del concepto de hospital
                        vgstrParametrosSP = grdCargos.TextMatrix(intcontador, cintColConceptoHospital) & "|" & _
                                            "-1|-1|" & _
                                            str(vgintClaveEmpresaContable)
                        Set rsIVAConceptoHospital = frsEjecuta_SP(vgstrParametrosSP, "Sp_PvSelConceptoFacturacion")
                        If Not rsIVAConceptoHospital.EOF Then
                        'Para el IVA se toma en cuenta el concepto del hospital
                            dblIVAPolizaPCE = dblIVAPolizaPCE + (dblPrecioCantidad - dblDescuentoCargo) * (rsIVAConceptoHospital!smyIVA / 100)
                        End If
                    End If
                Else
                    vlintPosicion2 = fintPosicion(CLng(Val(grdCargos.TextMatrix(intcontador, cintColConceptoHospital))), CLng(grdCargos.TextMatrix(intcontador, 24)))
                End If
                
                'Si YA EXISTE el concepto de facturación, únicamente se suma al total
                If vlintPosicion <> 0 Then
                    dblCantidad = Round(((dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete)) / vldblTipoCambio), 6)
                    ' La 2 es el CARGO
                    grdGrid.TextMatrix(vlintPosicion, 2) = Format(Val(grdGrid.TextMatrix(vlintPosicion, 9)) + dblCantidad, "$ ###,###,###,###.00####")
                    ' La 9 es el CARGO sin formato
                    grdGrid.TextMatrix(vlintPosicion, 9) = Val(grdGrid.TextMatrix(vlintPosicion, 9)) + dblCantidad
                    ' El 4 es el IVA
                    If dblIVACargo > 0 Then
                        '|  Calcula el IVA de los cargos que están fuera de un paquete
                        grdGrid.TextMatrix(vlintPosicion, 4) = Val(grdGrid.TextMatrix(vlintPosicion, 4)) + Round((((dblIVACargo / vldblTipoCambio)) / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete), 6)
                    End If
                    ' El 5 son los DESCUENTOS
                    grdGrid.TextMatrix(vlintPosicion, 5) = Format(Val(Format(grdGrid.TextMatrix(vlintPosicion, 5), "")) + Round(((dblDescuentoCargo / vldblTipoCambio) / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete), 6), "$ ###,###,###,###.00####")
                    If Val(grdGrid.TextMatrix(vlintPosicion, 4)) > 0 Then
                        grdGrid.TextMatrix(vlintPosicion, 14) = vldblRetencionServicios * (Val(Format(grdGrid.TextMatrix(vlintPosicion, 9), "")) - Val(Format(grdGrid.TextMatrix(vlintPosicion, 5), "")))
                    End If
                    If grdCargos.TextMatrix(intcontador, 19) <> 0 Then
                        'Aqui se va a acumular el importe y descuento gravado
                        vldblsubtotalgravado = vldblsubtotalgravado + Format((dblCantidad - ((dblDescuentoCargo / vldblTipoCambio) / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)), "############.00####")
                        vldblsubtotalgravadoSinRound = vldblsubtotalgravadoSinRound + (dblCantidad - ((dblDescuentoCargo / vldblTipoCambio) / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete))
                        
                        vldbldescuentogravado = vldbldescuentogravado + ((dblDescuentoCargo / vldblTipoCambio) / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)
                        dblSubtotalGravadoP = dblSubtotalGravadoP + Format((dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete)) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)), "############.00####")
                        dblSubtotalGravadoPSinFormat = dblSubtotalGravadoPSinFormat + ((dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete)) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)))
                        vldblImporteRetencionServ = dblSubtotalGravadoPSinFormat * vldblRetencionServicios
                    End If
                    
                    If grdCargos.TextMatrix(intcontador, cintColConceptoExento) = "-1" Then
                        vldblsubtotalExento = vldblsubtotalExento + Format((dblCantidad - ((dblDescuentoCargo / vldblTipoCambio) / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)), "############.00####")
                    End If
                    
                    'El 10 son los cargos en pesos
                    grdGrid.TextMatrix(vlintPosicion, 10) = Format(Val(Format(grdGrid.TextMatrix(vlintPosicion, 12), "")) + Round(dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete), 6), "###############.00####")
                    'El 12 son los cargos en pesos
                    grdGrid.TextMatrix(vlintPosicion, 12) = Val(grdGrid.TextMatrix(vlintPosicion, 12)) + Round((dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete)), 6)
                    ' El 15 son los DESCUENTOS ESPECIALES
                    grdGrid.TextMatrix(vlintPosicion, 15) = Format(Val(Format(grdGrid.TextMatrix(vlintPosicion, 15), "")) + Round(ldblDescEspCargoSelConvenio, 6), "$ ###,###,###,###.00####")

                Else
                    'Si NO EXISTE el concepto de facturación se agrega
                    If grdGrid.RowData(1) <> -1 Then
                        grdGrid.Rows = grdGrid.Rows + 1
                    End If
                    ' La Clave del concepto
                    grdGrid.RowData(grdGrid.Rows - 1) = lngConceptoFactura
                    ' La Descripcion del concepto
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 1) = grdCargos.TextMatrix(intcontador, 13)
                    ' La 2 es el CARGO
                    dblCantidad = Round(((dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete)) / vldblTipoCambio), 6)
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 2) = Format(dblCantidad, "$ ###,###,###,###.00####")
                    ' La 9 es el CARGO sin formato
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 9) = dblCantidad
                    ' El 4 es el IVA
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 4) = Round(((((dblIVACargo / vldblTipoCambio)) / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)), 6)
                    ' El 5 son los DESCUENTOS
                    'grdGrid.TextMatrix(grdGrid.Rows - 1, 5) = ((dblDescuentoCargo / vldblTipoCambio) / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 5) = Format(((dblDescuentoCargo / vldblTipoCambio) / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete), "$ ###,###,###,###.00####")
                    'se agrega la retencion aplicado al concepto, 0 si no aplica retencion
                    If Val(grdGrid.TextMatrix(grdGrid.Rows - 1, 4)) > 0 Then
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 14) = vldblRetencionServicios * (Val(Format(grdGrid.TextMatrix(grdGrid.Rows - 1, 9), "")) - Val(Format(grdGrid.TextMatrix(grdGrid.Rows - 1, 5), "")))
                    End If
                    If grdCargos.TextMatrix(intcontador, 19) <> 0 Then
                        'Se va acumulando el importe gravado
                        vldblsubtotalgravado = vldblsubtotalgravado + Format((dblCantidad - ((dblDescuentoCargo / vldblTipoCambio) / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)), "############.00####")
                        vldblsubtotalgravadoSinRound = vldblsubtotalgravadoSinRound + (dblCantidad - ((dblDescuentoCargo / vldblTipoCambio) / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete))
                        
                        vldbldescuentogravado = vldbldescuentogravado + Round(((dblDescuentoCargo / vldblTipoCambio) / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete), 6)
                        dblSubtotalGravadoP = dblSubtotalGravadoP + Format((dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete)) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)), "############.00####")
                        dblSubtotalGravadoPSinFormat = dblSubtotalGravadoPSinFormat + ((dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete)) - ((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)))
                        vldblImporteRetencionServ = dblSubtotalGravadoPSinFormat * vldblRetencionServicios
                       
                    End If
                    
                    If grdCargos.TextMatrix(intcontador, cintColConceptoExento) = "-1" Then
                        vldblsubtotalExento = vldblsubtotalExento + Format((dblCantidad - ((dblDescuentoCargo / vldblTipoCambio) / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete)), "############.00####")
                    End If
                    
                    ' El 6 es el TIPO de CONCEPTO
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 6) = "NO" 'NO:Conceptos Normales
                    ' El 7 es el TIPO de Otro CONCEPTO (No aplica para conceptos normales por eso es un "")
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 7) = "" 'Cual de los otros conceptos es: Deducible, Coaseguro, Coaseguro Adicional, Copago o Excedente
                    ' El 8 es la clave del Paquete
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 8) = 0 'La clave del paquete
                    'El 10 son los cargos en pesos
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 10) = Format(dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete), "###############.00####")
                    'El 12 son los cargos con decimales
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 12) = Round(dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete), 6)
                    'El IVA del concepto de Facturación (tasa)
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 13) = Val(grdCargos.TextMatrix(intcontador, 19))
                    'Descuento especial
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 15) = Val(ldblDescEspCargoSelConvenio)
                    
                End If
                
                If vlintPosicion2 = -1 Then
                    ReDim Preserve aCPCargosPoliza(UBound(aCPCargosPoliza) + 1)
                    aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngDepartamento = CInt(grdCargos.TextMatrix(intcontador, 24))
                    'aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadIngreso = dblCantidad
                    aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadIngreso = Round((dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete)), 6)
                    aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadDescuento = Round((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete), 6)
                     
                    aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).blnConceptoNormal = True '*
                    If vgintEmpresa <> 0 And llngCveEmpresaPCE = vgintEmpresa And grdGrid.Name = "grdFacturaEmpresa" Then
                    'Cuando es PCE, para los movimientos contables se utilizan las cuentas contables de ingreso, descuento
                    'y excepciones contables de los conceptos de facturación del hospital
                        aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngConceptoFacturacion = CLng(Val(grdCargos.TextMatrix(intcontador, cintColConceptoHospital)))
                        aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaIngreso = flngCuentaConceptoDepartamento(CLng(Val(grdCargos.TextMatrix(intcontador, cintColConceptoHospital))), Val(grdCargos.TextMatrix(intcontador, 24)), "INGRESO")
                        aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaDescuento = flngCuentaConceptoDepartamento(CLng(Val(grdCargos.TextMatrix(intcontador, cintColConceptoHospital))), Val(grdCargos.TextMatrix(intcontador, 24)), "DESCUENTO")
                    Else
                        aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngConceptoFacturacion = lngConceptoFactura
                        ' Verifica las excepciones contables configuradas para socios, para los cargos excluidos.
                        If Trim(grdCargos.TextMatrix(intcontador, 18)) <> "X" And vgSocio = True Then
                             aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaIngreso = flngCuentaConceptoDepartamento(CLng(Val(grdCargos.TextMatrix(intcontador, cintColConceptoHospital))), Val(grdCargos.TextMatrix(intcontador, 24)), "INGRESO", vgLngTipoPacienteSocio)
                             aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaDescuento = flngCuentaConceptoDepartamento(CLng(Val(grdCargos.TextMatrix(intcontador, cintColConceptoHospital))), Val(grdCargos.TextMatrix(intcontador, 24)), "DESCUENTO", vgLngTipoPacienteSocio)
                        Else
                            vlstrsql = "SELECT IVREQUISICIONMAESTRO.INTCVEDEPTOINGRESO From IVREQUISICIONMAESTRO " & _
                                       "INNER JOIN IVREQUISICIONDETALLE ON IVREQUISICIONMAESTRO.NUMNUMREQUISICION = IVREQUISICIONDETALLE.NUMNUMREQUISICION " & _
                                       "INNER JOIN IVARTICULO ON IVREQUISICIONDETALLE.CHRCVEARTICULO  = IVARTICULO.CHRCVEARTICULO " & _
                                       "INNER JOIN EXPREPARACIONMEDICAMENTO ON IVREQUISICIONMAESTRO.NUMNUMREQUISICION = EXPREPARACIONMEDICAMENTO.INTNUMREQUISICION " & _
                                       "Where IVARTICULO.intIdArticulo = " & grdCargos.TextMatrix(intcontador, 64) & " AND IVREQUISICIONMAESTRO.NUMNUMREQUISICION = " & grdCargos.TextMatrix(intcontador, 12)
                            Set rsDeptoRequisIngreso = frsRegresaRs(vlstrsql, adLockReadOnly, adOpenStatic)
                            If rsDeptoRequisIngreso.RecordCount <> 0 Then
                                If IIf(IsNull(rsDeptoRequisIngreso!INTCVEDEPTOINGRESO), 0, rsDeptoRequisIngreso!INTCVEDEPTOINGRESO) = 0 Then
                                    aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaIngreso = flngCuentaConceptoDepartamento(CLng(Val(grdCargos.TextMatrix(intcontador, cintColConceptoHospital))), Val(grdCargos.TextMatrix(intcontador, 24)), "INGRESO")
                                Else
                                    aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaIngreso = flngCuentaConceptoDepartamento(CLng(Val(grdCargos.TextMatrix(intcontador, cintColConceptoHospital))), Val(grdCargos.TextMatrix(intcontador, 63)), "INGRESO")
                                End If
                            Else
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaIngreso = flngCuentaConceptoDepartamento(CLng(Val(grdCargos.TextMatrix(intcontador, cintColConceptoHospital))), Val(grdCargos.TextMatrix(intcontador, 24)), "INGRESO")
                            End If
                            'aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaIngreso = flngCuentaConceptoDepartamento(CLng(Val(grdCargos.TextMatrix(intcontador, cintColConceptoHospital))), Val(grdCargos.TextMatrix(intcontador, 24)), "INGRESO")
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaDescuento = flngCuentaConceptoDepartamento(CLng(Val(grdCargos.TextMatrix(intcontador, cintColConceptoHospital))), Val(grdCargos.TextMatrix(intcontador, 24)), "DESCUENTO")
                            
                        End If
                    End If
                Else
                    aCPCargosPoliza(vlintPosicion2).dblCantidadIngreso = aCPCargosPoliza(vlintPosicion2).dblCantidadIngreso + Round(((dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete))), 6)
                    aCPCargosPoliza(vlintPosicion2).dblCantidadDescuento = aCPCargosPoliza(vlintPosicion2).dblCantidadDescuento + Round((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete), 6)
                    
                End If
                
                ' Variable de "TotalPesos" Cargo + Iva - Descuentos  (Todo sin tomar en cuenta el Tipo de cambio)
                vldblTotalPagarPesos = vldblTotalPagarPesos + _
                                        Round(dblPrecioCargo * (lngCantidadCargo - lngCantidadPaquete), 6) + _
                                        Round(((dblIVACargo) / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete), 6) - _
                                        Round((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete), 6)
                
                ' Sumatoria de descuentos
                ldblDescuentos = ldblDescuentos + Round(((dblDescuentoCargo / vldblTipoCambio) / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete), 6)
                
                If grdCargos.TextMatrix(intcontador, cintColConceptoExento) = "-1" Then
                    ldblDescuentosExentos = ldblDescuentosExentos + Round(((dblDescuentoCargo / vldblTipoCambio) / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete), 6)
                End If
                
                dblDescuentosP = dblDescuentosP + Round((dblDescuentoCargo / lngCantidadCargo) * (lngCantidadCargo - lngCantidadPaquete), 6)
                
            End If ' Fin de parte de la carga por cargo
                        
            If lngCantidadPaquete > 0 Then
            
                'Aqui va la parte de los cargos DENTRO de paquetes
                'Identificar si el concepto de facturación del paquete tiene iva
                
                vgstrParametrosSP = grdCargos.TextMatrix(intcontador, 34) & "|-1|-1|" & str(vglngCveEmpresaPaciente)
                Set rsConcepto = frsEjecuta_SP(vgstrParametrosSP, "Sp_Pvselconceptofacturacion")
                If rsConcepto.RecordCount > 0 Then
                    blnConceptoConIVA = rsConcepto!smyIVA > 0
                    lngCveDeptoConcepto = rsConcepto!SMIDEPARTAMENTO
                End If
            
                'Esto es para la cantidad DENTRO del paquete
                lngConceptoFactura = CLng(grdCargos.TextMatrix(intcontador, 34)) 'Concepto de facturación del PAQUETE
                
                'Este es para separar cargos por Concepto para llenar la facturación:
                vlintPosicion = 0
                For vlintConta2 = 1 To grdGrid.Rows - 1
                    If lngConceptoFactura = grdGrid.RowData(vlintConta2) Then
                        vlintPosicion = vlintConta2
                        Exit For
                    End If
                Next vlintConta2
                
                'Y este es para separar cargos por Concepto y Departamento para cargar en la poliza
                vlintPosicion2 = fintPosicion(lngConceptoFactura, lngCveDeptoConcepto)
                
                
                'Y este es para buscar si existe ya un Paquete en la factura
                If fblnCargaPaqueteACuenta(CLng(Val(grdCargos.TextMatrix(intcontador, 42))), CLng(Val(grdCargos.TextMatrix(intcontador, 30)))) Then blnExistePaquete = True
                
                If vlintPosicion <> 0 Then
                    If Not blnExistePaquete Then
                        'La 2 es el CARGO
                        dblCantidad = (dblPrecioPaquete * Val(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete))) / vldblTipoCambio
                        grdGrid.TextMatrix(vlintPosicion, 2) = Format(Val(Format(grdGrid.TextMatrix(vlintPosicion, 9), "")) + dblCantidad, "$ ###,###,###,###.00") 'Cantidad
                        'La 9 es el CARGO con todos los decimales
                        grdGrid.TextMatrix(vlintPosicion, 9) = Val(grdGrid.TextMatrix(vlintPosicion, 9)) + dblCantidad
                        ' El 4 es el IVA
                        If dblIVAPaquete > 0 Then
                            grdGrid.TextMatrix(vlintPosicion, 4) = Val(grdGrid.TextMatrix(vlintPosicion, 4)) + (dblIVAPaquete / vldblTipoCambio)
                        End If
                        'El 5 son los DESCUENTOS
                        grdGrid.TextMatrix(vlintPosicion, 5) = Val(Format(grdGrid.TextMatrix(vlintPosicion, 5), "")) + (dblDescuentoPaquete / vldblTipoCambio)
                        'El 6 es el TIPO de CONCEPTO, no se actualiza
                        'El 7 es el TIPO de Otro CONCEPTO (No aplica para conceptos normales, por eso es un ""), no se actualiza
                        'El 8 es la clave del Paquete
                        'El 10 es el cargo en pesos
                        grdGrid.TextMatrix(vlintPosicion, 10) = Format(Val(Format(grdGrid.TextMatrix(vlintPosicion, 12), "")) + ((dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete))), "############.00")
                        'El 12 es el cargo en pesos con todos los decimales
                        grdGrid.TextMatrix(vlintPosicion, 12) = Val(Format(grdGrid.TextMatrix(vlintPosicion, 12), "")) + (dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete))
                        'se agrega la retencion aplicado al concepto, 0 si no aplica retencion
                        If Val(grdGrid.TextMatrix(vlintPosicion, 4)) > 0 Then
                            grdGrid.TextMatrix(vlintPosicion, 14) = vldblRetencionServicios * (Val(Format(grdGrid.TextMatrix(vlintPosicion, 9), "")) - Val(Format(grdGrid.TextMatrix(vlintPosicion, 5), "")))
                        End If
                        'El 15 son los DESCUENTOS ESPECIALES
                        grdGrid.TextMatrix(vlintPosicion, 15) = Val(Format(grdGrid.TextMatrix(vlintPosicion, 15), "")) + (ldblDescEspPaqueteSelConvenio / vldblTipoCambio)
                        
                        If blnConceptoConIVA Then
                            'Se va acumulando el importe gravado
                            vldblsubtotalgravado = vldblsubtotalgravado + Format((((dblPrecioPaquete * Val(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete))) / vldblTipoCambio) - dblDescuentoPaquete / vldblTipoCambio), "############.00")
                            vldblsubtotalgravadoSinRound = vldblsubtotalgravadoSinRound + (((dblPrecioPaquete * Val(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete))) / vldblTipoCambio) - dblDescuentoPaquete / vldblTipoCambio)
                            
                            vldbldescuentogravado = vldbldescuentogravado + dblDescuentoPaquete
                            dblSubtotalGravadoP = dblSubtotalGravadoP + Format((dblPrecioPaquete * Val(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete))) - dblDescuentoPaquete, "############.00")
                            dblSubtotalGravadoPSinFormat = dblSubtotalGravadoPSinFormat + ((dblPrecioPaquete * Val(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete))) - dblDescuentoPaquete)
                            vldblImporteRetencionServ = dblSubtotalGravadoPSinFormat * vldblRetencionServicios
                            'Para la póliza de la factura de PCE
                            dblIVAPolizaPCE = dblIVAPolizaPCE + dblIVAPaquete
                        End If
                    End If
                Else
                    If grdGrid.RowData(1) <> -1 Then
                        grdGrid.Rows = grdGrid.Rows + 1
                    End If
                    ' La Clave del concepto
                    grdGrid.RowData(grdGrid.Rows - 1) = lngConceptoFactura
                    ' La Descripcion del concepto
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 1) = grdCargos.TextMatrix(intcontador, 41) 'Descripción del Concepto del Paquete
                    ' La 2 es el CARGO
                    dblCantidad = (dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)) / vldblTipoCambio
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 2) = Format(dblCantidad, "$ ###,###,###,###.00") 'Cantidad
                    ' La 9 es el CARGO con todos los decimales
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 9) = dblCantidad
                    ' El 4 es el IVA
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 4) = (dblIVAPaquete / vldblTipoCambio)
                    ' El 5 son los DESCUENTOS
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 5) = (dblDescuentoPaquete / vldblTipoCambio)
                    ' El 6 es el TIPO de CONCEPTO
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 6) = "NO" 'Conceptos Normales
                    ' El 7 es el TIPO de Otro CONCEPTO (No aplica para conceptos normales, por eso es un "")
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 7) = "" 'Cual de los otros conceptos es: Deducible, Coaseguro, Coaseguro Adicional, Copago o Excedente
                    ' El 8 es la clave del Paquete
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 8) = CLng(Val(grdCargos.TextMatrix(intcontador, 30))) 'La clave del paquete
                    'El 10 es el cargo en pesos
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 10) = Format(dblPrecioPaquete * Val(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)), "############.00")
                    'El 12 es el cargo en pesos con todos los decimales
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 12) = dblPrecioPaquete * Val(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete))
                    'El IVA del concepto de Facturación
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 13) = intTasaIVAPaquete
                    'se agrega la retencion aplicado al concepto, primero en 0 por si no aplica retencion
                    If Val(grdGrid.TextMatrix(grdGrid.Rows - 1, 4)) > 0 Then
                        grdGrid.TextMatrix(grdGrid.Rows - 1, 14) = vldblRetencionServicios * (Val(Format(grdGrid.TextMatrix(grdGrid.Rows - 1, 9), "")) - Val(Format(grdGrid.TextMatrix(grdGrid.Rows - 1, 5), "")))
                    End If
                    'Descuento especial
                    grdGrid.TextMatrix(grdGrid.Rows - 1, 15) = ldblDescEspPaqueteSelConvenio / vldblTipoCambio
                    
                    If blnConceptoConIVA Then
                        'Se va acumulando el importe gravado
                        'Importe - Descuento
                        vldblsubtotalgravado = vldblsubtotalgravado + Format(dblCantidad - (dblDescuentoPaquete / vldblTipoCambio), "############.00")
                        vldblsubtotalgravadoSinRound = vldblsubtotalgravadoSinRound + (dblCantidad - (dblDescuentoPaquete / vldblTipoCambio))
                        
                        vldbldescuentogravado = vldbldescuentogravado + (dblDescuentoPaquete / vldblTipoCambio)
                        dblSubtotalGravadoP = dblSubtotalGravadoP + Format((dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)) - dblDescuentoPaquete, "############.00")
                        dblSubtotalGravadoPSinFormat = dblSubtotalGravadoPSinFormat + ((dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)) - dblDescuentoPaquete)
                        'Para la póliza de la factura de PCE
                        dblIVAPolizaPCE = dblIVAPolizaPCE + dblIVAPaquete
                        vldblImporteRetencionServ = dblSubtotalGravadoPSinFormat * vldblRetencionServicios
                    End If
                End If
                
                If Not blnExistePaquete Then
                    
                    dblPrecioPaquetePorCargo = 0
                    Set rsTotalCargosPaquete = frsRegresaRs("Select FN_PVSELTOTALPAQUETEPORCARGO(" & Val(grdCargos.TextMatrix(intcontador, 30)) & ") Info From Dual", adLockReadOnly, adOpenStatic)
                    If rsTotalCargosPaquete.RecordCount <> 0 Then
                        dblPrecioPaquetePorCargo = Trim(IIf(IsNull(rsTotalCargosPaquete!Info), 0, rsTotalCargosPaquete!Info))
                    End If

                    If dblPrecioPaquetePorCargo = 0 Then
                        If vlintPosicion2 = -1 Then
                            ReDim Preserve aCPCargosPoliza(UBound(aCPCargosPoliza) + 1)
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngConceptoFacturacion = lngConceptoFactura
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngDepartamento = CInt(grdCargos.TextMatrix(intcontador, 24))
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaIngreso = CLng(grdCargos.TextMatrix(intcontador, 36))
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaDescuento = CLng(grdCargos.TextMatrix(intcontador, 37))
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadIngreso = (dblPrecioPaquete * Val(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)))
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadDescuento = dblDescuentoPaquete
                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).blnConceptoNormal = True '*
                        Else
                            aCPCargosPoliza(vlintPosicion2).dblCantidadIngreso = aCPCargosPoliza(vlintPosicion2).dblCantidadIngreso + (dblPrecioPaquete * Val(grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)))
                            aCPCargosPoliza(vlintPosicion2).dblCantidadDescuento = aCPCargosPoliza(vlintPosicion2).dblCantidadDescuento + dblDescuentoPaquete
                        End If
                    Else
                        
                        vlCuentaPaquetesXCargos = 0
                        vlTipoCuentaPaquetesXCargos = ""
                        Set rs = frsRegresaRs("select intMovPaciente, chrTipoPaciente from pvCargo where intNumCargo = " & grdCargos.RowData(intcontador), adLockOptimistic, adOpenDynamic)
                        With rs
                            vlCuentaPaquetesXCargos = IIf(IsNull(rs!INTMOVPACIENTE), 0, rs!INTMOVPACIENTE)
                            vlTipoCuentaPaquetesXCargos = IIf(IsNull(rs!CHRTIPOPACIENTE), "I", rs!CHRTIPOPACIENTE)
                        End With
                        
                        If sstFacturacion.Tab = 3 Or sstFacturacion.Tab = 4 Then
                            intCtasPrecioPaqueteMal = 0
                            Set rsTotalCtasPrecioPaqueteMal = frsRegresaRs("Select FN_PVSELCNTASPRECIOPAQINCORREC(" & vlCuentaPaquetesXCargos & ",'" & vlTipoCuentaPaquetesXCargos & "'," & CLng(Val(grdCargos.TextMatrix(intcontador, 30))) & "," & Round(dblPrecioPaquetePorCargo, 2) & ") Info From Dual", adLockReadOnly, adOpenStatic)
                            If rsTotalCtasPrecioPaqueteMal.RecordCount <> 0 Then
                                intCtasPrecioPaqueteMal = Trim(IIf(IsNull(rsTotalCtasPrecioPaqueteMal!Info), 0, rsTotalCtasPrecioPaqueteMal!Info))
                            End If
                                            
                            If intCtasPrecioPaqueteMal <> 0 Then
                                'No coincide la sumatoria de precios del contenido del paquete con el precio de venta del paquete, favor de verificar.
                                MsgBox SIHOMsg(1589), vbOKOnly + vbInformation, "Mensaje"
                                pCancelar
                                Exit Sub
                            End If
                        End If
                    
                        'Calculo de Ingresos de los cargos contenidos en el paquete
                        Set rs = frsEjecuta_SP(vlCuentaPaquetesXCargos & "|'" & vlTipoCuentaPaquetesXCargos & "'|" & CLng(Val(grdCargos.TextMatrix(intcontador, 30))), "SP_PVSELINGRESOPAQUETECARGOS")
                        If rs.RecordCount <> 0 Then
                            Do While Not rs.EOF
                                If vlintPosicion2 = -1 Then
                                    ReDim Preserve aCPCargosPoliza(UBound(aCPCargosPoliza) + 1)
                                    aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngConceptoFacturacion = rs!smicveconcepto
                                    aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngDepartamento = rs!SMIDEPARTAMENTO
                                    aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaIngreso = flngCuentaConceptoDepartamento(rs!smicveconcepto, rs!SMIDEPARTAMENTO, "INGRESO")
                                    aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaDescuento = flngCuentaConceptoDepartamento(rs!smicveconcepto, rs!SMIDEPARTAMENTO, "DESCUENTO")
                                    aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadIngreso = rs!INGRESOCARGO
                                    aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadDescuento = 0
                                    aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).blnConceptoNormal = True
                                Else
                                    aCPCargosPoliza(vlintPosicion2).dblCantidadIngreso = aCPCargosPoliza(vlintPosicion2).dblCantidadIngreso + rs!INGRESOCARGO
'                                    aCPCargosPoliza(vlintPosicion2).dblCantidadDescuento = aCPCargosPoliza(vlintPosicion2).dblCantidadDescuento + dblDescuentoPaquete
                                End If
                                
                                rs.MoveNext
                            Loop
                        End If
                        
                        'Eficiencia y Deficiencia del paquete
                        Set rs = frsEjecuta_SP(vlCuentaPaquetesXCargos & "|'" & vlTipoCuentaPaquetesXCargos & "'|" & CLng(Val(grdCargos.TextMatrix(intcontador, 30))) & "|" & vgintClaveEmpresaContable, "SP_PVSELINGRESOPAQUETEEFICIEN")
                        If rs.RecordCount <> 0 Then
                            Do While Not rs.EOF
                                If rs!Importe <> 0 Then
                                
                                    If sstFacturacion.Tab = 3 Or sstFacturacion.Tab = 4 Then
                                        If IsNull(rs!cuenta) Then
                                            MsgBox "No se ha configurado la cuenta contable para " & IIf(rs!tipo = "EFICIENCIA", "eficiencia", "deficiencia") & " en paquetes para el concepto de facturación " & fstrConceptoFacturacion(CLng(grdCargos.TextMatrix(intcontador, 34))), vbOKOnly + vbInformation, "Mensaje"
                                            pCancelar
                                            Exit Sub
                                        Else
                                            'Que la cuenta acepte movimientos
                                            Set rsTemp = frsEjecuta_SP(rs!cuenta, "Sp_CnSelCuentaContable")
                                            If rsTemp.RecordCount > 0 Then
                                                If IsNull(rsTemp!Bitestatusmovimientos) Or rsTemp!Bitestatusmovimientos = 0 Then
                                                    MsgBox "La cuenta contable para " & IIf(rs!tipo = "EFICIENCIA", "eficiencia", "deficiencia") & " en paquetes para el concepto de facturación " & fstrConceptoFacturacion(CLng(grdCargos.TextMatrix(intcontador, 34))) & " no acepta movimientos", vbOKOnly + vbInformation, "Mensaje"
                                                    pCancelar
                                                    Exit Sub
                                                End If
                                            End If
                                        End If
                                    End If
                                
                                    If rs!tipo = "EFICIENCIA" Then
                                        If vlintPosicion2 = -1 Then
                                            ReDim Preserve aCPCargosPoliza(UBound(aCPCargosPoliza) + 1)
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngConceptoFacturacion = CLng(grdCargos.TextMatrix(intcontador, 34))
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngDepartamento = vgintNumeroDepartamento
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaIngreso = IIf(IsNull(rs!cuenta), 0, rs!cuenta)
        '                                    aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaDescuento = IIf(IsNull(rs!cuenta), 0, rs!cuenta)
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadIngreso = rs!Importe
        '                                    aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadDescuento = rs!IMPORTE
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).blnConceptoNormal = True
                                        Else
                                            aCPCargosPoliza(vlintPosicion2).dblCantidadIngreso = aCPCargosPoliza(vlintPosicion2).dblCantidadIngreso + rs!Importe
        '                                    aCPCargosPoliza(vlintPosicion2).dblCantidadDescuento = aCPCargosPoliza(vlintPosicion2).dblCantidadDescuento + rs!IMPORTE
                                        End If
                                    Else
                                        If vlintPosicion2 = -1 Then
                                            ReDim Preserve aCPCargosPoliza(UBound(aCPCargosPoliza) + 1)
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngConceptoFacturacion = CLng(grdCargos.TextMatrix(intcontador, 34))
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngDepartamento = vgintNumeroDepartamento
'                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaIngreso = IIf(IsNull(rs!cuenta), 0, rs!cuenta)
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaDescuento = IIf(IsNull(rs!cuenta), 0, rs!cuenta)
'                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadIngreso = rs!IMPORTE
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadDescuento = rs!Importe
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).blnConceptoNormal = True
                                        Else
'                                            aCPCargosPoliza(vlintPosicion2).dblCantidadIngreso = aCPCargosPoliza(vlintPosicion2).dblCantidadIngreso + rs!IMPORTE
                                            aCPCargosPoliza(vlintPosicion2).dblCantidadDescuento = aCPCargosPoliza(vlintPosicion2).dblCantidadDescuento + rs!Importe
                                        End If
                                    End If
                                End If
                                
                                rs.MoveNext
                            Loop
                        End If
                    End If
                    
                    ' Variable de "TotalPesos" Cargo + Iva - Descuentos  (Todo sin tomar en cuenta el Tipo de cambio)
                    vldblTotalPagarPesos = vldblTotalPagarPesos + _
                                            (dblPrecioPaquete * grdCargos.TextMatrix(intcontador, cintColCantidadPaquete)) - _
                                            dblDescuentoPaquete + (dblIVAPaquete)
                                        
                    ' Sumatoria de descuentos
                    ldblDescuentos = ldblDescuentos + (dblDescuentoPaquete / vldblTipoCambio)
                    dblDescuentosP = dblDescuentosP + dblDescuentoPaquete
                Else
                    If grdCargos.TextMatrix(intcontador, 0) = "*" And (((vgintEmpresa = 0 And Val(Format(grdCargos.TextMatrix(intcontador, 55), "")) > 0) And grdGrid.Name = "grdFacturaPaciente" And optTipoFacturacion(1).Value)) Then
                        'Si existe en el paquete, verifica si tiene excedente por grupo de cargo
                        'Calculo de Ingresos de los cargos exedentes contenidos en el paquete
                        If Val(Format(grdCargos.TextMatrix(intcontador, 55), "")) > 0 Then
                            If rsExcedentes.RecordCount <> 0 Then
                                rsExcedentes.MoveFirst
                                blnExisteExcedente = False
                                Do While Not rsExcedentes.EOF And blnExisteExcedente = False
                                    If rsExcedentes!IntNumCargo = grdCargos.RowData(intcontador) Then
                                        blnExisteExcedente = True
                                        vlstrsql = "SELECT CASE WHEN PVCARGO.CHRTIPODOCUMENTO = 'V' THEN " & _
                                                                "(SELECT IVREQUISICIONMAESTRO.SMICVEDEPTOREQUIS FROM IVREQUISICIONMAESTRO WHERE IVREQUISICIONMAESTRO.NUMNUMREQUISICION = PVCARGO.INTFOLIODOCUMENTO) " & _
                                                          "ELSE PVCARGO.SMIDEPARTAMENTO END smidepartamento " & _
                                                    "FROM PVCARGO WHERE PVCARGO.IntNumCargo = " & rsExcedentes!IntNumCargo
                                        Set rsDeptoCargoExcedente = frsRegresaRs(vlstrsql, adLockReadOnly, adOpenStatic)
                                        intCveDeptoCargoExcedente = 0
                                        If rsDeptoCargoExcedente.RecordCount > 0 Then intCveDeptoCargoExcedente = rsDeptoCargoExcedente!SMIDEPARTAMENTO
                                        If vlintPosicion2 = -1 Then
                                            ReDim Preserve aCPCargosPoliza(UBound(aCPCargosPoliza) + 1)
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngConceptoFacturacion = rsExcedentes!smicveconcepto
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngDepartamento = intCveDeptoCargoExcedente
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaIngreso = flngCuentaConceptoDepartamento(rsExcedentes!smicveconcepto, intCveDeptoCargoExcedente, "INGRESO")
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaDescuento = flngCuentaConceptoDepartamento(rsExcedentes!smicveconcepto, intCveDeptoCargoExcedente, "DESCUENTO")
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadIngreso = rsExcedentes!mnyexcedente
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadDescuento = 0
                                            aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).blnConceptoNormal = True
                                        Else
                                            aCPCargosPoliza(vlintPosicion2).dblCantidadIngreso = aCPCargosPoliza(vlintPosicion2).dblCantidadIngreso + rsExcedentes!mnyexcedente
                                        End If
                                    End If
                                    rsExcedentes.MoveNext
                                Loop
                                rsExcedentes.MoveFirst
                            End If
                        End If
                    End If
                End If
                blnExistePaquete = False
            End If
        Else
            If grdCargos.TextMatrix(intcontador, 0) = "*" And (((vgintEmpresa <> 0 And Val(Format(grdCargos.TextMatrix(intcontador, 55), "")) > 0) And grdGrid.Name = "grdFacturaPaciente" And optTipoFacturacion(1).Value)) Then
                
                vlintPosicion2 = fintPosicion(CLng(Val(grdCargos.TextMatrix(intcontador, cintColConceptoHospital))), CLng(grdCargos.TextMatrix(intcontador, 24)))
                'Si existe en el paquete, verifica si tiene excedente por grupo de cargo
                'Calculo de Ingresos de los cargos exedentes contenidos en el paquete
                If rsExcedentes.RecordCount <> 0 Then
                    rsExcedentes.MoveFirst
                    blnExisteExcedente = False
                    Do While Not rsExcedentes.EOF And blnExisteExcedente = False
                        If rsExcedentes!IntNumCargo = grdCargos.RowData(intcontador) Then
                            blnExisteExcedente = True
                            vlstrsql = "SELECT CASE WHEN PVCARGO.CHRTIPODOCUMENTO = 'V' THEN " & _
                                                    "(SELECT IVREQUISICIONMAESTRO.SMICVEDEPTOREQUIS FROM IVREQUISICIONMAESTRO WHERE IVREQUISICIONMAESTRO.NUMNUMREQUISICION = PVCARGO.INTFOLIODOCUMENTO) " & _
                                              "ELSE PVCARGO.SMIDEPARTAMENTO END smidepartamento " & _
                                        "FROM PVCARGO WHERE PVCARGO.IntNumCargo = " & rsExcedentes!IntNumCargo
                            Set rsDeptoCargoExcedente = frsRegresaRs(vlstrsql, adLockReadOnly, adOpenStatic)
                            intCveDeptoCargoExcedente = 0
                            If rsDeptoCargoExcedente.RecordCount > 0 Then intCveDeptoCargoExcedente = rsDeptoCargoExcedente!SMIDEPARTAMENTO
                            If vlintPosicion2 = -1 Then
                                ReDim Preserve aCPCargosPoliza(UBound(aCPCargosPoliza) + 1)
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngConceptoFacturacion = rsExcedentes!smicveconcepto
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngDepartamento = intCveDeptoCargoExcedente
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaIngreso = flngCuentaConceptoDepartamento(rsExcedentes!smicveconcepto, intCveDeptoCargoExcedente, "INGRESO")
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).lngCuentaDescuento = flngCuentaConceptoDepartamento(rsExcedentes!smicveconcepto, intCveDeptoCargoExcedente, "DESCUENTO")
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadIngreso = rsExcedentes!mnyexcedente
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).dblCantidadDescuento = 0
                                aCPCargosPoliza(UBound(aCPCargosPoliza) - 1).blnConceptoNormal = True
                            Else
                                aCPCargosPoliza(vlintPosicion2).dblCantidadIngreso = aCPCargosPoliza(vlintPosicion2).dblCantidadIngreso + rsExcedentes!mnyexcedente
                            End If
                        End If
                        rsExcedentes.MoveNext
                    Loop
                    rsExcedentes.MoveFirst
                End If
            End If
        End If 'Para que sean sólo los seleccionados
    Next intcontador

Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":pLlenaCargosAFacturar"))
End Sub
Private Function fdblDescuentoEspecial(dblSubTotal As Double, dblSubTotalP As Double, lngEmpresa As Long, blnPesos As Boolean) As Double
    Dim RsDescuentoEspecial As New ADODB.Recordset
    Set RsDescuentoEspecial = frsRegresaRs("Select * from PvDescuentoEspecial where dtmfechainicial <= to_date(" & _
                                            fstrFechaSQL(fdtmServerFecha) & ",'yyyy-mm-dd') and dtmfechafinal >= to_date(" & _
                                            fstrFechaSQL(fdtmServerFecha) & ",'yyyy-mm-dd') and intcveempresa = " & lngEmpresa, adLockOptimistic)
    fdblDescuentoEspecial = 0
    dblDescuentoEspecialPorcentaje = 0
    vlblnConsiderarExcluidosDescEsp = False
    If RsDescuentoEspecial.RecordCount > 0 Then
       If blnPesos Then 'pesos
          If dblSubTotal > RsDescuentoEspecial!MNYMONTOAPLICARLIMITE Then
            fdblDescuentoEspecial = RsDescuentoEspecial!NUMPORCENTAJE / 100
            dblDescuentoEspecialPorcentaje = RsDescuentoEspecial!NUMPORCENTAJE
          End If
       Else 'dlls
          If dblSubTotalP > RsDescuentoEspecial!MNYMONTOAPLICARLIMITE Then
            fdblDescuentoEspecial = RsDescuentoEspecial!NUMPORCENTAJE / 100
            dblDescuentoEspecialPorcentaje = RsDescuentoEspecial!NUMPORCENTAJE
          End If
       End If
       vlblnConsiderarExcluidosDescEsp = RsDescuentoEspecial!bitConsideraExcluidos
    End If
End Function
Private Sub pAgregaExcedente(vldblTipoCambio As Double) 'Procedimiento para agregar Excedente por uso de grupos de cargo a la factura del paciente
On Error GoTo NotificaError
    
    Dim vlintRenglonCA As Integer
    Dim vlintRenglonCargosCA As Integer
    Dim vlintContadorCargosCA As Integer
    Dim vlExisteConceptoCA As Boolean
    Dim vlintContadorCA As Integer
    
    vlintRenglonCA = grdFacturaPaciente.Row
    vlintRenglonCargosCA = grdCargos.Row
    If Not rsExcedentes.EOF Then
        rsExcedentes.MoveFirst
        Do While Not rsExcedentes.EOF
            grdCargos.Row = 1
            For vlintContadorCargosCA = 1 To grdCargos.Rows - 1
                If grdCargos.RowData(vlintContadorCargosCA) = rsExcedentes!IntNumCargo And grdCargos.TextMatrix(vlintContadorCargosCA, 0) = "*" Then
                    vlExisteConceptoCA = False
                    For vlintContadorCA = 1 To grdFacturaPaciente.Rows - 1
                        If grdFacturaPaciente.RowData(vlintContadorCA) = rsExcedentes!smicveconcepto Then
                            grdFacturaPaciente.TextMatrix(vlintContadorCA, 2) = Format(grdFacturaPaciente.TextMatrix(vlintContadorCA, 2) + (rsExcedentes!mnyexcedente / vldblTipoCambio), "$ ###,###,###,###.00")
                            grdFacturaPaciente.TextMatrix(vlintContadorCA, 9) = grdFacturaPaciente.TextMatrix(vlintContadorCA, 9) + (rsExcedentes!mnyexcedente / vldblTipoCambio)
                            grdFacturaPaciente.TextMatrix(vlintContadorCA, 10) = Format(grdFacturaPaciente.TextMatrix(vlintContadorCA, 10) + (rsExcedentes!mnyexcedente / vldblTipoCambio), "###############.00")
                            grdFacturaPaciente.TextMatrix(vlintContadorCA, 12) = grdFacturaPaciente.TextMatrix(vlintContadorCA, 12) + (rsExcedentes!mnyexcedente / vldblTipoCambio)
                            vlExisteConceptoCA = True
                            Exit For
                        End If
                    Next vlintContadorCA
                    
                    If vlExisteConceptoCA = False Then
                        If grdFacturaPaciente.RowData(grdFacturaPaciente.Rows - 1) <> -1 Then
                            grdFacturaPaciente.Rows = grdFacturaPaciente.Rows + 1
                        End If
                        grdFacturaPaciente.RowData(grdFacturaPaciente.Rows - 1) = rsExcedentes!smicveconcepto
                        grdFacturaPaciente.TextMatrix(grdFacturaPaciente.Rows - 1, 1) = rsExcedentes!chrdescripcionconcept
                        grdFacturaPaciente.TextMatrix(grdFacturaPaciente.Rows - 1, 2) = Format(rsExcedentes!mnyexcedente / vldblTipoCambio, "$ ###,###,###,###.00")
                        grdFacturaPaciente.TextMatrix(grdFacturaPaciente.Rows - 1, 9) = rsExcedentes!mnyexcedente / vldblTipoCambio
                        grdFacturaPaciente.TextMatrix(grdFacturaPaciente.Rows - 1, 4) = 0
                        grdFacturaPaciente.TextMatrix(grdFacturaPaciente.Rows - 1, 5) = 0
                        grdFacturaPaciente.TextMatrix(grdFacturaPaciente.Rows - 1, 6) = "OC"
                        grdFacturaPaciente.TextMatrix(grdFacturaPaciente.Rows - 1, 7) = ""
                        grdFacturaPaciente.TextMatrix(grdFacturaPaciente.Rows - 1, 8) = 0
                        grdFacturaPaciente.TextMatrix(grdFacturaPaciente.Rows - 1, 10) = Format(rsExcedentes!mnyexcedente, "###############.00")
                        grdFacturaPaciente.TextMatrix(grdFacturaPaciente.Rows - 1, 12) = rsExcedentes!mnyexcedente
                        grdFacturaPaciente.TextMatrix(grdFacturaPaciente.Rows - 1, 13) = 0
                    End If
                End If
            Next vlintContadorCargosCA
            rsExcedentes.MoveNext
        Loop
        rsExcedentes.MoveFirst
    End If
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":pAgregaExcedente"))
    Unload Me
End Sub

Private Sub pCargaVariables(vlintClaveEmpContable As Integer, vllngNoCuenta As Long, vlStrTipoPaciente As String, vlintClaveEmpresa As Integer)
    Dim rsParametros As New ADODB.Recordset
On Error GoTo NotificaError
    
    'Inician: Variables del control e IVA
    blnCambiosEnParametrosCuenta = False
    
    dblPorcentajeEXNota = 0
        dblPorcentajeEXNotaTemp = 0
    dblPorcentajeDENota = 0
        dblPorcentajeDENotaTemp = 0
    dblPorcentajeCONota = 0
        dblPorcentajeCONotaTemp = 0
    dblPorcentajeCMNota = 0
        dblPorcentajeCMNotaTemp = 0
    dblPorcentajeCANota = 0
        dblPorcentajeCANotaTemp = 0
    dblPorcentajeCPNota = 0
        dblPorcentajeCPNotaTemp = 0
    
    dblLimiteNotaEX = 0
        dblLimiteNotaEXTemp = 0
    dblLimiteNotaDE = 0
        dblLimiteNotaDETemp = 0
    dblLimiteNotaCO = 0
        dblLimiteNotaCOTemp = 0
    dblLimiteNotaCM = 0
        dblLimiteNotaCMTemp = 0
    dblLimiteNotaCA = 0
        dblLimiteNotaCATemp = 0
    dblLimiteNotaCP = 0
        dblLimiteNotaCPTemp = 0
    
    blnCalcularEnBaseACargos = False
        blnCalcularEnBaseACargosTemp = False
    
    lintDesglosaIVAExcedente = 0
        lintDesglosaIVAExcedenteTemp = 0
    lintDesglosaIVADeducible = 0
        lintDesglosaIVADeducibleTemp = 0
    lintDesglosaIVACoaseguro = 0
        lintDesglosaIVACoaseguroTemp = 0
    lintDesglosaIVACoaseguroMedico = 0
        lintDesglosaIVACoaseguroMedicoTemp = 0
    lintDesglosaIVACoaseguroAdicional = 0
        lintDesglosaIVACoaseguroAdicionalTemp = 0
    lintDesglosaIVACopago = 0
        lintDesglosaIVACopagoTemp = 0
        
    lintDesglosaCoaseguroAdicionalTemp = 0
    lintDesglosaCoaseguroMedicoTemp = 0
    lintDesglosaExcedenteTemp = 0
    lintDesglosaDeducibleTemp = 0
    lintDesglosaCoaseguroTemp = 0
    lintDesglosaCopagoTemp = 0
    
    vlchrIncluirConceptosSeguro = 0
    vlchrIncluirConceptosSeguroTemp = 0
    
    vlintDesgloseConceptosVICFDI = 0
    vlintDesgloseConceptosVICFDITemp = 0
    
    intIVATasaHospi = 0
        intIVATasaHospiTemp = 0
    intCoaseguroPorFactura = 0
        intCoaseguroPorFacturaTemp = 0
    ' Terminan: Variables del control e IVA
    
     claveCarta = 0
    If cboCartaAutorizacion.ListIndex > 0 Then
         claveCarta = cboCartaAutorizacion.ItemData(cboCartaAutorizacion.ListIndex)
    End If
    
    'Al abrir la pantalla se traera los parametro de PVPARAMETRO y SIPARAMETRO
    'Se le envian 0´s a SP_PVSELCONTROLASEGURADORAPAC por que aun no tenemos la cuenta a consultar y para que se traiga los parametros normales y no por cuenta
    Set rsParametros = frsEjecuta_SP(str(vlintClaveEmpContable) & "|" & vllngNoCuenta & "|" & vlStrTipoPaciente & "|" & vlintClaveEmpresa & "|" & claveCarta, "SP_PVSELCONTROLASEGURADORAPAC")
    If Not rsParametros.EOF Then
        dblPorcentajeEXNota = IIf(IsNull(rsParametros!SMYPORCENTEXCEDENTENOTA), 0, rsParametros!SMYPORCENTEXCEDENTENOTA)
            dblPorcentajeEXNotaTemp = dblPorcentajeEXNota
        dblPorcentajeDENota = IIf(IsNull(rsParametros!SMYPORCENTDEDUCIBLENOTA), 0, rsParametros!SMYPORCENTDEDUCIBLENOTA)
            dblPorcentajeDENotaTemp = dblPorcentajeDENota
        dblPorcentajeCONota = IIf(IsNull(rsParametros!SMYPORCENTCOASEGURONOTA), 0, rsParametros!SMYPORCENTCOASEGURONOTA)
            dblPorcentajeCONotaTemp = dblPorcentajeCONota
        dblPorcentajeCMNota = IIf(IsNull(rsParametros!SMYPORCENTCOASEGUROMEDICONOTA), 0, rsParametros!SMYPORCENTCOASEGUROMEDICONOTA)
            dblPorcentajeCMNotaTemp = dblPorcentajeCMNota
        dblPorcentajeCANota = IIf(IsNull(rsParametros!SMYPORCENTCOASADICIONALNOTA), 0, rsParametros!SMYPORCENTCOASADICIONALNOTA)
            dblPorcentajeCANotaTemp = dblPorcentajeCANota
        dblPorcentajeCPNota = IIf(IsNull(rsParametros!SMYPORCENTCOPAGONOTA), 0, rsParametros!SMYPORCENTCOPAGONOTA)
            dblPorcentajeCPNotaTemp = dblPorcentajeCPNota
        
        dblLimiteNotaEX = IIf(IsNull(rsParametros!MNYCANTIDADLIMITEEXCEDENTE), 0, rsParametros!MNYCANTIDADLIMITEEXCEDENTE)
            dblLimiteNotaEXTemp = dblLimiteNotaEX
        dblLimiteNotaDE = IIf(IsNull(rsParametros!MNYCANTIDADLIMITEDEDUCIBLE), 0, rsParametros!MNYCANTIDADLIMITEDEDUCIBLE)
            dblLimiteNotaDETemp = dblLimiteNotaDE
        dblLimiteNotaCO = IIf(IsNull(rsParametros!MNYCANTIDADLIMITECOASEGURO), 0, rsParametros!MNYCANTIDADLIMITECOASEGURO)
            dblLimiteNotaCOTemp = dblLimiteNotaCO
        dblLimiteNotaCM = IIf(IsNull(rsParametros!MNYCANTIDADLIMITECOASEGUROMED), 0, rsParametros!MNYCANTIDADLIMITECOASEGUROMED)
            dblLimiteNotaCMTemp = dblLimiteNotaCM
        dblLimiteNotaCA = IIf(IsNull(rsParametros!MNYCANTIDADLIMITECOASADICIONAL), 0, rsParametros!MNYCANTIDADLIMITECOASADICIONAL)
            dblLimiteNotaCATemp = dblLimiteNotaCA
        dblLimiteNotaCP = IIf(IsNull(rsParametros!MNYCANTIDADLIMITECOPAGO), 0, rsParametros!MNYCANTIDADLIMITECOPAGO)
            dblLimiteNotaCPTemp = dblLimiteNotaCP
        
        strTipoDesctoNotaExcedente = IIf(IsNull(rsParametros!tipoDesctoNotaExcedente), "P", rsParametros!tipoDesctoNotaExcedente)
            strTipoDesctoNotaExcedenteTemp = strTipoDesctoNotaExcedente
        strTipoDesctoNotaDeducible = IIf(IsNull(rsParametros!tipoDesctoNotaDeducible), "P", rsParametros!tipoDesctoNotaDeducible)
            strTipoDesctoNotaDeducibleTemp = strTipoDesctoNotaDeducible
        strTipoDesctoNotaCoaseguro = IIf(IsNull(rsParametros!tipoDesctoNotaCoaseguro), "P", rsParametros!tipoDesctoNotaCoaseguro)
            strTipoDesctoNotaCoaseguroTemp = strTipoDesctoNotaCoaseguro
        strTipoDesctoNotaCoaMedico = IIf(IsNull(rsParametros!tipoDesctoNotaCoaMedico), "P", rsParametros!tipoDesctoNotaCoaMedico)
            strTipoDesctoNotaCoaMedicoTemp = strTipoDesctoNotaCoaMedico
        strTipoDesctoNotaCoaAdicional = IIf(IsNull(rsParametros!tipoDesctoNotaCoaAdicional), "P", rsParametros!tipoDesctoNotaCoaAdicional)
            strTipoDesctoNotaCoaAdicionalTemp = strTipoDesctoNotaCoaAdicional
        strTipoDesctoNotaCopago = IIf(IsNull(rsParametros!tipoDesctoNotaCopago), "P", rsParametros!tipoDesctoNotaCopago)
            strTipoDesctoNotaCopagoTemp = strTipoDesctoNotaCopago
        
        blnCalcularEnBaseACargos = IIf(IsNull(rsParametros!BITCALCULARENBASEACARGOS), False, rsParametros!BITCALCULARENBASEACARGOS)
            blnCalcularEnBaseACargosTemp = blnCalcularEnBaseACargos
            If fblnRevisaPermiso(vglngNumeroLogin, 4196, "C", True) Then
                vgblnBloqueoPostergacionDefinitivo = blnCalcularEnBaseACargosTemp
                pFacturaPacienteActiva
            Else
                vgblnBloqueoPostergacionDefinitivo = True
                pFacturaPacienteActiva
            End If
        lintDesglosaIVAExcedente = IIf(IsNull(rsParametros!INTDESGLOSARIVAEXCEDENTE), 0, rsParametros!INTDESGLOSARIVAEXCEDENTE)
            lintDesglosaIVAExcedenteTemp = lintDesglosaIVAExcedente
        lintDesglosaIVADeducible = IIf(IsNull(rsParametros!INTDESGLOSARIVADEDUCIBLE), 0, rsParametros!INTDESGLOSARIVADEDUCIBLE)
            lintDesglosaIVADeducibleTemp = lintDesglosaIVADeducible
        lintDesglosaIVACoaseguro = IIf(IsNull(rsParametros!INTDESGLOSARIVACOASEGURO), 0, rsParametros!INTDESGLOSARIVACOASEGURO)
            lintDesglosaIVACoaseguroTemp = lintDesglosaIVACoaseguro
        lintDesglosaIVACoaseguroMedico = IIf(IsNull(rsParametros!INTDESGLOSARIVACOASEGUROMEDICO), 0, rsParametros!INTDESGLOSARIVACOASEGUROMEDICO)
            lintDesglosaIVACoaseguroMedicoTemp = lintDesglosaIVACoaseguroMedico
        lintDesglosaIVACoaseguroAdicional = IIf(IsNull(rsParametros!INTDESGLOSARIVACOASEGUROADICIO), 0, rsParametros!INTDESGLOSARIVACOASEGUROADICIO)
            lintDesglosaIVACoaseguroAdicionalTemp = lintDesglosaIVACoaseguroAdicional
        lintDesglosaIVACopago = IIf(IsNull(rsParametros!INTDESGLOSARIVACOPAGO), 0, rsParametros!INTDESGLOSARIVACOPAGO)
            lintDesglosaIVACopagoTemp = lintDesglosaIVACopago
        
        lintDesglosaCoaseguroAdicionalTemp = IIf(IsNull(rsParametros!INTDESGLOSARCOASEGUROADICIONAL), 0, rsParametros!INTDESGLOSARCOASEGUROADICIONAL)
        lintDesglosaCoaseguroMedicoTemp = IIf(IsNull(rsParametros!INTDESGLOSARCOASEGUROMEDICO), 0, rsParametros!INTDESGLOSARCOASEGUROMEDICO)
        lintDesglosaExcedenteTemp = IIf(IsNull(rsParametros!INTDESGLOSAREXCEDENTE), 0, rsParametros!INTDESGLOSAREXCEDENTE)
        lintDesglosaDeducibleTemp = IIf(IsNull(rsParametros!INTDESGLOSARDEDUCIBLE), 0, rsParametros!INTDESGLOSARDEDUCIBLE)
        lintDesglosaCoaseguroTemp = IIf(IsNull(rsParametros!INTDESGLOSARCOASEGURO), 0, rsParametros!INTDESGLOSARCOASEGURO)
        lintDesglosaCopagoTemp = IIf(IsNull(rsParametros!INTDESGLOSARCOPAGO), 0, rsParametros!INTDESGLOSARCOPAGO)
        
        intIVATasaHospi = IIf(IsNull(rsParametros!BITDESGLOSAIVATASAHOSPICONCEP), 0, rsParametros!BITDESGLOSAIVATASAHOSPICONCEP)
            intIVATasaHospiTemp = intIVATasaHospi
            
        intCoaseguroPorFactura = IIf(IsNull(rsParametros!BITCAPTURARCOASEGUROPORFACTURA), 0, rsParametros!BITCAPTURARCOASEGUROPORFACTURA)
            intCoaseguroPorFacturaTemp = intCoaseguroPorFactura
            
        vlchrIncluirConceptosSeguro = IIf(IsNull(rsParametros!chrIncluirConceptosSeguro), "I", rsParametros!chrIncluirConceptosSeguro)
        vlchrIncluirConceptosSeguroTemp = vlchrIncluirConceptosSeguro
        
        vlintDesgloseConceptosVICFDI = IIf(IsNull(rsParametros!INTDESGLOSECONCEPTOSVICFDI), 0, rsParametros!INTDESGLOSECONCEPTOSVICFDI)
        vlintDesgloseConceptosVICFDITemp = vlintDesgloseConceptosVICFDI


    End If
    rsParametros.Close
    
    lblPorcentajeDeducible(16).Caption = IIf(intCoaseguroPorFactura = 1, "Cantidad a facturar", "Cantidad máxima")
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":pCargaVariables"))
    Unload Me
End Sub

Public Function fblnDevolucionPaciente(vllngCuenta As Long, vlstrTipo As String) As Boolean
    '---------------------------------------------------------------------'
    ' Verificar si el paciente tiene devoluciones pendientes de completar '
    '---------------------------------------------------------------------'
    Dim vlstrSentencia As String
    Dim rsDevoluciones As New ADODB.Recordset
    
    fblnDevolucionPaciente = False
          
    vlstrSentencia = "SELECT IvDevoluPacientMaestro.* FROM IvDevoluPacientMaestro " & _
                     "WHERE IvDevoluPacientMaestro.intNumCuenta = " & str(vllngCuenta) & " " & _
                     "AND IvDevoluPacientMaestro.chrTipoPaciente =  '" & vlstrTipo & "' " & _
                     "AND IvDevoluPacientMaestro.vchEstatus = 'PENDIENTE'"
    Set rsDevoluciones = frsRegresaRs(vlstrSentencia)
    If rsDevoluciones.RecordCount <> 0 Then
        fblnDevolucionPaciente = True
    End If
    rsDevoluciones.Close
End Function

Private Function fblnCargoFacturado(vlintNumCargo As String) As Boolean
On Error GoTo NotificaError
    Dim rsCargoFacturado As New ADODB.Recordset
    Dim vlstrsql As String
    Dim Mensaje As String
    
    fblnCargoFacturado = False
    
    If vlblnValidaCargo = False Then Exit Function
    
    vlblnValidaCargo = False
    vlstrsql = "SELECT pvcargo.chrfoliofactura " & _
               "  FROM pvcargo " & _
               " WHERE pvcargo.intnumcargo = " & vlintNumCargo
    
    Set rsCargoFacturado = frsRegresaRs(vlstrsql)
    If rsCargoFacturado.RecordCount > 0 Then
        If IsNull(rsCargoFacturado!chrfoliofactura) Then
            fblnCargoFacturado = False
        Else
            fblnCargoFacturado = True
            'No se puede modificar, el cargo ya está facturado con el folio
            MsgBox SIHOMsg(1278) & Trim(rsCargoFacturado!chrfoliofactura) & ".", vbExclamation, "Mensaje"
            txtDescuento.Visible = False
        End If
    End If
    rsCargoFacturado.Close
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":fblnCargoFacturado"))
End Function
Public Function fblnCargosAutomaticosPendientes(vllngCuenta As Long, vlstrTipo As String) As Boolean
    '----------------------------------------------------------------------------------
    ' Verificar si el paciente tiene cargos automaticos pendientes a realizarse a la fecha actual del servidor
    '----------------------------------------------------------------------------------
    Dim rsCargosAutomaticos As New ADODB.Recordset
    
    fblnCargosAutomaticosPendientes = False
          
    Set rsCargosAutomaticos = frsEjecuta_SP(str(vllngCuenta) & "|" & vlstrTipo, "SP_PVSELCARGOPROGRAMADOREALIZA")

    If rsCargosAutomaticos.RecordCount <> 0 Then
        fblnCargosAutomaticosPendientes = True
    End If
End Function

Private Function fblnControlAseguradoraFacturado() As Boolean
'funcion para verificar que el control de aseguradora no tenga ya conceptos facturados CGR
Dim ObjRS As New ADODB.Recordset
Dim objSTR As String

fblnControlAseguradoraFacturado = True
 claveCarta = 0
    If cboCartaAutorizacion.ListIndex > 0 Then
         claveCarta = cboCartaAutorizacion.ItemData(cboCartaAutorizacion.ListIndex)
    End If
'cargamos de nuevo el control de aseguradora y lo comparamos contra el control que se tiene en la forma actualmente
objSTR = txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & CStr(vgintEmpresa) & "|" & claveCarta
Set ObjRS = frsEjecuta_SP(objSTR, "SP_PVSELCONTROLSEGUROEMPRESA")

With rsControlSeguro
     If .RecordCount > 0 Then 'tengo control en pantalla
        If ObjRS.RecordCount > 0 Then ' tengo control en la base
          If IIf(IsNull(!CHRFOLIOFACTURAEXCEDENTE), "", Trim(!CHRFOLIOFACTURAEXCEDENTE)) <> IIf(IsNull(ObjRS!CHRFOLIOFACTURAEXCEDENTE), "", Trim(ObjRS!CHRFOLIOFACTURAEXCEDENTE)) Or _
              IIf(IsNull(!CHRFOLIOFACTURADEDUCIBLE), "", Trim(!CHRFOLIOFACTURADEDUCIBLE)) <> IIf(IsNull(ObjRS!CHRFOLIOFACTURADEDUCIBLE), "", Trim(ObjRS!CHRFOLIOFACTURADEDUCIBLE)) Or _
              IIf(IsNull(!CHRFOLIOFACTURACOASEGURO), "", Trim(!CHRFOLIOFACTURACOASEGURO)) <> IIf(IsNull(ObjRS!CHRFOLIOFACTURACOASEGURO), "", Trim(ObjRS!CHRFOLIOFACTURACOASEGURO)) Or _
              IIf(IsNull(!CHRFOLIOFACTURACOASEGUROMED), "", Trim(!CHRFOLIOFACTURACOASEGUROMED)) <> IIf(IsNull(ObjRS!CHRFOLIOFACTURACOASEGUROMED), "", Trim(ObjRS!CHRFOLIOFACTURACOASEGUROMED)) Or _
              IIf(IsNull(!CHRFOLIOFACTURACOASEGUROADICI), "", Trim(!CHRFOLIOFACTURACOASEGUROADICI)) <> IIf(IsNull(ObjRS!CHRFOLIOFACTURACOASEGUROADICI), "", Trim(ObjRS!CHRFOLIOFACTURACOASEGUROADICI)) Or _
              IIf(IsNull(!CHRFOLIOFACTURACOPAGO), "", Trim(!CHRFOLIOFACTURACOPAGO)) <> IIf(IsNull(ObjRS!CHRFOLIOFACTURACOPAGO), "", Trim(ObjRS!CHRFOLIOFACTURACOPAGO)) Then
                 fblnControlAseguradoraFacturado = False
          End If
        End If
     Else ' no tengo control en pantalla
        If ObjRS.RecordCount > 0 Then ' si tengo control en la base revisamos que no tenga conceptos facturados
           If Not IsNull(ObjRS!CHRFOLIOFACTURAEXCEDENTE) Or _
              Not IsNull(ObjRS!CHRFOLIOFACTURADEDUCIBLE) Or _
              Not IsNull(ObjRS!CHRFOLIOFACTURACOASEGURO) Or _
              Not IsNull(ObjRS!CHRFOLIOFACTURACOASEGUROMED) Or _
              Not IsNull(rsControlSeguro!CHRFOLIOFACTURACOASEGUROADICI) Or _
              Not IsNull(rsControlSeguro!CHRFOLIOFACTURACOPAGO) Then
                  fblnControlAseguradoraFacturado = False
            End If
        End If
     End If
End With
End Function

Private Function fblnVcontrolAseguradora() As Boolean
'funcion para validar si hay cambios en el concepto de facturación antes de facturar al cliente (by CGR)
Dim ObjRS As New ADODB.Recordset
Dim objSTR As String
Dim ObjInt As Integer

fblnVcontrolAseguradora = True

If sstFacturacion.TabEnabled(2) Then
   objSTR = txtMovimientoPaciente.Text & "|" & IIf(OptTipoPaciente(0).Value, "I", "E") & "|" & CStr(vgintEmpresa) & "|" & IIf(cboCartaAutorizacion.ListIndex > 0, cboCartaAutorizacion.ItemData(cboCartaAutorizacion.ListIndex), 0)
   Set ObjRS = frsEjecuta_SP(objSTR, "SP_PVSELCONTROLSEGUROEMPRESA")
    
   If rsControlSeguro.RecordCount = 0 Then
      If ObjRS.RecordCount > 0 Then fblnVcontrolAseguradora = False
   Else
      If ObjRS.RecordCount = 0 Then
         fblnVcontrolAseguradora = False
      Else 'son como 86 columnas vamonos por partes dijo jack el destripador
         For ObjInt = 0 To ObjRS.Fields.Count - 1
             If IIf(IsNull(ObjRS.Fields(ObjInt)), "", ObjRS.Fields(ObjInt)) <> IIf(IsNull(rsControlSeguro.Fields(ObjInt)), "", rsControlSeguro.Fields(ObjInt)) Then
                fblnVcontrolAseguradora = False
                Exit For
             End If
         Next ObjInt
      End If 'fin de los 86 columnas
   End If
End If
End Function

Private Function fblnUPDCostoDescuento() As Boolean
'funcion que busca valor del parametro BITCONSERVARCOSTOSDESCUENTOEXCLUSION para saber si se debe de actualizar los costos y decuentos de los cargos al momento de'
'hacer una exclusión de cargos

Dim ObjRS As New ADODB.Recordset
Dim objSTR As String

fblnUPDCostoDescuento = True

objSTR = "select vchvalor from siparametro where vchnombre = 'BITCONSERVARCOSTOSDESCUENTOEXCLUSION' and INTCVEEMPRESACONTABLE = " & vgintClaveEmpresaContable
Set ObjRS = frsRegresaRs(objSTR, adLockOptimistic)

If ObjRS.RecordCount > 0 Then
   If ObjRS!VCHVALOR = "1" Then
      fblnUPDCostoDescuento = False
   End If
End If

End Function

Private Sub pContabilizaCostoHonorariosMedicos(vlstrFolioDocumento As String, vllngNumeroCorte As Long, dblPorcentajeCredito As Double, dblPorcentajeContado As Double)
    Dim rsPuenteHono As New ADODB.Recordset
    Dim rsCostoHono As New ADODB.Recordset
    Dim rs As New ADODB.Recordset
    Dim rsCuentaMedico As New ADODB.Recordset
    Dim rsMedicoRetISR As New ADODB.Recordset
    Dim rsPorcentajeRTP As New ADODB.Recordset
    Dim vllngClaveCuentaMedico As Long
    Dim strSentencia As String
    Dim vlblnUsoPuenteCostoHonorarios As Boolean
    Dim vlstrSentencia As String
    Dim vlblnSiAplicaraCosto As Boolean
    Dim vlintcontador As Integer
    Dim rsTarifaisr As ADODB.Recordset
    Dim vldblTarifaISR As Double
    Dim dblPorcentajeRTP As Double
    Dim vlintContador2 As Integer
    Dim vlblnMedicoUsaRetencionISTR As Boolean
    Dim vlblnMedicoUsaRetencionRTP As Boolean
    Dim strMensaje As String
    Dim blnPorcentajeRTPValido As Boolean
    Dim blnAgregaRTPaPoliza As Boolean
    Dim dblTotalRetencion As Double
    
On Error GoTo NotificaError

    vlblnMedicoUsaRetencionISTR = False
    vlblnSiAplicaraCosto = False
    vlstrSentencia = "SELECT PVBASEHONORARIOMEDICO.* From PVBASEHONORARIOMEDICO INNER JOIN PVCARGO ON PVCARGO.INTNUMCARGO = PVBASEHONORARIOMEDICO.INTNUMCARGO WHERE TRIM(PVCARGO.CHRFOLIOFACTURA) = '" & Trim(vlstrFolioDocumento) & "'"
    Set rs = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenStatic)
    If rs.RecordCount <> 0 Then
        vlblnSiAplicaraCosto = True
        ' Obtiene la cuenta del médico
        vlstrSentencia = "Select NVL(HoMedicoEmpresa.INTNUMEROCUENTA, 0) intNumeroCuenta From HoMedicoEmpresa Where HoMedicoEmpresa.INTCLAVEMEDICO = " & rs!intCveMedico & " And HoMedicoEmpresa.TNYCLAVEEMPRESA = " & vgintClaveEmpresaContable
        Set rsCuentaMedico = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenStatic)
        vllngClaveCuentaMedico = 0
        If rsCuentaMedico.RecordCount <> 0 Then
            vllngClaveCuentaMedico = rsCuentaMedico!intNumeroCuenta
        End If
    End If
   If vlblnSiAplicaraCosto Then
        'Costo de honorarios médicos dependiendo de si hay o no cuenta puente configurada
        vlblnUsoPuenteCostoHonorarios = False
        If dblPorcentajeCredito <> 0 Or dblPorcentajeContado <> 0 Then 'Si va una parte a crédito o a contado
            If vllngClaveCuentaMedico <> 0 Then  'Valida que se tenga configurada la cuenta del medico
                Set rsPuenteHono = frsSelParametros("CN", vgintClaveEmpresaContable, "INTCTAHONORARIOSPAGAR")
                If Not rsPuenteHono.EOF Then 'Si hay parametro de cuenta puente
                    If CLng(IIf(IsNull(rsPuenteHono!Valor), "0", rsPuenteHono!Valor)) <> 0 Then 'Si existe cuenta puente configurada
                        If fstrCuentaContable(CLng(IIf(IsNull(rsPuenteHono!Valor), "0", rsPuenteHono!Valor))) <> "" Then 'Si existe aún la cuenta configurada
                            If fblnMovimientos(CLng(IIf(IsNull(rsPuenteHono!Valor), "0", rsPuenteHono!Valor))) = True Then
                                
                                vlblnMedicoUsaRetencionISTR = False
'                                vlblnSiAplicaraCosto = False
                                
                                vlstrSentencia = "SELECT PVBASEHONORARIOMEDICO.* From PVBASEHONORARIOMEDICO INNER JOIN PVCARGO ON PVCARGO.INTNUMCARGO = PVBASEHONORARIOMEDICO.INTNUMCARGO WHERE TRIM(PVCARGO.CHRFOLIOFACTURA) = '" & Trim(vlstrFolioDocumento) & "'"
                                Set rs = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenStatic)
                                If rs.RecordCount <> 0 Then
                                    Do While Not rs.EOF
                                    
                                        'vlblnSiAplicaraCosto = True
                                        ' Obtiene la cuenta del médico
                                        vlstrSentencia = "Select NVL(HoMedicoEmpresa.INTNUMEROCUENTA, 0) intNumeroCuenta From HoMedicoEmpresa Where HoMedicoEmpresa.INTCLAVEMEDICO = " & rs!intCveMedico & " And HoMedicoEmpresa.TNYCLAVEEMPRESA = " & vgintClaveEmpresaContable
                                        Set rsCuentaMedico = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenStatic)
                                        vllngClaveCuentaMedico = 0
                                        If rsCuentaMedico.RecordCount <> 0 Then
                                            vllngClaveCuentaMedico = rsCuentaMedico!intNumeroCuenta
                                        End If
                                
                                        Set rsMedicoRetISR = frsRegresaRs("Select NVL(INTCVERETENCION,0) INTCVERETENCION, nvl(bitRTP,0) bitRTP from HoMedico Where INTCVEMEDICO = " & rs!intCveMedico, adLockReadOnly, adOpenStatic)
                                        vlblnMedicoUsaRetencionISTR = False
                                        If rsMedicoRetISR.RecordCount <> 0 Then
                                            vlblnMedicoUsaRetencionISTR = IIf(rsMedicoRetISR!INTCVERETENCION = 0, False, True)
                                        End If
                                        
                                        'Agrega al corte cargo a la cuenta de costo y abono a la cuenta puente
                                        For vlintcontador = 0 To UBound(aDatoCostoISR)
                                            If aDatoCostoISR(vlintcontador).vllngNumCargo = rs!IntNumCargo Then
                                                vldblTarifaISR = aDatoCostoISR(vlintcontador).vlintCvePorcentajeISR
                                                If fblnMovimientos(CLng(aDatoCostoISR(vlintcontador).vlstrCuenta)) = True Then
                                                    pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", CLng(aDatoCostoISR(vlintcontador).vlstrCuenta), (rs!NUMIMPORTEHONORARIO * dblPorcentajeCredito) + (rs!NUMIMPORTEHONORARIO * dblPorcentajeContado), True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                                Else
                                                    'La cuenta contable para el RTP provisionado de honorarios facturados no acepta movimientos, favor de verificar.
                                                    MsgBox SIHOMsg(1474), vbExclamation, "Mensaje"
                                                    vlblnFaltaCtaCosto = True
                                                    Exit Sub
                                                End If
                                                
                                               
                                                
                                                'Solo se verifica si se pago a crédito para agregar la cuenta de la retencion de ISR o no

'                                                If dblPorcentajeCredito = 0 Then
                                                    'Verificar datos requeridos para retención de RTP en caso de que exista al menos un médico con retención de RTP
                                                    'vlintRTP
                                                    vlblnMedicoUsaRetencionRTP = IIf(aDatoCostoISR(vlintcontador).vlintRTP = 0, False, True)
                                                    blnAgregaRTPaPoliza = False
                                                    If vlblnMedicoUsaRetencionRTP Then
                                                         If fblnMovimientos(glngCtaProvisionRTP) = False Then
                                                            'La cuenta contable para RTP no acepta movimientos, favor de verificar.
                                                            MsgBox SIHOMsg(1650), vbExclamation, "Mensaje"
                                                            vlblnFaltaCtaCosto = True
                                                            Exit Sub
                                                        End If
                                                    
                                                    
                                                        vlstrSentencia = "Select vchvalor from siparametro where vchnombre = 'NUMPORCENTAJERTP'"
                                                        Set rsPorcentajeRTP = frsRegresaRs(vlstrSentencia)
                                                        blnPorcentajeRTPValido = False
                                                        
                                                        If rsPorcentajeRTP.RecordCount <> 0 Then
                                                            dblPorcentajeRTP = IIf(IsNull(rsPorcentajeRTP!VCHVALOR), 0, rsPorcentajeRTP!VCHVALOR)
                                                            blnPorcentajeRTPValido = True
                                                        Else
                                                            dblPorcentajeRTP = 0
                                                        End If
                                                        
                                                        If dblPorcentajeRTP = 0 Then
                                                            blnPorcentajeRTPValido = False
                                                            '1649 No se encuentra configurado el porcentaje de retención de RTP en los parámetros de cuentas por pagar
                                                            MsgBox SIHOMsg(1649), vbExclamation, "Mensaje"
                                                        End If
                                                        If blnPorcentajeRTPValido Then
                                                            If IIf(IsNull(glngCtaProvisionRTP), 0, glngCtaProvisionRTP) = 0 Then
                                                                'No se ha configurado la cuenta contable para el RTP provisionado de honorarios, favor de verificar.
                                                                MsgBox "No se ha configurado la cuenta contable para el RTP provisionado de honorarios, favor de verificar.", vbExclamation, "Mensaje"
                                                                vlblnFaltaCtaCosto = True
                                                                Exit Sub
                                                            Else
                                                               blnAgregaRTPaPoliza = True
                                                            End If
                                                        End If
                                                    End If
                                                    'Posiblilidades, retiene solo ISR (1), Retiene ISR y RTP (2), Retiene solo RTP, no retiene ninguna de las 2
                                                    If vlblnMedicoUsaRetencionISTR Then
                                                        If vldblTarifaISR = 0 Then
                                                            'El porcentaje de retención ISR debe ser mayor a cero.
                                                            MsgBox SIHOMsg(1567), vbExclamation, "Mensaje"
                                                            vlblnFaltaCtaCosto = True
                                                            Exit Sub
                                                        Else
                                                            If IIf(IsNull(glngctaISRprovisHonorario), 0, glngctaISRprovisHonorario) = 0 Then
                                                                'No se encuentra registrada la cuenta para retención de IVA por servicios de externos.
                                                                MsgBox SIHOMsg(1570), vbExclamation, "Mensaje"
                                                                vlblnFaltaCtaCosto = True
                                                                Exit Sub
                                                            Else
                                                                pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngctaISRprovisHonorario, rs!NUMIMPORTEHONORARIO * (vldblTarifaISR / 100), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                                                dblTotalRetencion = rs!NUMIMPORTEHONORARIO * (vldblTarifaISR / 100)
                                                                If blnAgregaRTPaPoliza Then
                                                                    pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngCtaProvisionRTP, rs!NUMIMPORTEHONORARIO * (dblPorcentajeRTP / 100), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                                                    dblTotalRetencion = dblTotalRetencion + rs!NUMIMPORTEHONORARIO * (dblPorcentajeRTP / 100)
                                                                End If
                                                                
                                                                If dblPorcentajeCredito <> 0 Then
                                                                    pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", CLng(IIf(IsNull(rsPuenteHono!Valor), "0", rsPuenteHono!Valor)), (rs!NUMIMPORTEHONORARIO * dblPorcentajeCredito) - (dblTotalRetencion * dblPorcentajeCredito), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                                                End If
                                                                If dblPorcentajeContado <> 0 Then
                                                                    pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aDatoCostoISR(vlintcontador).vllngCtaAcredMedico, (rs!NUMIMPORTEHONORARIO * dblPorcentajeContado) - (dblTotalRetencion * dblPorcentajeContado), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                                                End If
                                                            End If
                                                        End If
                
                                                    ElseIf blnAgregaRTPaPoliza Then
                                                        dblTotalRetencion = rs!NUMIMPORTEHONORARIO * (dblPorcentajeRTP / 100)
                                                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", glngCtaProvisionRTP, rs!NUMIMPORTEHONORARIO * (dblPorcentajeRTP / 100), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                                        If dblPorcentajeCredito <> 0 Then
                                                            pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", CLng(IIf(IsNull(rsPuenteHono!Valor), "0", rsPuenteHono!Valor)), (rs!NUMIMPORTEHONORARIO * dblPorcentajeCredito) - (dblTotalRetencion * dblPorcentajeCredito), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                                        End If
                                                        If dblPorcentajeContado <> 0 Then
                                                            dblTotalRetencion = dblTotalRetencion + rs!NUMIMPORTEHONORARIO * (vldblTarifaISR / 100)
                                                            pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aDatoCostoISR(vlintcontador).vllngCtaAcredMedico, (rs!NUMIMPORTEHONORARIO * dblPorcentajeContado) - (dblTotalRetencion * dblPorcentajeContado), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                                        End If
                                                    Else
                                                        If dblPorcentajeCredito <> 0 Then
                                                            pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", CLng(IIf(IsNull(rsPuenteHono!Valor), "0", rsPuenteHono!Valor)), rs!NUMIMPORTEHONORARIO * dblPorcentajeCredito, False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                                        End If
                                                        If dblPorcentajeContado <> 0 Then
                                                            dblTotalRetencion = rs!NUMIMPORTEHONORARIO * (vldblTarifaISR / 100) + rs!NUMIMPORTEHONORARIO * (dblPorcentajeRTP / 100)
                                                            pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", aDatoCostoISR(vlintcontador).vllngCtaAcredMedico, (rs!NUMIMPORTEHONORARIO * dblPorcentajeContado) - (dblTotalRetencion * dblPorcentajeContado), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                                        End If
                                                    End If
'                                                Else
'                                                    pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", vllngClaveCuentaMedico, rs!NUMIMPORTEHONORARIO * dblPorcentajeContado, False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
'                                                End If

                                                vlblnUsoPuenteCostoHonorarios = True
                                            End If
                                        Next vlintcontador
                                        rs.MoveNext
                                    Loop
                                End If
                            Else
                                'La cuenta contable puente configurada para el costo de honorarios médicos no acepta movimientos, favor de verificar.
                                MsgBox SIHOMsg(1473), vbExclamation, "Mensaje"
                                vlblnFaltaCtaCosto = True
                                Exit Sub
                            End If
                        Else
                            'No se encuentra configurada la cuenta de honorarios por pagar en los parámetros de contabilidad.
                            strMensaje = "No se encuentra configurada la cuenta de honorarios por pagar en los parámetros de contabilidad."
                            MsgBox strMensaje, vbExclamation, "Mensaje"
                            vlblnFaltaCtaCosto = True
                            Exit Sub
                        End If
                    Else
                        'No se encuentra configurada la cuenta de honorarios por pagar en los parámetros de contabilidad.
                        strMensaje = "No se encuentra configurada la cuenta de honorarios por pagar en los parámetros de contabilidad."
                        MsgBox strMensaje, vbExclamation, "Mensaje"
                        vlblnFaltaCtaCosto = True
                        Exit Sub
                    End If
                End If
            Else
                'No se ha configurado la cuenta contable del medico para honorarios facturados, favor de verificar.
                MsgBox SIHOMsg(519), vbExclamation, "Mensaje"
                vlblnFaltaCtaCosto = True
                Exit Sub
            End If
        End If
        
        'Si usó o no la cuenta puente para reflejar el costo de los honorarios profesionales al facturar
        strSentencia = "UPDATE PVBASEHONORARIOMEDICO " & _
                        " SET PVBASEHONORARIOMEDICO.BITUSOCUENTAPUENTECOSTO = " & IIf(vlblnUsoPuenteCostoHonorarios, 1, 0) & _
                        " WHERE PVBASEHONORARIOMEDICO.INTNUMCARGO IN (SELECT INTNUMCARGO " & _
                        "                                             FROM PVCARGO " & _
                        "                                             WHERE TRIM(PVCARGO.CHRFOLIOFACTURA) = '" & Trim(vlstrFolioDocumento) & "')"
        pEjecutaSentencia strSentencia
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":pContabilizaCostoHonorariosMedicos"))
    Unload Me
End Sub


Private Sub pContabilizaCostoServiciosSubrogado(vlstrFolioDocumento As String, vllngNumeroCorte As Long)
    On Error GoTo NotificaError
    
    Dim rsPuenteSub As New ADODB.Recordset
    Dim rsCostoSub As New ADODB.Recordset
    Dim rsCtaIVASub As New ADODB.Recordset
    Dim rsCargosSubrogados As New ADODB.Recordset
    Dim strSentencia As String
    Dim vlblnUsoPuenteCostoSubrogado As Boolean
    Dim vlstrSentencia As String
    Dim vldblImporte As Double
    Dim vldblImporteCtaPuente As Double
    Dim vlblnSiAplicaraCosto As Boolean
    Dim vldblPorcDescuento As Double
    Dim vldblPorcIVACargo As Double
    Dim vldblDescuento As Double
    Dim vldblSubtotal As Double
    Dim vldblIvaDescuento As Double
    Dim vldbltotalSubrogado As Double
    Dim vldblDescCargo As Double
    Dim vldblIVACargo As Double
    
    vlblnSiAplicaraCosto = False
                     
    vlstrSentencia = _
    "SELECT PVCARGOSERVICIOSUBROGADO.* " & _
        ",PVCARGO.* " & _
        ",CASE WHEN NOT COSERVICIOSUBROGADOPAQUETE.MNYPRECIOESPECIFICO IS NULL THEN ((COSERVICIOSUBROGADOPAQUETE.MNYPRECIOESPECIFICO * (PVCARGO.INTCANTIDADPAQUETE + PVCARGO.INTCANTIDADEXTRAPAQUETE)) + (COSERVICIOSUBROGADO.MNYCANTIDAD * (PVCARGO.MNYCANTIDAD - (PVCARGO.INTCANTIDADPAQUETE + PVCARGO.INTCANTIDADEXTRAPAQUETE)))) / PVCARGO.MNYCANTIDAD Else COSERVICIOSUBROGADO.MNYCANTIDAD END CANTIDADSUBROGADO " & _
        ",COSERVICIOSUBROGADO.INTTIPOACUERDO " & _
        ",COSERVICIOSUBROGADO.INTNUMEROCUENTA " & _
        ",COSERVICIOSUBROGADO.BITDESCUENTO " & _
         ",COSERVICIOSUBROGADO.INTNUMCUENTADESCUENTO " & _
         ",NVL(COPROVEEDOREMPRESA.INTCUENTAPASIVOSERVSUB,0) CUENTAPASIVO " & _
         ",COPROVEEDOR.VCHNOMBRE " & _
         ",PVCONCEPTOFACTURACION.SMYIVA IVACONCEPTO " & _
    "From " & _
        "PVCARGOSERVICIOSUBROGADO " & _
        "INNER JOIN PVCARGO ON PVCARGO.INTNUMCARGO = PVCARGOSERVICIOSUBROGADO.INTNUMCARGO " & _
        "INNER JOIN COSERVICIOSUBROGADO ON PVCARGOSERVICIOSUBROGADO.INTCVESERVICIOSUB = COSERVICIOSUBROGADO.INTCVESERVICIOSUB AND PVCARGO.CHRTIPOCARGO = COSERVICIOSUBROGADO.CHRTIPOSERVICIO AND COSERVICIOSUBROGADO.TNYCLAVEEMPRESA = " & str(vgintClaveEmpresaContable) & " " & _
        "INNER JOIN COPROVEEDOR ON COSERVICIOSUBROGADO.INTCVEPROVEEDOR = COPROVEEDOR.INTCVEPROVEEDOR " & _
        "LEFT JOIN COPROVEEDOREMPRESA ON COSERVICIOSUBROGADO.INTCVEPROVEEDOR = COPROVEEDOREMPRESA.INTCVEPROVEEDOR AND COSERVICIOSUBROGADO.TNYCLAVEEMPRESA = COPROVEEDOREMPRESA.TNYCLAVEEMPRESA " & _
        "INNER JOIN PVCONCEPTOFACTURACION ON PVCARGO.SMICVECONCEPTO = PVCONCEPTOFACTURACION.SMICVECONCEPTO " & _
        "left join COSERVICIOSUBROGADOPAQUETE on COSERVICIOSUBROGADOPAQUETE.INTNUMPAQUETE = PVCARGO.intnumpaquete and COSERVICIOSUBROGADOPAQUETE.INTCVEPROVEEDOR = COPROVEEDOR.INTCVEPROVEEDOR and COSERVICIOSUBROGADOPAQUETE.INTCVECARGO = COSERVICIOSUBROGADO.INTCVETIPOSERVICIO and COSERVICIOSUBROGADOPAQUETE.CHRTIPOSERVICIO = COSERVICIOSUBROGADO.CHRTIPOSERVICIO " & _
    "Where TRIM(PVCARGO.CHRFOLIOFACTURA) = '" & Trim(vlstrFolioDocumento) & "'"
                     
    Set rsCargosSubrogados = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenStatic)
    If rsCargosSubrogados.RecordCount <> 0 Then
        vlblnSiAplicaraCosto = True
    End If
    
    If vlblnSiAplicaraCosto Then
        'Costo de servicios subrogados dependiendo de si hay o no cuenta puente configurada
        vlblnUsoPuenteCostoSubrogado = False
        Set rsCtaIVASub = frsSelParametros("CN", vgintClaveEmpresaContable, "INTCTAIVACOSTOSERVICIOSSUBROGADOS")
        If Not rsCtaIVASub.EOF Then 'Si hay parametro de cuenta del IVA del costo
            If CInt(IIf(IsNull(rsCtaIVASub!Valor), "0", rsCtaIVASub!Valor)) <> 0 Then 'Si existe cuenta puente configurada
                If fstrCuentaContable(CInt(IIf(IsNull(rsCtaIVASub!Valor), "0", rsCtaIVASub!Valor))) <> "" Then 'Si existe aún la cuenta configurada
                    If fblnMovimientos(CInt(IIf(IsNull(rsCtaIVASub!Valor), "0", rsCtaIVASub!Valor))) = True Then
                        If rsCargosSubrogados.RecordCount <> 0 Then
                            Do While Not rsCargosSubrogados.EOF
                                If CInt(IIf(IsNull(rsCargosSubrogados!CUENTAPASIVO), "0", rsCargosSubrogados!CUENTAPASIVO)) <> 0 And fstrCuentaContable(CInt(IIf(IsNull(rsCargosSubrogados!CUENTAPASIVO), "0", rsCargosSubrogados!CUENTAPASIVO))) <> "" Then
                                    If fblnMovimientos(CInt(IIf(IsNull(rsCargosSubrogados!CUENTAPASIVO), "0", rsCargosSubrogados!CUENTAPASIVO))) = True Then
                                        vldblImporte = 0
                                        vldblImporteCtaPuente = 0
                                        vldblPorcIVACargo = 0
                                        vldblDescCargo = IIf(IsNull(rsCargosSubrogados!MNYDESCUENTO), 0, Round(rsCargosSubrogados!MNYDESCUENTO, 6))
                                        vldblIVACargo = rsCargosSubrogados!MNYIVA
                                                
                                        vldblPorcIVACargo = (rsCargosSubrogados!IVACONCEPTO / 100)
                                                
                                        'aCambioDescuento
                                        If vldblDescCargo <> 0 And rsCargosSubrogados!BITDESCUENTO = 1 Then
                                            If CInt(IIf(IsNull(rsCargosSubrogados!INTNUMCUENTADESCUENTO), "0", rsCargosSubrogados!INTNUMCUENTADESCUENTO)) <> 0 Or fstrCuentaContable(CInt(IIf(IsNull(rsCargosSubrogados!INTNUMCUENTADESCUENTO), "0", rsCargosSubrogados!INTNUMCUENTADESCUENTO))) <> "" Then 'Si existe aún la cuenta configurada
                                                If fblnMovimientos(CInt(IIf(IsNull(rsCargosSubrogados!INTNUMCUENTADESCUENTO), "0", rsCargosSubrogados!INTNUMCUENTADESCUENTO))) = True Then
                                                    'Se calcula el descuento del costo subrogado en base al descuento del cargo
                                                    vldblPorcDescuento = vldblDescCargo / (rsCargosSubrogados!mnyPrecio * rsCargosSubrogados!MNYCantidad)
                                                    If rsCargosSubrogados!inttipoacuerdo = 0 Then
                                                        vldblImporte = Round((rsCargosSubrogados!CANTIDADSUBROGADO * rsCargosSubrogados!MNYCantidad) / IIf(vldblIVACargo = 0, 1, (1 + vldblPorcIVACargo)), 2)
                                                    Else
                                                        vldblImporte = Round(((rsCargosSubrogados!MNYCantidad * rsCargosSubrogados!mnyPrecio) * (rsCargosSubrogados!CANTIDADSUBROGADO / 100)) / IIf(vldblIVACargo = 0, 1, (1 + vldblPorcIVACargo)), 2)
                                                    End If
                                                    vldblDescuento = Round(vldblImporte * vldblPorcDescuento, 2)
                                                    vldblSubtotal = Round(vldblImporte - vldblDescuento, 2)
                                                    vldblIvaDescuento = Round(vldblSubtotal * IIf(IIf(IsNull(rsCargosSubrogados!MNYIVA), 0, rsCargosSubrogados!MNYIVA) = 0, 0, vldblPorcIVACargo), 2)
                                                    vldbltotalSubrogado = Round(vldblSubtotal + vldblIvaDescuento, 2)
                                                    pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", rsCargosSubrogados!intNumeroCuenta, vldblImporte, True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                                    If vldblIVACargo <> 0 Then
                                                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", CInt(IIf(IsNull(rsCtaIVASub!Valor), "0", rsCtaIVASub!Valor)), vldblIvaDescuento, True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                                    End If
                                                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", CInt(IIf(IsNull(rsCargosSubrogados!CUENTAPASIVO), "0", rsCargosSubrogados!CUENTAPASIVO)), vldbltotalSubrogado, False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                                        pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", rsCargosSubrogados!INTNUMCUENTADESCUENTO, vldblDescuento, False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                                Else
                                                    'La cuenta contable configurada para el descuento de servicios subrogados no acepta movimientos, favor de verificar en los parámetros de servicios subrogados.
                                                    MsgBox SIHOMsg(1588) & vbCrLf & vbCrLf & "Proveedor:" & vbCrLf & rsCargosSubrogados!vchNombre, vbExclamation, "Mensaje"
                                                    vlblnFaltaCtaCosto = True
                                                    Exit Sub
                                                End If
                                            Else
                                                'No se ha configurado la cuenta de descuento de servicios subrogados, favor de verificar en los parámetros de servicios subrogados
                                                MsgBox SIHOMsg(1587) & vbCrLf & vbCrLf & "Proveedor:" & vbCrLf & rsCargosSubrogados!vchNombre, vbExclamation, "Mensaje"
                                                vlblnFaltaCtaCosto = True
                                                Exit Sub
                                            End If
                                            
                                        Else
                                            'Sino hay descuento hace todo normal
                                            If rsCargosSubrogados!inttipoacuerdo = 0 Then
                                                'Cantidad
                                                vldblImporteCtaPuente = rsCargosSubrogados!CANTIDADSUBROGADO * rsCargosSubrogados!MNYCantidad
                                                If rsCargosSubrogados!MNYIVA = 0 Then
                                                    vldblImporte = rsCargosSubrogados!CANTIDADSUBROGADO * rsCargosSubrogados!MNYCantidad
                                                Else
                                                    vldblImporte = rsCargosSubrogados!CANTIDADSUBROGADO * rsCargosSubrogados!MNYCantidad / (1 + vldblPorcIVACargo)
                                                End If
                                            Else
                                                'Porcentaje
                                                vldblImporteCtaPuente = (rsCargosSubrogados!MNYCantidad * rsCargosSubrogados!mnyPrecio) * (rsCargosSubrogados!CANTIDADSUBROGADO / 100)
                                                If rsCargosSubrogados!MNYIVA = 0 Then
                                                    vldblImporte = (rsCargosSubrogados!MNYCantidad * rsCargosSubrogados!mnyPrecio) * (rsCargosSubrogados!CANTIDADSUBROGADO / 100)
                                                Else
                                                    vldblImporte = ((rsCargosSubrogados!MNYCantidad * rsCargosSubrogados!mnyPrecio) * (rsCargosSubrogados!CANTIDADSUBROGADO / 100)) / (1 + vldblPorcIVACargo)
                                                End If
                                            End If
                                                'Agrega al corte cargo a la cuenta de costo y abono a la cuenta puente
                                            pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", rsCargosSubrogados!intNumeroCuenta, vldblImporte, True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                            If rsCargosSubrogados!MNYIVA <> 0 Then
                                                pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", CInt(IIf(IsNull(rsCtaIVASub!Valor), "0", rsCtaIVASub!Valor)), Round(vldblImporteCtaPuente, 2) - Round(vldblImporte, 2), True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                            End If
                                            pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", CInt(IIf(IsNull(rsCargosSubrogados!CUENTAPASIVO), "0", rsCargosSubrogados!CUENTAPASIVO)), vldblImporteCtaPuente, False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
                                        End If

                                        strSentencia = "UPDATE PVCARGOSERVICIOSUBROGADO SET PVCARGOSERVICIOSUBROGADO.BITAPLICADESCUENTO = " & rsCargosSubrogados!BITDESCUENTO & " WHERE PVCARGOSERVICIOSUBROGADO.INTNUMCARGO = " & rsCargosSubrogados!IntNumCargo
                                        pEjecutaSentencia strSentencia
                                    Else
                                        'La cuenta contable puente configurada para el pasivo de servicios subrogados no acepta movimientos, favor de verificar.
                                        MsgBox SIHOMsg(1476) & vbCrLf & vbCrLf & "Proveedor:" & vbCrLf & rsCargosSubrogados!vchNombre, vbExclamation, "Mensaje"
                                        vlblnFaltaCtaCosto = True
                                        Exit Sub
                                    End If
                                Else
                                    'No se ha configurado la cuenta contable puente para el costo de servicios subrogado, favor de verificar.
                                    MsgBox SIHOMsg(1475) & vbCrLf & vbCrLf & "Proveedor:" & vbCrLf & rsCargosSubrogados!vchNombre, vbExclamation, "Mensaje"
                                    vlblnFaltaCtaCosto = True
                                    Exit Sub
                                End If
                                rsCargosSubrogados.MoveNext
                            Loop
                                                
                            vlblnUsoPuenteCostoSubrogado = True
                        End If
                    Else
                        'La cuenta contable puente configurada para el IVA del costo de los servicios subrogados no acepta movimientos, favor de verificar.
                        MsgBox SIHOMsg(1480), vbExclamation, "Mensaje"
                        vlblnFaltaCtaCosto = True
                        Exit Sub
                    End If
                Else
                    'No se ha configurado la cuenta contable para el IVA del costo de los servicios subrogados, favor de verificar.
                    MsgBox SIHOMsg(1479), vbExclamation, "Mensaje"
                    vlblnFaltaCtaCosto = True
                    Exit Sub
                End If
            Else
                'No se ha configurado la cuenta contable para el IVA del costo de los servicios subrogados, favor de verificar.
                MsgBox SIHOMsg(1479), vbExclamation, "Mensaje"
                vlblnFaltaCtaCosto = True
                Exit Sub
            End If
        End If
        
        'Si usó o no la cuenta puente para reflejar el costo de los honorarios profesionales al facturar
        strSentencia = "UPDATE PVCARGOSERVICIOSUBROGADO " & _
                        " SET PVCARGOSERVICIOSUBROGADO.INTFACTURADO = 1," & _
                        " PVCARGOSERVICIOSUBROGADO.BITUSOCUENTAPUENTECOSTO = " & IIf(vlblnUsoPuenteCostoSubrogado, 1, 0) & _
                        " WHERE PVCARGOSERVICIOSUBROGADO.INTNUMCARGO IN (SELECT INTNUMCARGO " & _
                        "                                             FROM PVCARGO " & _
                        "                                             WHERE TRIM(PVCARGO.CHRFOLIOFACTURA) = '" & Trim(vlstrFolioDocumento) & "')"
        pEjecutaSentencia strSentencia
    End If
    
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":pContabilizaCostoServiciosSubrogado"))
    Unload Me
End Sub

Private Function fblnMovimientos(llngNumero As Long) As Boolean
    On Error GoTo NotificaError
    
    Dim vlstrSentencia As String
    Dim rsTotalMovimientos As New ADODB.Recordset
    
    fblnMovimientos = False
    
    vlstrSentencia = "SELECT * FROM CNCUENTA WHERE BITESTATUSMOVIMIENTOS = 1 and INTNUMEROCUENTA = " & llngNumero
    
    Set rsTotalMovimientos = frsRegresaRs(vlstrSentencia)
    If rsTotalMovimientos.RecordCount <> 0 Then
        fblnMovimientos = True
    End If
    
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":fblnMovimientos"))
End Function

Private Function fblnVerificaReqDevPend(rsgrupo As ADODB.Recordset) As Boolean
    Dim rsBitFactReqPendiente As ADODB.Recordset
    Dim intBitFactReqPendiente As Integer
    
    fblnVerificaReqDevPend = False
    
    Set rsBitFactReqPendiente = frsEjecuta_SP(CStr(vgintClaveEmpresaContable), "SP_PVSELBITFACTREQPENDIENTE")
    If rsBitFactReqPendiente.RecordCount > 0 Then intBitFactReqPendiente = rsBitFactReqPendiente(0).Value
    rsBitFactReqPendiente.Close
    
    If vlblnVerificarRequisiciones Then
        If optGrupoCuenta(0).Value Then
            rsgrupo.MoveFirst
            Do Until rsgrupo.EOF
                'Verificar requisiciones
                If fblnRequisicionPaciente(rsgrupo!INTMOVPACIENTE, rsgrupo!CHRTIPOPACIENTE) Then
                    If intBitFactReqPendiente <> 1 Then
                       ' No se puede facturar porque existen requisiciones pendientes de surtir para este paciente
                        MsgBox SIHOMsg(987), vbExclamation, "Mensaje"
                        Exit Function
                    Else
                        'Existen requisiciones pendientes de surtir para este paciente. ¿Desea continuar con la facturación de la cuenta?
                        If MsgBox(SIHOMsg(717), vbExclamation + vbYesNo, "Mensaje") = vbNo Then
                            Exit Function
                        Else
                            GoTo VerificaDevolGrupoPac
                        End If
                        Exit Do
                    End If
                End If
VerificaDevolGrupoPac:
                'Verificar devoluciones
                If fblnDevolucionPaciente(rsgrupo!INTMOVPACIENTE, rsgrupo!CHRTIPOPACIENTE) Then
                    If intBitFactReqPendiente <> 1 Then
                        MsgBox "No se puede facturar porque existen devoluciones pendientes de realizar para este paciente", vbExclamation, "Mensaje"
                        Exit Function
                    Else
                        If MsgBox("Existen devoluciones pendientes de realizar para este paciente. ¿Desea continuar con la facturación de la cuenta?", vbExclamation + vbYesNo, "Mensaje") = vbNo Then Exit Function
                        Exit Do
                    End If
                End If
                
                'Verificar cargos automaticos
                If fblnCargosAutomaticosPendientes(rsgrupo!INTMOVPACIENTE, rsgrupo!CHRTIPOPACIENTE) Then
                    If intBitFactReqPendiente <> 1 Then
                       'No se puede facturar porque existen cargos automáticos programados pendientes de aplicarse para este paciente.
                        MsgBox SIHOMsg(1244), vbExclamation, "Mensaje"
                        Exit Function
                    Else
                        'Existen cargos automáticos programados pendientes de aplicarse para este paciente. ¿Desea continuar con la facturación de la cuenta?
                        If MsgBox(SIHOMsg(1245), vbExclamation + vbYesNo, "Mensaje") = vbNo Then
                            Exit Function
                        End If
                    End If
                End If
                
                rsgrupo.MoveNext
            Loop
        Else
            'Verificar requisiciones
            If fblnRequisicionPaciente(CLng(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E")) Then
                If intBitFactReqPendiente <> 1 Then
                    ' No se puede facturar porque existen requisiciones pendientes de surtir para este paciente
                    MsgBox SIHOMsg(987), vbExclamation, "Mensaje"
                    Exit Function
                Else
                    'Existen requisiciones pendientes de surtir para este paciente. ¿Desea continuar con la facturación de la cuenta?
                    If MsgBox(SIHOMsg(717), vbExclamation + vbYesNo, "Mensaje") = vbNo Then
                        Exit Function
                    Else
                        GoTo VerificaDevolPac 'Revisar si tiene devoluciones pendientes
                    End If
                End If
            End If
VerificaDevolPac:
            'Verificar devoluciones
            If fblnDevolucionPaciente(CLng(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E")) Then
                If intBitFactReqPendiente <> 1 Then
                    MsgBox "No se puede facturar porque existen devoluciones pendientes de realizar para este paciente", vbExclamation, "Mensaje"
                    Exit Function
                Else
                    If MsgBox("Existen devoluciones pendientes de realizar para este paciente. ¿Desea continuar con la facturación de la cuenta?", vbExclamation + vbYesNo, "Mensaje") = vbNo Then Exit Function
                End If
            End If
            
            'Verificar cargos automaticos
            If fblnCargosAutomaticosPendientes(CLng(txtMovimientoPaciente.Text), IIf(OptTipoPaciente(0).Value, "I", "E")) Then
                If intBitFactReqPendiente <> 1 Then
                   'No se puede facturar porque existen cargos automáticos programados pendientes de aplicarse para este paciente.
                    MsgBox SIHOMsg(1244), vbExclamation, "Mensaje"
                    Exit Function
                Else
                    'Existen cargos automáticos programados pendientes de aplicarse para este paciente. ¿Desea continuar con la facturación de la cuenta?
                    If MsgBox(SIHOMsg(1245), vbExclamation + vbYesNo, "Mensaje") = vbNo Then
                        Exit Function
                    End If
                End If
            End If
        End If
    End If
    fblnVerificaReqDevPend = True
End Function

Private Sub pCargaUsosCFDI()
    Dim rsTmp As ADODB.Recordset
    Set rsTmp = frsCatalogoSAT("c_UsoCFDI")
    If Not rsTmp.EOF Then
        pLlenarCboRs cboUsoCFDI(0), rsTmp, 0, 1
        cboUsoCFDI(0).ListIndex = -1
        pLlenarCboRs cboUsoCFDI(1), rsTmp, 0, 1
        cboUsoCFDI(1).ListIndex = -1
    End If
    rsTmp.Close
End Sub

Private Function fblnValidaSAT(strTipo As String) As Boolean
    Dim intRow As Integer
    Dim rsTmp As ADODB.Recordset
    Dim strSql As String
    
    strSql = "select case when PVCargo.intDescuentaInventario in (0, 1) then IVArticulo.intCveUniMinimaVta when PVCargo.intDescuentaInventario in (2,  -3) then IVArticulo.intCveUniAlternaVta else 0 end ""cveUnidad""" & _
    " from PVCargo inner join IVArticulo on IVArticulo.intIdArticulo = cast(PVCargo.chrCvecargo as number)" & _
    " where PVCargo.intNumCargo = "
    
    If vgstrVersionCFDI <> "3.2" Then
        'Factura paciente
        If strTipo = "P" Then
            'Uso del CFDI
            If cboUsoCFDI(0).ListIndex = -1 Then
                MsgBox "Seleccione el uso del comprobante", vbExclamation, "Mensaje"
                cboUsoCFDI(0).SetFocus
                fblnValidaSAT = False
                Exit Function
            End If
            
            If chkFacturaBase.Value = vbUnchecked Then
                For intRow = 1 To MSFGFacturasParciales.Rows - 1
                    If MSFGFacturasParciales.RowData(intRow) > 0 Then
                        If flngCatalogoSATIdByNombreTipo("c_ClaveProdServ", MSFGFacturasParciales.TextMatrix(intRow, 12), "CF", 1) = 0 Then
                            MsgBox "No está definida la clave del SAT para el producto/servicio " & MSFGFacturasParciales.TextMatrix(intRow, 15), vbExclamation, "Mensaje"
                            fblnValidaSAT = False
                            Exit Function
                        End If
                        If flngCatalogoSATIdByNombreTipo("c_ClaveUnidad", MSFGFacturasParciales.TextMatrix(intRow, 12), "CF", 2) = 0 Then
                            MsgBox "No está definida la clave del SAT para la unidad del producto/servicio " & MSFGFacturasParciales.TextMatrix(intRow, 15), vbExclamation, "Mensaje"
                            fblnValidaSAT = False
                            Exit Function
                        End If
                    End If
                Next
                fblnValidaSAT = True
                Exit Function
            End If
            
            'Por concepto de facturación
            If optTipoAgrupacion(0).Value Then
                For intRow = 1 To grdFacturaPaciente.Rows - 1
                    If grdFacturaPaciente.RowData(intRow) > 0 Then
                        If flngCatalogoSATIdByNombreTipo("c_ClaveProdServ", grdFacturaPaciente.RowData(intRow), "CF", 1) = 0 Then
                            MsgBox "No está definida la clave del SAT para el producto/servicio " & grdFacturaPaciente.TextMatrix(intRow, 1), vbExclamation, "Mensaje"
                            fblnValidaSAT = False
                            Exit Function
                        End If
                        If flngCatalogoSATIdByNombreTipo("c_ClaveUnidad", grdFacturaPaciente.RowData(intRow), "CF", 2) = 0 Then
                            MsgBox "No está definida la clave del SAT para la unidad del producto/servicio " & grdFacturaPaciente.TextMatrix(intRow, 1), vbExclamation, "Mensaje"
                            fblnValidaSAT = False
                            Exit Function
                        End If
                    End If
                Next
            'Por cargo
            Else
                'Conceptos de seguro
                For intRow = 1 To grdFacturaPaciente.Rows - 1
                    If grdFacturaPaciente.RowData(intRow) > 0 And grdFacturaPaciente.TextMatrix(intRow, 6) = "OC" Then
                        If flngCatalogoSATIdByNombreTipo("c_ClaveProdServ", grdFacturaPaciente.RowData(intRow), "CF", 1) = 0 Then
                            MsgBox "No está definida la clave del SAT para el producto/servicio " & grdFacturaPaciente.TextMatrix(intRow, 1), vbExclamation, "Mensaje"
                            fblnValidaSAT = False
                            Exit Function
                        End If
                        If flngCatalogoSATIdByNombreTipo("c_ClaveUnidad", grdFacturaPaciente.RowData(intRow), "CF", 2) = 0 Then
                            MsgBox "No está definida la clave del SAT para la unidad del producto/servicio " & grdFacturaPaciente.TextMatrix(intRow, 1), vbExclamation, "Mensaje"
                            fblnValidaSAT = False
                            Exit Function
                        End If
                    End If
                Next
                'Cargos
                For intRow = 1 To grdCargos.Rows - 1
                    If grdCargos.TextMatrix(intRow, 0) = "*" And (Not sstFacturacion.TabEnabled(4) Or grdCargos.TextMatrix(intRow, 18) = "X") Then
                        'Paquetes
                        If Val(grdCargos.TextMatrix(intRow, 30)) > "0" And grdCargos.TextMatrix(intRow, 31) <> "" Then
                            If flngCatalogoSATIdByNombreTipo("c_ClaveProdServ", grdCargos.TextMatrix(intRow, 30), "PA", 1) = 0 Then
                                MsgBox "No está definida la clave del SAT para el producto/servicio " & grdCargos.TextMatrix(intRow, 29), vbExclamation, "Mensaje"
                                fblnValidaSAT = False
                                Exit Function
                            End If
                            If flngCatalogoSATIdByNombreTipo("c_ClaveUnidad", grdCargos.TextMatrix(intRow, 30), "PA", 2) = 0 Then
                                MsgBox "No está definida la clave del SAT para la unidad del producto/servicio " & grdCargos.TextMatrix(intRow, 29), vbExclamation, "Mensaje"
                                fblnValidaSAT = False
                                Exit Function
                            End If
                        End If
                        If (Val(grdCargos.TextMatrix(intRow, 4)) - Val(IIf(Trim(grdCargos.TextMatrix(intRow, 31)) = "", "0", grdCargos.TextMatrix(intRow, 31))) - Val(IIf(Trim(grdCargos.TextMatrix(intRow, 32)) = "", "0", grdCargos.TextMatrix(intRow, 32)))) <> 0 Then
                            If grdCargos.TextMatrix(intRow, 1) <> "AR" Then
                                If flngCatalogoSATIdByNombreTipo("c_ClaveProdServ", grdCargos.TextMatrix(intRow, 17), grdCargos.TextMatrix(intRow, 1), 1) = 0 Then
                                    MsgBox "No está definida la clave del SAT para el producto/servicio " & grdCargos.TextMatrix(intRow, 2), vbExclamation, "Mensaje"
                                    fblnValidaSAT = False
                                    Exit Function
                                End If
                                If flngCatalogoSATIdByNombreTipo("c_ClaveUnidad", grdCargos.TextMatrix(intRow, 17), grdCargos.TextMatrix(intRow, 1), 2) = 0 Then
                                    MsgBox "No está definida la clave del SAT para la unidad del producto/servicio " & grdCargos.TextMatrix(intRow, 2), vbExclamation, "Mensaje"
                                    fblnValidaSAT = False
                                    Exit Function
                                End If
                            Else
                                If flngCatalogoSATIdByNombreTipo("c_ClaveProdServ", grdCargos.TextMatrix(intRow, 17), grdCargos.TextMatrix(intRow, 1), 0) = 0 Then
                                    MsgBox "No está definida la clave del SAT para el producto/servicio " & grdCargos.TextMatrix(intRow, 2), vbExclamation, "Mensaje"
                                    fblnValidaSAT = False
                                    Exit Function
                                End If
                                Set rsTmp = frsRegresaRs(strSql & grdCargos.RowData(intRow), adLockReadOnly, adOpenForwardOnly)
                                If Not rsTmp.EOF Then
                                    If flngCatalogoSATIdByNombreTipo("c_ClaveUnidad", rsTmp!cveUnidad, "UV", 0) = 0 Then
                                        MsgBox "No está definida la clave del SAT para la unidad del producto/servicio " & grdCargos.TextMatrix(intRow, 2), vbExclamation, "Mensaje"
                                        fblnValidaSAT = False
                                        Exit Function
                                    End If
                                Else
                                    MsgBox "No está definida la clave del SAT para la unidad del producto/servicio " & grdCargos.TextMatrix(intRow, 2), vbExclamation, "Mensaje"
                                    fblnValidaSAT = False
                                    Exit Function
                                End If
                                rsTmp.Close
                            End If
                        End If
                    End If
                Next
            End If
        'Factura empresa
        Else
            'Uso del CFDI
            If cboUsoCFDI(1).ListIndex = -1 Then
                MsgBox "Seleccione el uso del comprobante", vbExclamation, "Mensaje"
                cboUsoCFDI(1).SetFocus
                fblnValidaSAT = False
                Exit Function
            End If
            'Por concepto de facturación
            If optTipoAgrupacion(0).Value Then
                For intRow = 1 To grdFacturaEmpresa.Rows - 1
                    If grdFacturaEmpresa.RowData(intRow) > 0 And grdFacturaEmpresa.TextMatrix(intRow, 6) <> "OD" Then
                        If flngCatalogoSATIdByNombreTipo("c_ClaveProdServ", grdFacturaEmpresa.RowData(intRow), "CF", 1) = 0 Then
                            MsgBox "No está definida la clave del SAT para el producto/servicio " & grdFacturaEmpresa.TextMatrix(intRow, 1), vbExclamation, "Mensaje"
                            fblnValidaSAT = False
                            Exit Function
                        End If
                        If flngCatalogoSATIdByNombreTipo("c_ClaveUnidad", grdFacturaEmpresa.RowData(intRow), "CF", 2) = 0 Then
                            MsgBox "No está definida la clave del SAT para la unidad del producto/servicio " & grdFacturaEmpresa.TextMatrix(intRow, 1), vbExclamation, "Mensaje"
                            fblnValidaSAT = False
                            Exit Function
                        End If
                    End If
                Next
            'Por cargo
            Else
                For intRow = 1 To grdCargos.Rows - 1
                    If grdCargos.TextMatrix(intRow, 0) = "*" And grdCargos.TextMatrix(intRow, 18) <> "X" Then
                        'Paquetes
                        If Val(grdCargos.TextMatrix(intRow, 30)) > "0" And grdCargos.TextMatrix(intRow, 31) <> "" Then
                            If flngCatalogoSATIdByNombreTipo("c_ClaveProdServ", grdCargos.TextMatrix(intRow, 30), "PA", 1) = 0 Then
                                MsgBox "No está definida la clave del SAT para el producto/servicio " & grdCargos.TextMatrix(intRow, 29), vbExclamation, "Mensaje"
                                fblnValidaSAT = False
                                Exit Function
                            End If
                            If flngCatalogoSATIdByNombreTipo("c_ClaveUnidad", grdCargos.TextMatrix(intRow, 30), "PA", 2) = 0 Then
                                MsgBox "No está definida la clave del SAT para la unidad del producto/servicio " & grdCargos.TextMatrix(intRow, 29), vbExclamation, "Mensaje"
                                fblnValidaSAT = False
                                Exit Function
                            End If
                        End If
                        If (Val(grdCargos.TextMatrix(intRow, 4)) - Val(IIf(Trim(grdCargos.TextMatrix(intRow, 31)) = "", "0", grdCargos.TextMatrix(intRow, 31))) - Val(IIf(Trim(grdCargos.TextMatrix(intRow, 32)) = "", "0", grdCargos.TextMatrix(intRow, 32)))) <> 0 Then
                            If grdCargos.TextMatrix(intRow, 1) <> "AR" Then
                                If flngCatalogoSATIdByNombreTipo("c_ClaveProdServ", grdCargos.TextMatrix(intRow, 17), grdCargos.TextMatrix(intRow, 1), 1) = 0 Then
                                    MsgBox "No está definida la clave del SAT para el producto/servicio " & grdCargos.TextMatrix(intRow, 2), vbExclamation, "Mensaje"
                                    fblnValidaSAT = False
                                    Exit Function
                                End If
                                If flngCatalogoSATIdByNombreTipo("c_ClaveUnidad", grdCargos.TextMatrix(intRow, 17), grdCargos.TextMatrix(intRow, 1), 2) = 0 Then
                                    MsgBox "No está definida la clave del SAT para la unidad del producto/servicio " & grdCargos.TextMatrix(intRow, 2), vbExclamation, "Mensaje"
                                    fblnValidaSAT = False
                                    Exit Function
                                End If
                            Else
                                If flngCatalogoSATIdByNombreTipo("c_ClaveProdServ", grdCargos.TextMatrix(intRow, 17), grdCargos.TextMatrix(intRow, 1), 0) = 0 Then
                                    MsgBox "No está definida la clave del SAT para el producto/servicio " & grdCargos.TextMatrix(intRow, 2), vbExclamation, "Mensaje"
                                    fblnValidaSAT = False
                                    Exit Function
                                End If
                                Set rsTmp = frsRegresaRs(strSql & grdCargos.RowData(intRow), adLockReadOnly, adOpenForwardOnly)
                                If Not rsTmp.EOF Then
                                    If flngCatalogoSATIdByNombreTipo("c_ClaveUnidad", rsTmp!cveUnidad, "UV", 0) = 0 Then
                                        MsgBox "No está definida la clave del SAT para la unidad del producto/servicio " & grdCargos.TextMatrix(intRow, 2), vbExclamation, "Mensaje"
                                        fblnValidaSAT = False
                                        Exit Function
                                    End If
                                Else
                                    MsgBox "No está definida la clave del SAT para la unidad del producto/servicio " & grdCargos.TextMatrix(intRow, 2), vbExclamation, "Mensaje"
                                    fblnValidaSAT = False
                                    Exit Function
                                End If
                                rsTmp.Close
                            End If
                        End If
                    End If
                Next
            End If
        End If
        fblnValidaSAT = True
    Else
        fblnValidaSAT = True
    End If
End Function

Private Function fdblIVAConcepto(lngCveConcepto As Long, strTipoConcepto As String) As Double
    Dim rsTmp As ADODB.Recordset
    Dim lngCveConFact As Long
    Dim strSql As String
    lngCveConFact = 0
    Select Case strTipoConcepto
        Case "AR": strSql = "select smiCveConceptFact from IVArticulo where intIdArticulo = " & lngCveConcepto
        Case "OC": strSql = "select smiConceptoFact from PVOtroConcepto where intCveConcepto = " & lngCveConcepto
        Case "ES": strSql = "select smiConFact from IMEstudio where intCveEstudio = " & lngCveConcepto
        Case "EX": strSql = "select smiConFact from LAExamen where intCveExamen = " & lngCveConcepto
        Case "GE": strSql = "select smiConFact from LAGrupoExamen where intCveGrupo = " & lngCveConcepto
    End Select
    If strTipoConcepto <> "CF" Then
        Set rsTmp = frsRegresaRs(strSql, adLockReadOnly, adOpenForwardOnly)
        If Not rsTmp.EOF Then
            lngCveConFact = rsTmp.Fields(0).Value
        End If
        rsTmp.Close
    Else
        lngCveConFact = lngCveConcepto
    End If
    
    strSql = "select smyIVA from PVConceptoFacturacion where smiCveConcepto = " & lngCveConFact
    Set rsTmp = frsRegresaRs(strSql, adLockReadOnly, adOpenForwardOnly)
    If Not rsTmp.EOF Then
        fdblIVAConcepto = IIf(rsTmp.Fields(0).Value = 0, fdblTasaIVAEmpresa(vgintEmpresa), rsTmp.Fields(0).Value)
    Else
        fdblIVAConcepto = vgdblCantidadIvaGeneral
    End If
    rsTmp.Close
End Function

Private Function fstrFolioAplAnt(vlintAumentaFolio As Integer, strSerie As String, strFolio As String) As String
'Regresa el folio para nota de cargo o crédito
On Error GoTo NotificaError

    Dim alstrParametrosSalidaNota() As String
    Dim vllngFoliosRestantes As Long
    Dim vlstrFolioLocal As String
    Dim strSerielocal As String
    Dim strNumeroAprobacion As String
    Dim strAnoAprobacion As String
    Dim rsCountFolios As ADODB.Recordset
    
    vllngFoliosRestantes = 1
    vlstrFolioLocal = ""
    
   
    pCargaArreglo alstrParametrosSalidaNota, vllngFoliosRestantes & "|" & ADODB.adBSTR & "|" & vlstrFolioLocal & "|" & ADODB.adBSTR & "|" & strSerielocal & "|" & ADODB.adBSTR & "|" & strNumeroAprobacion & "|" & ADODB.adBSTR & "|" & strAnoAprobacion & "|" & ADODB.adBSTR
  
    frsEjecuta_SP "AA|" & vgintNumeroDepartamento & "|" & str(vlintAumentaFolio), "sp_gnFolios", , , alstrParametrosSalidaNota
  
    pObtieneValores alstrParametrosSalidaNota, vllngFoliosRestantes, vlstrFolioLocal, strSerielocal, strNumeroAprobacion, strAnoAprobacion
 
    If vllngFoliosRestantes > 0 Then
        MsgBox "Faltan " & Trim(str(vllngFoliosRestantes)) + " aplicacin de anticipos y será necesario aumentar folios!", vbOKOnly + vbExclamation, "Mensaje"
    End If
    '|  Si la serie está vacía el SP regresa un espacio en blanco por eso se debe de hacer el TRIM
    strSerie = Trim(strSerielocal)
    If strSerie = "" Then
        strSerie = "AA"
    End If
    strFolio = vlstrFolioLocal
    If strFolio = "0" Then
        Set rsCountFolios = frsRegresaRs("select count(*) + 1 from PVAplicacionAnticipo", adLockReadOnly, adOpenForwardOnly)
        If Not rsCountFolios.EOF Then
            vlstrFolioLocal = CStr(rsCountFolios.Fields(0).Value)
        End If
        rsCountFolios.Close
    End If
    strFolio = vlstrFolioLocal
    fstrFolioAplAnt = strSerie & vlstrFolioLocal
    
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":fstrFolioAplAnt"))
End Function

Private Sub pCancelaAnticipos(strFolioDocumento As String, blnTimbrar As Boolean, ByRef blnImprimirAplAnt As Boolean, ByRef lngCveAplAnt As Long)
    Dim strSentencia As String
    Dim intAnticiposConCFDI As Integer
    Dim rsAplAnt As ADODB.Recordset
    Dim strSerieNota As String
    Dim strFolioSoloNota As String
    Dim strFolioNota As String
    blnImprimirAplAnt = False
    If vgstrVersionCFDI <> "3.2" Then
        strSentencia = "select count(*) from PVPago where chrFolioFactura = '" & strFolioDocumento & "' and intIdComprobante is not null"
        intAnticiposConCFDI = frsRegresaRs(strSentencia, adLockReadOnly, adOpenForwardOnly).Fields(0).Value
        If intAnticiposConCFDI > 0 Then
          EntornoSIHO.ConeccionSIHO.BeginTrans 'transacción de la generacion del comprobante
          strSentencia = "select * from PVAplicacionAnticipo where intComprobante = -1"
          Set rsAplAnt = frsRegresaRs(strSentencia, adLockOptimistic, adOpenDynamic)
          strFolioNota = fstrFolioAplAnt(1, strSerieNota, strFolioSoloNota)
          rsAplAnt.AddNew
          rsAplAnt!chrFolio = strFolioNota
          rsAplAnt!dtmfecha = fdtmServerFechaHora
          rsAplAnt!chrfoliofactura = strFolioDocumento
          rsAplAnt!vchSerie = strSerieNota
          rsAplAnt!vchFolio = strFolioSoloNota
          rsAplAnt.Update
          lngCveAplAnt = flngObtieneIdentity("SEC_PVAPLICACIONANTICIPO", 0)
          rsAplAnt.Close
          frsEjecuta_SP CStr(lngCveAplAnt), "sp_PVInsAnticipoEgreso", True
          pMarcarPendienteTimbre lngCveAplAnt, "AA", vgintNumeroDepartamento
          EntornoSIHO.ConeccionSIHO.CommitTrans
          If blnTimbrar Then
            'transacción del timbrado del comprobante
            EntornoSIHO.ConeccionSIHO.BeginTrans
            If Not fblnGeneraComprobanteDigital(lngCveAplAnt, "AA", 0, 0, "", True, False) Then
                  On Error Resume Next
                  If vgIntBanderaTImbradoPendiente = 1 Then 'timbre pendiente de confirmar
                     'El comprobante se realizó de manera correcta, sin embargo no fue posible confirmar el timbre fiscal
                      MsgBox SIHOMsg(1306), vbInformation + vbOKOnly, "Mensaje"
                      EntornoSIHO.ConeccionSIHO.CommitTrans
                  ElseIf vgIntBanderaTImbradoPendiente = 2 Or vgIntBanderaTImbradoPendiente = 3 Then  'No se realizó el timbrado
                      EntornoSIHO.ConeccionSIHO.RollbackTrans
                      Screen.MousePointer = vbDefault
                  End If
            Else
              pEliminaPendientesTimbre lngCveAplAnt, "AA"
              EntornoSIHO.ConeccionSIHO.CommitTrans
              blnImprimirAplAnt = True
              Screen.MousePointer = vbDefault
            End If
          End If
        End If
    End If
End Sub

Private Function fblnLicenciaCFDIDesc(strTipo As String) As Boolean
    Dim strSql As String
    Dim strEncriptado As String
    Dim rsTemp As ADODB.Recordset
    
    fblnLicenciaCFDIDesc = False
    
    If strTipo = "D" Then
        strSql = "SELECT TRIM(REPLACE(REPLACE(REPLACE(CNEMPRESACONTABLE.VCHRFC,'-',''),'_',''),' ','')) AS RFC, TRIM(SIPARAMETRO.VCHVALOR) AS VALOR " & _
        "FROM SIPARAMETRO,CNEMPRESACONTABLE WHERE " & _
        "CNEMPRESACONTABLE.TNYCLAVEEMPRESA = " & vgintClaveEmpresaContable & " AND SIPARAMETRO.VCHNOMBRE = 'VCHLICENCIACFDISEGUROS' AND SIPARAMETRO.INTCVEEMPRESACONTABLE = " & vgintClaveEmpresaContable
        Set rsTemp = frsRegresaRs(strSql)
        If Not rsTemp.EOF Then
            strEncriptado = fstrEncrypt(rsTemp!RFC, "SUMASEGCFDI33")
            fblnLicenciaCFDIDesc = IIf(rsTemp!Valor = strEncriptado, True, False)
        End If
    Else
        fblnLicenciaCFDIDesc = True
    End If
    If Not fblnLicenciaCFDIDesc Then
        ' No se adquirió licencia para emitir CFDi para esta configuración de aseguradoras
        MsgBox SIHOMsg(1087) & " para esta configuración de aseguradoras", vbCritical, "Mensaje"
    End If
End Function

Private Sub pFacturasAnteriores()
    Dim rsFacturas As New ADODB.Recordset
    Dim vlstrsql As String
    
    If optGrupoCuenta(1).Value Then
        'Paciente
        vlstrsql = "SELECT CHRFOLIOFACTURA, DTMFECHAHORA, MNYTOTALFACTURA, CASE WHEN BITPESOS = 1 THEN 'Pesos' ELSE 'Dólares' END PESOS, MNYTIPOCAMBIO FROM PVFACTURA " & _
                "INNER JOIN GNCOMPROBANTEFISCALDIGITAL ON GNCOMPROBANTEFISCALDIGITAL.CHRTIPOCOMPROBANTE = 'FA' " & _
                    "AND TRIM(GNCOMPROBANTEFISCALDIGITAL.VCHSERIECOMPROBANTE) = TRIM(PVFACTURA.VCHSERIE) " & _
                    "AND TRIM(GNCOMPROBANTEFISCALDIGITAL.VCHFOLIOCOMPROBANTE) = PVFACTURA.INTFOLIO " & _
                   "WHERE NVL(VCHUUID,' ') <> ' ' AND INTMOVPACIENTE = " & CLng(IIf(txtMovimientoPaciente.Text = "", "0", txtMovimientoPaciente.Text)) & " AND CHRTIPOPACIENTE = '" & IIf(OptTipoPaciente(0).Value, "I", IIf(OptTipoPaciente(1).Value, "E", "")) & "' AND CHRTIPOFACTURA = 'P' AND CHRESTATUS = 'C' " & _
                   "ORDER BY INTCONSECUTIVO DESC"
        Set rsFacturas = frsRegresaRs(vlstrsql, adLockOptimistic, adOpenDynamic)
        If rsFacturas.RecordCount <> 0 Then
            chkFacturaSustitutaFP(0).Enabled = True
            lstFacturaASustituirFP.Enabled = True
            chkFacturaSustitutaFP(0).Value = 0
        Else
            chkFacturaSustitutaFP(0).Enabled = False
            lstFacturaASustituirFP.Enabled = False
            chkFacturaSustitutaFP(0).Value = 0
        End If
        rsFacturas.Close
        
        'Empresa
        vlstrsql = "SELECT CHRFOLIOFACTURA, DTMFECHAHORA, MNYTOTALFACTURA, CASE WHEN BITPESOS = 1 THEN 'Pesos' ELSE 'Dólares' END PESOS, MNYTIPOCAMBIO FROM PVFACTURA " & _
                "INNER JOIN GNCOMPROBANTEFISCALDIGITAL ON GNCOMPROBANTEFISCALDIGITAL.CHRTIPOCOMPROBANTE = 'FA' " & _
                    "AND TRIM(GNCOMPROBANTEFISCALDIGITAL.VCHSERIECOMPROBANTE) = TRIM(PVFACTURA.VCHSERIE) " & _
                    "AND TRIM(GNCOMPROBANTEFISCALDIGITAL.VCHFOLIOCOMPROBANTE) = PVFACTURA.INTFOLIO " & _
                   "WHERE NVL(VCHUUID,' ') <> ' ' AND INTMOVPACIENTE = " & CLng(IIf(txtMovimientoPaciente.Text = "", "0", txtMovimientoPaciente.Text)) & " AND CHRTIPOPACIENTE = '" & IIf(OptTipoPaciente(0).Value, "I", IIf(OptTipoPaciente(1).Value, "E", "")) & "' AND CHRTIPOFACTURA = 'E' AND CHRESTATUS = 'C' " & _
                   "ORDER BY INTCONSECUTIVO DESC"
        Set rsFacturas = frsRegresaRs(vlstrsql, adLockOptimistic, adOpenDynamic)
        If rsFacturas.RecordCount <> 0 Then
            chkFacturaSustitutaFE.Enabled = True
            lstFacturaASustituirFE.Enabled = True
            chkFacturaSustitutaFE.Value = 0
        Else
            chkFacturaSustitutaFE.Enabled = False
            lstFacturaASustituirFE.Enabled = False
            chkFacturaSustitutaFE.Value = 0
        End If
        rsFacturas.Close
    Else
        'Grupo Paciente
        vlstrsql = "SELECT CHRFOLIOFACTURA, DTMFECHAHORA, MNYTOTALFACTURA, CASE WHEN BITPESOS = 1 THEN 'Pesos' ELSE 'Dólares' END PESOS, MNYTIPOCAMBIO FROM PVFACTURA " & _
                "INNER JOIN GNCOMPROBANTEFISCALDIGITAL ON GNCOMPROBANTEFISCALDIGITAL.CHRTIPOCOMPROBANTE = 'FA' " & _
                    "AND TRIM(GNCOMPROBANTEFISCALDIGITAL.VCHSERIECOMPROBANTE) = TRIM(PVFACTURA.VCHSERIE) " & _
                    "AND TRIM(GNCOMPROBANTEFISCALDIGITAL.VCHFOLIOCOMPROBANTE) = PVFACTURA.INTFOLIO " & _
                   "WHERE NVL(VCHUUID,' ') <> ' ' AND INTMOVPACIENTE = " & CLng(IIf(txtMovimientoPaciente.Text = "", "0", txtMovimientoPaciente.Text)) & " AND CHRTIPOPACIENTE = 'G' AND CHRTIPOFACTURA = 'P' AND CHRESTATUS = 'C' " & _
                   "ORDER BY INTCONSECUTIVO DESC"
        Set rsFacturas = frsRegresaRs(vlstrsql, adLockOptimistic, adOpenDynamic)
        If rsFacturas.RecordCount <> 0 Then
            chkFacturaSustitutaFP(0).Enabled = True
            lstFacturaASustituirFP.Enabled = True
            chkFacturaSustitutaFP(0).Value = 0
        Else
            chkFacturaSustitutaFP(0).Enabled = False
            lstFacturaASustituirFP.Enabled = False
            chkFacturaSustitutaFP(0).Value = 0
        End If
        rsFacturas.Close
        
        'Grupo Empresa
        vlstrsql = "SELECT CHRFOLIOFACTURA, DTMFECHAHORA, MNYTOTALFACTURA, CASE WHEN BITPESOS = 1 THEN 'Pesos' ELSE 'Dólares' END PESOS, MNYTIPOCAMBIO FROM PVFACTURA " & _
                "INNER JOIN GNCOMPROBANTEFISCALDIGITAL ON GNCOMPROBANTEFISCALDIGITAL.CHRTIPOCOMPROBANTE = 'FA' " & _
                    "AND TRIM(GNCOMPROBANTEFISCALDIGITAL.VCHSERIECOMPROBANTE) = TRIM(PVFACTURA.VCHSERIE) " & _
                    "AND TRIM(GNCOMPROBANTEFISCALDIGITAL.VCHFOLIOCOMPROBANTE) = PVFACTURA.INTFOLIO " & _
                   "WHERE NVL(VCHUUID,' ') <> ' ' AND INTMOVPACIENTE = " & CLng(IIf(txtMovimientoPaciente.Text = "", "0", txtMovimientoPaciente.Text)) & " AND CHRTIPOPACIENTE = 'G' AND CHRTIPOFACTURA = 'E' AND CHRESTATUS = 'C' " & _
                   "ORDER BY INTCONSECUTIVO DESC"
        Set rsFacturas = frsRegresaRs(vlstrsql, adLockOptimistic, adOpenDynamic)
        If rsFacturas.RecordCount <> 0 Then
            chkFacturaSustitutaFE.Enabled = True
            lstFacturaASustituirFE.Enabled = True
            chkFacturaSustitutaFE.Value = 0
        Else
            chkFacturaSustitutaFE.Enabled = False
            lstFacturaASustituirFE.Enabled = False
            chkFacturaSustitutaFE.Value = 0
        End If
        rsFacturas.Close
    End If
    
End Sub

Public Function fnEncuentraHonorarios(blnFacturaPac As Boolean) As Boolean
    Dim rsHonorario As New ADODB.Recordset
    Dim vlstrsql As String
    Dim vlintContadorCargos As Integer
    Dim rsUsoCFDIFact As ADODB.Recordset
    Dim vlintcontador As Integer
    Dim rsCuentasCosto As ADODB.Recordset
    Dim vlblnCFDI As Boolean
    
    Dim vlblnCredito As Boolean
    
    vlblnCredito = False
    If IIf(blnFacturaPac, Val(Format(txtFPTotalPagar.Text, "")), Val(Format(txtFETotalPagar.Text, ""))) > 0 Then
        If aFormasPago(0).vlbolEsCredito Then vlblnCredito = True
    End If
    
    fnEncuentraHonorarios = True
    ReDim aDatoCostoISR(0)
    vlintContArr = 0
    For vlintContadorCargos = 1 To grdCargos.Rows - 1
    
        If grdCargos.TextMatrix(vlintContadorCargos, 0) = "*" Then
            vlstrsql = "SELECT PVBASEHONORARIOMEDICO.* From PVBASEHONORARIOMEDICO INNER JOIN PVCARGO ON PVCARGO.INTNUMCARGO = PVBASEHONORARIOMEDICO.INTNUMCARGO WHERE PVBASEHONORARIOMEDICO.INTNUMCARGO = '" & grdCargos.RowData(vlintContadorCargos) & "'"   'grdCargos.Row
            Set rsHonorario = frsRegresaRs(vlstrsql, adLockOptimistic, adOpenDynamic)
            If rsHonorario.RecordCount > 0 Then
                vlstrsql = grdCargos.RowData(vlintContadorCargos) & "|" & IIf(optGrupoCuenta(0).Value, txtMovimientoPaciente.Text, 0) & "|" & vgintClaveEmpresaContable
                Set rsCuentasCosto = frsEjecuta_SP(vlstrsql, "SP_PVSELCUENTADEPARTAMENTO")
                If rsCuentasCosto.RecordCount > 0 Then
                    If IIf(IsNull(rsCuentasCosto!CuentaCosto), 0, rsCuentasCosto!CuentaCosto) = 0 Then
                        'No se encuentra registrada la cuenta contable de costo de honorario
                        MsgBox SIHOMsg(1566) & " para el departamento: " & rsCuentasCosto!departamento & " y el tipo de ingreso: " & rsCuentasCosto!Ingreso & ". Configurar en los parámetros de contabilidad.", vbCritical, "Mensaje"
                        fnEncuentraHonorarios = False
                        Exit Function
                    ElseIf IIf(IsNull(rsCuentasCosto!TarifaIsr), 0, rsCuentasCosto!TarifaIsr) = 0 And Not vlblnCredito And rsCuentasCosto!bitISR = 1 Then
                        'Falta configurar el porcentaje de retención ISR del honorario
                        MsgBox SIHOMsg(1565) & " del médico " & rsCuentasCosto!Medico & " en la configuración del médico de cuentas por cobrar.", vbExclamation, "Mensaje"
                        fnEncuentraHonorarios = False
                        Exit Function
                    Else
                        ReDim Preserve aDatoCostoISR(vlintContArr)
                        aDatoCostoISR(vlintContArr).vllngNumCargo = rsCuentasCosto!NumeroCargo
                        aDatoCostoISR(vlintContArr).vllngNumCuenta = rsCuentasCosto!NUMCUENTA
                        aDatoCostoISR(vlintContArr).vlstrCuenta = rsCuentasCosto!CuentaCosto
                        aDatoCostoISR(vlintContArr).vlIntCveMedico = rsCuentasCosto!intCveMedico
                        aDatoCostoISR(vlintContArr).vlintCvePorcentajeISR = rsCuentasCosto!TarifaIsr
                        aDatoCostoISR(vlintContArr).vllngCtaAcredMedico = rsCuentasCosto!CtaAcreedMedico
                        aDatoCostoISR(vlintContArr).vlintRTP = rsCuentasCosto!BITRTP
                        vlintContArr = vlintContArr + 1
                    End If
                        
                    If Not vlblnCFDI And blnFacturaPac Then
                
                        Set rsUsoCFDIFact = frsRegresaRs("SELECT INTCVEUSOCFDIHONOFACTURADO FROM PVPARAMETRO WHERE TNYCLAVEEMPRESA = " & vgintClaveEmpresaContable, adLockOptimistic, adOpenDynamic)
                        If rsUsoCFDIFact.RecordCount > 0 Then
                            If IIf(IsNull(rsUsoCFDIFact!INTCVEUSOCFDIHONOFACTURADO), 0, rsUsoCFDIFact!INTCVEUSOCFDIHONOFACTURADO) = 0 Then
                                'Falta configurar el uso de CFDI para los honorarios en parámetros del módulo.
                                MsgBox SIHOMsg(1563), vbCritical, "Mensaje"
                                fnEncuentraHonorarios = False
                                Exit Function
                            Else
                                vlstrCveUsoCFDI = rsUsoCFDIFact!INTCVEUSOCFDIHONOFACTURADO
                                fnEncuentraHonorarios = True
                            End If
                        Else
                            'Falta configurar el uso de CFDI para los honorarios en parámetros del módulo.
                            MsgBox SIHOMsg(1563), vbCritical, "Mensaje"
                            fnEncuentraHonorarios = False
                            Exit Function
                        End If
                        vlblnCFDI = True
                    End If
                End If
            End If
        End If
    Next
End Function

Private Sub pCargaFactParc(vxlaryTempParciales() As String)
    Dim vlintcontador As Integer
    
    vlintcontador = 0
            If vxlaryTempParciales(0, 0) <> -1 Then
                For vlintcontador = 0 To UBound(vxlaryTempParciales, 2) - 1
                    With MSFGFacturasParciales
                        If .RowData(.Row) <> -1 Then
                            .Rows = .Rows + 1
                            .Row = .Rows - 1
                        End If
                        
                        .TextMatrix(.Row, 0) = vxlaryTempParciales(0, vlintcontador)     'Número de cuenta
                        .TextMatrix(.Row, 1) = vxlaryTempParciales(1, vlintcontador)     'Tipo de paciente
                        .TextMatrix(.Row, 2) = vxlaryTempParciales(2, vlintcontador)     'Facturado a
                        .TextMatrix(.Row, 3) = vxlaryTempParciales(3, vlintcontador)     'Subtotal
                        .TextMatrix(.Row, 4) = vxlaryTempParciales(4, vlintcontador)     'IVA
                        .TextMatrix(.Row, 5) = vxlaryTempParciales(5, vlintcontador)     'Total
                        .TextMatrix(.Row, 6) = vxlaryTempParciales(6, vlintcontador)     'Subtotal sin formato
                        .TextMatrix(.Row, 7) = vxlaryTempParciales(7, vlintcontador)     'IVA sin formato
                        .TextMatrix(.Row, 8) = vxlaryTempParciales(8, vlintcontador)     'Total sin formato
                        .TextMatrix(.Row, 9) = vxlaryTempParciales(9, vlintcontador)     'Moneda x:Dólares
                        .CellFontBold = True
                        .TextMatrix(.Row, 10) = vxlaryTempParciales(10, vlintcontador)   'Total
                        .TextMatrix(.Row, 11) = vxlaryTempParciales(11, vlintcontador)   'Indica si ya se facturó o está en memoria 0:Memoria 1:Grabada
                        .TextMatrix(.Row, 12) = vxlaryTempParciales(13, vlintcontador)   'Clave del concepto de facturación
                        .TextMatrix(.Row, 13) = vxlaryTempParciales(14, vlintcontador)   'Folio de la factura
                        .TextMatrix(.Row, 14) = vxlaryTempParciales(15, vlintcontador)   'Fecha
                        .TextMatrix(.Row, 15) = vxlaryTempParciales(16, vlintcontador)   'Descripción del concepto de facturación
                        .TextMatrix(.Row, 16) = vxlaryTempParciales(17, vlintcontador)   'Importe gravado
                        .TextMatrix(.Row, 17) = vxlaryTempParciales(18, vlintcontador)   'Importe no gravado
                        .TextMatrix(.Row, 18) = vxlaryTempParciales(19, vlintcontador)   'Tipo de concepto X:Normal, EX,DE,CO,CA,CP:Conceptos de seguro
                        
                        .RowData(.Row) = CInt(vxlaryTempParciales(12, vlintcontador))
                    End With
                Next vlintcontador
            End If
End Sub

Private Sub pcambiaREtencion(dblretencion As Double, grdGrid As MSHFlexGrid)
    Dim vlIntCont As Integer
    
    For vlIntCont = 1 To grdGrid.Rows - 1
        vldblImporteRetencionServ = dblretencion
        If Val(grdGrid.TextMatrix(vlIntCont, 4)) > 0 Then
            grdGrid.TextMatrix(vlIntCont, 14) = vldblRetencionServicios * (Val(Format(grdGrid.TextMatrix(vlIntCont, 9), "")) - Val(Format(grdGrid.TextMatrix(vlIntCont, 5), "")))
        End If
    Next vlIntCont
End Sub

Private Function fblnDatosValidosPacientePrefactura() As Boolean
    'Para validar si se cuenta con lo necesario para facturar al paciente
    Dim vlstrSentencia As String
    Dim vPrinter As Printer
    Dim lngContador As Long
    Dim dblTipoCambio As Double
    Dim dblIVA As Double

    fblnDatosValidosPacientePrefactura = True
    
    dblTipoCambio = fdblTipoCambio(fdtmServerFecha, "V")

    'Permisos:
    fblnDatosValidosPacientePrefactura = fblnRevisaPermiso(vglngNumeroLogin, vllngNumeroOpcion, "E")
    
    'Formatos de factura:
    If fblnDatosValidosPacientePrefactura And vllngFormatoaUsar = 0 Then
        fblnDatosValidosPacientePrefactura = False
        'No se encontró un formato válido de factura, por favor de uno de alta.
        MsgBox SIHOMsg(373), vbCritical, "Mensaje"
    End If
    
    'Cuenta bloqueada:
    If fblnDatosValidosPacientePrefactura And vgblnCuentaBloqueada Then
        fblnDatosValidosPacientePrefactura = False
        'No se puede realizar ésta operación. La cuenta se encuentra bloqueada por trabajo social.
        MsgBox SIHOMsg(662), vbCritical, "Mensaje"
    End If
    
    'Conceptos para facturar:
    If fblnDatosValidosPacientePrefactura And grdFacturaPaciente.RowData(1) = -1 Then
        fblnDatosValidosPacientePrefactura = False
        'No existen conceptos para facturar.
        MsgBox SIHOMsg(372), vbCritical, "Mensaje"
    End If
    
    'Impresora:
    If fblnDatosValidosPacientePrefactura Then
        If rsImpresoras.RecordCount > 0 Then
            For Each vPrinter In Printers
                If UCase(Trim(vPrinter.DeviceName)) = UCase(Trim(rsImpresoras!Impresora)) Then
                    Set Printer = vPrinter
                End If
            Next
        Else
            fblnDatosValidosPacientePrefactura = False
            'No se tiene asignada una impresora en la cual imprimir las facturas
            MsgBox SIHOMsg(492), vbCritical, "Mensaje"
        End If
    End If
    
    'Control de aseguradora, si el paciente es de seguros:
    If fblnDatosValidosPacientePrefactura And sstFacturacion.TabEnabled(2) Then
        If rsControlSeguro.RecordCount = 0 Then
            fblnDatosValidosPacientePrefactura = False
            'Que no tiene el control de la aseguradora capturado
            MsgBox SIHOMsg(370), vbCritical, "Mensaje"
            sstFacturacion.Tab = 2
            cboParentesco.SetFocus
        End If
    End If
    
    'Ciudad o razón social, para los datos fiscales del paciente:
    If fblnDatosValidosPacientePrefactura And cboCiudad.ListIndex = -1 Or Trim(txtNombreFactura.Text) = "" Then
        fblnDatosValidosPacientePrefactura = False
        'Registre los datos fiscales del paciente.
        MsgBox SIHOMsg(939), vbOKOnly + vbInformation, "Mensaje"
    End If
        
    'Total a pagar, subtotal o IVA negativo
    If fblnDatosValidosPacientePrefactura And Val(Format(txtFPTotalPagar.Text, "")) < 0 Then
        fblnDatosValidosPacientePrefactura = False
        'No se puede generar la factura, el total a pagar es negativo
        MsgBox SIHOMsg(996), vbOKOnly + vbInformation, "Mensaje"
    End If
    
    'Subtotal o IVA negativos
    If Val(Format(txtFPSubtotal.Text, "")) < 0 Or Val(Format(txtFPIVA, "")) < 0 Then
        fblnDatosValidosPacientePrefactura = False
        '¡No se puede generar la factura con importes negativos!
        MsgBox SIHOMsg(1084), vbOKOnly + vbInformation, "Mensaje"
    End If
    
'   Se comentó la siguiente validación por el caso HMG Caso 15829 E, PV Mensaje de IVA no corresponde al importe gravado
'    If fblnDatosValidosPaciente Then
'    'Si el IVA no corresponde al importe gravado
'        dblIVA = Format(IIf(vgintEmpresa = 0, (vldblsubtotalgravado * vgdblCantidadIvaGeneral / 100), IIf(optPesos(0).Value, dblIVAPaciente, dblIVAP / dblTipoCambio)), "###############.00")
'
'        If Format(Abs(Format(vldblsubtotalgravado * (vgdblCantidadIvaGeneral / 100), "############.00") - dblIVA), "############.00") > 0.03 Then
'            fblnDatosValidosPaciente = False
'            '¡El IVA no corresponde al importe gravado!
'            MsgBox SIHOMsg(1085), vbCritical, "Mensaje"
'        End If
'    End If
'   ----------------------------------------------------
End Function

Private Function fblnDatosValidosEmpresaPrefactura() As Boolean
    Dim vlstrSentencia As String
    Dim vPrinter As Printer
    Dim lngContador As Long
    Dim dblIVA As Double
    Dim dblTipoCambio As Double
    Dim dblIVAFactura As Double
    Dim vlAddendaValida As Long
    
    fblnDatosValidosEmpresaPrefactura = True
    
    dblTipoCambio = fdblTipoCambio(fdtmServerFecha, "V")
    
    'Permiso para guardar:
    fblnDatosValidosEmpresaPrefactura = fblnRevisaPermiso(vglngNumeroLogin, vllngNumeroOpcion, "E")

    'Verifica si se usa un catálogo especial y si todos los cargos estan dentro de él (PEMEX, PCE)
    If fblnManejaCatalogoCargos(vgintEmpresa) Then
        If fblnCargosFueraCatalogo(CLng(txtMovimientoPaciente.Text), IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")), vgintEmpresa) Then
           fblnDatosValidosEmpresaPrefactura = False
        End If
    End If
    
    'Formatos de factura:
    If fblnDatosValidosEmpresaPrefactura And vllngFormatoaUsar = 0 Then
        fblnDatosValidosEmpresaPrefactura = False
        'No se encontró un formato válido de factura, por favor de uno de alta.
        MsgBox SIHOMsg(373), vbCritical, "Mensaje"
    End If
    
    'Cuenta bloqueada:
    If fblnDatosValidosEmpresaPrefactura And vgblnCuentaBloqueada Then
        fblnDatosValidosEmpresaPrefactura = False
        'No se puede realizar ésta operación. La cuenta se encuentra bloqueada por trabajo social.
        MsgBox SIHOMsg(662), vbCritical, "Mensaje"
    End If
    
    'Conceptos para facturar:
    If fblnDatosValidosEmpresaPrefactura And grdFacturaEmpresa.RowData(1) = -1 Then
        fblnDatosValidosEmpresaPrefactura = False
        'No existen conceptos para facturar.
        MsgBox SIHOMsg(372), vbCritical, "Mensaje"
    End If
   
    'Si no hay facturas parciales por conceptos de seguro sin descontar,
    'y aún no se factura al paciente o no se hizo el 100% de descuento en los conceptos de seguro a cobrar
    'No se puede facturar
    If Not blnParciales Then
        'Factura del paciente ya guardada:
        If fblnDatosValidosEmpresaPrefactura And grdFacturaPaciente.RowData(1) > 0 And Not (Val(Format(txtFPDescuentos.Text, "")) <> 0 And Val(Format(txtFPSubtotal.Text, "")) = 0) Then
            fblnDatosValidosEmpresaPrefactura = False
            'Facture la cuenta del paciente primero.
            MsgBox SIHOMsg(549), vbCritical, "Mensaje"
        End If
    End If
    
    If fblnDatosValidosEmpresaPrefactura And fblnFPPendientesTimbre(1) Then fblnDatosValidosEmpresaPrefactura = False
     
    'Validación de impresora:
    If fblnDatosValidosEmpresaPrefactura Then
        If rsImpresoras.RecordCount > 0 Then
            For Each vPrinter In Printers
                If UCase(Trim(vPrinter.DeviceName)) = UCase(Trim(rsImpresoras!Impresora)) Then
                    Set Printer = vPrinter
                End If
            Next
        Else
            fblnDatosValidosEmpresaPrefactura = False
            'No se tiene asignada una impresora en la cual imprimir las facturas
            MsgBox SIHOMsg(492), vbCritical, "Mensaje"
        End If
    End If
    
    'Control de aseguradora registrado:
    If fblnDatosValidosEmpresaPrefactura Then
        If sstFacturacion.TabEnabled(2) Then
            If rsControlSeguro.RecordCount = 0 Then
                fblnDatosValidosEmpresaPrefactura = False
                'No se ha grabado el control de la aseguradora. Capture primero el control y reintente facturar.
                MsgBox SIHOMsg(370), vbCritical, "Mensaje"
                sstFacturacion.Tab = 2
                cboParentesco.SetFocus
            End If
        End If
    End If
    
    'Conceptos de seguros:
    If fblnDatosValidosEmpresaPrefactura Then
        If rsConceptosSeguro.RecordCount = 0 Then
            fblnDatosValidosEmpresaPrefactura = False
            'No se tiene asignado el concepto de facturación para el deducible y coaseguro.
            MsgBox SIHOMsg(371), vbCritical, "Mensaje"
        End If
    End If
    
    'Que el IVA sea mayor a cero (sucede que el IVA puede ser negativo cuando se factura parcialmente al seguro y se descuenta algun concepto de seguro)
    If fblnDatosValidosEmpresaPrefactura And Val(Format(txtFEIVA.Text, "")) < 0 Then
        fblnDatosValidosEmpresaPrefactura = False
        MsgBox "Seleccione cargos que contengan IVA mayor al de la factura del paciente.", vbCritical, "Mensaje"
    End If
    
    'Persona que autoriza por parte de la aseguradora:
    If fblnDatosValidosEmpresaPrefactura And sstFacturacion.TabEnabled(2) And chkAutoriza.Value = 1 And Trim(txtPersonaAutoriza.Text) = "" Then
        fblnDatosValidosEmpresaPrefactura = False
        '¡No ha ingresado datos!
        MsgBox SIHOMsg(2), vbCritical, "Mensaje"
        sstFacturacion.Tab = 2
        If chkAutoriza.Value = 1 Then
            txtPersonaAutoriza.SetFocus
        End If
    End If
    
    'Tipo de póliza:
    If fblnDatosValidosEmpresaPrefactura And sstFacturacion.TabEnabled(2) And chkTipoPoliza.Value = 1 Then  'And cboTipoPoliza.ItemData(cboTipoPoliza.ListIndex) <= 0 Then
        If cboTipoPoliza.ListIndex <= 0 Then
            fblnDatosValidosEmpresaPrefactura = False
            '¡No ha ingresado datos!
            MsgBox SIHOMsg(2), vbCritical, "Mensaje"
            sstFacturacion.Tab = 2
            cboTipoPoliza.SetFocus
        End If
    End If
    
    'Número de póliza:
    If fblnDatosValidosEmpresaPrefactura And sstFacturacion.TabEnabled(2) And chkNumeroPoliza.Value = 1 And Trim(txtNumeroPoliza.Text) = "" Then
        fblnDatosValidosEmpresaPrefactura = False
        '¡No ha ingresado datos!
        MsgBox SIHOMsg(2), vbCritical, "Mensaje"
        sstFacturacion.Tab = 2
        txtNumeroPoliza.SetFocus
    End If
    
    'Número de control:
    If fblnDatosValidosEmpresaPrefactura And sstFacturacion.TabEnabled(2) And chkNumeroControl.Value = 1 And Trim(txtNumeroControl.Text) = "" Then
        fblnDatosValidosEmpresaPrefactura = False
        '¡No ha ingresado datos!
        MsgBox SIHOMsg(2), vbCritical, "Mensaje"
        sstFacturacion.Tab = 2
        If chkNumeroControl.Value = 1 Then
            txtNumeroControl.SetFocus
        End If
    End If
    
    'Parchecillos para que no se puedan facturar cantidades negativas
    If fblnDatosValidosEmpresaPrefactura And Val(Format(txtFESubtotal.Text, "")) < 0 Then
    'Si el subtotal es negativo
        fblnDatosValidosEmpresaPrefactura = False
        '¡No se puede generar la factura con importes negativos!
        MsgBox SIHOMsg(1084), vbCritical, "Mensaje"
        sstFacturacion.Tab = 4
        grdFacturaEmpresa.SetFocus
    End If
    
'   Se comentó la siguiente validación por el caso HMG Caso 15829 E, PV Mensaje de IVA no corresponde al importe gravado
'    If fblnDatosValidosEmpresa And dblExcedenteDeIVA = 0 Then
'
'        'Si el IVA no corresponde al importe gravado
'        If Val(Format(txtFEDescuentoEspecial.Text, "")) = 0 Then 'sin descuento especial
'          dblIVA = Format(IIf(optPesos(1).Value, ldblIVACargosSelConvenio - dblIVAPaciente, dblIVAP / dblTipoCambio), "############.00")
'        Else
'          dblIVA = Format(IIf(optPesos(1).Value, ldblIVACargosSelConvenio, dblIVAP / dblTipoCambio), "############.00")
'        End If
'
'        If Format(Abs(Format(vldblsubtotalgravado * (vgdblCantidadIvaGeneral / 100), "############.00") - dblIVA), "############.00") > 0.03 Then
'            fblnDatosValidosEmpresa = False
'            '¡El IVA no corresponde al importe gravado!
'            MsgBox SIHOMsg(1085), vbCritical, "Mensaje"
'            sstFacturacion.Tab = 4
'            grdFacturaEmpresa.SetFocus
'        End If
'    End If
'   -----------------------------------
    
    If vgintEmpresa = llngCveEmpresaPCE Then
    'Si es PCE, que no se facture si el IVA de la factura es mayor al de la póliza
        dblIVAFactura = CDbl(Format(IIf(optPesos(1).Value, (ldblIVACargosSelConvenio - dblIVAPaciente), dblIVAP), "############.00"))
        
        If dblIVAFactura > CDbl(Format(dblIVAPolizaPCE, "############.00")) Then
            fblnDatosValidosEmpresaPrefactura = False
            '¡El IVA de la factura es mayor al IVA de la póliza!
            MsgBox SIHOMsg(1113), vbCritical, "Mensaje"
            sstFacturacion.Tab = 4
            grdFacturaEmpresa.SetFocus
        End If
    End If
End Function

Private Sub pBarraAlCien()
    pgbBarraCFD.Value = 100
    freBarraCFD.Top = 3200
    Screen.MousePointer = vbDefault
    frmFacturacion.Enabled = True
    freBarraCFD.Visible = False
End Sub

Private Sub pBarraAlSetenta()
    pgbBarraCFD.Value = 70
    freBarraCFD.Top = 3200
    Screen.MousePointer = vbHourglass
    lblTextoBarraCFD.Caption = "Generando el Comprobante Fiscal Digital,  por favor espere..."
    freBarraCFD.Visible = True
    freBarraCFD.Refresh
End Sub

Private Function fdblTasaIVAEmpresa(vllngEmpresaCat As Integer) As Double
    Dim ObjRS As New ADODB.Recordset
    Dim objSTR As String
    
    fdblTasaIVAEmpresa = 0
    
    If vllngEmpresaCat = 0 Then
        fdblTasaIVAEmpresa = vgdblCantidadIvaGeneral
    Else
        objSTR = "select relporcentaje from ccempresa inner join cnimpuesto on cnimpuesto.smicveimpuesto = SMICVEIMPUESTOCONCEPSSEG where intcveempresa = " & vllngEmpresaCat
        Set ObjRS = frsRegresaRs(objSTR, adLockOptimistic)
        If ObjRS.RecordCount > 0 Then
            fdblTasaIVAEmpresa = ObjRS!relPorcentaje
        Else
            fdblTasaIVAEmpresa = vgdblCantidadIvaGeneral
        End If
    End If

End Function

Public Function fintNumCopiaImpFactPaciente() As Integer
    Dim ObjRS As New ADODB.Recordset
    Dim objSTR As String
    On Error GoTo Error
    
    fintNumCopiaImpFactPaciente = 2
    
    objSTR = "Select vchvalor from siparametro where vchnombre ='NUMCOPIASFACTURAPACIENTE' and INTCVEEMPRESACONTABLE = " & vgintClaveEmpresaContable
    Set ObjRS = frsRegresaRs(objSTR, adLockOptimistic)
    If ObjRS.RecordCount > 0 Then
       fintNumCopiaImpFactPaciente = Val(ObjRS!VCHVALOR)
    End If

Exit Function
Error:
    fintNumCopiaImpFactPaciente = 2
End Function

Public Function fintNumCopiaImpFactEmpresa() As Integer
    Dim ObjRS As New ADODB.Recordset
    Dim objSTR As String
    On Error GoTo Error
    
    fintNumCopiaImpFactEmpresa = 2
    
    objSTR = "Select vchvalor from siparametro where vchnombre ='NUMCOPIASFACTURAEMPRESA' and INTCVEEMPRESACONTABLE = " & vgintClaveEmpresaContable
    Set ObjRS = frsRegresaRs(objSTR, adLockOptimistic)
    If ObjRS.RecordCount > 0 Then
       fintNumCopiaImpFactEmpresa = Val(ObjRS!VCHVALOR)
    End If

Exit Function
Error:
    fintNumCopiaImpFactEmpresa = 2
End Function

Public Function fblnConceptoAseguradora(intConceptoFactura As Long) As Boolean
On Error GoTo NotificaError
    'Revisa que el concepto de facturación sea del tipo aseguradora'

    Dim rs As New ADODB.Recordset
    Dim lstrSentencia As String
    
    lstrSentencia = "SELECT count(*) aseguradora FROM pvConceptoFacturacion " & _
                    "WHERE inttipo = 1 and smicveconcepto = " & intConceptoFactura
                                       
    Set rs = frsRegresaRs(lstrSentencia, adLockOptimistic, adOpenDynamic)
    fblnConceptoAseguradora = IIf(rs!Aseguradora = 0, False, True)
    rs.Close
    
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fblnConceptoAseguradora"))
    Unload Me
End Function

Private Function fstrConceptoFacturacion(vlintCveConcepto As Long) As String
    Dim rsCF As ADODB.Recordset

On Error GoTo NotificaError

    fstrConceptoFacturacion = ""
    Set rsCF = frsRegresaRs("SELECT chrDescripcion FROM pvConceptoFacturacion WHERE smiCveConcepto = " & vlintCveConcepto)
    While Not rsCF.EOF
        fstrConceptoFacturacion = rsCF!chrDescripcion
        rsCF.MoveNext
    Wend
    rsCF.Close
    
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fstrConceptoFacturacion"))
End Function

Private Function fBlnFacturaAsistenciaSocial(vllngPersonaGraba As Long, vllngNumeroCorte As Long) As Boolean

On Error GoTo NotificaError

    Dim rsFactura As New ADODB.Recordset            'RS tipo tabla para guardar la fractura
    Dim rsDetalleFactura As New ADODB.Recordset     'RS tipo tabla para el Detalle de la FACTURA
    Dim rsTipoPaciente As New ADODB.Recordset       'RS para el Tipo de paciente en crédito

    Dim vlstrFolioDocumento As String               'Este es el numero de factura a utilizar
    Dim vlstrFolioFactura As String                 'cuando hay factura parcial y nota de crédito almacena el folio de la factura
    Dim vllngConsecutivoFactura As Long             '
    Dim vlstrTipoPacienteCredito As String          'Sería 'PI' 'PE' 'EM' 'CO' 'ME'
    Dim vllngCveClienteCredito As Long              'Clave del empledo o del médico
    Dim vldtmFechaHoy As Date                       'Varible con la Fecha actual
    Dim vldtmHoraHoy As Date                        'Varible con la Hora actual
    Dim vllngFoliosFaltantes As Long                'Nomas para controlar los folios faltantes de las facturas

    'Variables para obtener los datos fiscales
    Dim vlstrDFRFC As String
    Dim vlstrDFNombre As String
    Dim vlstrDFDireccion As String
    Dim vlstrDFNumExterior As String
    Dim vlstrDFNumInterior As String
    Dim lngCveCiudad As Long                        'Clave de la ciudad del domicilio fiscal
    Dim vlstrDFTelefono As String
    Dim vlstrDFColonia As String
    Dim vlstrDFCodigoPostal As String

    Dim strFolio As String
    Dim strSerie As String
    Dim strNumeroAprobacion As String
    Dim strAnoAprobacion As String

    Dim vllngCorteUsado As Long
    Dim vlintEstadoTimbradoFBase As Integer
    Dim vlRFCTemp As String

    Dim lngCveFormato As Long
    
    fBlnFacturaAsistenciaSocial = True
    
    '(PEMEX)Se busca el tipo de formato que se va a utilizar
    lngCveFormato = 1
    frsEjecuta_SP vgintNumeroDepartamento & "|0|" & vgintTipoPaciente & "|" & IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E")), "fn_PVSelFormatoFactura2", True, lngCveFormato
    vllngFormatoaUsar = lngCveFormato
    
    vldtmFechaHoy = fdtmServerFecha
    vldtmHoraHoy = fdtmServerHora

    pIdentificaFormato
     
    '-----------------------------------------------------------'
    ' Las formas de pago y consulta de crédito para el paciente '
    '-----------------------------------------------------------'
    If optTipoCliente(0).Value Or lstFPBuscaCliente.ListCount = 0 Then 'El mismo cliente que el de la nota
        If optGrupoCuenta(1).Value Then
            Set rsTipoPaciente = frsRegresaRs("Select chrTipo From AdTipoPaciente Where tnyCveTipoPaciente = " & Trim(str(vgintTipoPaciente)), adLockReadOnly, adOpenForwardOnly)

            vlstrTipoPacienteCredito = IIf(rsTipoPaciente!chrTipo = "CO", "PA", rsTipoPaciente!chrTipo)
        
            If vlstrTipoPacienteCredito = "PA" Then
                vlstrTipoPacienteCredito = IIf(OptTipoPaciente(0).Value, "PI", "PE")
                vllngCveClienteCredito = CLng(txtMovimientoPaciente.Text) 'Igual que la cuenta del paciente
            Else
                vllngCveClienteCredito = vgintCveExtra
            End If
        End If
    Else
        If optTipoCliente(1).Value Then
            vlstrTipoPacienteCredito = "CO"
        ElseIf optTipoCliente(2).Value Then
            vlstrTipoPacienteCredito = "EM"
        ElseIf optTipoCliente(3).Value Then
            vlstrTipoPacienteCredito = "ME"
        ElseIf optTipoCliente(4).Value Then
            vlstrTipoPacienteCredito = "PI"
        ElseIf optTipoCliente(5).Value Then
            vlstrTipoPacienteCredito = "PE"
        End If
    
        vllngCveClienteCredito = lstFPBuscaCliente.ItemData(lstFPBuscaCliente.ListIndex)
    End If

    '-----------------------------'
    ' Datos fiscales del paciente '
    '-----------------------------'
    pDatosFacturaPaciente
    
    '-----------------------------------------
    'Variables para obtener los datos fiscales
    '-----------------------------------------
    vlstrDFRFC = fStrRFCValido(txtRFCFactura.Text)
    vlstrDFNombre = Trim(txtNombreFactura.Text)
    vlstrDFDireccion = Trim(txtDireccionFactura(0).Text)
    vlstrDFNumExterior = Trim(txtFacturaNumExterior.Text)
    vlstrDFNumInterior = Trim(txtFacturaNumInterior.Text)
    lngCveCiudad = cboCiudad.ItemData(cboCiudad.ListIndex)
    vlstrDFTelefono = Trim(txtTelefonoFactura.Text)
    vlstrDFColonia = Trim(txtColoniaFactura.Text)
    vlstrDFCodigoPostal = Trim(txtCPFactura.Text)
                
    If optTipoCliente(0).Value = False And optTipoCliente(1).Value = False Then pActualizaDatosFiscales
                                                                       
                                                                       
    '--------------------------'
    'Inicio de la transacción '
    '--------------------------'
    EntornoSIHO.ConeccionSIHO.BeginTrans
            
    '----------------------------------------------------'
    'Bloqueo de cuenta (Solo cuando es la factura base) '
    '----------------------------------------------------'
    If Not fblnBloqueoCuenta() Then
       EntornoSIHO.ConeccionSIHO.RollbackTrans
       Exit Function
    End If
                                                                       
    '------------------------'
    '- Folio de la factura -'
    '------------------------'
    vllngFoliosFaltantes = 0
    pCargaArreglo alstrParametrosSalida, vllngFoliosFaltantes & "|" & ADODB.adBSTR & "|" & strFolio & "|" & ADODB.adBSTR & "|" & strSerie & "|" & ADODB.adBSTR & "|" & strNumeroAprobacion & "|" & ADODB.adBSTR & "|" & strAnoAprobacion & "|" & ADODB.adBSTR
    frsEjecuta_SP "FA|" & vgintNumeroDepartamento & "|1", "sp_gnFolios", , , alstrParametrosSalida
    pObtieneValores alstrParametrosSalida, vllngFoliosFaltantes, strFolio, strSerie, strNumeroAprobacion, strAnoAprobacion
    
    '|Si la serie está vacía el SP regresa un espacio en blanco por eso se debe de hacer el TRIM
    vlstrFolioDocumento = Trim(strSerie) & strFolio
         
    If Trim(vlstrFolioDocumento) = "0" Then
        EntornoSIHO.ConeccionSIHO.RollbackTrans
    
        'No existen folios activos para este documento.
        MsgBox SIHOMsg(291), vbCritical, "Mensaje"
        
        fBlnFacturaAsistenciaSocial = False
        
        Exit Function
    End If
    
    If Trim(vlstrFolioDocumento) = "" Then
        EntornoSIHO.ConeccionSIHO.RollbackTrans
        
        'No se pudo obtener el folio para este documento, intente de nuevo.
        MsgBox SIHOMsg(1390), vbCritical, "Mensaje"
        
        fBlnFacturaAsistenciaSocial = False
        
        Exit Function
    End If

    '------------------------------------'
    ' Guardar maestro de la factura      '
    '------------------------------------'
    Set rsFactura = frsRegresaRs("SELECT * FROM PVFactura WHERE intConsecutivo = -1", adLockOptimistic, adOpenDynamic)
    With rsFactura
        .AddNew
        !chrfoliofactura = vlstrFolioDocumento
        !dtmFechahora = vldtmFechaHoy + vldtmHoraHoy
        If chkExtranjero Then
            !CHRRFC = "XEXX010101000"
        Else
            !CHRRFC = IIf(Len(fStrRFCValido(vlstrDFRFC)) < 12 Or Len(fStrRFCValido(vlstrDFRFC)) > 13, "XAXX010101000", fStrRFCValido(vlstrDFRFC))
        End If
        !CHRNOMBRE = IIf(Trim(vlstrDFNombre) = "", " ", Trim(vlstrDFNombre))
        !chrCalle = Trim(vlstrDFDireccion)
        !VCHNUMEROEXTERIOR = Trim(vlstrDFNumExterior)
        !VCHNUMEROINTERIOR = Trim(vlstrDFNumInterior)
        !chrTelefono = Trim(vlstrDFTelefono)
        !VCHCOLONIA = Trim(vlstrDFColonia)
        !VCHCODIGOPOSTAL = Trim(vlstrDFCodigoPostal)
        !smyIVA = 0
        !MNYDESCUENTO = CDbl(txtFPDescuentos.Text)
        !chrEstatus = " "
        !INTMOVPACIENTE = txtMovimientoPaciente.Text
        !CHRTIPOPACIENTE = IIf(optGrupoCuenta(0).Value, "G", IIf(OptTipoPaciente(0).Value, "I", "E"))
        !SMIDEPARTAMENTO = vgintNumeroDepartamento
        !intCveEmpleado = vllngPersonaGraba
        !intNumCorte = vllngNumeroCorte
        !mnyAnticipo = 0
        !mnyTotalFactura = 0
        !BITPESOS = IIf(optPesos(0).Value, 1, 0)
        !mnytipocambio = IIf(optPesos(0).Value, 0, fdblTipoCambio(vldtmFechaHoy, "V"))
        !chrTipoFactura = "P"
        !intNumCliente = 0
        !intCveVentaPublico = 0
        !intCveCiudad = lngCveCiudad
        !intcveempresa = 0
        !mnyHonorariosFacturados = IIf(blnCalcularEnBaseACargos, ldblHonorariosAFacturar, 0)
        !mnyTotalPagar = 0
        !mnyTotalNotasCredito = 0
        !vchSerie = strSerie
        !INTFOLIO = strFolio
        !intTipoDetalleFactura = IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3))
        If cboUsoCFDI(0).ListIndex > -1 Then
            !intCveUsoCFDI = cboUsoCFDI(0).ItemData(cboUsoCFDI(0).ListIndex)
        End If
        !BITFACTURAASISTENCIASOCIAL = 1
        If claveCarta > 0 Then !intCveCarta = claveCarta
        .Update
        vlRFCTemp = Trim(!CHRRFC) 'Se graba el valor del RFC para posible envío de CFD/CFDi
    End With
          
    vllngConsecutivoFactura = flngObtieneIdentity("SEC_PvFactura", rsFactura!intConsecutivo)
    vlstrFolioFactura = vlstrFolioDocumento
        
    '------------------------------------'
    ' Guardar detalle de la factura      '
    '------------------------------------'
    Set rsDetalleFactura = frsRegresaRs("SELECT * FROM PVDetalleFactura WHERE chrFolioFactura = '' ", adLockOptimistic, adOpenDynamic)
    With rsDetalleFactura
        .AddNew
        !chrfoliofactura = vlstrFolioDocumento
        !smicveconcepto = flngConceptoFacturacionAsistenciaSocial
        !chrTipo = "OC"
        !MNYCantidad = CDbl(txtFPDescuentos.Text)
        !mnyCantidadGravada = 0
        !mnyIVAConcepto = 0
        !MNYIVA = 0
        !MNYDESCUENTO = CDbl(txtFPDescuentos.Text)
        .Update
        
        .AddNew
        !chrfoliofactura = vlstrFolioDocumento
        !smicveconcepto = -2
        !chrTipo = "DE"
        !MNYCantidad = CDbl(txtFPDescuentos.Text)
        !mnyCantidadGravada = 0
        !mnyIVAConcepto = 0
        !MNYIVA = 0
        !MNYDESCUENTO = 0
        .Update
        
        rsDetalleFactura.Close
                                 
        frsEjecuta_SP str(vllngConsecutivoFactura) & "|" & 0 & "|" & 0 & "|" & 0 & "|" & CDbl(txtFPDescuentos.Text) & "|" & 0 & "|" & 0, "SP_PVINSFACTURAIMPORTE"
    End With
    
    pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", flngCuentaConceptoDepartamento(flngConceptoFacturacionAsistenciaSocial, vgintNumeroDepartamento, "INGRESO"), CDbl(txtFPDescuentos.Text), False, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
    
    pAgregarMovArregloCorte vllngNumeroCorte, vllngPersonaGraba, vlstrFolioDocumento, "FA", flngCuentaDescFacturaAsistenciaSocial(flngConceptoFacturacionAsistenciaSocial, vgintNumeroDepartamento), CDbl(txtFPDescuentos.Text), True, "NA", 0, 0, "NA", 0, 2, vlstrFolioDocumento, "FA"
          
    '---------------------------------------------------------------------------------------
    'Se agregan los movimientos de la factura base ó de la factura base y la nota de crédito(se abre y se cierra el corte)
    '---------------------------------------------------------------------------------------
    vllngCorteUsado = fRegistrarMovArregloCorte(vllngNumeroCorte, True)
    pAgregarMovArregloCorte 0, 0, "NA", "NA", 0, 0, False, "NA", 0, 0, "NA", 0, 0, "NA", "NA"
   
    If vllngCorteUsado = 0 Then
        EntornoSIHO.ConeccionSIHO.RollbackTrans
        
        'No se pudieron agregar los movimientos de la operación al corte, intente de nuevo.
        MsgBox SIHOMsg(1320), vbExclamation, "Mensaje"
        
        fBlnFacturaAsistenciaSocial = False
        
        Exit Function
    Else
        If vllngCorteUsado <> vllngNumeroCorte Then
            'actualizamos el corte en el que se registró la factura, esto es por si hay un cambio de corte al momento de hacer el registro d ela información de la factura
            pEjecutaSentencia "Update pvfactura set INTNUMCORTE = " & vllngCorteUsado & " where intConsecutivo = " & vllngConsecutivoFactura
        End If
    End If

    '-------------------
    'Se libera la cuenta
    '-------------------
    pLiberaCuenta
  
    '------------------------------------------
    'Se guarda el LOG y COMMIT a la transacción
    '------------------------------------------
    Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGraba, Me.Caption, Trim(vlstrFolioDocumento))
   
    '-------------------------------------------------------------------------------------------------
    'VALIDACIÓN DE LOS DATOS ANTES DE INSERTAR EN GNCOMPROBANTEFISCLADIGITAL EN EL PROCESO DE TIMBRADO
    '-------------------------------------------------------------------------------------------------
    If intTipoEmisionComprobante = 2 Then
        If Not fblnValidaDatosCFDCFDi(vllngConsecutivoFactura, "FA", IIf(intTipoCFDFactura = 1, True, False), CInt(strAnoAprobacion), strNumeroAprobacion) Then
            EntornoSIHO.ConeccionSIHO.RollbackTrans
            fBlnFacturaAsistenciaSocial = False

            Exit Function
        End If
    End If
    
    EntornoSIHO.ConeccionSIHO.CommitTrans '*se cierra la transacción para que la factura quede registrada en el
    vlblnUsarRazonSocial = IIf(chkRazonSocial = 1, 1, 0)
    
    '------------------------------
    'TIMBRADO FISCAL DE LA FACTURA
    '------------------------------
    If intTipoEmisionComprobante = 2 Then
        If intTipoCFDFactura = 1 Then
            pMarcarPendienteTimbre vllngConsecutivoFactura, "FA", vgintNumeroDepartamento 'si es CFDi
            pLogTimbrado 2
        End If

        EntornoSIHO.ConeccionSIHO.BeginTrans 'transacción del timbrado

        pBarraAlSetenta 'Barra de progreso al 70

        frmFacturacion.Enabled = False
        vlintEstadoTimbradoFBase = 0

        If Not fblnGeneraComprobanteDigital(vllngConsecutivoFactura, "FA", IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), CInt(strAnoAprobacion), strNumeroAprobacion, IIf(intTipoCFDFactura = 1, True, False)) Then
            On Error Resume Next
            EntornoSIHO.ConeccionSIHO.CommitTrans

            If intTipoCFDFactura = 1 Then pLogTimbrado 1 'si es CFDi

            vlintEstadoTimbradoFBase = vgIntBanderaTImbradoPendiente

            If vgIntBanderaTImbradoPendiente = 1 Then 'timbre pendiente

                'El comprobante se realizó de manera correcta, sin embargo no fue posible confirmar el timbre fiscal
                MsgBox Replace(SIHOMsg(1306), "El comprobante", "La factura"), vbInformation + vbOKOnly, "Mensaje"
                'continua el proceso

                pBarraAlCien

            ElseIf vgIntBanderaTImbradoPendiente = 2 Or vgIntBanderaTImbradoPendiente = 3 Then 'errores controlados por el PAC o en el proceso, 100% seguro de que no se timbró
                    If intTipoCFDFactura = 1 Then pLogTimbrado 1

                    '1338, 'La factura no pudo ser timbrada, será cancelada en el sistema.
                    MsgBox SIHOMsg(1338), vbCritical + vbOKOnly, "Mensaje"

                    pCancelarFactura Trim(vlstrFolioFactura), vllngPersonaGraba, "frmFacturacion", True, False

                    'Actualiza PDF al cancelar facturas
                    If Not fblnGeneraComprobanteDigital(vllngConsecutivoFactura, "FA", 1, 0, "", False, True, -1) Then
                        On Error Resume Next
                    End If

                    fblnImprimeComprobanteDigital vllngConsecutivoFactura, "FA", "I", vllngFormatoaUsar, IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), "", True, "", -1, txtImpresionesFP(0).Text

                    pBarraAlCien

                    fBlnFacturaAsistenciaSocial = False
                                                        
                    Exit Function
                End If
            Else ' se timbró correctamente la factura
                EntornoSIHO.ConeccionSIHO.CommitTrans

                If intTipoCFDFactura = 1 Then
                    pEliminaPendientesTimbre vllngConsecutivoFactura, "FA" 'quitamos la factur de pendientes de timbre fiscal
                    pLogTimbrado 1
                End If

                Call pGuardarLogTransaccion(Me.Name, EnmGrabar, vllngPersonaGraba, Me.Caption, Trim(vlstrFolioDocumento))
                'Barra de progreso CFD

                pBarraAlCien

                Screen.MousePointer = vbDefault
            End If

            '--------------------------------------
            'Se realizan las impresiones necesarias
            '--------------------------------------
            '-------------------------'
            ' Impresiones
            '-------------------------'

            MsgBox SIHOMsg(343), vbInformation, "Mensaje"

            '-------------------------
            'Impresión de factura base
            '-------------------------
            If intTipoEmisionComprobante = 2 Then
                If Not fblnImprimeComprobanteDigital(vllngConsecutivoFactura, "FA", "I", vllngFormatoaUsar, IIf(optTipoAgrupacion(0).Value, 1, IIf(optTipoAgrupacion(1).Value, 2, 3)), "", True, "", -1, txtImpresionesFP(0).Text) Then
                    chkFacturaBase.Value = 3
                    chkFacturaBase.Enabled = False
                                        
                    fBlnFacturaAsistenciaSocial = False
                    
                    Exit Function
                End If
    
                '---------------------------------
                'ENVÍO DEL CFD DE LA(S) FACTURA(S)
                '---------------------------------
                'Verifica el parámetro de envío de CFDs por correo
                If fblnRevisaEnvioCorreo(vgintClaveEmpresaContable) And optTipoCliente(1).Value = False And vlintEstadoTimbradoFBase = 0 Then
                    '¿Desea enviar por e-mail la información del comprobante fiscal digital?
                    If MsgBox(SIHOMsg(1090), vbYesNo + vbQuestion, "Mensaje") = vbYes Then
                        pEnviarCFD "FA", vllngConsecutivoFactura, CLng(vgintClaveEmpresaContable), Trim(vlRFCTemp), vllngPersonaGraba, Me
                    End If
                End If
            Else
                pImprimeFormato vllngFormatoaUsar, vllngConsecutivoFactura
            End If
    
            vlRFCTemp = ""
    
            pIniciaChkFacturaBase
        End If
'    End If
    vlblnUsarRazonSocial = False
Exit Function
NotificaError:
    If Err.Description <> "No hay ninguna transacción activa." Then Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (Me.Name & ":fBlnFacturaAsistenciaSocial" & Erl()))
End Function

Private Function flngConceptoFacturacionAsistenciaSocial() As Long
Dim rs As New ADODB.Recordset
Dim rsCF As ADODB.Recordset

On Error GoTo NotificaError

    Set rs = frsSelParametros("PV", vgintClaveEmpresaContable, "INTCVECONCEPTOFACTASISTSOCIAL")
    If Not rs.EOF Then
        If IsNull(rs!Valor) Then
            flngConceptoFacturacionAsistenciaSocial = 0
        Else
            Set rsCF = frsRegresaRs("SELECT * FROM pvConceptoFacturacion WHERE smiCveConcepto = " & rs!Valor)
            If Not rsCF.EOF Then
                If IsNull(rsCF!smicveconcepto) Then
                    flngConceptoFacturacionAsistenciaSocial = 0
                Else
                    flngConceptoFacturacionAsistenciaSocial = CLng(rsCF!smicveconcepto)
                End If
            Else
                flngConceptoFacturacionAsistenciaSocial = 0
            End If
            rsCF.Close
        End If
    Else
        flngConceptoFacturacionAsistenciaSocial = 0
    End If
    rs.Close
    
Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":flngConceptoFacturacionAsistenciaSocial"))
End Function

Public Function flngCuentaDescFacturaAsistenciaSocial(vllngConceptoFactura As Long, vlintNumeroDepartamento As Integer) As Long
    '-----------------------------------------------------------------------------------
    'Regresa la cuenta contable de descuento para facturacion de asistencia social del concepto de facturación según el departamento
    '-----------------------------------------------------------------------------------
    On Error GoTo NotificaError
    
    Dim vlstrSentencia As String
    Dim rs As New ADODB.Recordset
    Dim vlblnEncontro As Boolean
    
    flngCuentaDescFacturaAsistenciaSocial = 0
    vlblnEncontro = False
    
    vlstrSentencia = "" & _
    "select intnumctadescsocial from " & _
        "PvConceptoFacturacionDepartame " & _
    "where " & _
        "smiCveConcepto=" & Trim(str(vllngConceptoFactura)) & " " & _
        "and smiCveDepartamento=" & Trim(str(vlintNumeroDepartamento))
    Set rs = frsRegresaRs(vlstrSentencia)
    If rs.RecordCount <> 0 Then
        If rs.Fields(0) <> 0 Then
            flngCuentaDescFacturaAsistenciaSocial = rs.Fields(0)
            vlblnEncontro = True
        End If
    End If
    
    If Not vlblnEncontro Then
        vlstrSentencia = "" & _
        "select intnumctadescsocial from " & _
            "PvConceptoFacturacionempresa " & _
        "where " & _
            "intcveconceptofactura = " & str(vllngConceptoFactura) & _
            " and intcveempresacontable = " & vgintClaveEmpresaContable
        Set rs = frsRegresaRs(vlstrSentencia)
        If rs.RecordCount <> 0 Then
            flngCuentaDescFacturaAsistenciaSocial = IIf(IsNull(rs.Fields(0)), 0, rs.Fields(0))
        End If
    End If

Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":flngCuentaDescFacturaAsistenciaSocial"))
End Function

Public Function fblnAplicaFacturaAsistenciaSocial(intCveTipoPaciente As Long, bitEmpresa As Integer) As Boolean
    On Error GoTo NotificaError
    
    Dim vlstrSentencia As String
    Dim rs As New ADODB.Recordset
    
    fblnAplicaFacturaAsistenciaSocial = False

    vlstrSentencia = "select tnycvetipopacempresa, bitempresa from PVTIPOPACIENTEEMPRESA where " & _
        "tnycvetipopacempresa = " & intCveTipoPaciente & " " & _
        "and bitempresa = " & bitEmpresa
    Set rs = frsRegresaRs(vlstrSentencia)
    If rs.RecordCount <> 0 Then
        If IIf(IsNull(rs!tnycvetipopacempresa), 0, rs!tnycvetipopacempresa) <> 0 Then
            fblnAplicaFacturaAsistenciaSocial = True
        Else
            fblnAplicaFacturaAsistenciaSocial = False
        End If
    Else
        fblnAplicaFacturaAsistenciaSocial = False
    End If

Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fblnAplicaFacturaAsistenciaSocial"))
End Function

Public Function fblnValidacionesFacturaAsistenciaSocial() As Boolean
    On Error GoTo NotificaError
    
    Dim rs As New ADODB.Recordset
    Dim vlConcepto As Long
    Dim vlCuentaIngreso As Long
    
    fblnValidacionesFacturaAsistenciaSocial = True
    
    vlConcepto = flngConceptoFacturacionAsistenciaSocial
    
    If vlConcepto = 0 Then
        'No se ha configurado el concepto de facturación para factura de asistencia social, favor de verificar.
        MsgBox SIHOMsg(1598), vbExclamation, "Mensaje"

        fblnValidacionesFacturaAsistenciaSocial = False
        Exit Function
    Else
        If flngCatalogoSATIdByNombreTipo("c_ClaveProdServ", vlConcepto, "CF", 1) = 0 Then
            MsgBox "No está definida la clave del SAT para el producto/servicio " & fstrConceptoFacturacion(vlConcepto), vbExclamation, "Mensaje"
            
            fblnValidacionesFacturaAsistenciaSocial = False
            Exit Function
        End If
        If flngCatalogoSATIdByNombreTipo("c_ClaveUnidad", vlConcepto, "CF", 2) = 0 Then
            MsgBox "No está definida la clave del SAT para la unidad del producto/servicio " & fstrConceptoFacturacion(vlConcepto), vbExclamation, "Mensaje"
            
            fblnValidacionesFacturaAsistenciaSocial = False
            Exit Function
        End If
    End If

    vlCuentaIngreso = flngCuentaConceptoDepartamento(vlConcepto, vgintNumeroDepartamento, "INGRESO")
    If vlCuentaIngreso = 0 Then
        MsgBox Replace(SIHOMsg(907), "contable", "contable de ingreso") & Chr(13) & fstrConceptoFacturacion(vlConcepto), vbOKOnly + vbExclamation, "Mensaje"
        
        fblnValidacionesFacturaAsistenciaSocial = False
        Exit Function
    Else
        'Que la cuenta acepte movimientos
        Set rsTemp = frsEjecuta_SP(str(vlCuentaIngreso), "Sp_CnSelCuentaContable")
        If rsTemp.RecordCount > 0 Then
            If IsNull(rsTemp!Bitestatusmovimientos) Or rsTemp!Bitestatusmovimientos = 0 Then
                MsgBox "La cuenta contable para ingreso por asistencia social para el concepto de facturación " & fstrConceptoFacturacion(vlConcepto) & " no acepta movimientos, favor de verificar.", vbOKOnly + vbExclamation, "Mensaje"

                fblnValidacionesFacturaAsistenciaSocial = False
                Exit Function
            End If
        End If
    End If

    If flngCuentaDescFacturaAsistenciaSocial(vlConcepto, vgintNumeroDepartamento) = 0 Then
        'No se ha configurado la cuenta contable para descuento por asistencia social para el concepto de facturación configurado para la factura de asistencia social, favor de verificar.
        MsgBox SIHOMsg(1599), vbExclamation, "Mensaje"

        fblnValidacionesFacturaAsistenciaSocial = False
        Exit Function
    Else
        'Que la cuenta acepte movimientos
        Set rsTemp = frsEjecuta_SP(flngCuentaDescFacturaAsistenciaSocial(vlConcepto, vgintNumeroDepartamento), "Sp_CnSelCuentaContable")
        If rsTemp.RecordCount > 0 Then
            If IsNull(rsTemp!Bitestatusmovimientos) Or rsTemp!Bitestatusmovimientos = 0 Then
                MsgBox "La cuenta contable para descuento por asistencia social para el concepto de facturación " & fstrConceptoFacturacion(vlConcepto) & " no acepta movimientos, favor de verificar.", vbOKOnly + vbExclamation, "Mensaje"

                fblnValidacionesFacturaAsistenciaSocial = False
                Exit Function
            End If
        End If
    End If

Exit Function
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":fblnValidacionesFacturaAsistenciaSocial"))
End Function

Private Sub pBarraAlTreintaycinco()
    pgbBarraCFD.Value = 35
    freBarraCFD.Top = 3200
    Screen.MousePointer = vbHourglass
    lblTextoBarraCFD.Caption = "Generando el Comprobante Fiscal Digital para la nota, por favor espere..."
    freBarraCFD.Visible = True
    freBarraCFD.Refresh
    frmFacturacion.Enabled = False
End Sub

Private Function fblnSoloFaltaFacturaBenefactor() As Boolean
    Dim rsEmpPaciente As New ADODB.Recordset
    Dim rsEmpBenefactor As New ADODB.Recordset
    
    fblnSoloFaltaFacturaBenefactor = False
    Set rsEmpPaciente = frsRegresaRs("select count(*) total from PvFactura where BITFACTURAASISTENCIASOCIAL = 1 and trim(chrEstatus) is null and chrTipoPaciente = '" & IIf(OptTipoPaciente(0).Value, "I", "E") & "' and intMovpaciente = " & txtMovimientoPaciente.Text)
    If rsEmpPaciente.RecordCount <> 0 Then
        If rsEmpPaciente!Total > 0 Then
            fblnSoloFaltaFacturaBenefactor = True
        
            Set rsEmpBenefactor = frsRegresaRs("select count(*) total from PvFactura where BITFACTURAASISTENCIASOCIAL = 2 and trim(chrEstatus) is null and chrTipoPaciente = '" & IIf(OptTipoPaciente(0).Value, "I", "E") & "' and intMovpaciente = " & txtMovimientoPaciente.Text)
            If rsEmpBenefactor.RecordCount <> 0 Then
                If rsEmpBenefactor!Total >= rsEmpPaciente!Total Then
                    fblnSoloFaltaFacturaBenefactor = False
                End If
            End If
        End If
    End If
    
End Function

Private Sub chkRFCgenerico_Click()
    If chkRFCgenerico.Value = vbChecked And chkExtranjero.Value = vbChecked Then
        txtRFCFactura.Enabled = False
        vlstrRFCprovisional = txtRFCFactura.Text
        txtRFCFactura.Text = "XEXX010101000"
        vgBlnCambioDatosFiscales = True
'        pValidaBloqueoRegimen
        
    ElseIf chkRFCgenerico.Value = vbChecked And chkExtranjero.Value = vbUnchecked Then
        txtRFCFactura.Enabled = False
        vlstrRFCprovisional = txtRFCFactura.Text
        txtRFCFactura.Text = "XAXX010101000"
        vgBlnCambioDatosFiscales = True
        chkRazonSocial.Enabled = True
'        pValidaBloqueoRegimen
    Else
        txtRFCFactura.Enabled = True
        txtRFCFactura.Text = vlstrRFCprovisional
        vgBlnCambioDatosFiscales = False
        chkRazonSocial.Enabled = False
        chkRazonSocial.Value = 0
    End If
    pValidaBloqueoRegimen
End Sub

Private Sub PImprimeAnt(lngCveAplAnt As Long, lngCveFormato As Long, vlstrDFRFC As String)
 
     lngCveFormato = 1
            frsEjecuta_SP vgintNumeroDepartamento & "|0|0|T", "fn_PVSelFormatoFactura2", True, lngCveFormato
            fblnImprimeComprobanteDigital lngCveAplAnt, "AA", "I", lngCveFormato, 0
        
            If fblnRevisaEnvioCorreo(vgintClaveEmpresaContable) Then
                '¿Desea enviar por e-mail la información del comprobante fiscal digital?
                If MsgBox(SIHOMsg(1090), vbYesNo + vbQuestion, "Mensaje") = vbYes Then pEnviarCFD "AA", lngCveAplAnt, CLng(vgintClaveEmpresaContable), Trim(vlstrDFRFC), vglngNumeroEmpleado, Me
               
            End If

End Sub

Private Sub pImprimirValesHonorarios(strFolioDocumento As String, lngPersonaGraba As Long)
    Dim rsHonorariosMedicos As ADODB.Recordset
    Dim rs As ADODB.Recordset
    Dim strSentencia As String
    Dim rsReporte As New ADODB.Recordset
    Dim alstrParametros(7) As String
    Dim strPersonaFactura As String
    
    strSentencia = "SELECT PVBASEHONORARIOMEDICO.INTCVEMEDICO From PVBASEHONORARIOMEDICO INNER JOIN PVCARGO ON PVCARGO.INTNUMCARGO = PVBASEHONORARIOMEDICO.INTNUMCARGO WHERE TRIM(PVCARGO.CHRFOLIOFACTURA) = '" & Trim(strFolioDocumento) & "'"
    Set rsHonorariosMedicos = frsRegresaRs(strSentencia, adLockReadOnly, adOpenStatic)
    If rsHonorariosMedicos.RecordCount <> 0 Then
        ''vchApellidoPaterno || ' ' || vchApellidoMaterno || ' ' || vchNombre
        strSentencia = "Select vchApellidoPaterno || ' ' || vchApellidoMaterno || ' ' || vchNombre as NombrePersona from NoEmpleado where intCveEmpleado= " & lngPersonaGraba
        Set rs = frsRegresaRs(strSentencia, adLockReadOnly, adOpenStatic)
    
        Do While Not rsHonorariosMedicos.EOF
            pInstanciaReporte vgrptReporteHonorario, "rptValeHonorarioMedico.rpt"
            vgstrParametrosSP = Val(txtMovimientoPaciente.Text) & "|" & rsHonorariosMedicos!intCveMedico
            Set rsReporte = frsEjecuta_SP(vgstrParametrosSP, "sp_PvRptValeHonorarioMedico")
            If rsReporte.RecordCount <> 0 Then
                alstrParametros(0) = "IN_INTCUENTA;" & Val(txtMovimientoPaciente.Text)
                alstrParametros(1) = "IN_INTMEDICO;" & rsHonorariosMedicos!intCveMedico
                alstrParametros(2) = "vchNombreHospital;" & Trim(vgstrNombreHospitalCH)
                alstrParametros(3) = "vchTelefonoHospital;" & Trim(vgstrTelefonoCH)
                alstrParametros(4) = "vchDireccion;" & Trim(vgstrDireccionCH)
                alstrParametros(5) = "vchPersonaFactura;" & Trim(rs!NombrePersona)
                alstrParametros(6) = "cantidadLetras;" & fstrNumeroenLetras(rsReporte!cantidad, "pesos", "M.N.")
                alstrParametros(7) = "strFolioDocumento;" & Trim(strFolioDocumento)
                pCargaParameterFields alstrParametros, vgrptReporteHonorario
                pImprimeReporte vgrptReporteHonorario, rsReporte, "I", "Vale por honorario médico"
            End If
            rsHonorariosMedicos.MoveNext
         Loop
       rsReporte.Close
       rs.Close
    End If
    
    rsHonorariosMedicos.Close
   
End Sub
Private Sub pMostrarDatosPacienteFactura(lngComprobante As Long, strTipo As String)
Dim RsComprobante As ADODB.Recordset
Dim strSentencia As String
Dim vlintmostrardatos As Integer
    strSentencia = "SELECT BITEXCLUIRNOMBREPACIENTE " & _
                           "  FROM GNCOMPROBANTEFISCALDIGITAL " & _
                           " WHERE GNCOMPROBANTEFISCALDIGITAL.INTCOMPROBANTE = " & lngComprobante & _
                           "   AND GNCOMPROBANTEFISCALDIGITAL.CHRTIPOCOMPROBANTE = '" & strTipo & "'"
    vlintmostrardatos = IIf(chkFacturaSustitutaFP(1) = 1, 1, 0)
    Set RsComprobante = frsRegresaRs(strSentencia, adLockOptimistic, adOpenDynamic)
        With RsComprobante
            !BITEXCLUIRNOMBREPACIENTE = vlintmostrardatos
            .Update
        End With
End Sub

'Función prototipo para cambiar el valor de un combo a uno en específico
Private Sub pValidaBloqueoRegimen()
    If (txtRFCFactura = "XAXX010101000" Or txtRFCFactura = "XEXX010101000") And vgstrVersionCFDI = "4.0" Then
        SetComboBoxToItem cboRegimenFiscal, "SIN OBLIGACIONES FISCALES"
        'cboUsoCFDI(0).Enabled = False
    Else
    
        cboRegimenFiscal.ListIndex = vl_regimencliente
        
    '    cboUsoCFDI(0).Enabled = Enabled
    End If
End Sub

Private Sub SetComboBoxToItem(Box As ComboBox, Itm As String)
  Dim i%
  For i = 0 To Box.ListCount - 1
    If Box.List(i) = Itm Then
       Box.ListIndex = i
       Exit Sub
    End If
  Next
End Sub

Private Sub pRegistraCambio(vlintCantCambioPaquete As Long, vlstrCargoPaquete As String, vlstrNumeroPaquete As String)
            If vlintCantCambioPaquete = 0 Then
                If grdCargos.TextMatrix(grdCargos.Row, 29) = "" Then
                    pGuardarLogTransaccion Me.Name, EnmBorrar, vglngNumeroEmpleado, "DESASIGNACIÓN DE PAQUETE", "Cta. " & CLng(txtMovimientoPaciente.Text) & " " & " - Paq. " & vlstrNumeroPaquete & " " & " Cant. " & CStr(vlintCantCambioPaquete) & " " & " - Cargo. " & " " & Trim(vlstrCargoPaquete)
                Else
                    pGuardarLogTransaccion Me.Name, EnmGrabar, vglngNumeroEmpleado, "ASIGNACIÓN DE PAQUETE", "Cta. " & CLng(txtMovimientoPaciente.Text) & " " & " - Paq. " & vlstrNumeroPaquete & " " & " Cant. " & CStr(vlintCantCambioPaquete) & " " & " - Cargo. " & " " & Trim(vlstrCargoPaquete)
                End If
            Else
                If grdCargos.TextMatrix(grdCargos.Row, 29) <> "" Then
                    pGuardarLogTransaccion Me.Name, EnmCambiar, vglngNumeroEmpleado, "CAMBIO DE CANTIDAD EN PAQUETE", "Cta. " & CLng(txtMovimientoPaciente.Text) & " " & " - Paq. " & vlstrNumeroPaquete & " " & " Cant. " & CStr(vlintCantCambioPaquete) & " " & " - Cargo. " & " " & Trim(vlstrCargoPaquete)
                End If
            End If
            
            vlintCantCambioPaquete = 0
            vlstrCargoPaquete = ""
            vlstrNumeroPaquete = ""
End Sub

'#Region Caso 19038
Private Function BlnSaldoFavor(lngMovPaciente As Long) As Boolean
    Dim intPagos As Long
    Dim intSalidas As Long
    Dim rsPagos As ADODB.Recordset
    Dim rsSalidas As ADODB.Recordset
    Dim blnValorRetorna As Boolean
    
    'Se inicia las variables en 0
    intPagos = 0
    intSalidas = 0
    blnValorRetorna = False
    
    'Se verifica si hay saldo a favor del paciente
    Set rsPagos = frsRegresaRs("SELECT COUNT(MNYCANTIDAD) AS CantidadPago FROM PVPAGO WHERE BITCANCELADO = 0 AND INTMOVPACIENTE = " & lngMovPaciente, adLockReadOnly, adOpenForwardOnly)
    If rsPagos.RecordCount > 0 Then
       intPagos = rsPagos!cantidadPago
    End If
    rsPagos.Close
    
    'Se valida si el saldo a favor ya salio del sistema
    Set rsSalidas = frsRegresaRs("SELECT COUNT(MNYCANTIDAD) AS CantidadSalida FROM PVSALIDADINERO WHERE BITCANCELADO = 0 AND INTMOVPACIENTE =" & lngMovPaciente, adLockReadOnly, adOpenForwardOnly)
    If rsSalidas.RecordCount > 0 Then
        intSalidas = rsSalidas!cantidadSalida
    End If
    rsSalidas.Close
    
    If intPagos = intSalidas Then ' En el caso de que los valores ambos sean 0 o 1
        blnValorRetorna = False
    Else
        If intPagos = 1 And intSalidas = 0 Then
            blnValorRetorna = True
        ElseIf intPagos = 0 And intSalidas = 1 Then
            blnValorRetorna = False
        End If
    End If
    
    BlnSaldoFavor = blnValorRetorna
    
End Function

Private Function BlnValidaCantidades(lngMovPaciente As Long) As Boolean
    Dim dbldiferencia As Currency
    Dim dblcantPago As Currency
    Dim dblcantSalida As Currency
    Dim blnValorRetorna As Boolean
    Dim rsPVPAGO As ADODB.Recordset
    Dim rsPVSALIDADINERO As ADODB.Recordset
    
    dbldiferencia = 0
    dblcantPago = 0
    dblcantSalida = 0
    blnValorRetorna = False
    
    'Se obtienen el pago o los pagos realizados
    Set rsPVPAGO = frsRegresaRs("SELECT INTMOVPACIENTE, SUM(MNYCANTIDAD) cantidadPago FROM PVPAGO WHERE BITCANCELADO = 0 AND INTMOVPACIENTE = " & lngMovPaciente & " GROUP BY INTMOVPACIENTE", adLockReadOnly, adOpenForwardOnly)
    If rsPVPAGO.RecordCount > 0 Then
        If rsPVPAGO!INTMOVPACIENTE = lngMovPaciente Then
            dblcantPago = rsPVPAGO!cantidadPago
        End If
    End If
    rsPVPAGO.Close
    
    'Se obtiene el pago o los pagos de devoluciones
    Set rsPVSALIDADINERO = frsRegresaRs("SELECT INTMOVPACIENTE, SUM(MNYCANTIDAD) cantidadSalida FROM PVSALIDADINERO WHERE BITCANCELADO = 0 AND INTMOVPACIENTE = " & lngMovPaciente & " GROUP BY INTMOVPACIENTE", adLockReadOnly, adOpenForwardOnly)
    If rsPVSALIDADINERO.RecordCount > 0 Then
        If rsPVSALIDADINERO!INTMOVPACIENTE = lngMovPaciente Then
            dblcantSalida = rsPVSALIDADINERO!cantidadSalida
        End If
    End If
    rsPVSALIDADINERO.Close
    
    'Se obtiene la diferencia
    dbldiferencia = dblcantPago - dblcantSalida
    If dbldiferencia > 0 Then
        blnValorRetorna = True
    End If
    
    BlnValidaCantidades = blnValorRetorna

End Function
'End region caso 19038

Private Sub pCargaDatosEmpresaCarta()

    Dim rsDatosFiscales As New ADODB.Recordset
    Dim vlstrSentencia As String
    Dim rsParametros As New ADODB.Recordset
    Dim rsInterfazWS As New ADODB.Recordset
    Dim rsLogInterfaz As New ADODB.Recordset
    Dim rsEmpresaCarta As New ADODB.Recordset
    Dim blnEsAseguradora As Boolean                     '18084
    
    pCargaVariables str(vgintClaveEmpresaContable), txtMovimientoPaciente.Text, IIf(OptTipoPaciente(0).Value, "I", "E"), IIf(IsNull(vgintEmpresa), 0, vgintEmpresa)
    
    vlstrSentencia = "SELECT * FROM CcEmpresa " & _
                     "WHERE CcEmpresa.INTCVEEMPRESA = " & vgintEmpresa
    Set rsEmpresaCarta = frsRegresaRs(vlstrSentencia)
    
    If rsEmpresaCarta.RecordCount > 0 Then
    
        vldblRetencionServicios = IIf(IsNull(rsEmpresaCarta!RELPORCENTAJESERVICIOSEMP), 0, rsEmpresaCarta!RELPORCENTAJESERVICIOSEMP)
    
        vgdblTotalPagarPesosPaciente = 0    'Monto total factura en pesos del paciente
        'Datos generales del paciente:
        'vgintEmpresa = IIf(IsNull(rs!cveEmpresa), 0, rs!cveEmpresa)
        vlstrRFCEmpresa = IIf(IsNull(Trim(rsEmpresaCarta!chrRFCempresa)), "", Trim(rsEmpresaCarta!chrRFCempresa))
        'lblEmpresa.Caption = " " + IIf(rsEmpresaCarta!bitUtilizaConvenio = 1, IIf(IsNull(rs!VCHDESCRIPCION), "", rs!VCHDESCRIPCION), rs!tipo)
        lblEmpresa.Caption = " " + IIf(gintConvenio = 1, IIf(IsNull(rsEmpresaCarta!VCHDESCRIPCION), "", rsEmpresaCarta!VCHDESCRIPCION), "")
        Label57(0).Caption = IIf(gintConvenio = 1, "Empresa", "Tipo de paciente")
        'vgintTipoPaciente = rs!cveTipoPaciente
        lblDireccion.Caption = IIf(IsNull(rsEmpresaCarta!chrCalle), "", rsEmpresaCarta!chrCalle)
        lblNumExterior.Caption = IIf(IsNull(rsEmpresaCarta!VCHNUMEROEXTERIOR), "", rsEmpresaCarta!VCHNUMEROEXTERIOR)
        lblNumInterior.Caption = IIf(IsNull(rsEmpresaCarta!VCHNUMEROINTERIOR), "", rsEmpresaCarta!VCHNUMEROINTERIOR)
        lblColonia.Caption = IIf(IsNull(rsEmpresaCarta!VCHCOLONIA), "", rsEmpresaCarta!VCHCOLONIA)
        If Not IsNull(vglngFacturaCiudad) Then cboCiudad.ListIndex = flngLocalizaCbo(cboCiudad, str(vglngFacturaCiudad))
        lblTelefono.Caption = IIf(IsNull(rsEmpresaCarta!chrTelefonoEmpresa), "", rsEmpresaCarta!chrTelefonoEmpresa)
        lblCodigoPostal.Caption = IIf(IsNull(rsEmpresaCarta!VCHCODIGOPOSTAL), "", rsEmpresaCarta!VCHCODIGOPOSTAL)
        'gintConvenio = IIf((gintConvenio = 1), 1, 0)
        
        cboUsoCFDI(0).ListIndex = flngLocalizaCbo(cboUsoCFDI(0), flngCatalogoSATIdByNombreTipo("c_UsoCFDI", CLng(vgintTipoPaciente), "TP", 1))
        cboUsoCFDI(1).ListIndex = flngLocalizaCbo(cboUsoCFDI(1), flngCatalogoSATIdByNombreTipo("c_UsoCFDI", CLng(vgintEmpresa), "EM", 1))
        
        'Revisa parámetro que indica si el cálculo en porcentaje de los conceptos de seguros es sobre el total de la cuenta antes de descuentos e IVA
'                    vlintbitConcepSeguroSinDescuentoIVA = 0
'                    vlstrSentencia = "SELECT bitConcepSeguroSinDescuentoIVA FROM CcEmpresa WHERE BITACTIVO = 1 AND intCveEmpresa = " & vgintEmpresa
'                    Set rsParametros = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
'                    If rsParametros.RecordCount > 0 Then vlintbitConcepSeguroSinDescuentoIVA = rsParametros!bitConcepSeguroSinDescuentoIVA
'                    rsParametros.Close
                
        vlintbitCalculaConcSegconDescuento = 0
        vlstrSentencia = "SELECT bitCalculaConcSegconDescuento FROM CcEmpresa WHERE BITACTIVO = 1 AND intCveEmpresa = " & vgintEmpresa
        Set rsParametros = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
        If rsParametros.RecordCount > 0 Then vlintbitCalculaConcSegconDescuento = rsParametros!bitCalculaConcSegconDescuento
        rsParametros.Close
        
        vlintbitCalculaConceptoSeguroconIVA = 0
        vlstrSentencia = "SELECT bitCalculaConceptoSeguroconIVA FROM CcEmpresa WHERE BITACTIVO = 1 AND intCveEmpresa = " & vgintEmpresa
        Set rsParametros = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
        If rsParametros.RecordCount > 0 Then vlintbitCalculaConceptoSeguroconIVA = rsParametros!bitCalculaConceptoSeguroconIVA
        rsParametros.Close
        
        'Verifica si la empresa maneja addenda en caso de que el paciente sea de tipo empresa
        If optGrupoCuenta(0).Value = False And vgintEmpresa <> 0 Then
            'Verifica si utiliza una interfaz para la facturación
                'Se valida si la empresa seleccionada está configurada para usarse con alguna interfaz de WS
                '-------------------------------------------------------------------------------------------------------------------------------------------------------->
                    vglngCveInterfazWS = 1
                    frsEjecuta_SP vgintEmpresa & "|" & vgintClaveEmpresaContable, "FN_GNSELINTERFAZWS", True, vglngCveInterfazWS
                    
                    'Se verifica si se cuenta con una licencia para la interfaz obtenida
                    vglngCveInterfazWS = IIf(fblnLicenciaWS(vglngCveInterfazWS) = True, vglngCveInterfazWS, 0)
                    
                    If vglngCveInterfazWS <> 0 Then 'Si la empresa tiene configurada una interfaz se obtiene la clave del proveedor y la clave de contrato
                        ' - Número de proveedor AXA
                        Set rsInterfazWS = frsEjecuta_SP(CStr(vgintClaveEmpresaContable), "SP_GNSELCONFIGINTERFAZWS")
                        If rsInterfazWS!CVEPROVEEDOR = "" Then
                            '¡No ha ingresado datos!
                            MsgBox "No se ha configurado la clave de proveedor AXA para el uso de la interfaz con el web service.", vbInformation + vbOKOnly, "Mensaje"
                        Else
                            vgstrProveedorAXA = Trim(rsInterfazWS!CVEPROVEEDOR)
                        End If
                        
                        ' - Número de contrato AXA
                        Set rsInterfazWS = frsEjecuta_SP(vgintEmpresa & "|" & "CONTRATO", "SP_SISELEQUIVALENCIA")
                        If rsInterfazWS.RecordCount = 0 Then
                            '¡No ha ingresado datos!
                            MsgBox "No se ha configurado la clave de contrato configurada para la empresa del paciente.", vbInformation + vbOKOnly, "Mensaje"
                        Else
                            vgstrContratoAXA = Trim(rsInterfazWS!clave)
                        End If
                        
                        'Se selecciona el registro del log de transacciones de la interfaz para obtener la información necesaria
                        vgstrParametrosSP = Trim(txtMovimientoPaciente.Text) & "|" & IIf(OptTipoPaciente(0).Value = True, "I", "E")
                        Set rsLogInterfaz = frsEjecuta_SP(vgstrParametrosSP, "SP_GNSELLOGINTERFAZAXAPACIENTE")
                        
                        If rsLogInterfaz.RecordCount > 0 Then
                            
                            'AQUI SE VA A CARGAR LA INFORMACIÓN REGISTRADA EN EL LOG DE TRANSACCIONES DE LA INTERFAZ DE AXA
                            If Not fblnLeerXMLAXA(rsLogInterfaz!CLBXMLREQUEST, rsLogInterfaz!CLBXMLRESPONSE, rsLogInterfaz!chrTipo) Then
                                MsgBox "No se pudo recuperar la información del ingreso de paciente AXA.", vbInformation + vbOKOnly, "Mensaje"
                            Else
                            
                                'FOLIO DE TRANSACCIÓN DEL LOG
                                vglngFolioIngresoLogAXA = Trim(rsLogInterfaz!INTCVEFOLIO)
                            
                                'FOLIO DE RECETA
                                vgstrFolioReceta = Trim(rsLogInterfaz!VCHFOLIORECETA)
                                
                                'NUMERO DE PACIENTE CORRESPONDIENTE EN EL LOG
                                vglngNumPacienteXML = rsLogInterfaz!intnumpaciente
                                
                                'CLAVE DEL TIPO INGRESO DEL PACIENTE
                                vglngCveTipoIngresoXML = rsLogInterfaz!intCveTipoIngreso
                                
                            End If
                            
                        Else 'Si el recordcount = 0, significa que no fué ingresado por medio de WS exitosamente, por lo que la facturación se realizaría de manera normal
                            vglngCveInterfazWS = 0
                        End If
                    End If
                '<-------------------------------------------------------------------------------------------------------------------------------------------------------
        End If
        
        If vglngCveAddenda = 0 Then
            cmdAddenda.Enabled = False
        End If
        
        vlstrSentencia = " SELECT CcEmpresa.VCHDESCRIPCION as chrNombre, "
        vlstrSentencia = vlstrSentencia & "     CcEmpresa.CHRCALLE as chrCalle, ccempresa.vchNumeroExterior, ccempresa.vchNumeroInterior,"
        vlstrSentencia = vlstrSentencia & "     CcEmpresa.CHRTELEFONOEMPRESA as chrTelefono, "
        vlstrSentencia = vlstrSentencia & "     CcEmpresa.CHRRFCEMPRESA as chrRFC, CCEMPRESA.INTCVECIUDAD, "
        vlstrSentencia = vlstrSentencia & "     CcEmpresa.VCHCOLONIA as vchcolonia, TO_CHAR(CCEMPRESA.VCHCODIGOPOSTAL) vchcodigopostal, trim(CcEmpresa.vchCorreo) vchCorreoElectronico, "
        vlstrSentencia = vlstrSentencia & "     TO_CHAR(CCEMPRESA.VCHCODIGOPOSTAL) vchcodigopostal, trim(CcEmpresa.vchCorreo) correo, nvl(CcEmpresa.vchRegimenFiscal,0) vchRegimenFiscal "
        vlstrSentencia = vlstrSentencia & " FROM CcEmpresa "
        vlstrSentencia = vlstrSentencia & " WHERE CcEmpresa.INTCVEEMPRESA = " & vgintEmpresa
        
        Set rsDatosFiscales = frsRegresaRs(vlstrSentencia)
        vgBlnCambioDatosFiscales = False
        
        'gintAseguradora = IIf((rs!bitUtilizaConvenio = 1 And rs!bitAseguradora = 1), 1, 0)
                                                      
        ' -- 16805
        ' -- Se consulta si la empresa de convenio tiene configurado un descuento especial
        dblPorcentajeDescEspecial = fdblDescuentoEspecial(CDbl(999999999999#), CDbl(999999999999#), CLng(vgintEmpresa), optPesos(1).Value)
        
        
        ''18084
        blnEsAseguradora = True
        
        '--------------------------------------
        'Estados de los frames, Tabs y estatus
        '--------------------------------------
        
        sstFacturacion.TabEnabled(2) = blnEsAseguradora 'Control Aseguradora 18048
        
        'Moví esta linea más arriba, pues se usa antes del llenado de la tabla de cargos
        lblnCanceloFacturaPaciente = fblnSoloFacPacienteCancelada(sstFacturacion.TabEnabled(2), IIf(OptTipoPaciente(0).Value, "I", "E"), Val(txtMovimientoPaciente.Text))
        If lblnCanceloFacturaPaciente Or IIf(rsPostergado.RecordCount > 0, rsPostergado!BITPOSTERGADA, 0) = 1 Then 'y factura de la empresa activa, factura de paciente cancelada
            fraConceptosAseguradora.Enabled = False
            freControlAseguradora.Enabled = False
            cmdGrabarControl.Enabled = False
            cmdConfiguracion.Enabled = False
            cmdBorraControl.Enabled = False
            cmdAddenda.Enabled = False
        Else
            fraConceptosAseguradora.Enabled = True
            freControlAseguradora.Enabled = True
            cmdGrabarControl.Enabled = True
            cmdConfiguracion.Enabled = True
        End If
        
    End If

End Sub
Private Sub pEstadoCarta(intCveCuenta As Long, strTipoCuenta As String, blnCierraCuenta As Boolean, Optional blnFuePostergada As Boolean = False)
    Dim rsCuenta As New ADODB.Recordset
    Dim rs As New ADODB.Recordset
    Dim vlintEstadoFacturado As Integer
    Dim vlstrEstadoCerrada As String
    Dim vlstrSentencia As String
    
    claveCarta = 0
    If cboCartaAutorizacion.ListIndex > 0 Then
         claveCarta = cboCartaAutorizacion.ItemData(cboCartaAutorizacion.ListIndex)
    End If
    
    '-----------------------------------------------------------'
    ' Contabilizar el numero de cargos sin factura en la carta  '
    '-----------------------------------------------------------'
    vlstrSentencia = "SELECT Count(intNumcargo) Cargos FROM PvCargo " & _
                     " WHERE intMovPaciente = " & intCveCuenta & _
                     " AND chrTipoPaciente = '" & strTipoCuenta & "'" & _
                     " AND chrFolioFactura Is Null " & _
                     " AND intCveCarta = " & claveCarta
    Set rsTemp = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
    If rsTemp!Cargos = 0 Then
        vlintEstadoFacturado = 1
    Else
        vlintEstadoFacturado = 0
    End If
    
    If gintAseguradora = 1 And vlintEstadoFacturado = 1 Then
        'Si falta de facturar algún concepto de seguro, la cuenta no se pone como facturada
        pConsultaControl
        
        If rsControlSeguro.RecordCount > 0 Then
            If (dblExcedenteFacturado < (rsControlSeguro!MNYEXCEDENTESUMAASEGURADA - rsControlSeguro!MNYDESCUENTOEXCEDENTE)) Or _
               (dblDeducibleFacturado < (rsControlSeguro!MNYCANTIDADDEDUCIBLE - rsControlSeguro!MNYDESCUENTODEDUCIBLE) And rsControlSeguro!BITFACTURADEDUCIBLE = 1) Or _
               (dblCoaseguroFacturado < (rsControlSeguro!MNYCANTIDADCOASEGURO - rsControlSeguro!MNYDESCUENTOCOASEGURO) And rsControlSeguro!BITFACTURACOASEGURO = 1) Or _
               (dblCoaseguroMFacturado < (rsControlSeguro!MNYCANTIDADCOASEGUROMEDICO - rsControlSeguro!MNYDESCUENTOCOASEGUROMEDICO) And rsControlSeguro!BITFACTURACOASEGUROMEDICO = 1) Or _
               (dblCoaseguroAFacturado < (rsControlSeguro!MNYCANTIDADCOASEGUROADICIONAL - rsControlSeguro!MNYDESCUENTOCOASEGUROADICIONAL) And rsControlSeguro!bitFacturaCoaseguroAdicional = 1) Or _
               (dblCopagoFacturado < (rsControlSeguro!MNYCANTIDADCOPAGO - rsControlSeguro!MNYDESCUENTOCOPAGO) And rsControlSeguro!BITFACTURACOPAGO = 1) Or _
               rsPostergado!BITPOSTERGADA = 1 Then
                vlintEstadoFacturado = 0
            End If
        End If
    End If

    '-----------------------------------'
    ' Actualizar el estado de la carta  '
    '-----------------------------------'
    If gintAseguradora = 1 And vlintEstadoFacturado = 1 Then
        vlstrSentencia = "UPDATE PVCARTACONTROLSEGURO SET chrEstatus = 'F'" & _
                         " WHERE intNumCuenta = " & intCveCuenta & " AND chrEstatus = 'A' AND intCveCarta = " & claveCarta
        pEjecutaSentencia vlstrSentencia
    End If
End Sub

''18084
Private Sub pAgregarControles()
    Dim vlIntLeft As Integer
    Dim vlIntWith As Integer
    Dim vlIntHeigth As Integer
    
'    Set cboCartaAutorizacion = Me.Controls.Add("VB.ComboBox", "cboCartaAutorizacion")
'    Set cboCartaAutorizacion.Container = freControlAseguradora 'Aqui se mete el control dentro del Frame
'
'    cboCartaAutorizacion.Visible = True
    
'    cboCartaAutorizacion.Top = 165
'    cboCartaAutorizacion.Left = 1755
'    cboCartaAutorizacion.Width = 4250
    vlIntLeft = 1755
    vlIntWith = 4150
    vlIntHeigth = 315
    Set txtNombreAsegurado = Me.Controls.Add("VB.TextBox", "txtNombreAsegurado")
    Set txtNombreAsegurado.Container = freControlAseguradora
    Set txtPersonaAutoriza = Me.Controls.Add("VB.TextBox", "txtPersonaAutoriza")
    Set txtPersonaAutoriza.Container = freControlAseguradora
    Set txtNumeroPoliza = Me.Controls.Add("VB.TextBox", "txtNumeroPoliza")
    Set txtNumeroPoliza.Container = freControlAseguradora
    Set txtNumeroControl = Me.Controls.Add("VB.TextBox", "txtNumeroControl")
    Set txtNumeroControl.Container = freControlAseguradora
    'lblCarta
    Set lblcarta = Me.Controls.Add("VB.Label", "lblCarta")
    Set lblcarta.Container = freControlAseguradora
    
    '
    'txtInfoHonorario.Container
    Set lblNombreCarta = Me.Controls.Add("VB.Label", "lblNombreCarta")
    Set lblNombreCarta.Container = SSTEstadoCuenta
        
    
    txtNombreAsegurado.Visible = True
    txtPersonaAutoriza.Visible = True
    txtNumeroPoliza.Visible = True
    txtNumeroControl.Visible = True
    lblcarta.Visible = True
    txtNombreAsegurado.Left = vlIntLeft
    txtPersonaAutoriza.Left = vlIntLeft
    txtNumeroPoliza.Left = 7480 'Cambiamos es numero de poliza a la otra columna
    txtNumeroControl.Left = vlIntLeft
    txtNombreAsegurado.Width = vlIntWith
    txtPersonaAutoriza.Width = vlIntWith
    txtNumeroPoliza.Width = 4200
    txtNumeroControl.Width = vlIntWith
    txtNombreAsegurado.Height = vlIntHeigth
    txtPersonaAutoriza.Height = vlIntHeigth
    txtNumeroPoliza.Height = vlIntHeigth
    txtNumeroControl.Height = vlIntHeigth

    txtNombreAsegurado.ToolTipText = "Nombre del asegurado"
    txtPersonaAutoriza.ToolTipText = "Persona que autoriza por parte de la aseguradora"
    txtNumeroPoliza.ToolTipText = "Número de póliza"
    txtNumeroControl.ToolTipText = "Número de control"
    lblcarta.Caption = "Carta de autorización"
    lblcarta.Top = 220
    lblcarta.Left = 90
    lblcarta.Width = 1500
    
   
    lblNombreCarta.Top = 5780 ''Cambio 1
    lblNombreCarta.Left = 8000 'Cambio 1
    lblNombreCarta.Width = 3800 'Cambio 1
    lblNombreCarta.Alignment = 2
    lblNombreCarta.FontBold = True
    
End Sub
Private Sub pUbicacionElementos()
    '********Este metodo ayuda mover elementos de posición, asi como modificar el tamaño de la forma, si es necesario que crezca **********'
    Me.Height = 10800 'Cambio 1
    sstFacturacion.Height = 10500 'Cambio 1
    freControlAseguradora.Height = 2000
    lblPorcentajeDeducible(38).Top = 560 'Nombre del asegurado
    txtNombreAsegurado.Top = 510
    chkAutoriza.Top = 900                'Autoriza
    txtPersonaAutoriza.Top = 855
    chkNumeroPoliza.Top = 905           'Número de póliza
    txtNumeroPoliza.Top = 855
    chkNumeroControl.Top = 1250              'Número de control
    txtNumeroControl.Top = 1230
    fraConceptosAseguradora.Top = 3585
    Frame2.Top = 3585                   'Importes no facturados
    Frame7.Top = 6900                   'Cargos excluídos
    Frame1.Top = 8650
    cmdGrabarControl.Top = 9735
    cmdBorraControl.Top = 9735
    cmdConfiguracion.Top = 9735
    'cmdAddenda.Top = 9735
    txtObservaciones.Top = 1230
    chkNumeroPoliza.Left = 5950
    lblPorcentajeDeducible(18).Top = 1250
    lblPorcentajeDeducible(18).Left = 5950
    chkTipoPoliza.Left = 5950
    lblPorcentajeDeducible(19).Left = 5950
End Sub
Private Sub pLlenarCartasAutorizacion()
    'Llenar segun la cuenta del paciente
    Dim rsCarta As ADODB.Recordset
    Dim lngCartaDefault As Long
    vlblnValidaCartaAutorizacion = False
'    vlstrsql = "Select INTCVECARTA, VCHDESCRIPCION from PVCARTACONTROLSEGURO where intNumCuenta=" & txtMovimientoPaciente.Text
    
    vlstrsql = "SELECT distinct PVCARTACONTROLSEGURO.INTCVECARTA, PVCARTACONTROLSEGURO.VCHDESCRIPCION" & _
                " From PVCARTACONTROLSEGURO" & _
                " where intNumCuenta= " & txtMovimientoPaciente.Text & _
                " and pvcartacontrolseguro.chrEstatus = 'A'"

'                " LEFT JOIN PVFACTURA ON PVCARTACONTROLSEGURO.INTCVECARTA= PVFACTURA.INTCVECARTA AND PVCARTACONTROLSEGURO.INTNUMCUENTA=PVFACTURA.INTMOVPACIENTE" & _
'                " AND (PVFACTURA.intcvecarta IS NULL" & _
'                        " OR (PVFACTURA.intcvecarta IS NOT NULL and (PVFACTURA.intcvecarta not in (" & _
'                                        " select PVFACTURA2.intcvecarta " & _
'                                        " from pvfactura PVFACTURA2" & _
'                                        " where PVFACTURA2.INTMOVPACIENTE = PVFACTURA.INTMOVPACIENTE" & _
'                                        " and PVFACTURA2.intcvecarta = PVFACTURA.intcvecarta " & _
'                                        " and PVFACTURA2.chrtipofactura = 'P'" & _
'                                        " and PVFACTURA2.chrestatus <> 'C') " & _
'                            " OR PVFACTURA.intcvecarta not in (" & _
'                                        " select PVFACTURA2.intcvecarta " & _
'                                        " from pvfactura PVFACTURA2" & _
'                                        " where PVFACTURA2.INTMOVPACIENTE = PVFACTURA.INTMOVPACIENTE" & _
'                                        " and PVFACTURA2.intcvecarta = PVFACTURA.intcvecarta " & _
'                                        " and PVFACTURA2.chrtipofactura = 'E'" & _
'                                        " and PVFACTURA2.chrestatus <> 'C'))))"
    Set rsCarta = frsRegresaRs(vlstrsql, adLockOptimistic, adOpenDynamic)
    pLlenarCboRs cboCartaAutorizacion, rsCarta, 0, 1
    'Agregar la opcion <AGREGAR>
    
    rsCarta.Close
'    cboCartaAutorizacion.AddItem "", 0
'    cboCartaAutorizacion.ItemData(cboCartaAutorizacion.newIndex) = 0
    
    cboCartaAutorizacion.AddItem "<AGREGAR>", 0
    cboCartaAutorizacion.ItemData(cboCartaAutorizacion.newIndex) = -1
    cboCartaAutorizacion.ListIndex = -1
    
    vlstrsql = "Select INTCVECARTA from PVCARTACONTROLSEGURO where BITDEFAULT = 1 and intNumCuenta=" & txtMovimientoPaciente.Text & " and pvcartacontrolseguro.chrEstatus = 'A'"
    Set rs = frsRegresaRs(vlstrsql, adLockOptimistic, adOpenDynamic)
    If rs.RecordCount > 0 Then
        lngCartaDefault = rs!intCveCarta
        vlblnValidaCartaAutorizacion = True
    Else
        vlstrsql = "Select MIN(INTCVECARTA) cveCarta from PVCARTACONTROLSEGURO where intNumCuenta=" & txtMovimientoPaciente.Text & " and pvcartacontrolseguro.chrEstatus = 'A'"
        Set rs = frsRegresaRs(vlstrsql, adLockOptimistic, adOpenDynamic)
        If rs.RecordCount > 0 Then
            lngCartaDefault = IIf(IsNull(rs!cveCarta), 0, rs!cveCarta)
            vlblnValidaCartaAutorizacion = True
        End If
    End If
    cboCartaAutorizacion.ListIndex = flngLocalizaCbo(cboCartaAutorizacion, str(lngCartaDefault))
    lblNombreCarta.Caption = cboCartaAutorizacion.Text
    lblNombreCarta.Visible = True
    
End Sub

Private Sub cboCartaAutorizacion_KeyDown(KeyCode As Integer, Shift As Integer)
    On Error GoTo NotificaError
    Dim vllngUltimaClave As Long

    If KeyCode = vbKeyReturn Then
        
        If cboCartaAutorizacion.ListIndex <> -1 Then
            If cboCartaAutorizacion.Text = "<AGREGAR>" Then
                frmCartaSeguro.vgNumCuentaPaciente = txtMovimientoPaciente.Text
                frmCartaSeguro.Show vbModal, Me
                pLlenarCartasAutorizacion
            Else
                pCambiaCarta
                'cboParentesco.SetFocus
                txtNombreAsegurado.SetFocus
            End If
        Else
            'cboParentesco.SetFocus
            txtNombreAsegurado.SetFocus
        End If
    End If
        
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboPlanPaqueteCirugia_KeyDown"))
    Unload Me
End Sub

Private Sub cboCartaAutorizacion_Click()
On Error GoTo NotificaError
    
    If cboCartaAutorizacion.ListIndex > -1 Then
        'If cboCartaAutorizacion.ListCount > 2 Then
            pCambiaCarta
        'End If
    End If
        
Exit Sub
NotificaError:
    Call pRegistraError(Err.Number, Err.Description, cgstrModulo, (vgstrNombreForm & ":cboBancos_KeyPress"))
End Sub

Private Sub pCambiaCarta()
    Dim rsControl As ADODB.Recordset
    Dim vllngCveCarta As Long
    Dim vlstrSentencia As String
    
    pLimpiaControlAseguradora
    vllngCveCarta = cboCartaAutorizacion.ItemData(cboCartaAutorizacion.ListIndex)
    If vllngCveCarta > 0 Then
        lblNombreCarta.Caption = cboCartaAutorizacion.Text
        'cargar control de seguros
        vlstrsql = "Select * from PvControlAseguradora where intmovpaciente=" & txtMovimientoPaciente.Text & " and intcvecarta = " & vllngCveCarta
        Set rs = frsRegresaRs(vlstrsql, adLockOptimistic, adOpenDynamic)
        pLlenaCargos
        If rs.RecordCount > 0 Then
            vgintEmpresa = IIf(IsNull(rs!intcveempresa), 0, rs!intcveempresa)
'            pCargaDatosEmpresaCarta
'
'            pConsultaControl
'            pCargaControl
'            pLlenaFacturasConvenioAseguradora grdFacturaPaciente
'            pLlenaFacturasConvenioAseguradora grdFacturaEmpresa
        Else
            vlstrSentencia = "SELECT * FROM PVCARTACONTROLSEGURO WHERE intCveCarta = " & Trim(str(vllngCveCarta))
            Set rsControl = frsRegresaRs(vlstrSentencia, adLockReadOnly, adOpenForwardOnly)
            If rsControl.RecordCount > 0 Then
                vgintEmpresa = IIf(IsNull(rsControl!intcveempresa), 0, rsControl!intcveempresa)
            End If
        End If
        
        pCargaDatosEmpresaCarta
        
        pConsultaControl
        pCargaControl
        pLlenaFacturasConvenioAseguradora grdFacturaPaciente
        pLlenaFacturasConvenioAseguradora grdFacturaEmpresa
        
    End If
End Sub

Private Sub pCargaCartas()
    Dim rs As New ADODB.Recordset
    Dim vlintcontador As Integer
    Dim rsCargos As ADODB.Recordset
    Dim vgstrParametrosSP As String
    'Se usa el mismo combo de paquetes, porque la forma ya está muy saturada!!
    cboPaquetes.Clear
      
    'Las que aun no estén facturadas cambio 5
    vlstrsql = "SELECT distinct PVCARTACONTROLSEGURO.INTCVECARTA, PVCARTACONTROLSEGURO.VCHDESCRIPCION" & _
                " From PVCARTACONTROLSEGURO" & _
                " LEFT JOIN PVFACTURA ON PVCARTACONTROLSEGURO.INTCVECARTA= PVFACTURA.INTCVECARTA AND PVCARTACONTROLSEGURO.INTNUMCUENTA=PVFACTURA.INTMOVPACIENTE" & _
                " where intNumCuenta= " & txtMovimientoPaciente.Text & " AND pvcartacontrolseguro.chrEstatus = 'A'"
                
'                " AND (PVFACTURA.intcvecarta IS NULL" & _
'                        " OR (PVFACTURA.intcvecarta IS NOT NULL and PVFACTURA.intcvecarta not in (" & _
'                                        " select PVFACTURA2.intcvecarta " & _
'                                        " from pvfactura PVFACTURA2" & _
'                                        " where PVFACTURA2.INTMOVPACIENTE = PVFACTURA.INTMOVPACIENTE" & _
'                                        " and PVFACTURA2.intcvecarta = PVFACTURA.intcvecarta " & _
'                                        " and PVFACTURA2.chrestatus <> 'C')))"
    Set rs = frsRegresaRs(vlstrsql, adLockOptimistic, adOpenForwardOnly)
    If rs.RecordCount < 2 And rs.RecordCount > 0 Then
        '-------------------------------------------'
        ' Cuando nomas hay un solo paquete asignado '
        '-------------------------------------------'
        'If Val(grdCargos.TextMatrix(grdCargos.Row, cintColCveCarta)) <> 0 Then
            'grdCargos.TextMatrix(grdCargos.Row, cintColNombreCarta) = "" 'Descripcion de la carta
            'grdCargos.TextMatrix(grdCargos.Row, cintColCveCarta) = 0  'Clave carta
        'Else
        ' Colocar cantidades en paquete
'            If rsCargos.RecordCount > 0 Then
'                Do While Not rsCargos.EOF
'                    If Trim(rsCargos!IntNumCargo) = Trim(grdCargos.RowData(grdCargos.Row)) Then
'                        grdCargos.TextMatrix(grdCargos.Row, 31) = IIf(rsCargos!CantidadPaquete = 0, 0, rsCargos!CantidadPaquete)
'                        grdCargos.TextMatrix(grdCargos.Row, 32) = IIf(rsCargos!CantidadExtraPaquete = 0, 0, rsCargos!CantidadExtraPaquete)
'                        grdCargos.TextMatrix(grdCargos.Row, 54) = Val(grdCargos.TextMatrix(grdCargos.Row, 4)) - (Val(grdCargos.TextMatrix(grdCargos.Row, 31)) + Val(grdCargos.TextMatrix(grdCargos.Row, 32)))
'                        txtCantidadPaquete.Text = IIf(rsCargos!CantidadPaquete = 0, "", rsCargos!CantidadPaquete)
'                    End If
'                rsCargos.MoveNext
'                Loop
'            End If
'            rsCargos.Close
            'grdCargos.TextMatrix(grdCargos.Row, cintColNombreCarta) = Trim(rs!VCHDESCRIPCION) 'Descripcion de la carta
            'grdCargos.TextMatrix(grdCargos.Row, cintColCveCarta) = rs!intcvecarta  'Clave carta
            'If Val(grdCargos.TextMatrix(grdCargos.Row, 30)) > 0 Then cambiarCartaPaquete Val(grdCargos.TextMatrix(grdCargos.Row, 30))
        'End If
        'cmdSelQuita(2).Enabled = False
        'cmdActualizarCargos.Enabled = True
            
    ElseIf rs.RecordCount = 0 Then
        '----------------------------------'
        ' Cuando no hay cartas '
        '----------------------------------'
        grdCargos.TextMatrix(grdCargos.Row, cintColNombreCarta) = "" 'Descripcion de la carta
        grdCargos.TextMatrix(grdCargos.Row, cintColCveCarta) = 0  'Clave carta
    
    ElseIf rs.RecordCount > 0 Then
        '----------------------------------------------------------------'
        ' Cuando hay mas de un paquete asignado, hay que llenar la lista '
        '----------------------------------------------------------------'
        grdCargos.RowHeight(grdCargos.Row) = cboPaquetes.Height
        If cboPaquetes.ListCount = 0 Then
            'Cambio 2
            pLlenarCboRs cboPaquetes, rs, 0, 1
'            cboPaquetes.AddItem "Sin carta", 0
'            cboPaquetes.ItemData(0) = 0
            cboPaquetes.ListIndex = 0
        End If
        If Val(grdCargos.TextMatrix(grdCargos.Row, cintColCveCarta)) > 0 Then
            cboPaquetes.ListIndex = flngLocalizaCbo(cboPaquetes, grdCargos.TextMatrix(grdCargos.Row, cintColCveCarta))
        End If
        rs.Close
        cboPaquetes.Top = grdCargos.CellTop + 52
        cboPaquetes.Left = grdCargos.CellLeft + 10
        cboPaquetes.Width = grdCargos.CellWidth + 10
        cboPaquetes.Visible = True
        frmFacturacion.Refresh
        cboPaquetes.SetFocus
    End If
End Sub

Private Sub cambiarCartaPaquete(vllngCvePaquete As Long)
    'Sirve para cambiar de carta todos los cargos de un paquete
    Dim vllngCargoCambiado As Long
    Dim vlblnOtrosCargosEnPaquete As Boolean
    Dim vllngContador As Long
        
    vllngCargoCambiado = Val(grdCargos.RowData(grdCargos.Row))
    
    'Verifica si existen otros cargos que pertenecen al paquete
    vlblnOtrosCargosEnPaquete = False
    For vllngContador = 1 To grdCargos.Rows - 1
        If vllngCargoCambiado <> Val(grdCargos.RowData(vllngContador)) And Val(grdCargos.TextMatrix(grdCargos.Row, 30)) = Val(grdCargos.TextMatrix(vllngContador, 30)) Then
            If vlblnOtrosCargosEnPaquete = False Then vlblnOtrosCargosEnPaquete = True
        End If
    Next vllngContador
        
    If vlblnOtrosCargosEnPaquete Then
        'MsgBox "Existen otros cargos que pertenecen al paquete " & grdCargos.TextMatrix(grdCargos.Row, 29) & " todos serán movidos a la carta " & grdCargos.TextMatrix(grdCargos.Row, cintColNombreCarta), vbOKOnly + vbExclamation, "Mensaje"
        If MsgBox("¿Desea asignar todos los cargos del paquete " & grdCargos.TextMatrix(grdCargos.Row, 29) & " a esta carta?", vbQuestion + vbYesNo, "Mensaje") = vbYes Then
            
            grdCargos.TextMatrix(grdCargos.Row, cintColNombreCarta) = IIf(cboPaquetes.ListIndex = -1, "", cboPaquetes.List(cboPaquetes.ListIndex)) 'Descripcion del paquete
            grdCargos.TextMatrix(grdCargos.Row, cintColCveCarta) = IIf(cboPaquetes.ListIndex = -1, 0, cboPaquetes.ItemData(cboPaquetes.ListIndex)) 'Clave del paquete
            
            For vllngContador = 1 To grdCargos.Rows - 1
                If vllngCargoCambiado <> Val(grdCargos.RowData(vllngContador)) And Val(grdCargos.TextMatrix(grdCargos.Row, 30)) = Val(grdCargos.TextMatrix(vllngContador, 30)) Then
                    'If vlblnOtrosCargosEnPaquete = False Then vlblnOtrosCargosEnPaquete = True
                    grdCargos.TextMatrix(vllngContador, cintColNombreCarta) = grdCargos.TextMatrix(grdCargos.Row, cintColNombreCarta) 'Descripcion de la carta
                    grdCargos.TextMatrix(vllngContador, cintColCveCarta) = grdCargos.TextMatrix(grdCargos.Row, cintColCveCarta)  'Clave carta
                End If
            Next vllngContador
            
            cmdActualizarCargos.Enabled = True
        Else
            cboPaquetes.ListIndex = flngLocalizaCbo(cboPaquetes, grdCargos.TextMatrix(grdCargos.Row, cintColCveCarta))
        End If
    Else
        'Sólo un cargo pertenece al paquete
        grdCargos.TextMatrix(grdCargos.Row, cintColNombreCarta) = IIf(cboPaquetes.ListIndex = -1, "", cboPaquetes.List(cboPaquetes.ListIndex)) 'Descripcion del paquete
        grdCargos.TextMatrix(grdCargos.Row, cintColCveCarta) = IIf(cboPaquetes.ListIndex = -1, 0, cboPaquetes.ItemData(cboPaquetes.ListIndex)) 'Clave del paquete
        cmdActualizarCargos.Enabled = True
    End If
    
End Sub

Private Sub pLimpiaControlAseguradora()
    '----------------------------
    '   Control de aseguradora
    '----------------------------
    intMensajeControl = 0
    lblnDatosSeguroModificados = False
    blnCargosSinFacturarPaciente = False
    
    txtNombreAsegurado.Text = ""
    txtPersonaAutoriza.Text = ""
    txtNumeroPoliza.Text = ""
    txtNumeroControl.Text = ""
    cboParentesco.ListIndex = 0
    cboTipoPoliza.ListIndex = 0
    txtObservaciones.Text = ""
    txtNumeroControl.Enabled = True
    txtPersonaAutoriza.Enabled = True
    vglngPaqueteAddenda = 0
    vgblnPaqueteAddenda = False
    vgblnEncontroPaqueteAddenda = False
    
    'Honorarios
    txtHonorarios.Text = FormatCurrency(0, 2)
    If blnCalcularEnBaseACargos Then
        txtHonorarios.Enabled = False
        lblPorcentajeDeducible(20).Enabled = False
    Else
        txtHonorarios.Enabled = True
        lblPorcentajeDeducible(20).Enabled = True
    End If
    
    'Cargos
    txtCargosHospital.Text = FormatCurrency(0, 2)
    txtTotalCargos.Text = FormatCurrency(0, 2)
    txtCargosExcluidos.Text = FormatCurrency(0, 2)
    txtTotalSinExcluidos.Text = FormatCurrency(0, 2)
    txtSumaAsegurada.Text = FormatCurrency(0, 2)
    
    'Excedente
    txtExcedenteSumaAsegurada.Text = FormatCurrency(0, 2)
    
    'Deducible
    txtDeducible.Text = FormatCurrency(0, 2)
    optTipoDeducible(0).Value = True
    txtPorcentajeDeducible.Text = ""
    
    txtTotalSinDeducible.Text = FormatCurrency(0, 2)
    
    'Coaseguro
    txtCoaseguro.Text = FormatCurrency(0, 2)
    optTipoCoaseguro(0).Value = True
    txtPorcentajeCoaseguro.Text = ""
    txtCantidadMaximaCO.Text = ""
    
    txtTotalSinCoaseguro.Text = FormatCurrency(0, 2)
    
    'Coaseguro adicional
    txtCoaseguroAdicional.Text = FormatCurrency(0, 2)
    optTipoCoaseguroAdicional(0).Value = True
    txtPorcentajeCoaseguro.Text = ""
    
    txtTotalSinCoaseguroAdicional = FormatCurrency(0, 2)
    
    'Copago
    txtCopago.Text = FormatCurrency(0, 2)
    optTipoCopago(0).Value = True
    txtPorcentajeCopago.Text = ""
    
    'Coaseguro médico
    txtTotalCoaseguroMedico.Text = FormatCurrency(0, 2)
    optTipoCoaseguroMedico(0).Value = True
    txtPorcentajeCoaseguroMed.Text = ""
    chkFacturaCoaseguroMedico.Value = 0
    txtHonorariosAFacturar.Text = ""
    txtCoaseguroMedico.Text = ""
    dblPorcentajeCoaseguroMedico = 0
    dblHonorarios = 0
    
    txtTotalDedCoaCop.Text = FormatCurrency(0, 2)
    
    'Cargos no facturados
    txtCargosHospitalNoFacturados.Text = FormatCurrency(0, 2)
    txtCargosExcluidosNoFacturados.Text = FormatCurrency(0, 2)
    txtExcedenteNoFacturado.Text = FormatCurrency(0, 2)
    txtDeducibleNoFacturado.Text = FormatCurrency(0, 2)
    txtCoaseguroNoFacturado.Text = FormatCurrency(0, 2)
    txtCoaseguroANoFacturado.Text = FormatCurrency(0, 2)
    txtCopagoNoFacturado.Text = FormatCurrency(0, 2)
    txtCoaseguroMNoFacturado.Text = FormatCurrency(0, 2)
    txtTotalNoFacturado.Text = FormatCurrency(0, 2)
    
    'Cargos excluídos
    txtExcluidosHospital.Text = FormatCurrency(0, 2)
    txtExcluidosDescuentos.Text = FormatCurrency(0, 2)
    txtExcluidosIVA.Text = FormatCurrency(0, 2)
    txtExcluidosTotal.Text = FormatCurrency(0, 2)
    
    txtExcluidosPagos.Text = FormatCurrency(0, 2)
    txtTotalPagarControl.Text = FormatCurrency(0, 2)
    
    dblExcedenteDeIVA = 0

End Sub

Private Sub pAsignarCargosSinCarta(lngnumCuenta As Long, intEmpresa As Integer)
    Dim vlstrSentencia As String
    Dim rsPrimeraCartaActiva As ADODB.Recordset
    Dim rsCargosSinCarta As ADODB.Recordset
    Dim rsFacturasSinCarta As ADODB.Recordset
    Dim rsControlSinCarta As ADODB.Recordset

    'Elimina de los cargos cartas asignadas que se encuentren en estatus de 'Inactiva'
    vlstrSentencia = "UPDATE PvCargo set intcvecarta = null where intmovpaciente = " & lngnumCuenta & _
                     " and chrfoliofactura is null " & _
                     " and intcvecarta in ( select pvcartacontrolseguro.intcvecarta from PvCartaControlSeguro " & _
                                            "where chrestatus = 'I' and intnumcuenta = pvcargo.intmovpaciente) "
                                            '"and intCveEmpresa = " & intEmpresa & ")"
    pEjecutaSentencia (vlstrSentencia)
    
    vlstrSentencia = "select Nvl(Min(intCveCarta), 0) numCarta from PVCARTACONTROLSEGURO where intNumCuenta = " & lngnumCuenta & " AND chrEstatus = 'A' and intCveEmpresa = " & intEmpresa
    Set rsPrimeraCartaActiva = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
    If rsPrimeraCartaActiva.RecordCount > 0 Then
        If rsPrimeraCartaActiva!numCarta > 0 Then
            
            'Se asigna a los cargos que no tienen carta, la primera de las cartas activas de la cuenta del paciente
            vlstrSentencia = "select count(*) cargosSinCarta from PVCARGO where intMovPaciente = " & lngnumCuenta & " and chrfoliofactura is null AND intCveCarta is null"
            Set rsCargosSinCarta = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
            If rsCargosSinCarta.RecordCount > 0 Then
                If rsCargosSinCarta!cargosSinCarta > 0 Then
                    pEjecutaSentencia ("UPDATE PvCargo set intcvecarta = " & rsPrimeraCartaActiva!numCarta & " where intmovpaciente = " & lngnumCuenta & " and chrfoliofactura is null and intcvecarta is null")
                End If
            End If
                
            'Se asigna a las facturas que no tienen carta, la primera de las cartas activas de la cuenta del paciente
            vlstrSentencia = "select count(*) facturasSinCarta from PVFACTURA where intMovPaciente = " & lngnumCuenta & " AND intCveCarta is null and chrEstatus <> 'C'"
            Set rsFacturasSinCarta = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
            If rsFacturasSinCarta.RecordCount > 0 Then
                If rsFacturasSinCarta!facturasSinCarta > 0 Then
                    pEjecutaSentencia ("UPDATE PvFactura set intcvecarta = " & rsPrimeraCartaActiva!numCarta & " where intmovpaciente = " & lngnumCuenta & " and intcvecarta is null and chrEstatus <> 'C'")
                End If
            End If
            
            'Se asigna a el control de aseguradora que no tiene carta, la primera de las cartas activas de la cuenta del paciente
            vlstrSentencia = "select count(*) controlSinCarta from PVCONTROLASEGURADORA where intMovPaciente = " & lngnumCuenta & " AND intCveCarta is null and intCveEmpresa = " & intEmpresa
            Set rsControlSinCarta = frsRegresaRs(vlstrSentencia, adLockOptimistic, adOpenDynamic)
            If rsControlSinCarta.RecordCount = 1 Then
                If rsControlSinCarta!controlSinCarta > 0 Then
                    pEjecutaSentencia ("UPDATE PvControlAseguradora set intcvecarta = " & rsPrimeraCartaActiva!numCarta & " where intmovpaciente = " & lngnumCuenta & " and intcvecarta is null and intCveEmpresa = " & intEmpresa)
                End If
            End If
            
            pCambiaCarta
            
        End If
    End If

End Sub
Private Sub pGuardarNota(strFolioNota As String, vldtmFechaHoy As Date, vlstrFolioDocumento As String, strFolioSoloNota As String, strSerieNota As String, intCveUsoCFDINota As Long, vllngGraba As Long)
'------------------------------------'
' ccNota
'------------------------------------'
Dim rsCcNota As New ADODB.Recordset

vldtmFechaHoy = fdtmServerFecha
lngIDnotaGlobal = 0
Set rsCcNota = frsRegresaRs("Select * From CcNota Where intConsecutivo = -1", adLockOptimistic, adOpenDynamic)
With rsCcNota
         .AddNew
         !chrFolioNota = Trim(strFolioNota)
         !dtmfecha = vldtmFechaHoy
         !chrTipo = "CR"
         !MNYSUBTOTAL = dblNotasCreditoCS
         !MNYIVA = dblIVANotasCreditoCS
         !chrEstatus = "P"
         !intPersonaGraba = vllngGraba
         !intPersonaBorra = 0
         !smicvedepartamento = vgintNumeroDepartamento
         !dtmFechaRegistro = vldtmFechaHoy
         !intNumPolizaCancelacion = 0
         !vchPacienteImpresion = Mid(lblPaciente.Caption, 1, 100)
         !vchFacturaImpresion = Mid(vlstrFolioDocumento, 1, 20)
         !CHRTIPOPACIENTE = IIf(OptTipoPaciente(0).Value, "I", "E")
         !INTMOVPACIENTE = CLng(txtMovimientoPaciente.Text)
         !chrnotadirigida = "P"
         !bitAutomatica = 1
         !chrFolio = strFolioSoloNota
         !chrSerie = strSerieNota
         !dtmFechahora = vldtmFechaHoy + fdtmServerHora
         !chrmotivonota = "O"
         !intCveUsoCFDI = intCveUsoCFDINota
         .Update
         lngIDnotaGlobal = flngObtieneIdentity("SEC_CCNOTA", rsCcNota!intConsecutivo)
End With
End Sub
